package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35-dev

import (
	"context"

	"github.com/dkrasnovdev/heritage-api/ent"
	"github.com/dkrasnovdev/heritage-api/internal/gql"
)

func (r *mutationResolver) CreateArtifact(ctx context.Context, input ent.CreateArtifactInput) (*ent.Artifact, error) {
	client := ent.FromContext(ctx)
	return client.Artifact.Create().SetInput(input).Save(ctx)
}

// UpdateArtifact is the resolver for the updateArtifact field.
func (r *mutationResolver) UpdateArtifact(ctx context.Context, id int, input ent.UpdateArtifactInput) (*ent.Artifact, error) {
	client := ent.FromContext(ctx)
	return client.Artifact.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input ent.CreateCategoryInput) (*ent.Category, error) {
	client := ent.FromContext(ctx)
	return client.Category.Create().SetInput(input).Save(ctx)
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id int, input ent.UpdateCategoryInput) (*ent.Category, error) {
	client := ent.FromContext(ctx)
	return client.Category.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateCollection is the resolver for the createCollection field.
func (r *mutationResolver) CreateCollection(ctx context.Context, input ent.CreateCollectionInput) (*ent.Collection, error) {
	client := ent.FromContext(ctx)
	return client.Collection.Create().SetInput(input).Save(ctx)
}

// UpdateCollection is the resolver for the updateCollection field.
func (r *mutationResolver) UpdateCollection(ctx context.Context, id int, input ent.UpdateCollectionInput) (*ent.Collection, error) {
	client := ent.FromContext(ctx)
	return client.Collection.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateCulture is the resolver for the createCulture field.
func (r *mutationResolver) CreateCulture(ctx context.Context, input ent.CreateCultureInput) (*ent.Culture, error) {
	client := ent.FromContext(ctx)
	return client.Culture.Create().SetInput(input).Save(ctx)
}

// UpdateCulture is the resolver for the updateCulture field.
func (r *mutationResolver) UpdateCulture(ctx context.Context, id int, input ent.UpdateCultureInput) (*ent.Culture, error) {
	client := ent.FromContext(ctx)
	return client.Culture.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateDistrict is the resolver for the createDistrict field.
func (r *mutationResolver) CreateDistrict(ctx context.Context, input ent.CreateDistrictInput) (*ent.District, error) {
	client := ent.FromContext(ctx)
	return client.District.Create().SetInput(input).Save(ctx)
}

// UpdateDistrict is the resolver for the updateDistrict field.
func (r *mutationResolver) UpdateDistrict(ctx context.Context, id int, input ent.UpdateDistrictInput) (*ent.District, error) {
	client := ent.FromContext(ctx)
	return client.District.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateHolder is the resolver for the createHolder field.
func (r *mutationResolver) CreateHolder(ctx context.Context, input ent.CreateHolderInput) (*ent.Holder, error) {
	client := ent.FromContext(ctx)
	return client.Holder.Create().SetInput(input).Save(ctx)
}

// UpdateHolder is the resolver for the updateHolder field.
func (r *mutationResolver) UpdateHolder(ctx context.Context, id int, input ent.UpdateHolderInput) (*ent.Holder, error) {
	client := ent.FromContext(ctx)
	return client.Holder.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateLicense is the resolver for the createLicense field.
func (r *mutationResolver) CreateLicense(ctx context.Context, input ent.CreateLicenseInput) (*ent.License, error) {
	client := ent.FromContext(ctx)
	return client.License.Create().SetInput(input).Save(ctx)
}

// UpdateLicense is the resolver for the updateLicense field.
func (r *mutationResolver) UpdateLicense(ctx context.Context, id int, input ent.UpdateLicenseInput) (*ent.License, error) {
	client := ent.FromContext(ctx)
	return client.License.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateLocation is the resolver for the createLocation field.
func (r *mutationResolver) CreateLocation(ctx context.Context, input ent.CreateLocationInput) (*ent.Location, error) {
	client := ent.FromContext(ctx)
	return client.Location.Create().SetInput(input).Save(ctx)
}

// UpdateLocation is the resolver for the updateLocation field.
func (r *mutationResolver) UpdateLocation(ctx context.Context, id int, input ent.UpdateLocationInput) (*ent.Location, error) {
	client := ent.FromContext(ctx)
	return client.Location.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateMedium is the resolver for the createMedium field.
func (r *mutationResolver) CreateMedium(ctx context.Context, input ent.CreateMediumInput) (*ent.Medium, error) {
	client := ent.FromContext(ctx)
	return client.Medium.Create().SetInput(input).Save(ctx)
}

// UpdateMedium is the resolver for the updateMedium field.
func (r *mutationResolver) UpdateMedium(ctx context.Context, id int, input ent.UpdateMediumInput) (*ent.Medium, error) {
	client := ent.FromContext(ctx)
	return client.Medium.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateModel is the resolver for the createModel field.
func (r *mutationResolver) CreateModel(ctx context.Context, input ent.CreateModelInput) (*ent.Model, error) {
	client := ent.FromContext(ctx)
	return client.Model.Create().SetInput(input).Save(ctx)
}

// UpdateModel is the resolver for the updateModel field.
func (r *mutationResolver) UpdateModel(ctx context.Context, id int, input ent.UpdateModelInput) (*ent.Model, error) {
	client := ent.FromContext(ctx)
	return client.Model.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateMonument is the resolver for the createMonument field.
func (r *mutationResolver) CreateMonument(ctx context.Context, input ent.CreateMonumentInput) (*ent.Monument, error) {
	client := ent.FromContext(ctx)
	return client.Monument.Create().SetInput(input).Save(ctx)
}

// UpdateMonument is the resolver for the updateMonument field.
func (r *mutationResolver) UpdateMonument(ctx context.Context, id int, input ent.UpdateMonumentInput) (*ent.Monument, error) {
	client := ent.FromContext(ctx)
	return client.Monument.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input ent.CreateOrganizationInput) (*ent.Organization, error) {
	client := ent.FromContext(ctx)
	return client.Organization.Create().SetInput(input).Save(ctx)
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, id int, input ent.UpdateOrganizationInput) (*ent.Organization, error) {
	client := ent.FromContext(ctx)
	return client.Organization.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, input ent.CreatePersonInput) (*ent.Person, error) {
	client := ent.FromContext(ctx)
	return client.Person.Create().SetInput(input).Save(ctx)
}

// UpdatePerson is the resolver for the updatePerson field.
func (r *mutationResolver) UpdatePerson(ctx context.Context, id int, input ent.UpdatePersonInput) (*ent.Person, error) {
	client := ent.FromContext(ctx)
	return client.Person.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input ent.CreateProjectInput) (*ent.Project, error) {
	client := ent.FromContext(ctx)
	return client.Project.Create().SetInput(input).Save(ctx)
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id int, input ent.UpdateProjectInput) (*ent.Project, error) {
	client := ent.FromContext(ctx)
	return client.Project.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreatePublication is the resolver for the createPublication field.
func (r *mutationResolver) CreatePublication(ctx context.Context, input ent.CreatePublicationInput) (*ent.Publication, error) {
	client := ent.FromContext(ctx)
	return client.Publication.Create().SetInput(input).Save(ctx)
}

// UpdatePublication is the resolver for the updatePublication field.
func (r *mutationResolver) UpdatePublication(ctx context.Context, id int, input ent.UpdatePublicationInput) (*ent.Publication, error) {
	client := ent.FromContext(ctx)
	return client.Publication.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateRegion is the resolver for the createRegion field.
func (r *mutationResolver) CreateRegion(ctx context.Context, input ent.CreateRegionInput) (*ent.Region, error) {
	client := ent.FromContext(ctx)
	return client.Region.Create().SetInput(input).Save(ctx)
}

// UpdateRegion is the resolver for the updateRegion field.
func (r *mutationResolver) UpdateRegion(ctx context.Context, id int, input ent.UpdateRegionInput) (*ent.Region, error) {
	client := ent.FromContext(ctx)
	return client.Region.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateSet is the resolver for the createSet field.
func (r *mutationResolver) CreateSet(ctx context.Context, input ent.CreateSetInput) (*ent.Set, error) {
	client := ent.FromContext(ctx)
	return client.Set.Create().SetInput(input).Save(ctx)
}

// UpdateSet is the resolver for the updateSet field.
func (r *mutationResolver) UpdateSet(ctx context.Context, id int, input ent.UpdateSetInput) (*ent.Set, error) {
	client := ent.FromContext(ctx)
	return client.Set.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateSettlement is the resolver for the createSettlement field.
func (r *mutationResolver) CreateSettlement(ctx context.Context, input ent.CreateSettlementInput) (*ent.Settlement, error) {
	client := ent.FromContext(ctx)
	return client.Settlement.Create().SetInput(input).Save(ctx)
}

// UpdateSettlement is the resolver for the updateSettlement field.
func (r *mutationResolver) UpdateSettlement(ctx context.Context, id int, input ent.UpdateSettlementInput) (*ent.Settlement, error) {
	client := ent.FromContext(ctx)
	return client.Settlement.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateTechnique is the resolver for the createTechnique field.
func (r *mutationResolver) CreateTechnique(ctx context.Context, input ent.CreateTechniqueInput) (*ent.Technique, error) {
	client := ent.FromContext(ctx)
	return client.Technique.Create().SetInput(input).Save(ctx)
}

// UpdateTechnique is the resolver for the updateTechnique field.
func (r *mutationResolver) UpdateTechnique(ctx context.Context, id int, input ent.UpdateTechniqueInput) (*ent.Technique, error) {
	client := ent.FromContext(ctx)
	return client.Technique.UpdateOneID(id).SetInput(input).Save(ctx)
}

// Mutation returns gql.MutationResolver implementation.
func (r *Resolver) Mutation() gql.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
