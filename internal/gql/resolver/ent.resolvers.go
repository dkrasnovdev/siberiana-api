package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35-dev

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/dkrasnovdev/heritage-api/ent"
	"github.com/dkrasnovdev/heritage-api/internal/gql"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// Artifacts is the resolver for the artifacts field.
func (r *queryResolver) Artifacts(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.ArtifactOrder, where *ent.ArtifactWhereInput) (*ent.ArtifactConnection, error) {
	return r.client.Artifact.Query().Paginate(ctx, after, first, before, last, ent.WithArtifactOrder(orderBy), ent.WithArtifactFilter(where.Filter))
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.CategoryOrder, where *ent.CategoryWhereInput) (*ent.CategoryConnection, error) {
	return r.client.Category.Query().Paginate(ctx, after, first, before, last, ent.WithCategoryOrder(orderBy), ent.WithCategoryFilter(where.Filter))
}

// Collections is the resolver for the collections field.
func (r *queryResolver) Collections(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.CollectionOrder, where *ent.CollectionWhereInput) (*ent.CollectionConnection, error) {
	return r.client.Collection.Query().Paginate(ctx, after, first, before, last, ent.WithCollectionOrder(orderBy), ent.WithCollectionFilter(where.Filter))
}

// Cultures is the resolver for the cultures field.
func (r *queryResolver) Cultures(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.CultureOrder, where *ent.CultureWhereInput) (*ent.CultureConnection, error) {
	return r.client.Culture.Query().Paginate(ctx, after, first, before, last, ent.WithCultureOrder(orderBy), ent.WithCultureFilter(where.Filter))
}

// Districts is the resolver for the districts field.
func (r *queryResolver) Districts(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.DistrictOrder, where *ent.DistrictWhereInput) (*ent.DistrictConnection, error) {
	return r.client.District.Query().Paginate(ctx, after, first, before, last, ent.WithDistrictOrder(orderBy), ent.WithDistrictFilter(where.Filter))
}

// Holders is the resolver for the holders field.
func (r *queryResolver) Holders(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.HolderOrder, where *ent.HolderWhereInput) (*ent.HolderConnection, error) {
	return r.client.Holder.Query().Paginate(ctx, after, first, before, last, ent.WithHolderOrder(orderBy), ent.WithHolderFilter(where.Filter))
}

// Licenses is the resolver for the licenses field.
func (r *queryResolver) Licenses(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.LicenseOrder, where *ent.LicenseWhereInput) (*ent.LicenseConnection, error) {
	return r.client.Debug().License.Query().Paginate(ctx, after, first, before, last, ent.WithLicenseOrder(orderBy), ent.WithLicenseFilter(where.Filter))
}

// Locations is the resolver for the locations field.
func (r *queryResolver) Locations(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.LocationOrder, where *ent.LocationWhereInput) (*ent.LocationConnection, error) {
	return r.client.Location.Query().Paginate(ctx, after, first, before, last, ent.WithLocationOrder(orderBy), ent.WithLocationFilter(where.Filter))
}

// Media is the resolver for the media field.
func (r *queryResolver) Media(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.MediumOrder, where *ent.MediumWhereInput) (*ent.MediumConnection, error) {
	return r.client.Medium.Query().Paginate(ctx, after, first, before, last, ent.WithMediumOrder(orderBy), ent.WithMediumFilter(where.Filter))
}

// Models is the resolver for the models field.
func (r *queryResolver) Models(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.ModelOrder, where *ent.ModelWhereInput) (*ent.ModelConnection, error) {
	return r.client.Model.Query().Paginate(ctx, after, first, before, last, ent.WithModelOrder(orderBy), ent.WithModelFilter(where.Filter))
}

// Monuments is the resolver for the monuments field.
func (r *queryResolver) Monuments(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.MonumentOrder, where *ent.MonumentWhereInput) (*ent.MonumentConnection, error) {
	return r.client.Monument.Query().Paginate(ctx, after, first, before, last, ent.WithMonumentOrder(orderBy), ent.WithMonumentFilter(where.Filter))
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.OrganizationOrder, where *ent.OrganizationWhereInput) (*ent.OrganizationConnection, error) {
	return r.client.Organization.Query().Paginate(ctx, after, first, before, last, ent.WithOrganizationOrder(orderBy), ent.WithOrganizationFilter(where.Filter))
}

// Persons is the resolver for the persons field.
func (r *queryResolver) Persons(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.PersonOrder, where *ent.PersonWhereInput) (*ent.PersonConnection, error) {
	return r.client.Person.Query().Paginate(ctx, after, first, before, last, ent.WithPersonOrder(orderBy), ent.WithPersonFilter(where.Filter))
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.ProjectOrder, where *ent.ProjectWhereInput) (*ent.ProjectConnection, error) {
	return r.client.Project.Query().Paginate(ctx, after, first, before, last, ent.WithProjectOrder(orderBy), ent.WithProjectFilter(where.Filter))
}

// Publications is the resolver for the publications field.
func (r *queryResolver) Publications(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.PublicationOrder, where *ent.PublicationWhereInput) (*ent.PublicationConnection, error) {
	return r.client.Publication.Query().Paginate(ctx, after, first, before, last, ent.WithPublicationOrder(orderBy), ent.WithPublicationFilter(where.Filter))
}

// Regions is the resolver for the regions field.
func (r *queryResolver) Regions(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.RegionOrder, where *ent.RegionWhereInput) (*ent.RegionConnection, error) {
	return r.client.Region.Query().Paginate(ctx, after, first, before, last, ent.WithRegionOrder(orderBy), ent.WithRegionFilter(where.Filter))
}

// Sets is the resolver for the sets field.
func (r *queryResolver) Sets(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.SetOrder, where *ent.SetWhereInput) (*ent.SetConnection, error) {
	return r.client.Set.Query().Paginate(ctx, after, first, before, last, ent.WithSetOrder(orderBy), ent.WithSetFilter(where.Filter))
}

// Settlements is the resolver for the settlements field.
func (r *queryResolver) Settlements(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.SettlementOrder, where *ent.SettlementWhereInput) (*ent.SettlementConnection, error) {
	return r.client.Settlement.Query().Paginate(ctx, after, first, before, last, ent.WithSettlementOrder(orderBy), ent.WithSettlementFilter(where.Filter))
}

// Techniques is the resolver for the techniques field.
func (r *queryResolver) Techniques(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy []*ent.TechniqueOrder, where *ent.TechniqueWhereInput) (*ent.TechniqueConnection, error) {
	return r.client.Technique.Query().Paginate(ctx, after, first, before, last, ent.WithTechniqueOrder(orderBy), ent.WithTechniqueFilter(where.Filter))
}

// Query returns gql.QueryResolver implementation.
func (r *Resolver) Query() gql.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
