// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// Art is the client for interacting with the Art builders.
	Art *ArtClient
	// ArtGenre is the client for interacting with the ArtGenre builders.
	ArtGenre *ArtGenreClient
	// ArtStyle is the client for interacting with the ArtStyle builders.
	ArtStyle *ArtStyleClient
	// Artifact is the client for interacting with the Artifact builders.
	Artifact *ArtifactClient
	// AuditLog is the client for interacting with the AuditLog builders.
	AuditLog *AuditLogClient
	// Book is the client for interacting with the Book builders.
	Book *BookClient
	// BookGenre is the client for interacting with the BookGenre builders.
	BookGenre *BookGenreClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Collection is the client for interacting with the Collection builders.
	Collection *CollectionClient
	// Country is the client for interacting with the Country builders.
	Country *CountryClient
	// Culture is the client for interacting with the Culture builders.
	Culture *CultureClient
	// DendrochronologicalAnalysis is the client for interacting with the DendrochronologicalAnalysis builders.
	DendrochronologicalAnalysis *DendrochronologicalAnalysisClient
	// Dendrochronology is the client for interacting with the Dendrochronology builders.
	Dendrochronology *DendrochronologyClient
	// District is the client for interacting with the District builders.
	District *DistrictClient
	// Ethnos is the client for interacting with the Ethnos builders.
	Ethnos *EthnosClient
	// Familia is the client for interacting with the Familia builders.
	Familia *FamiliaClient
	// Favourite is the client for interacting with the Favourite builders.
	Favourite *FavouriteClient
	// Genus is the client for interacting with the Genus builders.
	Genus *GenusClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// Herbarium is the client for interacting with the Herbarium builders.
	Herbarium *HerbariumClient
	// Interview is the client for interacting with the Interview builders.
	Interview *InterviewClient
	// Keyword is the client for interacting with the Keyword builders.
	Keyword *KeywordClient
	// License is the client for interacting with the License builders.
	License *LicenseClient
	// Location is the client for interacting with the Location builders.
	Location *LocationClient
	// Medium is the client for interacting with the Medium builders.
	Medium *MediumClient
	// Model is the client for interacting with the Model builders.
	Model *ModelClient
	// Monument is the client for interacting with the Monument builders.
	Monument *MonumentClient
	// Mound is the client for interacting with the Mound builders.
	Mound *MoundClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// Periodical is the client for interacting with the Periodical builders.
	Periodical *PeriodicalClient
	// Person is the client for interacting with the Person builders.
	Person *PersonClient
	// PersonalCollection is the client for interacting with the PersonalCollection builders.
	PersonalCollection *PersonalCollectionClient
	// Petroglyph is the client for interacting with the Petroglyph builders.
	Petroglyph *PetroglyphClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// ProtectedArea is the client for interacting with the ProtectedArea builders.
	ProtectedArea *ProtectedAreaClient
	// ProtectedAreaCategory is the client for interacting with the ProtectedAreaCategory builders.
	ProtectedAreaCategory *ProtectedAreaCategoryClient
	// ProtectedAreaPicture is the client for interacting with the ProtectedAreaPicture builders.
	ProtectedAreaPicture *ProtectedAreaPictureClient
	// Publication is the client for interacting with the Publication builders.
	Publication *PublicationClient
	// Publisher is the client for interacting with the Publisher builders.
	Publisher *PublisherClient
	// Region is the client for interacting with the Region builders.
	Region *RegionClient
	// Set is the client for interacting with the Set builders.
	Set *SetClient
	// Settlement is the client for interacting with the Settlement builders.
	Settlement *SettlementClient
	// Species is the client for interacting with the Species builders.
	Species *SpeciesClient
	// Technique is the client for interacting with the Technique builders.
	Technique *TechniqueClient
	// Visit is the client for interacting with the Visit builders.
	Visit *VisitClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once
	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Commit method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	txDriver.mu.Lock()
	hooks := append([]CommitHook(nil), txDriver.onCommit...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onCommit = append(txDriver.onCommit, f)
	txDriver.mu.Unlock()
}

type (
	// Rollbacker is the interface that wraps the Rollback method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	txDriver.mu.Lock()
	hooks := append([]RollbackHook(nil), txDriver.onRollback...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onRollback = append(txDriver.onRollback, f)
	txDriver.mu.Unlock()
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.Art = NewArtClient(tx.config)
	tx.ArtGenre = NewArtGenreClient(tx.config)
	tx.ArtStyle = NewArtStyleClient(tx.config)
	tx.Artifact = NewArtifactClient(tx.config)
	tx.AuditLog = NewAuditLogClient(tx.config)
	tx.Book = NewBookClient(tx.config)
	tx.BookGenre = NewBookGenreClient(tx.config)
	tx.Category = NewCategoryClient(tx.config)
	tx.Collection = NewCollectionClient(tx.config)
	tx.Country = NewCountryClient(tx.config)
	tx.Culture = NewCultureClient(tx.config)
	tx.DendrochronologicalAnalysis = NewDendrochronologicalAnalysisClient(tx.config)
	tx.Dendrochronology = NewDendrochronologyClient(tx.config)
	tx.District = NewDistrictClient(tx.config)
	tx.Ethnos = NewEthnosClient(tx.config)
	tx.Familia = NewFamiliaClient(tx.config)
	tx.Favourite = NewFavouriteClient(tx.config)
	tx.Genus = NewGenusClient(tx.config)
	tx.Group = NewGroupClient(tx.config)
	tx.Herbarium = NewHerbariumClient(tx.config)
	tx.Interview = NewInterviewClient(tx.config)
	tx.Keyword = NewKeywordClient(tx.config)
	tx.License = NewLicenseClient(tx.config)
	tx.Location = NewLocationClient(tx.config)
	tx.Medium = NewMediumClient(tx.config)
	tx.Model = NewModelClient(tx.config)
	tx.Monument = NewMonumentClient(tx.config)
	tx.Mound = NewMoundClient(tx.config)
	tx.Organization = NewOrganizationClient(tx.config)
	tx.Periodical = NewPeriodicalClient(tx.config)
	tx.Person = NewPersonClient(tx.config)
	tx.PersonalCollection = NewPersonalCollectionClient(tx.config)
	tx.Petroglyph = NewPetroglyphClient(tx.config)
	tx.Project = NewProjectClient(tx.config)
	tx.ProtectedArea = NewProtectedAreaClient(tx.config)
	tx.ProtectedAreaCategory = NewProtectedAreaCategoryClient(tx.config)
	tx.ProtectedAreaPicture = NewProtectedAreaPictureClient(tx.config)
	tx.Publication = NewPublicationClient(tx.config)
	tx.Publisher = NewPublisherClient(tx.config)
	tx.Region = NewRegionClient(tx.config)
	tx.Set = NewSetClient(tx.config)
	tx.Settlement = NewSettlementClient(tx.config)
	tx.Species = NewSpeciesClient(tx.config)
	tx.Technique = NewTechniqueClient(tx.config)
	tx.Visit = NewVisitClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: Art.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
	// completion hooks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v any) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v any) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)
