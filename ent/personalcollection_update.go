// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronology"
	"github.com/dkrasnovdev/siberiana-api/ent/herbarium"
	"github.com/dkrasnovdev/siberiana-api/ent/personalcollection"
	"github.com/dkrasnovdev/siberiana-api/ent/petroglyph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
)

// PersonalCollectionUpdate is the builder for updating PersonalCollection entities.
type PersonalCollectionUpdate struct {
	config
	hooks    []Hook
	mutation *PersonalCollectionMutation
}

// Where appends a list predicates to the PersonalCollectionUpdate builder.
func (pcu *PersonalCollectionUpdate) Where(ps ...predicate.PersonalCollection) *PersonalCollectionUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetCreatedBy sets the "created_by" field.
func (pcu *PersonalCollectionUpdate) SetCreatedBy(s string) *PersonalCollectionUpdate {
	pcu.mutation.SetCreatedBy(s)
	return pcu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pcu *PersonalCollectionUpdate) SetNillableCreatedBy(s *string) *PersonalCollectionUpdate {
	if s != nil {
		pcu.SetCreatedBy(*s)
	}
	return pcu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pcu *PersonalCollectionUpdate) ClearCreatedBy() *PersonalCollectionUpdate {
	pcu.mutation.ClearCreatedBy()
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *PersonalCollectionUpdate) SetUpdatedAt(t time.Time) *PersonalCollectionUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetUpdatedBy sets the "updated_by" field.
func (pcu *PersonalCollectionUpdate) SetUpdatedBy(s string) *PersonalCollectionUpdate {
	pcu.mutation.SetUpdatedBy(s)
	return pcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pcu *PersonalCollectionUpdate) SetNillableUpdatedBy(s *string) *PersonalCollectionUpdate {
	if s != nil {
		pcu.SetUpdatedBy(*s)
	}
	return pcu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pcu *PersonalCollectionUpdate) ClearUpdatedBy() *PersonalCollectionUpdate {
	pcu.mutation.ClearUpdatedBy()
	return pcu
}

// SetDisplayName sets the "display_name" field.
func (pcu *PersonalCollectionUpdate) SetDisplayName(s string) *PersonalCollectionUpdate {
	pcu.mutation.SetDisplayName(s)
	return pcu
}

// SetIsPublic sets the "is_public" field.
func (pcu *PersonalCollectionUpdate) SetIsPublic(b bool) *PersonalCollectionUpdate {
	pcu.mutation.SetIsPublic(b)
	return pcu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (pcu *PersonalCollectionUpdate) SetNillableIsPublic(b *bool) *PersonalCollectionUpdate {
	if b != nil {
		pcu.SetIsPublic(*b)
	}
	return pcu
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (pcu *PersonalCollectionUpdate) AddArtIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.AddArtIDs(ids...)
	return pcu
}

// AddArt adds the "art" edges to the Art entity.
func (pcu *PersonalCollectionUpdate) AddArt(a ...*Art) *PersonalCollectionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pcu.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (pcu *PersonalCollectionUpdate) AddArtifactIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.AddArtifactIDs(ids...)
	return pcu
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (pcu *PersonalCollectionUpdate) AddArtifacts(a ...*Artifact) *PersonalCollectionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pcu.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (pcu *PersonalCollectionUpdate) AddBookIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.AddBookIDs(ids...)
	return pcu
}

// AddBooks adds the "books" edges to the Book entity.
func (pcu *PersonalCollectionUpdate) AddBooks(b ...*Book) *PersonalCollectionUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pcu.AddBookIDs(ids...)
}

// AddDendrochronologyIDs adds the "dendrochronology" edge to the Dendrochronology entity by IDs.
func (pcu *PersonalCollectionUpdate) AddDendrochronologyIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.AddDendrochronologyIDs(ids...)
	return pcu
}

// AddDendrochronology adds the "dendrochronology" edges to the Dendrochronology entity.
func (pcu *PersonalCollectionUpdate) AddDendrochronology(d ...*Dendrochronology) *PersonalCollectionUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pcu.AddDendrochronologyIDs(ids...)
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (pcu *PersonalCollectionUpdate) AddHerbariumIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.AddHerbariumIDs(ids...)
	return pcu
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (pcu *PersonalCollectionUpdate) AddHerbaria(h ...*Herbarium) *PersonalCollectionUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pcu.AddHerbariumIDs(ids...)
}

// AddPetroglyphIDs adds the "petroglyphs" edge to the Petroglyph entity by IDs.
func (pcu *PersonalCollectionUpdate) AddPetroglyphIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.AddPetroglyphIDs(ids...)
	return pcu
}

// AddPetroglyphs adds the "petroglyphs" edges to the Petroglyph entity.
func (pcu *PersonalCollectionUpdate) AddPetroglyphs(p ...*Petroglyph) *PersonalCollectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddPetroglyphIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (pcu *PersonalCollectionUpdate) AddProtectedAreaPictureIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.AddProtectedAreaPictureIDs(ids...)
	return pcu
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (pcu *PersonalCollectionUpdate) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *PersonalCollectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddProtectedAreaPictureIDs(ids...)
}

// Mutation returns the PersonalCollectionMutation object of the builder.
func (pcu *PersonalCollectionUpdate) Mutation() *PersonalCollectionMutation {
	return pcu.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (pcu *PersonalCollectionUpdate) ClearArt() *PersonalCollectionUpdate {
	pcu.mutation.ClearArt()
	return pcu
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (pcu *PersonalCollectionUpdate) RemoveArtIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.RemoveArtIDs(ids...)
	return pcu
}

// RemoveArt removes "art" edges to Art entities.
func (pcu *PersonalCollectionUpdate) RemoveArt(a ...*Art) *PersonalCollectionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pcu.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (pcu *PersonalCollectionUpdate) ClearArtifacts() *PersonalCollectionUpdate {
	pcu.mutation.ClearArtifacts()
	return pcu
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (pcu *PersonalCollectionUpdate) RemoveArtifactIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.RemoveArtifactIDs(ids...)
	return pcu
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (pcu *PersonalCollectionUpdate) RemoveArtifacts(a ...*Artifact) *PersonalCollectionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pcu.RemoveArtifactIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (pcu *PersonalCollectionUpdate) ClearBooks() *PersonalCollectionUpdate {
	pcu.mutation.ClearBooks()
	return pcu
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (pcu *PersonalCollectionUpdate) RemoveBookIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.RemoveBookIDs(ids...)
	return pcu
}

// RemoveBooks removes "books" edges to Book entities.
func (pcu *PersonalCollectionUpdate) RemoveBooks(b ...*Book) *PersonalCollectionUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pcu.RemoveBookIDs(ids...)
}

// ClearDendrochronology clears all "dendrochronology" edges to the Dendrochronology entity.
func (pcu *PersonalCollectionUpdate) ClearDendrochronology() *PersonalCollectionUpdate {
	pcu.mutation.ClearDendrochronology()
	return pcu
}

// RemoveDendrochronologyIDs removes the "dendrochronology" edge to Dendrochronology entities by IDs.
func (pcu *PersonalCollectionUpdate) RemoveDendrochronologyIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.RemoveDendrochronologyIDs(ids...)
	return pcu
}

// RemoveDendrochronology removes "dendrochronology" edges to Dendrochronology entities.
func (pcu *PersonalCollectionUpdate) RemoveDendrochronology(d ...*Dendrochronology) *PersonalCollectionUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pcu.RemoveDendrochronologyIDs(ids...)
}

// ClearHerbaria clears all "herbaria" edges to the Herbarium entity.
func (pcu *PersonalCollectionUpdate) ClearHerbaria() *PersonalCollectionUpdate {
	pcu.mutation.ClearHerbaria()
	return pcu
}

// RemoveHerbariumIDs removes the "herbaria" edge to Herbarium entities by IDs.
func (pcu *PersonalCollectionUpdate) RemoveHerbariumIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.RemoveHerbariumIDs(ids...)
	return pcu
}

// RemoveHerbaria removes "herbaria" edges to Herbarium entities.
func (pcu *PersonalCollectionUpdate) RemoveHerbaria(h ...*Herbarium) *PersonalCollectionUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pcu.RemoveHerbariumIDs(ids...)
}

// ClearPetroglyphs clears all "petroglyphs" edges to the Petroglyph entity.
func (pcu *PersonalCollectionUpdate) ClearPetroglyphs() *PersonalCollectionUpdate {
	pcu.mutation.ClearPetroglyphs()
	return pcu
}

// RemovePetroglyphIDs removes the "petroglyphs" edge to Petroglyph entities by IDs.
func (pcu *PersonalCollectionUpdate) RemovePetroglyphIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.RemovePetroglyphIDs(ids...)
	return pcu
}

// RemovePetroglyphs removes "petroglyphs" edges to Petroglyph entities.
func (pcu *PersonalCollectionUpdate) RemovePetroglyphs(p ...*Petroglyph) *PersonalCollectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemovePetroglyphIDs(ids...)
}

// ClearProtectedAreaPictures clears all "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (pcu *PersonalCollectionUpdate) ClearProtectedAreaPictures() *PersonalCollectionUpdate {
	pcu.mutation.ClearProtectedAreaPictures()
	return pcu
}

// RemoveProtectedAreaPictureIDs removes the "protected_area_pictures" edge to ProtectedAreaPicture entities by IDs.
func (pcu *PersonalCollectionUpdate) RemoveProtectedAreaPictureIDs(ids ...int) *PersonalCollectionUpdate {
	pcu.mutation.RemoveProtectedAreaPictureIDs(ids...)
	return pcu
}

// RemoveProtectedAreaPictures removes "protected_area_pictures" edges to ProtectedAreaPicture entities.
func (pcu *PersonalCollectionUpdate) RemoveProtectedAreaPictures(p ...*ProtectedAreaPicture) *PersonalCollectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemoveProtectedAreaPictureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PersonalCollectionUpdate) Save(ctx context.Context) (int, error) {
	if err := pcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PersonalCollectionUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PersonalCollectionUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PersonalCollectionUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PersonalCollectionUpdate) defaults() error {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		if personalcollection.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized personalcollection.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := personalcollection.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pcu *PersonalCollectionUpdate) check() error {
	if v, ok := pcu.mutation.DisplayName(); ok {
		if err := personalcollection.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "PersonalCollection.display_name": %w`, err)}
		}
	}
	return nil
}

func (pcu *PersonalCollectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(personalcollection.Table, personalcollection.Columns, sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.CreatedBy(); ok {
		_spec.SetField(personalcollection.FieldCreatedBy, field.TypeString, value)
	}
	if pcu.mutation.CreatedByCleared() {
		_spec.ClearField(personalcollection.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(personalcollection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.UpdatedBy(); ok {
		_spec.SetField(personalcollection.FieldUpdatedBy, field.TypeString, value)
	}
	if pcu.mutation.UpdatedByCleared() {
		_spec.ClearField(personalcollection.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pcu.mutation.DisplayName(); ok {
		_spec.SetField(personalcollection.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := pcu.mutation.IsPublic(); ok {
		_spec.SetField(personalcollection.FieldIsPublic, field.TypeBool, value)
	}
	if pcu.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ArtTable,
			Columns: personalcollection.ArtPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedArtIDs(); len(nodes) > 0 && !pcu.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ArtTable,
			Columns: personalcollection.ArtPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ArtTable,
			Columns: personalcollection.ArtPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ArtifactsTable,
			Columns: personalcollection.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !pcu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ArtifactsTable,
			Columns: personalcollection.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ArtifactsTable,
			Columns: personalcollection.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.BooksTable,
			Columns: personalcollection.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedBooksIDs(); len(nodes) > 0 && !pcu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.BooksTable,
			Columns: personalcollection.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.BooksTable,
			Columns: personalcollection.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.DendrochronologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalcollection.DendrochronologyTable,
			Columns: []string{personalcollection.DendrochronologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedDendrochronologyIDs(); len(nodes) > 0 && !pcu.mutation.DendrochronologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalcollection.DendrochronologyTable,
			Columns: []string{personalcollection.DendrochronologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.DendrochronologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalcollection.DendrochronologyTable,
			Columns: []string{personalcollection.DendrochronologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.HerbariaTable,
			Columns: personalcollection.HerbariaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedHerbariaIDs(); len(nodes) > 0 && !pcu.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.HerbariaTable,
			Columns: personalcollection.HerbariaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.HerbariaTable,
			Columns: personalcollection.HerbariaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.PetroglyphsTable,
			Columns: personalcollection.PetroglyphsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedPetroglyphsIDs(); len(nodes) > 0 && !pcu.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.PetroglyphsTable,
			Columns: personalcollection.PetroglyphsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.PetroglyphsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.PetroglyphsTable,
			Columns: personalcollection.PetroglyphsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ProtectedAreaPicturesTable,
			Columns: personalcollection.ProtectedAreaPicturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedProtectedAreaPicturesIDs(); len(nodes) > 0 && !pcu.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ProtectedAreaPicturesTable,
			Columns: personalcollection.ProtectedAreaPicturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ProtectedAreaPicturesTable,
			Columns: personalcollection.ProtectedAreaPicturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalcollection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PersonalCollectionUpdateOne is the builder for updating a single PersonalCollection entity.
type PersonalCollectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonalCollectionMutation
}

// SetCreatedBy sets the "created_by" field.
func (pcuo *PersonalCollectionUpdateOne) SetCreatedBy(s string) *PersonalCollectionUpdateOne {
	pcuo.mutation.SetCreatedBy(s)
	return pcuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pcuo *PersonalCollectionUpdateOne) SetNillableCreatedBy(s *string) *PersonalCollectionUpdateOne {
	if s != nil {
		pcuo.SetCreatedBy(*s)
	}
	return pcuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pcuo *PersonalCollectionUpdateOne) ClearCreatedBy() *PersonalCollectionUpdateOne {
	pcuo.mutation.ClearCreatedBy()
	return pcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *PersonalCollectionUpdateOne) SetUpdatedAt(t time.Time) *PersonalCollectionUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (pcuo *PersonalCollectionUpdateOne) SetUpdatedBy(s string) *PersonalCollectionUpdateOne {
	pcuo.mutation.SetUpdatedBy(s)
	return pcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pcuo *PersonalCollectionUpdateOne) SetNillableUpdatedBy(s *string) *PersonalCollectionUpdateOne {
	if s != nil {
		pcuo.SetUpdatedBy(*s)
	}
	return pcuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pcuo *PersonalCollectionUpdateOne) ClearUpdatedBy() *PersonalCollectionUpdateOne {
	pcuo.mutation.ClearUpdatedBy()
	return pcuo
}

// SetDisplayName sets the "display_name" field.
func (pcuo *PersonalCollectionUpdateOne) SetDisplayName(s string) *PersonalCollectionUpdateOne {
	pcuo.mutation.SetDisplayName(s)
	return pcuo
}

// SetIsPublic sets the "is_public" field.
func (pcuo *PersonalCollectionUpdateOne) SetIsPublic(b bool) *PersonalCollectionUpdateOne {
	pcuo.mutation.SetIsPublic(b)
	return pcuo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (pcuo *PersonalCollectionUpdateOne) SetNillableIsPublic(b *bool) *PersonalCollectionUpdateOne {
	if b != nil {
		pcuo.SetIsPublic(*b)
	}
	return pcuo
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (pcuo *PersonalCollectionUpdateOne) AddArtIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.AddArtIDs(ids...)
	return pcuo
}

// AddArt adds the "art" edges to the Art entity.
func (pcuo *PersonalCollectionUpdateOne) AddArt(a ...*Art) *PersonalCollectionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pcuo.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (pcuo *PersonalCollectionUpdateOne) AddArtifactIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.AddArtifactIDs(ids...)
	return pcuo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (pcuo *PersonalCollectionUpdateOne) AddArtifacts(a ...*Artifact) *PersonalCollectionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pcuo.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (pcuo *PersonalCollectionUpdateOne) AddBookIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.AddBookIDs(ids...)
	return pcuo
}

// AddBooks adds the "books" edges to the Book entity.
func (pcuo *PersonalCollectionUpdateOne) AddBooks(b ...*Book) *PersonalCollectionUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pcuo.AddBookIDs(ids...)
}

// AddDendrochronologyIDs adds the "dendrochronology" edge to the Dendrochronology entity by IDs.
func (pcuo *PersonalCollectionUpdateOne) AddDendrochronologyIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.AddDendrochronologyIDs(ids...)
	return pcuo
}

// AddDendrochronology adds the "dendrochronology" edges to the Dendrochronology entity.
func (pcuo *PersonalCollectionUpdateOne) AddDendrochronology(d ...*Dendrochronology) *PersonalCollectionUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pcuo.AddDendrochronologyIDs(ids...)
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (pcuo *PersonalCollectionUpdateOne) AddHerbariumIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.AddHerbariumIDs(ids...)
	return pcuo
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (pcuo *PersonalCollectionUpdateOne) AddHerbaria(h ...*Herbarium) *PersonalCollectionUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pcuo.AddHerbariumIDs(ids...)
}

// AddPetroglyphIDs adds the "petroglyphs" edge to the Petroglyph entity by IDs.
func (pcuo *PersonalCollectionUpdateOne) AddPetroglyphIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.AddPetroglyphIDs(ids...)
	return pcuo
}

// AddPetroglyphs adds the "petroglyphs" edges to the Petroglyph entity.
func (pcuo *PersonalCollectionUpdateOne) AddPetroglyphs(p ...*Petroglyph) *PersonalCollectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddPetroglyphIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (pcuo *PersonalCollectionUpdateOne) AddProtectedAreaPictureIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.AddProtectedAreaPictureIDs(ids...)
	return pcuo
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (pcuo *PersonalCollectionUpdateOne) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *PersonalCollectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddProtectedAreaPictureIDs(ids...)
}

// Mutation returns the PersonalCollectionMutation object of the builder.
func (pcuo *PersonalCollectionUpdateOne) Mutation() *PersonalCollectionMutation {
	return pcuo.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (pcuo *PersonalCollectionUpdateOne) ClearArt() *PersonalCollectionUpdateOne {
	pcuo.mutation.ClearArt()
	return pcuo
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (pcuo *PersonalCollectionUpdateOne) RemoveArtIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.RemoveArtIDs(ids...)
	return pcuo
}

// RemoveArt removes "art" edges to Art entities.
func (pcuo *PersonalCollectionUpdateOne) RemoveArt(a ...*Art) *PersonalCollectionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pcuo.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (pcuo *PersonalCollectionUpdateOne) ClearArtifacts() *PersonalCollectionUpdateOne {
	pcuo.mutation.ClearArtifacts()
	return pcuo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (pcuo *PersonalCollectionUpdateOne) RemoveArtifactIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.RemoveArtifactIDs(ids...)
	return pcuo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (pcuo *PersonalCollectionUpdateOne) RemoveArtifacts(a ...*Artifact) *PersonalCollectionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pcuo.RemoveArtifactIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (pcuo *PersonalCollectionUpdateOne) ClearBooks() *PersonalCollectionUpdateOne {
	pcuo.mutation.ClearBooks()
	return pcuo
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (pcuo *PersonalCollectionUpdateOne) RemoveBookIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.RemoveBookIDs(ids...)
	return pcuo
}

// RemoveBooks removes "books" edges to Book entities.
func (pcuo *PersonalCollectionUpdateOne) RemoveBooks(b ...*Book) *PersonalCollectionUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pcuo.RemoveBookIDs(ids...)
}

// ClearDendrochronology clears all "dendrochronology" edges to the Dendrochronology entity.
func (pcuo *PersonalCollectionUpdateOne) ClearDendrochronology() *PersonalCollectionUpdateOne {
	pcuo.mutation.ClearDendrochronology()
	return pcuo
}

// RemoveDendrochronologyIDs removes the "dendrochronology" edge to Dendrochronology entities by IDs.
func (pcuo *PersonalCollectionUpdateOne) RemoveDendrochronologyIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.RemoveDendrochronologyIDs(ids...)
	return pcuo
}

// RemoveDendrochronology removes "dendrochronology" edges to Dendrochronology entities.
func (pcuo *PersonalCollectionUpdateOne) RemoveDendrochronology(d ...*Dendrochronology) *PersonalCollectionUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pcuo.RemoveDendrochronologyIDs(ids...)
}

// ClearHerbaria clears all "herbaria" edges to the Herbarium entity.
func (pcuo *PersonalCollectionUpdateOne) ClearHerbaria() *PersonalCollectionUpdateOne {
	pcuo.mutation.ClearHerbaria()
	return pcuo
}

// RemoveHerbariumIDs removes the "herbaria" edge to Herbarium entities by IDs.
func (pcuo *PersonalCollectionUpdateOne) RemoveHerbariumIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.RemoveHerbariumIDs(ids...)
	return pcuo
}

// RemoveHerbaria removes "herbaria" edges to Herbarium entities.
func (pcuo *PersonalCollectionUpdateOne) RemoveHerbaria(h ...*Herbarium) *PersonalCollectionUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pcuo.RemoveHerbariumIDs(ids...)
}

// ClearPetroglyphs clears all "petroglyphs" edges to the Petroglyph entity.
func (pcuo *PersonalCollectionUpdateOne) ClearPetroglyphs() *PersonalCollectionUpdateOne {
	pcuo.mutation.ClearPetroglyphs()
	return pcuo
}

// RemovePetroglyphIDs removes the "petroglyphs" edge to Petroglyph entities by IDs.
func (pcuo *PersonalCollectionUpdateOne) RemovePetroglyphIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.RemovePetroglyphIDs(ids...)
	return pcuo
}

// RemovePetroglyphs removes "petroglyphs" edges to Petroglyph entities.
func (pcuo *PersonalCollectionUpdateOne) RemovePetroglyphs(p ...*Petroglyph) *PersonalCollectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemovePetroglyphIDs(ids...)
}

// ClearProtectedAreaPictures clears all "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (pcuo *PersonalCollectionUpdateOne) ClearProtectedAreaPictures() *PersonalCollectionUpdateOne {
	pcuo.mutation.ClearProtectedAreaPictures()
	return pcuo
}

// RemoveProtectedAreaPictureIDs removes the "protected_area_pictures" edge to ProtectedAreaPicture entities by IDs.
func (pcuo *PersonalCollectionUpdateOne) RemoveProtectedAreaPictureIDs(ids ...int) *PersonalCollectionUpdateOne {
	pcuo.mutation.RemoveProtectedAreaPictureIDs(ids...)
	return pcuo
}

// RemoveProtectedAreaPictures removes "protected_area_pictures" edges to ProtectedAreaPicture entities.
func (pcuo *PersonalCollectionUpdateOne) RemoveProtectedAreaPictures(p ...*ProtectedAreaPicture) *PersonalCollectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemoveProtectedAreaPictureIDs(ids...)
}

// Where appends a list predicates to the PersonalCollectionUpdate builder.
func (pcuo *PersonalCollectionUpdateOne) Where(ps ...predicate.PersonalCollection) *PersonalCollectionUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PersonalCollectionUpdateOne) Select(field string, fields ...string) *PersonalCollectionUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PersonalCollection entity.
func (pcuo *PersonalCollectionUpdateOne) Save(ctx context.Context) (*PersonalCollection, error) {
	if err := pcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PersonalCollectionUpdateOne) SaveX(ctx context.Context) *PersonalCollection {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PersonalCollectionUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PersonalCollectionUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PersonalCollectionUpdateOne) defaults() error {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		if personalcollection.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized personalcollection.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := personalcollection.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *PersonalCollectionUpdateOne) check() error {
	if v, ok := pcuo.mutation.DisplayName(); ok {
		if err := personalcollection.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "PersonalCollection.display_name": %w`, err)}
		}
	}
	return nil
}

func (pcuo *PersonalCollectionUpdateOne) sqlSave(ctx context.Context) (_node *PersonalCollection, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(personalcollection.Table, personalcollection.Columns, sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PersonalCollection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personalcollection.FieldID)
		for _, f := range fields {
			if !personalcollection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personalcollection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.CreatedBy(); ok {
		_spec.SetField(personalcollection.FieldCreatedBy, field.TypeString, value)
	}
	if pcuo.mutation.CreatedByCleared() {
		_spec.ClearField(personalcollection.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(personalcollection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.UpdatedBy(); ok {
		_spec.SetField(personalcollection.FieldUpdatedBy, field.TypeString, value)
	}
	if pcuo.mutation.UpdatedByCleared() {
		_spec.ClearField(personalcollection.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pcuo.mutation.DisplayName(); ok {
		_spec.SetField(personalcollection.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.IsPublic(); ok {
		_spec.SetField(personalcollection.FieldIsPublic, field.TypeBool, value)
	}
	if pcuo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ArtTable,
			Columns: personalcollection.ArtPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedArtIDs(); len(nodes) > 0 && !pcuo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ArtTable,
			Columns: personalcollection.ArtPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ArtTable,
			Columns: personalcollection.ArtPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ArtifactsTable,
			Columns: personalcollection.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !pcuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ArtifactsTable,
			Columns: personalcollection.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ArtifactsTable,
			Columns: personalcollection.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.BooksTable,
			Columns: personalcollection.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedBooksIDs(); len(nodes) > 0 && !pcuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.BooksTable,
			Columns: personalcollection.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.BooksTable,
			Columns: personalcollection.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.DendrochronologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalcollection.DendrochronologyTable,
			Columns: []string{personalcollection.DendrochronologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedDendrochronologyIDs(); len(nodes) > 0 && !pcuo.mutation.DendrochronologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalcollection.DendrochronologyTable,
			Columns: []string{personalcollection.DendrochronologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.DendrochronologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalcollection.DendrochronologyTable,
			Columns: []string{personalcollection.DendrochronologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.HerbariaTable,
			Columns: personalcollection.HerbariaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedHerbariaIDs(); len(nodes) > 0 && !pcuo.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.HerbariaTable,
			Columns: personalcollection.HerbariaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.HerbariaTable,
			Columns: personalcollection.HerbariaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.PetroglyphsTable,
			Columns: personalcollection.PetroglyphsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedPetroglyphsIDs(); len(nodes) > 0 && !pcuo.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.PetroglyphsTable,
			Columns: personalcollection.PetroglyphsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.PetroglyphsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.PetroglyphsTable,
			Columns: personalcollection.PetroglyphsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ProtectedAreaPicturesTable,
			Columns: personalcollection.ProtectedAreaPicturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedProtectedAreaPicturesIDs(); len(nodes) > 0 && !pcuo.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ProtectedAreaPicturesTable,
			Columns: personalcollection.ProtectedAreaPicturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   personalcollection.ProtectedAreaPicturesTable,
			Columns: personalcollection.ProtectedAreaPicturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PersonalCollection{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalcollection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
