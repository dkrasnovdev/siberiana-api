// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/bookgenre"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/license"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/organization"
	"github.com/dkrasnovdev/siberiana-api/ent/periodical"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/publisher"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
)

// BookUpdate is the builder for updating Book entities.
type BookUpdate struct {
	config
	hooks    []Hook
	mutation *BookMutation
}

// Where appends a list predicates to the BookUpdate builder.
func (bu *BookUpdate) Where(ps ...predicate.Book) *BookUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetCreatedBy sets the "created_by" field.
func (bu *BookUpdate) SetCreatedBy(s string) *BookUpdate {
	bu.mutation.SetCreatedBy(s)
	return bu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (bu *BookUpdate) SetNillableCreatedBy(s *string) *BookUpdate {
	if s != nil {
		bu.SetCreatedBy(*s)
	}
	return bu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (bu *BookUpdate) ClearCreatedBy() *BookUpdate {
	bu.mutation.ClearCreatedBy()
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BookUpdate) SetUpdatedAt(t time.Time) *BookUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetUpdatedBy sets the "updated_by" field.
func (bu *BookUpdate) SetUpdatedBy(s string) *BookUpdate {
	bu.mutation.SetUpdatedBy(s)
	return bu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bu *BookUpdate) SetNillableUpdatedBy(s *string) *BookUpdate {
	if s != nil {
		bu.SetUpdatedBy(*s)
	}
	return bu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (bu *BookUpdate) ClearUpdatedBy() *BookUpdate {
	bu.mutation.ClearUpdatedBy()
	return bu
}

// SetDisplayName sets the "display_name" field.
func (bu *BookUpdate) SetDisplayName(s string) *BookUpdate {
	bu.mutation.SetDisplayName(s)
	return bu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (bu *BookUpdate) SetNillableDisplayName(s *string) *BookUpdate {
	if s != nil {
		bu.SetDisplayName(*s)
	}
	return bu
}

// ClearDisplayName clears the value of the "display_name" field.
func (bu *BookUpdate) ClearDisplayName() *BookUpdate {
	bu.mutation.ClearDisplayName()
	return bu
}

// SetAbbreviation sets the "abbreviation" field.
func (bu *BookUpdate) SetAbbreviation(s string) *BookUpdate {
	bu.mutation.SetAbbreviation(s)
	return bu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (bu *BookUpdate) SetNillableAbbreviation(s *string) *BookUpdate {
	if s != nil {
		bu.SetAbbreviation(*s)
	}
	return bu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (bu *BookUpdate) ClearAbbreviation() *BookUpdate {
	bu.mutation.ClearAbbreviation()
	return bu
}

// SetDescription sets the "description" field.
func (bu *BookUpdate) SetDescription(s string) *BookUpdate {
	bu.mutation.SetDescription(s)
	return bu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bu *BookUpdate) SetNillableDescription(s *string) *BookUpdate {
	if s != nil {
		bu.SetDescription(*s)
	}
	return bu
}

// ClearDescription clears the value of the "description" field.
func (bu *BookUpdate) ClearDescription() *BookUpdate {
	bu.mutation.ClearDescription()
	return bu
}

// SetExternalLink sets the "external_link" field.
func (bu *BookUpdate) SetExternalLink(s string) *BookUpdate {
	bu.mutation.SetExternalLink(s)
	return bu
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (bu *BookUpdate) SetNillableExternalLink(s *string) *BookUpdate {
	if s != nil {
		bu.SetExternalLink(*s)
	}
	return bu
}

// ClearExternalLink clears the value of the "external_link" field.
func (bu *BookUpdate) ClearExternalLink() *BookUpdate {
	bu.mutation.ClearExternalLink()
	return bu
}

// SetStatus sets the "status" field.
func (bu *BookUpdate) SetStatus(b book.Status) *BookUpdate {
	bu.mutation.SetStatus(b)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BookUpdate) SetNillableStatus(b *book.Status) *BookUpdate {
	if b != nil {
		bu.SetStatus(*b)
	}
	return bu
}

// ClearStatus clears the value of the "status" field.
func (bu *BookUpdate) ClearStatus() *BookUpdate {
	bu.mutation.ClearStatus()
	return bu
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (bu *BookUpdate) SetPrimaryImageURL(s string) *BookUpdate {
	bu.mutation.SetPrimaryImageURL(s)
	return bu
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (bu *BookUpdate) SetNillablePrimaryImageURL(s *string) *BookUpdate {
	if s != nil {
		bu.SetPrimaryImageURL(*s)
	}
	return bu
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (bu *BookUpdate) ClearPrimaryImageURL() *BookUpdate {
	bu.mutation.ClearPrimaryImageURL()
	return bu
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (bu *BookUpdate) SetAdditionalImagesUrls(s []string) *BookUpdate {
	bu.mutation.SetAdditionalImagesUrls(s)
	return bu
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (bu *BookUpdate) AppendAdditionalImagesUrls(s []string) *BookUpdate {
	bu.mutation.AppendAdditionalImagesUrls(s)
	return bu
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (bu *BookUpdate) ClearAdditionalImagesUrls() *BookUpdate {
	bu.mutation.ClearAdditionalImagesUrls()
	return bu
}

// SetFiles sets the "files" field.
func (bu *BookUpdate) SetFiles(s []string) *BookUpdate {
	bu.mutation.SetFiles(s)
	return bu
}

// AppendFiles appends s to the "files" field.
func (bu *BookUpdate) AppendFiles(s []string) *BookUpdate {
	bu.mutation.AppendFiles(s)
	return bu
}

// ClearFiles clears the value of the "files" field.
func (bu *BookUpdate) ClearFiles() *BookUpdate {
	bu.mutation.ClearFiles()
	return bu
}

// SetYear sets the "year" field.
func (bu *BookUpdate) SetYear(i int) *BookUpdate {
	bu.mutation.ResetYear()
	bu.mutation.SetYear(i)
	return bu
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (bu *BookUpdate) SetNillableYear(i *int) *BookUpdate {
	if i != nil {
		bu.SetYear(*i)
	}
	return bu
}

// AddYear adds i to the "year" field.
func (bu *BookUpdate) AddYear(i int) *BookUpdate {
	bu.mutation.AddYear(i)
	return bu
}

// ClearYear clears the value of the "year" field.
func (bu *BookUpdate) ClearYear() *BookUpdate {
	bu.mutation.ClearYear()
	return bu
}

// AddAuthorIDs adds the "authors" edge to the Person entity by IDs.
func (bu *BookUpdate) AddAuthorIDs(ids ...int) *BookUpdate {
	bu.mutation.AddAuthorIDs(ids...)
	return bu
}

// AddAuthors adds the "authors" edges to the Person entity.
func (bu *BookUpdate) AddAuthors(p ...*Person) *BookUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddAuthorIDs(ids...)
}

// AddBookGenreIDs adds the "book_genres" edge to the BookGenre entity by IDs.
func (bu *BookUpdate) AddBookGenreIDs(ids ...int) *BookUpdate {
	bu.mutation.AddBookGenreIDs(ids...)
	return bu
}

// AddBookGenres adds the "book_genres" edges to the BookGenre entity.
func (bu *BookUpdate) AddBookGenres(b ...*BookGenre) *BookUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddBookGenreIDs(ids...)
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (bu *BookUpdate) SetCollectionID(id int) *BookUpdate {
	bu.mutation.SetCollectionID(id)
	return bu
}

// SetCollection sets the "collection" edge to the Collection entity.
func (bu *BookUpdate) SetCollection(c *Collection) *BookUpdate {
	return bu.SetCollectionID(c.ID)
}

// SetPeriodicalID sets the "periodical" edge to the Periodical entity by ID.
func (bu *BookUpdate) SetPeriodicalID(id int) *BookUpdate {
	bu.mutation.SetPeriodicalID(id)
	return bu
}

// SetNillablePeriodicalID sets the "periodical" edge to the Periodical entity by ID if the given value is not nil.
func (bu *BookUpdate) SetNillablePeriodicalID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetPeriodicalID(*id)
	}
	return bu
}

// SetPeriodical sets the "periodical" edge to the Periodical entity.
func (bu *BookUpdate) SetPeriodical(p *Periodical) *BookUpdate {
	return bu.SetPeriodicalID(p.ID)
}

// SetPublisherID sets the "publisher" edge to the Publisher entity by ID.
func (bu *BookUpdate) SetPublisherID(id int) *BookUpdate {
	bu.mutation.SetPublisherID(id)
	return bu
}

// SetNillablePublisherID sets the "publisher" edge to the Publisher entity by ID if the given value is not nil.
func (bu *BookUpdate) SetNillablePublisherID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetPublisherID(*id)
	}
	return bu
}

// SetPublisher sets the "publisher" edge to the Publisher entity.
func (bu *BookUpdate) SetPublisher(p *Publisher) *BookUpdate {
	return bu.SetPublisherID(p.ID)
}

// SetLicenseID sets the "license" edge to the License entity by ID.
func (bu *BookUpdate) SetLicenseID(id int) *BookUpdate {
	bu.mutation.SetLicenseID(id)
	return bu
}

// SetNillableLicenseID sets the "license" edge to the License entity by ID if the given value is not nil.
func (bu *BookUpdate) SetNillableLicenseID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetLicenseID(*id)
	}
	return bu
}

// SetLicense sets the "license" edge to the License entity.
func (bu *BookUpdate) SetLicense(l *License) *BookUpdate {
	return bu.SetLicenseID(l.ID)
}

// SetLocationID sets the "location" edge to the Location entity by ID.
func (bu *BookUpdate) SetLocationID(id int) *BookUpdate {
	bu.mutation.SetLocationID(id)
	return bu
}

// SetNillableLocationID sets the "location" edge to the Location entity by ID if the given value is not nil.
func (bu *BookUpdate) SetNillableLocationID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetLocationID(*id)
	}
	return bu
}

// SetLocation sets the "location" edge to the Location entity.
func (bu *BookUpdate) SetLocation(l *Location) *BookUpdate {
	return bu.SetLocationID(l.ID)
}

// SetLibraryID sets the "library" edge to the Organization entity by ID.
func (bu *BookUpdate) SetLibraryID(id int) *BookUpdate {
	bu.mutation.SetLibraryID(id)
	return bu
}

// SetNillableLibraryID sets the "library" edge to the Organization entity by ID if the given value is not nil.
func (bu *BookUpdate) SetNillableLibraryID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetLibraryID(*id)
	}
	return bu
}

// SetLibrary sets the "library" edge to the Organization entity.
func (bu *BookUpdate) SetLibrary(o *Organization) *BookUpdate {
	return bu.SetLibraryID(o.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (bu *BookUpdate) SetCountryID(id int) *BookUpdate {
	bu.mutation.SetCountryID(id)
	return bu
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (bu *BookUpdate) SetNillableCountryID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetCountryID(*id)
	}
	return bu
}

// SetCountry sets the "country" edge to the Country entity.
func (bu *BookUpdate) SetCountry(c *Country) *BookUpdate {
	return bu.SetCountryID(c.ID)
}

// SetSettlementID sets the "settlement" edge to the Settlement entity by ID.
func (bu *BookUpdate) SetSettlementID(id int) *BookUpdate {
	bu.mutation.SetSettlementID(id)
	return bu
}

// SetNillableSettlementID sets the "settlement" edge to the Settlement entity by ID if the given value is not nil.
func (bu *BookUpdate) SetNillableSettlementID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetSettlementID(*id)
	}
	return bu
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (bu *BookUpdate) SetSettlement(s *Settlement) *BookUpdate {
	return bu.SetSettlementID(s.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (bu *BookUpdate) SetDistrictID(id int) *BookUpdate {
	bu.mutation.SetDistrictID(id)
	return bu
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (bu *BookUpdate) SetNillableDistrictID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetDistrictID(*id)
	}
	return bu
}

// SetDistrict sets the "district" edge to the District entity.
func (bu *BookUpdate) SetDistrict(d *District) *BookUpdate {
	return bu.SetDistrictID(d.ID)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (bu *BookUpdate) SetRegionID(id int) *BookUpdate {
	bu.mutation.SetRegionID(id)
	return bu
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (bu *BookUpdate) SetNillableRegionID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetRegionID(*id)
	}
	return bu
}

// SetRegion sets the "region" edge to the Region entity.
func (bu *BookUpdate) SetRegion(r *Region) *BookUpdate {
	return bu.SetRegionID(r.ID)
}

// Mutation returns the BookMutation object of the builder.
func (bu *BookUpdate) Mutation() *BookMutation {
	return bu.mutation
}

// ClearAuthors clears all "authors" edges to the Person entity.
func (bu *BookUpdate) ClearAuthors() *BookUpdate {
	bu.mutation.ClearAuthors()
	return bu
}

// RemoveAuthorIDs removes the "authors" edge to Person entities by IDs.
func (bu *BookUpdate) RemoveAuthorIDs(ids ...int) *BookUpdate {
	bu.mutation.RemoveAuthorIDs(ids...)
	return bu
}

// RemoveAuthors removes "authors" edges to Person entities.
func (bu *BookUpdate) RemoveAuthors(p ...*Person) *BookUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemoveAuthorIDs(ids...)
}

// ClearBookGenres clears all "book_genres" edges to the BookGenre entity.
func (bu *BookUpdate) ClearBookGenres() *BookUpdate {
	bu.mutation.ClearBookGenres()
	return bu
}

// RemoveBookGenreIDs removes the "book_genres" edge to BookGenre entities by IDs.
func (bu *BookUpdate) RemoveBookGenreIDs(ids ...int) *BookUpdate {
	bu.mutation.RemoveBookGenreIDs(ids...)
	return bu
}

// RemoveBookGenres removes "book_genres" edges to BookGenre entities.
func (bu *BookUpdate) RemoveBookGenres(b ...*BookGenre) *BookUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveBookGenreIDs(ids...)
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (bu *BookUpdate) ClearCollection() *BookUpdate {
	bu.mutation.ClearCollection()
	return bu
}

// ClearPeriodical clears the "periodical" edge to the Periodical entity.
func (bu *BookUpdate) ClearPeriodical() *BookUpdate {
	bu.mutation.ClearPeriodical()
	return bu
}

// ClearPublisher clears the "publisher" edge to the Publisher entity.
func (bu *BookUpdate) ClearPublisher() *BookUpdate {
	bu.mutation.ClearPublisher()
	return bu
}

// ClearLicense clears the "license" edge to the License entity.
func (bu *BookUpdate) ClearLicense() *BookUpdate {
	bu.mutation.ClearLicense()
	return bu
}

// ClearLocation clears the "location" edge to the Location entity.
func (bu *BookUpdate) ClearLocation() *BookUpdate {
	bu.mutation.ClearLocation()
	return bu
}

// ClearLibrary clears the "library" edge to the Organization entity.
func (bu *BookUpdate) ClearLibrary() *BookUpdate {
	bu.mutation.ClearLibrary()
	return bu
}

// ClearCountry clears the "country" edge to the Country entity.
func (bu *BookUpdate) ClearCountry() *BookUpdate {
	bu.mutation.ClearCountry()
	return bu
}

// ClearSettlement clears the "settlement" edge to the Settlement entity.
func (bu *BookUpdate) ClearSettlement() *BookUpdate {
	bu.mutation.ClearSettlement()
	return bu
}

// ClearDistrict clears the "district" edge to the District entity.
func (bu *BookUpdate) ClearDistrict() *BookUpdate {
	bu.mutation.ClearDistrict()
	return bu
}

// ClearRegion clears the "region" edge to the Region entity.
func (bu *BookUpdate) ClearRegion() *BookUpdate {
	bu.mutation.ClearRegion()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookUpdate) Save(ctx context.Context) (int, error) {
	if err := bu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BookUpdate) defaults() error {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		if book.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized book.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := book.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bu *BookUpdate) check() error {
	if v, ok := bu.mutation.Status(); ok {
		if err := book.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Book.status": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Year(); ok {
		if err := book.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "Book.year": %w`, err)}
		}
	}
	if _, ok := bu.mutation.CollectionID(); bu.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Book.collection"`)
	}
	return nil
}

func (bu *BookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.CreatedBy(); ok {
		_spec.SetField(book.FieldCreatedBy, field.TypeString, value)
	}
	if bu.mutation.CreatedByCleared() {
		_spec.ClearField(book.FieldCreatedBy, field.TypeString)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(book.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedBy(); ok {
		_spec.SetField(book.FieldUpdatedBy, field.TypeString, value)
	}
	if bu.mutation.UpdatedByCleared() {
		_spec.ClearField(book.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := bu.mutation.DisplayName(); ok {
		_spec.SetField(book.FieldDisplayName, field.TypeString, value)
	}
	if bu.mutation.DisplayNameCleared() {
		_spec.ClearField(book.FieldDisplayName, field.TypeString)
	}
	if value, ok := bu.mutation.Abbreviation(); ok {
		_spec.SetField(book.FieldAbbreviation, field.TypeString, value)
	}
	if bu.mutation.AbbreviationCleared() {
		_spec.ClearField(book.FieldAbbreviation, field.TypeString)
	}
	if value, ok := bu.mutation.Description(); ok {
		_spec.SetField(book.FieldDescription, field.TypeString, value)
	}
	if bu.mutation.DescriptionCleared() {
		_spec.ClearField(book.FieldDescription, field.TypeString)
	}
	if value, ok := bu.mutation.ExternalLink(); ok {
		_spec.SetField(book.FieldExternalLink, field.TypeString, value)
	}
	if bu.mutation.ExternalLinkCleared() {
		_spec.ClearField(book.FieldExternalLink, field.TypeString)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(book.FieldStatus, field.TypeEnum, value)
	}
	if bu.mutation.StatusCleared() {
		_spec.ClearField(book.FieldStatus, field.TypeEnum)
	}
	if value, ok := bu.mutation.PrimaryImageURL(); ok {
		_spec.SetField(book.FieldPrimaryImageURL, field.TypeString, value)
	}
	if bu.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(book.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := bu.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(book.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, book.FieldAdditionalImagesUrls, value)
		})
	}
	if bu.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(book.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := bu.mutation.Files(); ok {
		_spec.SetField(book.FieldFiles, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, book.FieldFiles, value)
		})
	}
	if bu.mutation.FilesCleared() {
		_spec.ClearField(book.FieldFiles, field.TypeJSON)
	}
	if value, ok := bu.mutation.Year(); ok {
		_spec.SetField(book.FieldYear, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedYear(); ok {
		_spec.AddField(book.FieldYear, field.TypeInt, value)
	}
	if bu.mutation.YearCleared() {
		_spec.ClearField(book.FieldYear, field.TypeInt)
	}
	if bu.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedAuthorsIDs(); len(nodes) > 0 && !bu.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BookGenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.BookGenresTable,
			Columns: book.BookGenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookgenre.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBookGenresIDs(); len(nodes) > 0 && !bu.mutation.BookGenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.BookGenresTable,
			Columns: book.BookGenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookgenre.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BookGenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.BookGenresTable,
			Columns: book.BookGenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookgenre.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CollectionTable,
			Columns: []string{book.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CollectionTable,
			Columns: []string{book.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.PeriodicalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.PeriodicalTable,
			Columns: []string{book.PeriodicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(periodical.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PeriodicalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.PeriodicalTable,
			Columns: []string{book.PeriodicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(periodical.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.PublisherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.PublisherTable,
			Columns: []string{book.PublisherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publisher.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PublisherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.PublisherTable,
			Columns: []string{book.PublisherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publisher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LicenseTable,
			Columns: []string{book.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LicenseTable,
			Columns: []string{book.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LocationTable,
			Columns: []string{book.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LocationTable,
			Columns: []string{book.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.LibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LibraryTable,
			Columns: []string{book.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.LibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LibraryTable,
			Columns: []string{book.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CountryTable,
			Columns: []string{book.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CountryTable,
			Columns: []string{book.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.SettlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.SettlementTable,
			Columns: []string{book.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.SettlementTable,
			Columns: []string{book.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.DistrictTable,
			Columns: []string{book.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.DistrictTable,
			Columns: []string{book.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.RegionTable,
			Columns: []string{book.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.RegionTable,
			Columns: []string{book.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BookUpdateOne is the builder for updating a single Book entity.
type BookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookMutation
}

// SetCreatedBy sets the "created_by" field.
func (buo *BookUpdateOne) SetCreatedBy(s string) *BookUpdateOne {
	buo.mutation.SetCreatedBy(s)
	return buo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableCreatedBy(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetCreatedBy(*s)
	}
	return buo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (buo *BookUpdateOne) ClearCreatedBy() *BookUpdateOne {
	buo.mutation.ClearCreatedBy()
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BookUpdateOne) SetUpdatedAt(t time.Time) *BookUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetUpdatedBy sets the "updated_by" field.
func (buo *BookUpdateOne) SetUpdatedBy(s string) *BookUpdateOne {
	buo.mutation.SetUpdatedBy(s)
	return buo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableUpdatedBy(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetUpdatedBy(*s)
	}
	return buo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (buo *BookUpdateOne) ClearUpdatedBy() *BookUpdateOne {
	buo.mutation.ClearUpdatedBy()
	return buo
}

// SetDisplayName sets the "display_name" field.
func (buo *BookUpdateOne) SetDisplayName(s string) *BookUpdateOne {
	buo.mutation.SetDisplayName(s)
	return buo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableDisplayName(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetDisplayName(*s)
	}
	return buo
}

// ClearDisplayName clears the value of the "display_name" field.
func (buo *BookUpdateOne) ClearDisplayName() *BookUpdateOne {
	buo.mutation.ClearDisplayName()
	return buo
}

// SetAbbreviation sets the "abbreviation" field.
func (buo *BookUpdateOne) SetAbbreviation(s string) *BookUpdateOne {
	buo.mutation.SetAbbreviation(s)
	return buo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableAbbreviation(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetAbbreviation(*s)
	}
	return buo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (buo *BookUpdateOne) ClearAbbreviation() *BookUpdateOne {
	buo.mutation.ClearAbbreviation()
	return buo
}

// SetDescription sets the "description" field.
func (buo *BookUpdateOne) SetDescription(s string) *BookUpdateOne {
	buo.mutation.SetDescription(s)
	return buo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableDescription(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetDescription(*s)
	}
	return buo
}

// ClearDescription clears the value of the "description" field.
func (buo *BookUpdateOne) ClearDescription() *BookUpdateOne {
	buo.mutation.ClearDescription()
	return buo
}

// SetExternalLink sets the "external_link" field.
func (buo *BookUpdateOne) SetExternalLink(s string) *BookUpdateOne {
	buo.mutation.SetExternalLink(s)
	return buo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableExternalLink(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetExternalLink(*s)
	}
	return buo
}

// ClearExternalLink clears the value of the "external_link" field.
func (buo *BookUpdateOne) ClearExternalLink() *BookUpdateOne {
	buo.mutation.ClearExternalLink()
	return buo
}

// SetStatus sets the "status" field.
func (buo *BookUpdateOne) SetStatus(b book.Status) *BookUpdateOne {
	buo.mutation.SetStatus(b)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableStatus(b *book.Status) *BookUpdateOne {
	if b != nil {
		buo.SetStatus(*b)
	}
	return buo
}

// ClearStatus clears the value of the "status" field.
func (buo *BookUpdateOne) ClearStatus() *BookUpdateOne {
	buo.mutation.ClearStatus()
	return buo
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (buo *BookUpdateOne) SetPrimaryImageURL(s string) *BookUpdateOne {
	buo.mutation.SetPrimaryImageURL(s)
	return buo
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePrimaryImageURL(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetPrimaryImageURL(*s)
	}
	return buo
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (buo *BookUpdateOne) ClearPrimaryImageURL() *BookUpdateOne {
	buo.mutation.ClearPrimaryImageURL()
	return buo
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (buo *BookUpdateOne) SetAdditionalImagesUrls(s []string) *BookUpdateOne {
	buo.mutation.SetAdditionalImagesUrls(s)
	return buo
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (buo *BookUpdateOne) AppendAdditionalImagesUrls(s []string) *BookUpdateOne {
	buo.mutation.AppendAdditionalImagesUrls(s)
	return buo
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (buo *BookUpdateOne) ClearAdditionalImagesUrls() *BookUpdateOne {
	buo.mutation.ClearAdditionalImagesUrls()
	return buo
}

// SetFiles sets the "files" field.
func (buo *BookUpdateOne) SetFiles(s []string) *BookUpdateOne {
	buo.mutation.SetFiles(s)
	return buo
}

// AppendFiles appends s to the "files" field.
func (buo *BookUpdateOne) AppendFiles(s []string) *BookUpdateOne {
	buo.mutation.AppendFiles(s)
	return buo
}

// ClearFiles clears the value of the "files" field.
func (buo *BookUpdateOne) ClearFiles() *BookUpdateOne {
	buo.mutation.ClearFiles()
	return buo
}

// SetYear sets the "year" field.
func (buo *BookUpdateOne) SetYear(i int) *BookUpdateOne {
	buo.mutation.ResetYear()
	buo.mutation.SetYear(i)
	return buo
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableYear(i *int) *BookUpdateOne {
	if i != nil {
		buo.SetYear(*i)
	}
	return buo
}

// AddYear adds i to the "year" field.
func (buo *BookUpdateOne) AddYear(i int) *BookUpdateOne {
	buo.mutation.AddYear(i)
	return buo
}

// ClearYear clears the value of the "year" field.
func (buo *BookUpdateOne) ClearYear() *BookUpdateOne {
	buo.mutation.ClearYear()
	return buo
}

// AddAuthorIDs adds the "authors" edge to the Person entity by IDs.
func (buo *BookUpdateOne) AddAuthorIDs(ids ...int) *BookUpdateOne {
	buo.mutation.AddAuthorIDs(ids...)
	return buo
}

// AddAuthors adds the "authors" edges to the Person entity.
func (buo *BookUpdateOne) AddAuthors(p ...*Person) *BookUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddAuthorIDs(ids...)
}

// AddBookGenreIDs adds the "book_genres" edge to the BookGenre entity by IDs.
func (buo *BookUpdateOne) AddBookGenreIDs(ids ...int) *BookUpdateOne {
	buo.mutation.AddBookGenreIDs(ids...)
	return buo
}

// AddBookGenres adds the "book_genres" edges to the BookGenre entity.
func (buo *BookUpdateOne) AddBookGenres(b ...*BookGenre) *BookUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddBookGenreIDs(ids...)
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (buo *BookUpdateOne) SetCollectionID(id int) *BookUpdateOne {
	buo.mutation.SetCollectionID(id)
	return buo
}

// SetCollection sets the "collection" edge to the Collection entity.
func (buo *BookUpdateOne) SetCollection(c *Collection) *BookUpdateOne {
	return buo.SetCollectionID(c.ID)
}

// SetPeriodicalID sets the "periodical" edge to the Periodical entity by ID.
func (buo *BookUpdateOne) SetPeriodicalID(id int) *BookUpdateOne {
	buo.mutation.SetPeriodicalID(id)
	return buo
}

// SetNillablePeriodicalID sets the "periodical" edge to the Periodical entity by ID if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePeriodicalID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetPeriodicalID(*id)
	}
	return buo
}

// SetPeriodical sets the "periodical" edge to the Periodical entity.
func (buo *BookUpdateOne) SetPeriodical(p *Periodical) *BookUpdateOne {
	return buo.SetPeriodicalID(p.ID)
}

// SetPublisherID sets the "publisher" edge to the Publisher entity by ID.
func (buo *BookUpdateOne) SetPublisherID(id int) *BookUpdateOne {
	buo.mutation.SetPublisherID(id)
	return buo
}

// SetNillablePublisherID sets the "publisher" edge to the Publisher entity by ID if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePublisherID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetPublisherID(*id)
	}
	return buo
}

// SetPublisher sets the "publisher" edge to the Publisher entity.
func (buo *BookUpdateOne) SetPublisher(p *Publisher) *BookUpdateOne {
	return buo.SetPublisherID(p.ID)
}

// SetLicenseID sets the "license" edge to the License entity by ID.
func (buo *BookUpdateOne) SetLicenseID(id int) *BookUpdateOne {
	buo.mutation.SetLicenseID(id)
	return buo
}

// SetNillableLicenseID sets the "license" edge to the License entity by ID if the given value is not nil.
func (buo *BookUpdateOne) SetNillableLicenseID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetLicenseID(*id)
	}
	return buo
}

// SetLicense sets the "license" edge to the License entity.
func (buo *BookUpdateOne) SetLicense(l *License) *BookUpdateOne {
	return buo.SetLicenseID(l.ID)
}

// SetLocationID sets the "location" edge to the Location entity by ID.
func (buo *BookUpdateOne) SetLocationID(id int) *BookUpdateOne {
	buo.mutation.SetLocationID(id)
	return buo
}

// SetNillableLocationID sets the "location" edge to the Location entity by ID if the given value is not nil.
func (buo *BookUpdateOne) SetNillableLocationID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetLocationID(*id)
	}
	return buo
}

// SetLocation sets the "location" edge to the Location entity.
func (buo *BookUpdateOne) SetLocation(l *Location) *BookUpdateOne {
	return buo.SetLocationID(l.ID)
}

// SetLibraryID sets the "library" edge to the Organization entity by ID.
func (buo *BookUpdateOne) SetLibraryID(id int) *BookUpdateOne {
	buo.mutation.SetLibraryID(id)
	return buo
}

// SetNillableLibraryID sets the "library" edge to the Organization entity by ID if the given value is not nil.
func (buo *BookUpdateOne) SetNillableLibraryID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetLibraryID(*id)
	}
	return buo
}

// SetLibrary sets the "library" edge to the Organization entity.
func (buo *BookUpdateOne) SetLibrary(o *Organization) *BookUpdateOne {
	return buo.SetLibraryID(o.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (buo *BookUpdateOne) SetCountryID(id int) *BookUpdateOne {
	buo.mutation.SetCountryID(id)
	return buo
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (buo *BookUpdateOne) SetNillableCountryID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetCountryID(*id)
	}
	return buo
}

// SetCountry sets the "country" edge to the Country entity.
func (buo *BookUpdateOne) SetCountry(c *Country) *BookUpdateOne {
	return buo.SetCountryID(c.ID)
}

// SetSettlementID sets the "settlement" edge to the Settlement entity by ID.
func (buo *BookUpdateOne) SetSettlementID(id int) *BookUpdateOne {
	buo.mutation.SetSettlementID(id)
	return buo
}

// SetNillableSettlementID sets the "settlement" edge to the Settlement entity by ID if the given value is not nil.
func (buo *BookUpdateOne) SetNillableSettlementID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetSettlementID(*id)
	}
	return buo
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (buo *BookUpdateOne) SetSettlement(s *Settlement) *BookUpdateOne {
	return buo.SetSettlementID(s.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (buo *BookUpdateOne) SetDistrictID(id int) *BookUpdateOne {
	buo.mutation.SetDistrictID(id)
	return buo
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (buo *BookUpdateOne) SetNillableDistrictID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetDistrictID(*id)
	}
	return buo
}

// SetDistrict sets the "district" edge to the District entity.
func (buo *BookUpdateOne) SetDistrict(d *District) *BookUpdateOne {
	return buo.SetDistrictID(d.ID)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (buo *BookUpdateOne) SetRegionID(id int) *BookUpdateOne {
	buo.mutation.SetRegionID(id)
	return buo
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (buo *BookUpdateOne) SetNillableRegionID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetRegionID(*id)
	}
	return buo
}

// SetRegion sets the "region" edge to the Region entity.
func (buo *BookUpdateOne) SetRegion(r *Region) *BookUpdateOne {
	return buo.SetRegionID(r.ID)
}

// Mutation returns the BookMutation object of the builder.
func (buo *BookUpdateOne) Mutation() *BookMutation {
	return buo.mutation
}

// ClearAuthors clears all "authors" edges to the Person entity.
func (buo *BookUpdateOne) ClearAuthors() *BookUpdateOne {
	buo.mutation.ClearAuthors()
	return buo
}

// RemoveAuthorIDs removes the "authors" edge to Person entities by IDs.
func (buo *BookUpdateOne) RemoveAuthorIDs(ids ...int) *BookUpdateOne {
	buo.mutation.RemoveAuthorIDs(ids...)
	return buo
}

// RemoveAuthors removes "authors" edges to Person entities.
func (buo *BookUpdateOne) RemoveAuthors(p ...*Person) *BookUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemoveAuthorIDs(ids...)
}

// ClearBookGenres clears all "book_genres" edges to the BookGenre entity.
func (buo *BookUpdateOne) ClearBookGenres() *BookUpdateOne {
	buo.mutation.ClearBookGenres()
	return buo
}

// RemoveBookGenreIDs removes the "book_genres" edge to BookGenre entities by IDs.
func (buo *BookUpdateOne) RemoveBookGenreIDs(ids ...int) *BookUpdateOne {
	buo.mutation.RemoveBookGenreIDs(ids...)
	return buo
}

// RemoveBookGenres removes "book_genres" edges to BookGenre entities.
func (buo *BookUpdateOne) RemoveBookGenres(b ...*BookGenre) *BookUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveBookGenreIDs(ids...)
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (buo *BookUpdateOne) ClearCollection() *BookUpdateOne {
	buo.mutation.ClearCollection()
	return buo
}

// ClearPeriodical clears the "periodical" edge to the Periodical entity.
func (buo *BookUpdateOne) ClearPeriodical() *BookUpdateOne {
	buo.mutation.ClearPeriodical()
	return buo
}

// ClearPublisher clears the "publisher" edge to the Publisher entity.
func (buo *BookUpdateOne) ClearPublisher() *BookUpdateOne {
	buo.mutation.ClearPublisher()
	return buo
}

// ClearLicense clears the "license" edge to the License entity.
func (buo *BookUpdateOne) ClearLicense() *BookUpdateOne {
	buo.mutation.ClearLicense()
	return buo
}

// ClearLocation clears the "location" edge to the Location entity.
func (buo *BookUpdateOne) ClearLocation() *BookUpdateOne {
	buo.mutation.ClearLocation()
	return buo
}

// ClearLibrary clears the "library" edge to the Organization entity.
func (buo *BookUpdateOne) ClearLibrary() *BookUpdateOne {
	buo.mutation.ClearLibrary()
	return buo
}

// ClearCountry clears the "country" edge to the Country entity.
func (buo *BookUpdateOne) ClearCountry() *BookUpdateOne {
	buo.mutation.ClearCountry()
	return buo
}

// ClearSettlement clears the "settlement" edge to the Settlement entity.
func (buo *BookUpdateOne) ClearSettlement() *BookUpdateOne {
	buo.mutation.ClearSettlement()
	return buo
}

// ClearDistrict clears the "district" edge to the District entity.
func (buo *BookUpdateOne) ClearDistrict() *BookUpdateOne {
	buo.mutation.ClearDistrict()
	return buo
}

// ClearRegion clears the "region" edge to the Region entity.
func (buo *BookUpdateOne) ClearRegion() *BookUpdateOne {
	buo.mutation.ClearRegion()
	return buo
}

// Where appends a list predicates to the BookUpdate builder.
func (buo *BookUpdateOne) Where(ps ...predicate.Book) *BookUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookUpdateOne) Select(field string, fields ...string) *BookUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Book entity.
func (buo *BookUpdateOne) Save(ctx context.Context) (*Book, error) {
	if err := buo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookUpdateOne) SaveX(ctx context.Context) *Book {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BookUpdateOne) defaults() error {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		if book.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized book.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := book.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (buo *BookUpdateOne) check() error {
	if v, ok := buo.mutation.Status(); ok {
		if err := book.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Book.status": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Year(); ok {
		if err := book.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "Book.year": %w`, err)}
		}
	}
	if _, ok := buo.mutation.CollectionID(); buo.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Book.collection"`)
	}
	return nil
}

func (buo *BookUpdateOne) sqlSave(ctx context.Context) (_node *Book, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Book.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, book.FieldID)
		for _, f := range fields {
			if !book.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != book.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.CreatedBy(); ok {
		_spec.SetField(book.FieldCreatedBy, field.TypeString, value)
	}
	if buo.mutation.CreatedByCleared() {
		_spec.ClearField(book.FieldCreatedBy, field.TypeString)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(book.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedBy(); ok {
		_spec.SetField(book.FieldUpdatedBy, field.TypeString, value)
	}
	if buo.mutation.UpdatedByCleared() {
		_spec.ClearField(book.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := buo.mutation.DisplayName(); ok {
		_spec.SetField(book.FieldDisplayName, field.TypeString, value)
	}
	if buo.mutation.DisplayNameCleared() {
		_spec.ClearField(book.FieldDisplayName, field.TypeString)
	}
	if value, ok := buo.mutation.Abbreviation(); ok {
		_spec.SetField(book.FieldAbbreviation, field.TypeString, value)
	}
	if buo.mutation.AbbreviationCleared() {
		_spec.ClearField(book.FieldAbbreviation, field.TypeString)
	}
	if value, ok := buo.mutation.Description(); ok {
		_spec.SetField(book.FieldDescription, field.TypeString, value)
	}
	if buo.mutation.DescriptionCleared() {
		_spec.ClearField(book.FieldDescription, field.TypeString)
	}
	if value, ok := buo.mutation.ExternalLink(); ok {
		_spec.SetField(book.FieldExternalLink, field.TypeString, value)
	}
	if buo.mutation.ExternalLinkCleared() {
		_spec.ClearField(book.FieldExternalLink, field.TypeString)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(book.FieldStatus, field.TypeEnum, value)
	}
	if buo.mutation.StatusCleared() {
		_spec.ClearField(book.FieldStatus, field.TypeEnum)
	}
	if value, ok := buo.mutation.PrimaryImageURL(); ok {
		_spec.SetField(book.FieldPrimaryImageURL, field.TypeString, value)
	}
	if buo.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(book.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := buo.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(book.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, book.FieldAdditionalImagesUrls, value)
		})
	}
	if buo.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(book.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := buo.mutation.Files(); ok {
		_spec.SetField(book.FieldFiles, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, book.FieldFiles, value)
		})
	}
	if buo.mutation.FilesCleared() {
		_spec.ClearField(book.FieldFiles, field.TypeJSON)
	}
	if value, ok := buo.mutation.Year(); ok {
		_spec.SetField(book.FieldYear, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedYear(); ok {
		_spec.AddField(book.FieldYear, field.TypeInt, value)
	}
	if buo.mutation.YearCleared() {
		_spec.ClearField(book.FieldYear, field.TypeInt)
	}
	if buo.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedAuthorsIDs(); len(nodes) > 0 && !buo.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BookGenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.BookGenresTable,
			Columns: book.BookGenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookgenre.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBookGenresIDs(); len(nodes) > 0 && !buo.mutation.BookGenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.BookGenresTable,
			Columns: book.BookGenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookgenre.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BookGenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.BookGenresTable,
			Columns: book.BookGenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bookgenre.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CollectionTable,
			Columns: []string{book.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CollectionTable,
			Columns: []string{book.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.PeriodicalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.PeriodicalTable,
			Columns: []string{book.PeriodicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(periodical.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PeriodicalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.PeriodicalTable,
			Columns: []string{book.PeriodicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(periodical.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.PublisherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.PublisherTable,
			Columns: []string{book.PublisherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publisher.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PublisherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.PublisherTable,
			Columns: []string{book.PublisherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publisher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LicenseTable,
			Columns: []string{book.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LicenseTable,
			Columns: []string{book.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LocationTable,
			Columns: []string{book.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LocationTable,
			Columns: []string{book.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.LibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LibraryTable,
			Columns: []string{book.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.LibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.LibraryTable,
			Columns: []string{book.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CountryTable,
			Columns: []string{book.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CountryTable,
			Columns: []string{book.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.SettlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.SettlementTable,
			Columns: []string{book.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.SettlementTable,
			Columns: []string{book.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.DistrictTable,
			Columns: []string{book.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.DistrictTable,
			Columns: []string{book.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.RegionTable,
			Columns: []string{book.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.RegionTable,
			Columns: []string{book.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Book{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
