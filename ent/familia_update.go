// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/familia"
	"github.com/dkrasnovdev/siberiana-api/ent/herbarium"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
)

// FamiliaUpdate is the builder for updating Familia entities.
type FamiliaUpdate struct {
	config
	hooks    []Hook
	mutation *FamiliaMutation
}

// Where appends a list predicates to the FamiliaUpdate builder.
func (fu *FamiliaUpdate) Where(ps ...predicate.Familia) *FamiliaUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetCreatedBy sets the "created_by" field.
func (fu *FamiliaUpdate) SetCreatedBy(s string) *FamiliaUpdate {
	fu.mutation.SetCreatedBy(s)
	return fu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fu *FamiliaUpdate) SetNillableCreatedBy(s *string) *FamiliaUpdate {
	if s != nil {
		fu.SetCreatedBy(*s)
	}
	return fu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (fu *FamiliaUpdate) ClearCreatedBy() *FamiliaUpdate {
	fu.mutation.ClearCreatedBy()
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FamiliaUpdate) SetUpdatedAt(t time.Time) *FamiliaUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetUpdatedBy sets the "updated_by" field.
func (fu *FamiliaUpdate) SetUpdatedBy(s string) *FamiliaUpdate {
	fu.mutation.SetUpdatedBy(s)
	return fu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fu *FamiliaUpdate) SetNillableUpdatedBy(s *string) *FamiliaUpdate {
	if s != nil {
		fu.SetUpdatedBy(*s)
	}
	return fu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fu *FamiliaUpdate) ClearUpdatedBy() *FamiliaUpdate {
	fu.mutation.ClearUpdatedBy()
	return fu
}

// SetDisplayName sets the "display_name" field.
func (fu *FamiliaUpdate) SetDisplayName(s string) *FamiliaUpdate {
	fu.mutation.SetDisplayName(s)
	return fu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (fu *FamiliaUpdate) SetNillableDisplayName(s *string) *FamiliaUpdate {
	if s != nil {
		fu.SetDisplayName(*s)
	}
	return fu
}

// ClearDisplayName clears the value of the "display_name" field.
func (fu *FamiliaUpdate) ClearDisplayName() *FamiliaUpdate {
	fu.mutation.ClearDisplayName()
	return fu
}

// SetAbbreviation sets the "abbreviation" field.
func (fu *FamiliaUpdate) SetAbbreviation(s string) *FamiliaUpdate {
	fu.mutation.SetAbbreviation(s)
	return fu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (fu *FamiliaUpdate) SetNillableAbbreviation(s *string) *FamiliaUpdate {
	if s != nil {
		fu.SetAbbreviation(*s)
	}
	return fu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (fu *FamiliaUpdate) ClearAbbreviation() *FamiliaUpdate {
	fu.mutation.ClearAbbreviation()
	return fu
}

// SetDescription sets the "description" field.
func (fu *FamiliaUpdate) SetDescription(s string) *FamiliaUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fu *FamiliaUpdate) SetNillableDescription(s *string) *FamiliaUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// ClearDescription clears the value of the "description" field.
func (fu *FamiliaUpdate) ClearDescription() *FamiliaUpdate {
	fu.mutation.ClearDescription()
	return fu
}

// SetExternalLink sets the "external_link" field.
func (fu *FamiliaUpdate) SetExternalLink(s string) *FamiliaUpdate {
	fu.mutation.SetExternalLink(s)
	return fu
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (fu *FamiliaUpdate) SetNillableExternalLink(s *string) *FamiliaUpdate {
	if s != nil {
		fu.SetExternalLink(*s)
	}
	return fu
}

// ClearExternalLink clears the value of the "external_link" field.
func (fu *FamiliaUpdate) ClearExternalLink() *FamiliaUpdate {
	fu.mutation.ClearExternalLink()
	return fu
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (fu *FamiliaUpdate) SetPrimaryImageURL(s string) *FamiliaUpdate {
	fu.mutation.SetPrimaryImageURL(s)
	return fu
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (fu *FamiliaUpdate) SetNillablePrimaryImageURL(s *string) *FamiliaUpdate {
	if s != nil {
		fu.SetPrimaryImageURL(*s)
	}
	return fu
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (fu *FamiliaUpdate) ClearPrimaryImageURL() *FamiliaUpdate {
	fu.mutation.ClearPrimaryImageURL()
	return fu
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (fu *FamiliaUpdate) SetAdditionalImagesUrls(s []string) *FamiliaUpdate {
	fu.mutation.SetAdditionalImagesUrls(s)
	return fu
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (fu *FamiliaUpdate) AppendAdditionalImagesUrls(s []string) *FamiliaUpdate {
	fu.mutation.AppendAdditionalImagesUrls(s)
	return fu
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (fu *FamiliaUpdate) ClearAdditionalImagesUrls() *FamiliaUpdate {
	fu.mutation.ClearAdditionalImagesUrls()
	return fu
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (fu *FamiliaUpdate) AddHerbariumIDs(ids ...int) *FamiliaUpdate {
	fu.mutation.AddHerbariumIDs(ids...)
	return fu
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (fu *FamiliaUpdate) AddHerbaria(h ...*Herbarium) *FamiliaUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fu.AddHerbariumIDs(ids...)
}

// Mutation returns the FamiliaMutation object of the builder.
func (fu *FamiliaUpdate) Mutation() *FamiliaMutation {
	return fu.mutation
}

// ClearHerbaria clears all "herbaria" edges to the Herbarium entity.
func (fu *FamiliaUpdate) ClearHerbaria() *FamiliaUpdate {
	fu.mutation.ClearHerbaria()
	return fu
}

// RemoveHerbariumIDs removes the "herbaria" edge to Herbarium entities by IDs.
func (fu *FamiliaUpdate) RemoveHerbariumIDs(ids ...int) *FamiliaUpdate {
	fu.mutation.RemoveHerbariumIDs(ids...)
	return fu
}

// RemoveHerbaria removes "herbaria" edges to Herbarium entities.
func (fu *FamiliaUpdate) RemoveHerbaria(h ...*Herbarium) *FamiliaUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fu.RemoveHerbariumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FamiliaUpdate) Save(ctx context.Context) (int, error) {
	if err := fu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FamiliaUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FamiliaUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FamiliaUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FamiliaUpdate) defaults() error {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		if familia.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized familia.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := familia.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (fu *FamiliaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(familia.Table, familia.Columns, sqlgraph.NewFieldSpec(familia.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.CreatedBy(); ok {
		_spec.SetField(familia.FieldCreatedBy, field.TypeString, value)
	}
	if fu.mutation.CreatedByCleared() {
		_spec.ClearField(familia.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(familia.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.UpdatedBy(); ok {
		_spec.SetField(familia.FieldUpdatedBy, field.TypeString, value)
	}
	if fu.mutation.UpdatedByCleared() {
		_spec.ClearField(familia.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := fu.mutation.DisplayName(); ok {
		_spec.SetField(familia.FieldDisplayName, field.TypeString, value)
	}
	if fu.mutation.DisplayNameCleared() {
		_spec.ClearField(familia.FieldDisplayName, field.TypeString)
	}
	if value, ok := fu.mutation.Abbreviation(); ok {
		_spec.SetField(familia.FieldAbbreviation, field.TypeString, value)
	}
	if fu.mutation.AbbreviationCleared() {
		_spec.ClearField(familia.FieldAbbreviation, field.TypeString)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(familia.FieldDescription, field.TypeString, value)
	}
	if fu.mutation.DescriptionCleared() {
		_spec.ClearField(familia.FieldDescription, field.TypeString)
	}
	if value, ok := fu.mutation.ExternalLink(); ok {
		_spec.SetField(familia.FieldExternalLink, field.TypeString, value)
	}
	if fu.mutation.ExternalLinkCleared() {
		_spec.ClearField(familia.FieldExternalLink, field.TypeString)
	}
	if value, ok := fu.mutation.PrimaryImageURL(); ok {
		_spec.SetField(familia.FieldPrimaryImageURL, field.TypeString, value)
	}
	if fu.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(familia.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := fu.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(familia.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, familia.FieldAdditionalImagesUrls, value)
		})
	}
	if fu.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(familia.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if fu.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   familia.HerbariaTable,
			Columns: []string{familia.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedHerbariaIDs(); len(nodes) > 0 && !fu.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   familia.HerbariaTable,
			Columns: []string{familia.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   familia.HerbariaTable,
			Columns: []string{familia.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{familia.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FamiliaUpdateOne is the builder for updating a single Familia entity.
type FamiliaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FamiliaMutation
}

// SetCreatedBy sets the "created_by" field.
func (fuo *FamiliaUpdateOne) SetCreatedBy(s string) *FamiliaUpdateOne {
	fuo.mutation.SetCreatedBy(s)
	return fuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fuo *FamiliaUpdateOne) SetNillableCreatedBy(s *string) *FamiliaUpdateOne {
	if s != nil {
		fuo.SetCreatedBy(*s)
	}
	return fuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (fuo *FamiliaUpdateOne) ClearCreatedBy() *FamiliaUpdateOne {
	fuo.mutation.ClearCreatedBy()
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FamiliaUpdateOne) SetUpdatedAt(t time.Time) *FamiliaUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetUpdatedBy sets the "updated_by" field.
func (fuo *FamiliaUpdateOne) SetUpdatedBy(s string) *FamiliaUpdateOne {
	fuo.mutation.SetUpdatedBy(s)
	return fuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fuo *FamiliaUpdateOne) SetNillableUpdatedBy(s *string) *FamiliaUpdateOne {
	if s != nil {
		fuo.SetUpdatedBy(*s)
	}
	return fuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fuo *FamiliaUpdateOne) ClearUpdatedBy() *FamiliaUpdateOne {
	fuo.mutation.ClearUpdatedBy()
	return fuo
}

// SetDisplayName sets the "display_name" field.
func (fuo *FamiliaUpdateOne) SetDisplayName(s string) *FamiliaUpdateOne {
	fuo.mutation.SetDisplayName(s)
	return fuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (fuo *FamiliaUpdateOne) SetNillableDisplayName(s *string) *FamiliaUpdateOne {
	if s != nil {
		fuo.SetDisplayName(*s)
	}
	return fuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (fuo *FamiliaUpdateOne) ClearDisplayName() *FamiliaUpdateOne {
	fuo.mutation.ClearDisplayName()
	return fuo
}

// SetAbbreviation sets the "abbreviation" field.
func (fuo *FamiliaUpdateOne) SetAbbreviation(s string) *FamiliaUpdateOne {
	fuo.mutation.SetAbbreviation(s)
	return fuo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (fuo *FamiliaUpdateOne) SetNillableAbbreviation(s *string) *FamiliaUpdateOne {
	if s != nil {
		fuo.SetAbbreviation(*s)
	}
	return fuo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (fuo *FamiliaUpdateOne) ClearAbbreviation() *FamiliaUpdateOne {
	fuo.mutation.ClearAbbreviation()
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FamiliaUpdateOne) SetDescription(s string) *FamiliaUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuo *FamiliaUpdateOne) SetNillableDescription(s *string) *FamiliaUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// ClearDescription clears the value of the "description" field.
func (fuo *FamiliaUpdateOne) ClearDescription() *FamiliaUpdateOne {
	fuo.mutation.ClearDescription()
	return fuo
}

// SetExternalLink sets the "external_link" field.
func (fuo *FamiliaUpdateOne) SetExternalLink(s string) *FamiliaUpdateOne {
	fuo.mutation.SetExternalLink(s)
	return fuo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (fuo *FamiliaUpdateOne) SetNillableExternalLink(s *string) *FamiliaUpdateOne {
	if s != nil {
		fuo.SetExternalLink(*s)
	}
	return fuo
}

// ClearExternalLink clears the value of the "external_link" field.
func (fuo *FamiliaUpdateOne) ClearExternalLink() *FamiliaUpdateOne {
	fuo.mutation.ClearExternalLink()
	return fuo
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (fuo *FamiliaUpdateOne) SetPrimaryImageURL(s string) *FamiliaUpdateOne {
	fuo.mutation.SetPrimaryImageURL(s)
	return fuo
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (fuo *FamiliaUpdateOne) SetNillablePrimaryImageURL(s *string) *FamiliaUpdateOne {
	if s != nil {
		fuo.SetPrimaryImageURL(*s)
	}
	return fuo
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (fuo *FamiliaUpdateOne) ClearPrimaryImageURL() *FamiliaUpdateOne {
	fuo.mutation.ClearPrimaryImageURL()
	return fuo
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (fuo *FamiliaUpdateOne) SetAdditionalImagesUrls(s []string) *FamiliaUpdateOne {
	fuo.mutation.SetAdditionalImagesUrls(s)
	return fuo
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (fuo *FamiliaUpdateOne) AppendAdditionalImagesUrls(s []string) *FamiliaUpdateOne {
	fuo.mutation.AppendAdditionalImagesUrls(s)
	return fuo
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (fuo *FamiliaUpdateOne) ClearAdditionalImagesUrls() *FamiliaUpdateOne {
	fuo.mutation.ClearAdditionalImagesUrls()
	return fuo
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (fuo *FamiliaUpdateOne) AddHerbariumIDs(ids ...int) *FamiliaUpdateOne {
	fuo.mutation.AddHerbariumIDs(ids...)
	return fuo
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (fuo *FamiliaUpdateOne) AddHerbaria(h ...*Herbarium) *FamiliaUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fuo.AddHerbariumIDs(ids...)
}

// Mutation returns the FamiliaMutation object of the builder.
func (fuo *FamiliaUpdateOne) Mutation() *FamiliaMutation {
	return fuo.mutation
}

// ClearHerbaria clears all "herbaria" edges to the Herbarium entity.
func (fuo *FamiliaUpdateOne) ClearHerbaria() *FamiliaUpdateOne {
	fuo.mutation.ClearHerbaria()
	return fuo
}

// RemoveHerbariumIDs removes the "herbaria" edge to Herbarium entities by IDs.
func (fuo *FamiliaUpdateOne) RemoveHerbariumIDs(ids ...int) *FamiliaUpdateOne {
	fuo.mutation.RemoveHerbariumIDs(ids...)
	return fuo
}

// RemoveHerbaria removes "herbaria" edges to Herbarium entities.
func (fuo *FamiliaUpdateOne) RemoveHerbaria(h ...*Herbarium) *FamiliaUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fuo.RemoveHerbariumIDs(ids...)
}

// Where appends a list predicates to the FamiliaUpdate builder.
func (fuo *FamiliaUpdateOne) Where(ps ...predicate.Familia) *FamiliaUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FamiliaUpdateOne) Select(field string, fields ...string) *FamiliaUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Familia entity.
func (fuo *FamiliaUpdateOne) Save(ctx context.Context) (*Familia, error) {
	if err := fuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FamiliaUpdateOne) SaveX(ctx context.Context) *Familia {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FamiliaUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FamiliaUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FamiliaUpdateOne) defaults() error {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		if familia.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized familia.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := familia.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (fuo *FamiliaUpdateOne) sqlSave(ctx context.Context) (_node *Familia, err error) {
	_spec := sqlgraph.NewUpdateSpec(familia.Table, familia.Columns, sqlgraph.NewFieldSpec(familia.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Familia.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, familia.FieldID)
		for _, f := range fields {
			if !familia.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != familia.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.CreatedBy(); ok {
		_spec.SetField(familia.FieldCreatedBy, field.TypeString, value)
	}
	if fuo.mutation.CreatedByCleared() {
		_spec.ClearField(familia.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(familia.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.UpdatedBy(); ok {
		_spec.SetField(familia.FieldUpdatedBy, field.TypeString, value)
	}
	if fuo.mutation.UpdatedByCleared() {
		_spec.ClearField(familia.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := fuo.mutation.DisplayName(); ok {
		_spec.SetField(familia.FieldDisplayName, field.TypeString, value)
	}
	if fuo.mutation.DisplayNameCleared() {
		_spec.ClearField(familia.FieldDisplayName, field.TypeString)
	}
	if value, ok := fuo.mutation.Abbreviation(); ok {
		_spec.SetField(familia.FieldAbbreviation, field.TypeString, value)
	}
	if fuo.mutation.AbbreviationCleared() {
		_spec.ClearField(familia.FieldAbbreviation, field.TypeString)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(familia.FieldDescription, field.TypeString, value)
	}
	if fuo.mutation.DescriptionCleared() {
		_spec.ClearField(familia.FieldDescription, field.TypeString)
	}
	if value, ok := fuo.mutation.ExternalLink(); ok {
		_spec.SetField(familia.FieldExternalLink, field.TypeString, value)
	}
	if fuo.mutation.ExternalLinkCleared() {
		_spec.ClearField(familia.FieldExternalLink, field.TypeString)
	}
	if value, ok := fuo.mutation.PrimaryImageURL(); ok {
		_spec.SetField(familia.FieldPrimaryImageURL, field.TypeString, value)
	}
	if fuo.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(familia.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := fuo.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(familia.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, familia.FieldAdditionalImagesUrls, value)
		})
	}
	if fuo.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(familia.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if fuo.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   familia.HerbariaTable,
			Columns: []string{familia.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedHerbariaIDs(); len(nodes) > 0 && !fuo.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   familia.HerbariaTable,
			Columns: []string{familia.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   familia.HerbariaTable,
			Columns: []string{familia.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Familia{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{familia.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
