// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/personalcollection"
)

// PersonalCollection is the model entity for the PersonalCollection schema.
type PersonalCollection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonalCollectionQuery when eager-loading is set.
	Edges        PersonalCollectionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PersonalCollectionEdges holds the relations/edges for other nodes in the graph.
type PersonalCollectionEdges struct {
	// Art holds the value of the art edge.
	Art []*Art `json:"art,omitempty"`
	// Artifacts holds the value of the artifacts edge.
	Artifacts []*Artifact `json:"artifacts,omitempty"`
	// Books holds the value of the books edge.
	Books []*Book `json:"books,omitempty"`
	// Dendrochronology holds the value of the dendrochronology edge.
	Dendrochronology []*Dendrochronology `json:"dendrochronology,omitempty"`
	// Herbaria holds the value of the herbaria edge.
	Herbaria []*Herbarium `json:"herbaria,omitempty"`
	// Petroglyphs holds the value of the petroglyphs edge.
	Petroglyphs []*Petroglyph `json:"petroglyphs,omitempty"`
	// ProtectedAreaPictures holds the value of the protected_area_pictures edge.
	ProtectedAreaPictures []*ProtectedAreaPicture `json:"protected_area_pictures,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
	// totalCount holds the count of the edges above.
	totalCount [7]map[string]int

	namedArt                   map[string][]*Art
	namedArtifacts             map[string][]*Artifact
	namedBooks                 map[string][]*Book
	namedDendrochronology      map[string][]*Dendrochronology
	namedHerbaria              map[string][]*Herbarium
	namedPetroglyphs           map[string][]*Petroglyph
	namedProtectedAreaPictures map[string][]*ProtectedAreaPicture
}

// ArtOrErr returns the Art value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalCollectionEdges) ArtOrErr() ([]*Art, error) {
	if e.loadedTypes[0] {
		return e.Art, nil
	}
	return nil, &NotLoadedError{edge: "art"}
}

// ArtifactsOrErr returns the Artifacts value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalCollectionEdges) ArtifactsOrErr() ([]*Artifact, error) {
	if e.loadedTypes[1] {
		return e.Artifacts, nil
	}
	return nil, &NotLoadedError{edge: "artifacts"}
}

// BooksOrErr returns the Books value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalCollectionEdges) BooksOrErr() ([]*Book, error) {
	if e.loadedTypes[2] {
		return e.Books, nil
	}
	return nil, &NotLoadedError{edge: "books"}
}

// DendrochronologyOrErr returns the Dendrochronology value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalCollectionEdges) DendrochronologyOrErr() ([]*Dendrochronology, error) {
	if e.loadedTypes[3] {
		return e.Dendrochronology, nil
	}
	return nil, &NotLoadedError{edge: "dendrochronology"}
}

// HerbariaOrErr returns the Herbaria value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalCollectionEdges) HerbariaOrErr() ([]*Herbarium, error) {
	if e.loadedTypes[4] {
		return e.Herbaria, nil
	}
	return nil, &NotLoadedError{edge: "herbaria"}
}

// PetroglyphsOrErr returns the Petroglyphs value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalCollectionEdges) PetroglyphsOrErr() ([]*Petroglyph, error) {
	if e.loadedTypes[5] {
		return e.Petroglyphs, nil
	}
	return nil, &NotLoadedError{edge: "petroglyphs"}
}

// ProtectedAreaPicturesOrErr returns the ProtectedAreaPictures value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalCollectionEdges) ProtectedAreaPicturesOrErr() ([]*ProtectedAreaPicture, error) {
	if e.loadedTypes[6] {
		return e.ProtectedAreaPictures, nil
	}
	return nil, &NotLoadedError{edge: "protected_area_pictures"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PersonalCollection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case personalcollection.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case personalcollection.FieldID:
			values[i] = new(sql.NullInt64)
		case personalcollection.FieldCreatedBy, personalcollection.FieldUpdatedBy, personalcollection.FieldDisplayName:
			values[i] = new(sql.NullString)
		case personalcollection.FieldCreatedAt, personalcollection.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PersonalCollection fields.
func (pc *PersonalCollection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personalcollection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = int(value.Int64)
		case personalcollection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pc.CreatedAt = value.Time
			}
		case personalcollection.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pc.CreatedBy = value.String
			}
		case personalcollection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pc.UpdatedAt = value.Time
			}
		case personalcollection.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pc.UpdatedBy = value.String
			}
		case personalcollection.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				pc.DisplayName = value.String
			}
		case personalcollection.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				pc.IsPublic = value.Bool
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PersonalCollection.
// This includes values selected through modifiers, order, etc.
func (pc *PersonalCollection) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QueryArt queries the "art" edge of the PersonalCollection entity.
func (pc *PersonalCollection) QueryArt() *ArtQuery {
	return NewPersonalCollectionClient(pc.config).QueryArt(pc)
}

// QueryArtifacts queries the "artifacts" edge of the PersonalCollection entity.
func (pc *PersonalCollection) QueryArtifacts() *ArtifactQuery {
	return NewPersonalCollectionClient(pc.config).QueryArtifacts(pc)
}

// QueryBooks queries the "books" edge of the PersonalCollection entity.
func (pc *PersonalCollection) QueryBooks() *BookQuery {
	return NewPersonalCollectionClient(pc.config).QueryBooks(pc)
}

// QueryDendrochronology queries the "dendrochronology" edge of the PersonalCollection entity.
func (pc *PersonalCollection) QueryDendrochronology() *DendrochronologyQuery {
	return NewPersonalCollectionClient(pc.config).QueryDendrochronology(pc)
}

// QueryHerbaria queries the "herbaria" edge of the PersonalCollection entity.
func (pc *PersonalCollection) QueryHerbaria() *HerbariumQuery {
	return NewPersonalCollectionClient(pc.config).QueryHerbaria(pc)
}

// QueryPetroglyphs queries the "petroglyphs" edge of the PersonalCollection entity.
func (pc *PersonalCollection) QueryPetroglyphs() *PetroglyphQuery {
	return NewPersonalCollectionClient(pc.config).QueryPetroglyphs(pc)
}

// QueryProtectedAreaPictures queries the "protected_area_pictures" edge of the PersonalCollection entity.
func (pc *PersonalCollection) QueryProtectedAreaPictures() *ProtectedAreaPictureQuery {
	return NewPersonalCollectionClient(pc.config).QueryProtectedAreaPictures(pc)
}

// Update returns a builder for updating this PersonalCollection.
// Note that you need to call PersonalCollection.Unwrap() before calling this method if this PersonalCollection
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PersonalCollection) Update() *PersonalCollectionUpdateOne {
	return NewPersonalCollectionClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the PersonalCollection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PersonalCollection) Unwrap() *PersonalCollection {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PersonalCollection is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PersonalCollection) String() string {
	var builder strings.Builder
	builder.WriteString("PersonalCollection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pc.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pc.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(pc.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", pc.IsPublic))
	builder.WriteByte(')')
	return builder.String()
}

// NamedArt returns the Art named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *PersonalCollection) NamedArt(name string) ([]*Art, error) {
	if pc.Edges.namedArt == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedArt[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *PersonalCollection) appendNamedArt(name string, edges ...*Art) {
	if pc.Edges.namedArt == nil {
		pc.Edges.namedArt = make(map[string][]*Art)
	}
	if len(edges) == 0 {
		pc.Edges.namedArt[name] = []*Art{}
	} else {
		pc.Edges.namedArt[name] = append(pc.Edges.namedArt[name], edges...)
	}
}

// NamedArtifacts returns the Artifacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *PersonalCollection) NamedArtifacts(name string) ([]*Artifact, error) {
	if pc.Edges.namedArtifacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedArtifacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *PersonalCollection) appendNamedArtifacts(name string, edges ...*Artifact) {
	if pc.Edges.namedArtifacts == nil {
		pc.Edges.namedArtifacts = make(map[string][]*Artifact)
	}
	if len(edges) == 0 {
		pc.Edges.namedArtifacts[name] = []*Artifact{}
	} else {
		pc.Edges.namedArtifacts[name] = append(pc.Edges.namedArtifacts[name], edges...)
	}
}

// NamedBooks returns the Books named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *PersonalCollection) NamedBooks(name string) ([]*Book, error) {
	if pc.Edges.namedBooks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedBooks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *PersonalCollection) appendNamedBooks(name string, edges ...*Book) {
	if pc.Edges.namedBooks == nil {
		pc.Edges.namedBooks = make(map[string][]*Book)
	}
	if len(edges) == 0 {
		pc.Edges.namedBooks[name] = []*Book{}
	} else {
		pc.Edges.namedBooks[name] = append(pc.Edges.namedBooks[name], edges...)
	}
}

// NamedDendrochronology returns the Dendrochronology named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *PersonalCollection) NamedDendrochronology(name string) ([]*Dendrochronology, error) {
	if pc.Edges.namedDendrochronology == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedDendrochronology[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *PersonalCollection) appendNamedDendrochronology(name string, edges ...*Dendrochronology) {
	if pc.Edges.namedDendrochronology == nil {
		pc.Edges.namedDendrochronology = make(map[string][]*Dendrochronology)
	}
	if len(edges) == 0 {
		pc.Edges.namedDendrochronology[name] = []*Dendrochronology{}
	} else {
		pc.Edges.namedDendrochronology[name] = append(pc.Edges.namedDendrochronology[name], edges...)
	}
}

// NamedHerbaria returns the Herbaria named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *PersonalCollection) NamedHerbaria(name string) ([]*Herbarium, error) {
	if pc.Edges.namedHerbaria == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedHerbaria[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *PersonalCollection) appendNamedHerbaria(name string, edges ...*Herbarium) {
	if pc.Edges.namedHerbaria == nil {
		pc.Edges.namedHerbaria = make(map[string][]*Herbarium)
	}
	if len(edges) == 0 {
		pc.Edges.namedHerbaria[name] = []*Herbarium{}
	} else {
		pc.Edges.namedHerbaria[name] = append(pc.Edges.namedHerbaria[name], edges...)
	}
}

// NamedPetroglyphs returns the Petroglyphs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *PersonalCollection) NamedPetroglyphs(name string) ([]*Petroglyph, error) {
	if pc.Edges.namedPetroglyphs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedPetroglyphs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *PersonalCollection) appendNamedPetroglyphs(name string, edges ...*Petroglyph) {
	if pc.Edges.namedPetroglyphs == nil {
		pc.Edges.namedPetroglyphs = make(map[string][]*Petroglyph)
	}
	if len(edges) == 0 {
		pc.Edges.namedPetroglyphs[name] = []*Petroglyph{}
	} else {
		pc.Edges.namedPetroglyphs[name] = append(pc.Edges.namedPetroglyphs[name], edges...)
	}
}

// NamedProtectedAreaPictures returns the ProtectedAreaPictures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pc *PersonalCollection) NamedProtectedAreaPictures(name string) ([]*ProtectedAreaPicture, error) {
	if pc.Edges.namedProtectedAreaPictures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pc.Edges.namedProtectedAreaPictures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pc *PersonalCollection) appendNamedProtectedAreaPictures(name string, edges ...*ProtectedAreaPicture) {
	if pc.Edges.namedProtectedAreaPictures == nil {
		pc.Edges.namedProtectedAreaPictures = make(map[string][]*ProtectedAreaPicture)
	}
	if len(edges) == 0 {
		pc.Edges.namedProtectedAreaPictures[name] = []*ProtectedAreaPicture{}
	} else {
		pc.Edges.namedProtectedAreaPictures[name] = append(pc.Edges.namedProtectedAreaPictures[name], edges...)
	}
}

// PersonalCollections is a parsable slice of PersonalCollection.
type PersonalCollections []*PersonalCollection
