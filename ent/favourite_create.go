// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/favourite"
)

// FavouriteCreate is the builder for creating a Favourite entity.
type FavouriteCreate struct {
	config
	mutation *FavouriteMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fc *FavouriteCreate) SetCreatedAt(t time.Time) *FavouriteCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FavouriteCreate) SetNillableCreatedAt(t *time.Time) *FavouriteCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetCreatedBy sets the "created_by" field.
func (fc *FavouriteCreate) SetCreatedBy(s string) *FavouriteCreate {
	fc.mutation.SetCreatedBy(s)
	return fc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fc *FavouriteCreate) SetNillableCreatedBy(s *string) *FavouriteCreate {
	if s != nil {
		fc.SetCreatedBy(*s)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FavouriteCreate) SetUpdatedAt(t time.Time) *FavouriteCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FavouriteCreate) SetNillableUpdatedAt(t *time.Time) *FavouriteCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetUpdatedBy sets the "updated_by" field.
func (fc *FavouriteCreate) SetUpdatedBy(s string) *FavouriteCreate {
	fc.mutation.SetUpdatedBy(s)
	return fc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fc *FavouriteCreate) SetNillableUpdatedBy(s *string) *FavouriteCreate {
	if s != nil {
		fc.SetUpdatedBy(*s)
	}
	return fc
}

// SetOwnerID sets the "owner_id" field.
func (fc *FavouriteCreate) SetOwnerID(s string) *FavouriteCreate {
	fc.mutation.SetOwnerID(s)
	return fc
}

// Mutation returns the FavouriteMutation object of the builder.
func (fc *FavouriteCreate) Mutation() *FavouriteMutation {
	return fc.mutation
}

// Save creates the Favourite in the database.
func (fc *FavouriteCreate) Save(ctx context.Context) (*Favourite, error) {
	if err := fc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FavouriteCreate) SaveX(ctx context.Context) *Favourite {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FavouriteCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FavouriteCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FavouriteCreate) defaults() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		if favourite.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized favourite.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := favourite.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		if favourite.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized favourite.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := favourite.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fc *FavouriteCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Favourite.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Favourite.updated_at"`)}
	}
	if _, ok := fc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "Favourite.owner_id"`)}
	}
	if v, ok := fc.mutation.OwnerID(); ok {
		if err := favourite.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`ent: validator failed for field "Favourite.owner_id": %w`, err)}
		}
	}
	return nil
}

func (fc *FavouriteCreate) sqlSave(ctx context.Context) (*Favourite, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FavouriteCreate) createSpec() (*Favourite, *sqlgraph.CreateSpec) {
	var (
		_node = &Favourite{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(favourite.Table, sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt))
	)
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(favourite.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.CreatedBy(); ok {
		_spec.SetField(favourite.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(favourite.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.UpdatedBy(); ok {
		_spec.SetField(favourite.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := fc.mutation.OwnerID(); ok {
		_spec.SetField(favourite.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	return _node, _spec
}

// FavouriteCreateBulk is the builder for creating many Favourite entities in bulk.
type FavouriteCreateBulk struct {
	config
	err      error
	builders []*FavouriteCreate
}

// Save creates the Favourite entities in the database.
func (fcb *FavouriteCreateBulk) Save(ctx context.Context) ([]*Favourite, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Favourite, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FavouriteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FavouriteCreateBulk) SaveX(ctx context.Context) []*Favourite {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FavouriteCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FavouriteCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
