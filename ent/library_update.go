// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/book"
	"github.com/dkrasnovdev/heritage-api/ent/library"
	"github.com/dkrasnovdev/heritage-api/ent/predicate"
)

// LibraryUpdate is the builder for updating Library entities.
type LibraryUpdate struct {
	config
	hooks    []Hook
	mutation *LibraryMutation
}

// Where appends a list predicates to the LibraryUpdate builder.
func (lu *LibraryUpdate) Where(ps ...predicate.Library) *LibraryUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetCreatedBy sets the "created_by" field.
func (lu *LibraryUpdate) SetCreatedBy(s string) *LibraryUpdate {
	lu.mutation.SetCreatedBy(s)
	return lu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lu *LibraryUpdate) SetNillableCreatedBy(s *string) *LibraryUpdate {
	if s != nil {
		lu.SetCreatedBy(*s)
	}
	return lu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (lu *LibraryUpdate) ClearCreatedBy() *LibraryUpdate {
	lu.mutation.ClearCreatedBy()
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LibraryUpdate) SetUpdatedAt(t time.Time) *LibraryUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetUpdatedBy sets the "updated_by" field.
func (lu *LibraryUpdate) SetUpdatedBy(s string) *LibraryUpdate {
	lu.mutation.SetUpdatedBy(s)
	return lu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lu *LibraryUpdate) SetNillableUpdatedBy(s *string) *LibraryUpdate {
	if s != nil {
		lu.SetUpdatedBy(*s)
	}
	return lu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (lu *LibraryUpdate) ClearUpdatedBy() *LibraryUpdate {
	lu.mutation.ClearUpdatedBy()
	return lu
}

// SetAbbreviation sets the "abbreviation" field.
func (lu *LibraryUpdate) SetAbbreviation(s string) *LibraryUpdate {
	lu.mutation.SetAbbreviation(s)
	return lu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (lu *LibraryUpdate) SetNillableAbbreviation(s *string) *LibraryUpdate {
	if s != nil {
		lu.SetAbbreviation(*s)
	}
	return lu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (lu *LibraryUpdate) ClearAbbreviation() *LibraryUpdate {
	lu.mutation.ClearAbbreviation()
	return lu
}

// SetDisplayName sets the "display_name" field.
func (lu *LibraryUpdate) SetDisplayName(s string) *LibraryUpdate {
	lu.mutation.SetDisplayName(s)
	return lu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (lu *LibraryUpdate) SetNillableDisplayName(s *string) *LibraryUpdate {
	if s != nil {
		lu.SetDisplayName(*s)
	}
	return lu
}

// ClearDisplayName clears the value of the "display_name" field.
func (lu *LibraryUpdate) ClearDisplayName() *LibraryUpdate {
	lu.mutation.ClearDisplayName()
	return lu
}

// SetDescription sets the "description" field.
func (lu *LibraryUpdate) SetDescription(s string) *LibraryUpdate {
	lu.mutation.SetDescription(s)
	return lu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lu *LibraryUpdate) SetNillableDescription(s *string) *LibraryUpdate {
	if s != nil {
		lu.SetDescription(*s)
	}
	return lu
}

// ClearDescription clears the value of the "description" field.
func (lu *LibraryUpdate) ClearDescription() *LibraryUpdate {
	lu.mutation.ClearDescription()
	return lu
}

// SetExternalLinks sets the "external_links" field.
func (lu *LibraryUpdate) SetExternalLinks(s []string) *LibraryUpdate {
	lu.mutation.SetExternalLinks(s)
	return lu
}

// AppendExternalLinks appends s to the "external_links" field.
func (lu *LibraryUpdate) AppendExternalLinks(s []string) *LibraryUpdate {
	lu.mutation.AppendExternalLinks(s)
	return lu
}

// ClearExternalLinks clears the value of the "external_links" field.
func (lu *LibraryUpdate) ClearExternalLinks() *LibraryUpdate {
	lu.mutation.ClearExternalLinks()
	return lu
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (lu *LibraryUpdate) AddBookIDs(ids ...int) *LibraryUpdate {
	lu.mutation.AddBookIDs(ids...)
	return lu
}

// AddBooks adds the "books" edges to the Book entity.
func (lu *LibraryUpdate) AddBooks(b ...*Book) *LibraryUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lu.AddBookIDs(ids...)
}

// Mutation returns the LibraryMutation object of the builder.
func (lu *LibraryUpdate) Mutation() *LibraryMutation {
	return lu.mutation
}

// ClearBooks clears all "books" edges to the Book entity.
func (lu *LibraryUpdate) ClearBooks() *LibraryUpdate {
	lu.mutation.ClearBooks()
	return lu
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (lu *LibraryUpdate) RemoveBookIDs(ids ...int) *LibraryUpdate {
	lu.mutation.RemoveBookIDs(ids...)
	return lu
}

// RemoveBooks removes "books" edges to Book entities.
func (lu *LibraryUpdate) RemoveBooks(b ...*Book) *LibraryUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lu.RemoveBookIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LibraryUpdate) Save(ctx context.Context) (int, error) {
	if err := lu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LibraryUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LibraryUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LibraryUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LibraryUpdate) defaults() error {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		if library.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized library.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := library.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (lu *LibraryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(library.Table, library.Columns, sqlgraph.NewFieldSpec(library.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.CreatedBy(); ok {
		_spec.SetField(library.FieldCreatedBy, field.TypeString, value)
	}
	if lu.mutation.CreatedByCleared() {
		_spec.ClearField(library.FieldCreatedBy, field.TypeString)
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(library.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.UpdatedBy(); ok {
		_spec.SetField(library.FieldUpdatedBy, field.TypeString, value)
	}
	if lu.mutation.UpdatedByCleared() {
		_spec.ClearField(library.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := lu.mutation.Abbreviation(); ok {
		_spec.SetField(library.FieldAbbreviation, field.TypeString, value)
	}
	if lu.mutation.AbbreviationCleared() {
		_spec.ClearField(library.FieldAbbreviation, field.TypeString)
	}
	if value, ok := lu.mutation.DisplayName(); ok {
		_spec.SetField(library.FieldDisplayName, field.TypeString, value)
	}
	if lu.mutation.DisplayNameCleared() {
		_spec.ClearField(library.FieldDisplayName, field.TypeString)
	}
	if value, ok := lu.mutation.Description(); ok {
		_spec.SetField(library.FieldDescription, field.TypeString, value)
	}
	if lu.mutation.DescriptionCleared() {
		_spec.ClearField(library.FieldDescription, field.TypeString)
	}
	if value, ok := lu.mutation.ExternalLinks(); ok {
		_spec.SetField(library.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := lu.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, library.FieldExternalLinks, value)
		})
	}
	if lu.mutation.ExternalLinksCleared() {
		_spec.ClearField(library.FieldExternalLinks, field.TypeJSON)
	}
	if lu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   library.BooksTable,
			Columns: []string{library.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedBooksIDs(); len(nodes) > 0 && !lu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   library.BooksTable,
			Columns: []string{library.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   library.BooksTable,
			Columns: []string{library.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{library.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LibraryUpdateOne is the builder for updating a single Library entity.
type LibraryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LibraryMutation
}

// SetCreatedBy sets the "created_by" field.
func (luo *LibraryUpdateOne) SetCreatedBy(s string) *LibraryUpdateOne {
	luo.mutation.SetCreatedBy(s)
	return luo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (luo *LibraryUpdateOne) SetNillableCreatedBy(s *string) *LibraryUpdateOne {
	if s != nil {
		luo.SetCreatedBy(*s)
	}
	return luo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (luo *LibraryUpdateOne) ClearCreatedBy() *LibraryUpdateOne {
	luo.mutation.ClearCreatedBy()
	return luo
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LibraryUpdateOne) SetUpdatedAt(t time.Time) *LibraryUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetUpdatedBy sets the "updated_by" field.
func (luo *LibraryUpdateOne) SetUpdatedBy(s string) *LibraryUpdateOne {
	luo.mutation.SetUpdatedBy(s)
	return luo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (luo *LibraryUpdateOne) SetNillableUpdatedBy(s *string) *LibraryUpdateOne {
	if s != nil {
		luo.SetUpdatedBy(*s)
	}
	return luo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (luo *LibraryUpdateOne) ClearUpdatedBy() *LibraryUpdateOne {
	luo.mutation.ClearUpdatedBy()
	return luo
}

// SetAbbreviation sets the "abbreviation" field.
func (luo *LibraryUpdateOne) SetAbbreviation(s string) *LibraryUpdateOne {
	luo.mutation.SetAbbreviation(s)
	return luo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (luo *LibraryUpdateOne) SetNillableAbbreviation(s *string) *LibraryUpdateOne {
	if s != nil {
		luo.SetAbbreviation(*s)
	}
	return luo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (luo *LibraryUpdateOne) ClearAbbreviation() *LibraryUpdateOne {
	luo.mutation.ClearAbbreviation()
	return luo
}

// SetDisplayName sets the "display_name" field.
func (luo *LibraryUpdateOne) SetDisplayName(s string) *LibraryUpdateOne {
	luo.mutation.SetDisplayName(s)
	return luo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (luo *LibraryUpdateOne) SetNillableDisplayName(s *string) *LibraryUpdateOne {
	if s != nil {
		luo.SetDisplayName(*s)
	}
	return luo
}

// ClearDisplayName clears the value of the "display_name" field.
func (luo *LibraryUpdateOne) ClearDisplayName() *LibraryUpdateOne {
	luo.mutation.ClearDisplayName()
	return luo
}

// SetDescription sets the "description" field.
func (luo *LibraryUpdateOne) SetDescription(s string) *LibraryUpdateOne {
	luo.mutation.SetDescription(s)
	return luo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (luo *LibraryUpdateOne) SetNillableDescription(s *string) *LibraryUpdateOne {
	if s != nil {
		luo.SetDescription(*s)
	}
	return luo
}

// ClearDescription clears the value of the "description" field.
func (luo *LibraryUpdateOne) ClearDescription() *LibraryUpdateOne {
	luo.mutation.ClearDescription()
	return luo
}

// SetExternalLinks sets the "external_links" field.
func (luo *LibraryUpdateOne) SetExternalLinks(s []string) *LibraryUpdateOne {
	luo.mutation.SetExternalLinks(s)
	return luo
}

// AppendExternalLinks appends s to the "external_links" field.
func (luo *LibraryUpdateOne) AppendExternalLinks(s []string) *LibraryUpdateOne {
	luo.mutation.AppendExternalLinks(s)
	return luo
}

// ClearExternalLinks clears the value of the "external_links" field.
func (luo *LibraryUpdateOne) ClearExternalLinks() *LibraryUpdateOne {
	luo.mutation.ClearExternalLinks()
	return luo
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (luo *LibraryUpdateOne) AddBookIDs(ids ...int) *LibraryUpdateOne {
	luo.mutation.AddBookIDs(ids...)
	return luo
}

// AddBooks adds the "books" edges to the Book entity.
func (luo *LibraryUpdateOne) AddBooks(b ...*Book) *LibraryUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return luo.AddBookIDs(ids...)
}

// Mutation returns the LibraryMutation object of the builder.
func (luo *LibraryUpdateOne) Mutation() *LibraryMutation {
	return luo.mutation
}

// ClearBooks clears all "books" edges to the Book entity.
func (luo *LibraryUpdateOne) ClearBooks() *LibraryUpdateOne {
	luo.mutation.ClearBooks()
	return luo
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (luo *LibraryUpdateOne) RemoveBookIDs(ids ...int) *LibraryUpdateOne {
	luo.mutation.RemoveBookIDs(ids...)
	return luo
}

// RemoveBooks removes "books" edges to Book entities.
func (luo *LibraryUpdateOne) RemoveBooks(b ...*Book) *LibraryUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return luo.RemoveBookIDs(ids...)
}

// Where appends a list predicates to the LibraryUpdate builder.
func (luo *LibraryUpdateOne) Where(ps ...predicate.Library) *LibraryUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LibraryUpdateOne) Select(field string, fields ...string) *LibraryUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Library entity.
func (luo *LibraryUpdateOne) Save(ctx context.Context) (*Library, error) {
	if err := luo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LibraryUpdateOne) SaveX(ctx context.Context) *Library {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LibraryUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LibraryUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LibraryUpdateOne) defaults() error {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		if library.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized library.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := library.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (luo *LibraryUpdateOne) sqlSave(ctx context.Context) (_node *Library, err error) {
	_spec := sqlgraph.NewUpdateSpec(library.Table, library.Columns, sqlgraph.NewFieldSpec(library.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Library.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, library.FieldID)
		for _, f := range fields {
			if !library.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != library.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.CreatedBy(); ok {
		_spec.SetField(library.FieldCreatedBy, field.TypeString, value)
	}
	if luo.mutation.CreatedByCleared() {
		_spec.ClearField(library.FieldCreatedBy, field.TypeString)
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(library.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.UpdatedBy(); ok {
		_spec.SetField(library.FieldUpdatedBy, field.TypeString, value)
	}
	if luo.mutation.UpdatedByCleared() {
		_spec.ClearField(library.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := luo.mutation.Abbreviation(); ok {
		_spec.SetField(library.FieldAbbreviation, field.TypeString, value)
	}
	if luo.mutation.AbbreviationCleared() {
		_spec.ClearField(library.FieldAbbreviation, field.TypeString)
	}
	if value, ok := luo.mutation.DisplayName(); ok {
		_spec.SetField(library.FieldDisplayName, field.TypeString, value)
	}
	if luo.mutation.DisplayNameCleared() {
		_spec.ClearField(library.FieldDisplayName, field.TypeString)
	}
	if value, ok := luo.mutation.Description(); ok {
		_spec.SetField(library.FieldDescription, field.TypeString, value)
	}
	if luo.mutation.DescriptionCleared() {
		_spec.ClearField(library.FieldDescription, field.TypeString)
	}
	if value, ok := luo.mutation.ExternalLinks(); ok {
		_spec.SetField(library.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := luo.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, library.FieldExternalLinks, value)
		})
	}
	if luo.mutation.ExternalLinksCleared() {
		_spec.ClearField(library.FieldExternalLinks, field.TypeJSON)
	}
	if luo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   library.BooksTable,
			Columns: []string{library.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedBooksIDs(); len(nodes) > 0 && !luo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   library.BooksTable,
			Columns: []string{library.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   library.BooksTable,
			Columns: []string{library.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Library{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{library.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
