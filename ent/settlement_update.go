// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/herbarium"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
)

// SettlementUpdate is the builder for updating Settlement entities.
type SettlementUpdate struct {
	config
	hooks    []Hook
	mutation *SettlementMutation
}

// Where appends a list predicates to the SettlementUpdate builder.
func (su *SettlementUpdate) Where(ps ...predicate.Settlement) *SettlementUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *SettlementUpdate) SetCreatedBy(s string) *SettlementUpdate {
	su.mutation.SetCreatedBy(s)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *SettlementUpdate) SetNillableCreatedBy(s *string) *SettlementUpdate {
	if s != nil {
		su.SetCreatedBy(*s)
	}
	return su
}

// ClearCreatedBy clears the value of the "created_by" field.
func (su *SettlementUpdate) ClearCreatedBy() *SettlementUpdate {
	su.mutation.ClearCreatedBy()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SettlementUpdate) SetUpdatedAt(t time.Time) *SettlementUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SettlementUpdate) SetUpdatedBy(s string) *SettlementUpdate {
	su.mutation.SetUpdatedBy(s)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SettlementUpdate) SetNillableUpdatedBy(s *string) *SettlementUpdate {
	if s != nil {
		su.SetUpdatedBy(*s)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SettlementUpdate) ClearUpdatedBy() *SettlementUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetDisplayName sets the "display_name" field.
func (su *SettlementUpdate) SetDisplayName(s string) *SettlementUpdate {
	su.mutation.SetDisplayName(s)
	return su
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (su *SettlementUpdate) SetNillableDisplayName(s *string) *SettlementUpdate {
	if s != nil {
		su.SetDisplayName(*s)
	}
	return su
}

// ClearDisplayName clears the value of the "display_name" field.
func (su *SettlementUpdate) ClearDisplayName() *SettlementUpdate {
	su.mutation.ClearDisplayName()
	return su
}

// SetAbbreviation sets the "abbreviation" field.
func (su *SettlementUpdate) SetAbbreviation(s string) *SettlementUpdate {
	su.mutation.SetAbbreviation(s)
	return su
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (su *SettlementUpdate) SetNillableAbbreviation(s *string) *SettlementUpdate {
	if s != nil {
		su.SetAbbreviation(*s)
	}
	return su
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (su *SettlementUpdate) ClearAbbreviation() *SettlementUpdate {
	su.mutation.ClearAbbreviation()
	return su
}

// SetDescription sets the "description" field.
func (su *SettlementUpdate) SetDescription(s string) *SettlementUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SettlementUpdate) SetNillableDescription(s *string) *SettlementUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SettlementUpdate) ClearDescription() *SettlementUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetExternalLink sets the "external_link" field.
func (su *SettlementUpdate) SetExternalLink(s string) *SettlementUpdate {
	su.mutation.SetExternalLink(s)
	return su
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (su *SettlementUpdate) SetNillableExternalLink(s *string) *SettlementUpdate {
	if s != nil {
		su.SetExternalLink(*s)
	}
	return su
}

// ClearExternalLink clears the value of the "external_link" field.
func (su *SettlementUpdate) ClearExternalLink() *SettlementUpdate {
	su.mutation.ClearExternalLink()
	return su
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (su *SettlementUpdate) AddArtIDs(ids ...int) *SettlementUpdate {
	su.mutation.AddArtIDs(ids...)
	return su
}

// AddArt adds the "art" edges to the Art entity.
func (su *SettlementUpdate) AddArt(a ...*Art) *SettlementUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (su *SettlementUpdate) AddArtifactIDs(ids ...int) *SettlementUpdate {
	su.mutation.AddArtifactIDs(ids...)
	return su
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (su *SettlementUpdate) AddArtifacts(a ...*Artifact) *SettlementUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (su *SettlementUpdate) AddBookIDs(ids ...int) *SettlementUpdate {
	su.mutation.AddBookIDs(ids...)
	return su
}

// AddBooks adds the "books" edges to the Book entity.
func (su *SettlementUpdate) AddBooks(b ...*Book) *SettlementUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return su.AddBookIDs(ids...)
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (su *SettlementUpdate) AddHerbariumIDs(ids ...int) *SettlementUpdate {
	su.mutation.AddHerbariumIDs(ids...)
	return su
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (su *SettlementUpdate) AddHerbaria(h ...*Herbarium) *SettlementUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return su.AddHerbariumIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (su *SettlementUpdate) AddProtectedAreaPictureIDs(ids ...int) *SettlementUpdate {
	su.mutation.AddProtectedAreaPictureIDs(ids...)
	return su
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (su *SettlementUpdate) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *SettlementUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProtectedAreaPictureIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (su *SettlementUpdate) AddLocationIDs(ids ...int) *SettlementUpdate {
	su.mutation.AddLocationIDs(ids...)
	return su
}

// AddLocations adds the "locations" edges to the Location entity.
func (su *SettlementUpdate) AddLocations(l ...*Location) *SettlementUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return su.AddLocationIDs(ids...)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (su *SettlementUpdate) SetRegionID(id int) *SettlementUpdate {
	su.mutation.SetRegionID(id)
	return su
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (su *SettlementUpdate) SetNillableRegionID(id *int) *SettlementUpdate {
	if id != nil {
		su = su.SetRegionID(*id)
	}
	return su
}

// SetRegion sets the "region" edge to the Region entity.
func (su *SettlementUpdate) SetRegion(r *Region) *SettlementUpdate {
	return su.SetRegionID(r.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (su *SettlementUpdate) SetDistrictID(id int) *SettlementUpdate {
	su.mutation.SetDistrictID(id)
	return su
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (su *SettlementUpdate) SetNillableDistrictID(id *int) *SettlementUpdate {
	if id != nil {
		su = su.SetDistrictID(*id)
	}
	return su
}

// SetDistrict sets the "district" edge to the District entity.
func (su *SettlementUpdate) SetDistrict(d *District) *SettlementUpdate {
	return su.SetDistrictID(d.ID)
}

// AddKnownAsAfterIDs adds the "known_as_after" edge to the Settlement entity by IDs.
func (su *SettlementUpdate) AddKnownAsAfterIDs(ids ...int) *SettlementUpdate {
	su.mutation.AddKnownAsAfterIDs(ids...)
	return su
}

// AddKnownAsAfter adds the "known_as_after" edges to the Settlement entity.
func (su *SettlementUpdate) AddKnownAsAfter(s ...*Settlement) *SettlementUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddKnownAsAfterIDs(ids...)
}

// AddKnownAsBeforeIDs adds the "known_as_before" edge to the Settlement entity by IDs.
func (su *SettlementUpdate) AddKnownAsBeforeIDs(ids ...int) *SettlementUpdate {
	su.mutation.AddKnownAsBeforeIDs(ids...)
	return su
}

// AddKnownAsBefore adds the "known_as_before" edges to the Settlement entity.
func (su *SettlementUpdate) AddKnownAsBefore(s ...*Settlement) *SettlementUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddKnownAsBeforeIDs(ids...)
}

// Mutation returns the SettlementMutation object of the builder.
func (su *SettlementUpdate) Mutation() *SettlementMutation {
	return su.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (su *SettlementUpdate) ClearArt() *SettlementUpdate {
	su.mutation.ClearArt()
	return su
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (su *SettlementUpdate) RemoveArtIDs(ids ...int) *SettlementUpdate {
	su.mutation.RemoveArtIDs(ids...)
	return su
}

// RemoveArt removes "art" edges to Art entities.
func (su *SettlementUpdate) RemoveArt(a ...*Art) *SettlementUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (su *SettlementUpdate) ClearArtifacts() *SettlementUpdate {
	su.mutation.ClearArtifacts()
	return su
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (su *SettlementUpdate) RemoveArtifactIDs(ids ...int) *SettlementUpdate {
	su.mutation.RemoveArtifactIDs(ids...)
	return su
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (su *SettlementUpdate) RemoveArtifacts(a ...*Artifact) *SettlementUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveArtifactIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (su *SettlementUpdate) ClearBooks() *SettlementUpdate {
	su.mutation.ClearBooks()
	return su
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (su *SettlementUpdate) RemoveBookIDs(ids ...int) *SettlementUpdate {
	su.mutation.RemoveBookIDs(ids...)
	return su
}

// RemoveBooks removes "books" edges to Book entities.
func (su *SettlementUpdate) RemoveBooks(b ...*Book) *SettlementUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return su.RemoveBookIDs(ids...)
}

// ClearHerbaria clears all "herbaria" edges to the Herbarium entity.
func (su *SettlementUpdate) ClearHerbaria() *SettlementUpdate {
	su.mutation.ClearHerbaria()
	return su
}

// RemoveHerbariumIDs removes the "herbaria" edge to Herbarium entities by IDs.
func (su *SettlementUpdate) RemoveHerbariumIDs(ids ...int) *SettlementUpdate {
	su.mutation.RemoveHerbariumIDs(ids...)
	return su
}

// RemoveHerbaria removes "herbaria" edges to Herbarium entities.
func (su *SettlementUpdate) RemoveHerbaria(h ...*Herbarium) *SettlementUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return su.RemoveHerbariumIDs(ids...)
}

// ClearProtectedAreaPictures clears all "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (su *SettlementUpdate) ClearProtectedAreaPictures() *SettlementUpdate {
	su.mutation.ClearProtectedAreaPictures()
	return su
}

// RemoveProtectedAreaPictureIDs removes the "protected_area_pictures" edge to ProtectedAreaPicture entities by IDs.
func (su *SettlementUpdate) RemoveProtectedAreaPictureIDs(ids ...int) *SettlementUpdate {
	su.mutation.RemoveProtectedAreaPictureIDs(ids...)
	return su
}

// RemoveProtectedAreaPictures removes "protected_area_pictures" edges to ProtectedAreaPicture entities.
func (su *SettlementUpdate) RemoveProtectedAreaPictures(p ...*ProtectedAreaPicture) *SettlementUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProtectedAreaPictureIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Location entity.
func (su *SettlementUpdate) ClearLocations() *SettlementUpdate {
	su.mutation.ClearLocations()
	return su
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (su *SettlementUpdate) RemoveLocationIDs(ids ...int) *SettlementUpdate {
	su.mutation.RemoveLocationIDs(ids...)
	return su
}

// RemoveLocations removes "locations" edges to Location entities.
func (su *SettlementUpdate) RemoveLocations(l ...*Location) *SettlementUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return su.RemoveLocationIDs(ids...)
}

// ClearRegion clears the "region" edge to the Region entity.
func (su *SettlementUpdate) ClearRegion() *SettlementUpdate {
	su.mutation.ClearRegion()
	return su
}

// ClearDistrict clears the "district" edge to the District entity.
func (su *SettlementUpdate) ClearDistrict() *SettlementUpdate {
	su.mutation.ClearDistrict()
	return su
}

// ClearKnownAsAfter clears all "known_as_after" edges to the Settlement entity.
func (su *SettlementUpdate) ClearKnownAsAfter() *SettlementUpdate {
	su.mutation.ClearKnownAsAfter()
	return su
}

// RemoveKnownAsAfterIDs removes the "known_as_after" edge to Settlement entities by IDs.
func (su *SettlementUpdate) RemoveKnownAsAfterIDs(ids ...int) *SettlementUpdate {
	su.mutation.RemoveKnownAsAfterIDs(ids...)
	return su
}

// RemoveKnownAsAfter removes "known_as_after" edges to Settlement entities.
func (su *SettlementUpdate) RemoveKnownAsAfter(s ...*Settlement) *SettlementUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveKnownAsAfterIDs(ids...)
}

// ClearKnownAsBefore clears all "known_as_before" edges to the Settlement entity.
func (su *SettlementUpdate) ClearKnownAsBefore() *SettlementUpdate {
	su.mutation.ClearKnownAsBefore()
	return su
}

// RemoveKnownAsBeforeIDs removes the "known_as_before" edge to Settlement entities by IDs.
func (su *SettlementUpdate) RemoveKnownAsBeforeIDs(ids ...int) *SettlementUpdate {
	su.mutation.RemoveKnownAsBeforeIDs(ids...)
	return su
}

// RemoveKnownAsBefore removes "known_as_before" edges to Settlement entities.
func (su *SettlementUpdate) RemoveKnownAsBefore(s ...*Settlement) *SettlementUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveKnownAsBeforeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SettlementUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SettlementUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SettlementUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SettlementUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SettlementUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if settlement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized settlement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := settlement.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (su *SettlementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(settlement.Table, settlement.Columns, sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.SetField(settlement.FieldCreatedBy, field.TypeString, value)
	}
	if su.mutation.CreatedByCleared() {
		_spec.ClearField(settlement.FieldCreatedBy, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(settlement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(settlement.FieldUpdatedBy, field.TypeString, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(settlement.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := su.mutation.DisplayName(); ok {
		_spec.SetField(settlement.FieldDisplayName, field.TypeString, value)
	}
	if su.mutation.DisplayNameCleared() {
		_spec.ClearField(settlement.FieldDisplayName, field.TypeString)
	}
	if value, ok := su.mutation.Abbreviation(); ok {
		_spec.SetField(settlement.FieldAbbreviation, field.TypeString, value)
	}
	if su.mutation.AbbreviationCleared() {
		_spec.ClearField(settlement.FieldAbbreviation, field.TypeString)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(settlement.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(settlement.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.ExternalLink(); ok {
		_spec.SetField(settlement.FieldExternalLink, field.TypeString, value)
	}
	if su.mutation.ExternalLinkCleared() {
		_spec.ClearField(settlement.FieldExternalLink, field.TypeString)
	}
	if su.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ArtTable,
			Columns: []string{settlement.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedArtIDs(); len(nodes) > 0 && !su.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ArtTable,
			Columns: []string{settlement.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ArtTable,
			Columns: []string{settlement.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ArtifactsTable,
			Columns: []string{settlement.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !su.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ArtifactsTable,
			Columns: []string{settlement.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ArtifactsTable,
			Columns: []string{settlement.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.BooksTable,
			Columns: []string{settlement.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedBooksIDs(); len(nodes) > 0 && !su.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.BooksTable,
			Columns: []string{settlement.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.BooksTable,
			Columns: []string{settlement.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.HerbariaTable,
			Columns: []string{settlement.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedHerbariaIDs(); len(nodes) > 0 && !su.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.HerbariaTable,
			Columns: []string{settlement.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.HerbariaTable,
			Columns: []string{settlement.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ProtectedAreaPicturesTable,
			Columns: []string{settlement.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProtectedAreaPicturesIDs(); len(nodes) > 0 && !su.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ProtectedAreaPicturesTable,
			Columns: []string{settlement.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ProtectedAreaPicturesTable,
			Columns: []string{settlement.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   settlement.LocationsTable,
			Columns: []string{settlement.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !su.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   settlement.LocationsTable,
			Columns: []string{settlement.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   settlement.LocationsTable,
			Columns: []string{settlement.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settlement.RegionTable,
			Columns: []string{settlement.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settlement.RegionTable,
			Columns: []string{settlement.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settlement.DistrictTable,
			Columns: []string{settlement.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settlement.DistrictTable,
			Columns: []string{settlement.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.KnownAsAfterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   settlement.KnownAsAfterTable,
			Columns: settlement.KnownAsAfterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedKnownAsAfterIDs(); len(nodes) > 0 && !su.mutation.KnownAsAfterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   settlement.KnownAsAfterTable,
			Columns: settlement.KnownAsAfterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.KnownAsAfterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   settlement.KnownAsAfterTable,
			Columns: settlement.KnownAsAfterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.KnownAsBeforeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.KnownAsBeforeTable,
			Columns: settlement.KnownAsBeforePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedKnownAsBeforeIDs(); len(nodes) > 0 && !su.mutation.KnownAsBeforeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.KnownAsBeforeTable,
			Columns: settlement.KnownAsBeforePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.KnownAsBeforeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.KnownAsBeforeTable,
			Columns: settlement.KnownAsBeforePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settlement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SettlementUpdateOne is the builder for updating a single Settlement entity.
type SettlementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SettlementMutation
}

// SetCreatedBy sets the "created_by" field.
func (suo *SettlementUpdateOne) SetCreatedBy(s string) *SettlementUpdateOne {
	suo.mutation.SetCreatedBy(s)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableCreatedBy(s *string) *SettlementUpdateOne {
	if s != nil {
		suo.SetCreatedBy(*s)
	}
	return suo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (suo *SettlementUpdateOne) ClearCreatedBy() *SettlementUpdateOne {
	suo.mutation.ClearCreatedBy()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SettlementUpdateOne) SetUpdatedAt(t time.Time) *SettlementUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SettlementUpdateOne) SetUpdatedBy(s string) *SettlementUpdateOne {
	suo.mutation.SetUpdatedBy(s)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableUpdatedBy(s *string) *SettlementUpdateOne {
	if s != nil {
		suo.SetUpdatedBy(*s)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SettlementUpdateOne) ClearUpdatedBy() *SettlementUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetDisplayName sets the "display_name" field.
func (suo *SettlementUpdateOne) SetDisplayName(s string) *SettlementUpdateOne {
	suo.mutation.SetDisplayName(s)
	return suo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableDisplayName(s *string) *SettlementUpdateOne {
	if s != nil {
		suo.SetDisplayName(*s)
	}
	return suo
}

// ClearDisplayName clears the value of the "display_name" field.
func (suo *SettlementUpdateOne) ClearDisplayName() *SettlementUpdateOne {
	suo.mutation.ClearDisplayName()
	return suo
}

// SetAbbreviation sets the "abbreviation" field.
func (suo *SettlementUpdateOne) SetAbbreviation(s string) *SettlementUpdateOne {
	suo.mutation.SetAbbreviation(s)
	return suo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableAbbreviation(s *string) *SettlementUpdateOne {
	if s != nil {
		suo.SetAbbreviation(*s)
	}
	return suo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (suo *SettlementUpdateOne) ClearAbbreviation() *SettlementUpdateOne {
	suo.mutation.ClearAbbreviation()
	return suo
}

// SetDescription sets the "description" field.
func (suo *SettlementUpdateOne) SetDescription(s string) *SettlementUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableDescription(s *string) *SettlementUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SettlementUpdateOne) ClearDescription() *SettlementUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetExternalLink sets the "external_link" field.
func (suo *SettlementUpdateOne) SetExternalLink(s string) *SettlementUpdateOne {
	suo.mutation.SetExternalLink(s)
	return suo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableExternalLink(s *string) *SettlementUpdateOne {
	if s != nil {
		suo.SetExternalLink(*s)
	}
	return suo
}

// ClearExternalLink clears the value of the "external_link" field.
func (suo *SettlementUpdateOne) ClearExternalLink() *SettlementUpdateOne {
	suo.mutation.ClearExternalLink()
	return suo
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (suo *SettlementUpdateOne) AddArtIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.AddArtIDs(ids...)
	return suo
}

// AddArt adds the "art" edges to the Art entity.
func (suo *SettlementUpdateOne) AddArt(a ...*Art) *SettlementUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (suo *SettlementUpdateOne) AddArtifactIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.AddArtifactIDs(ids...)
	return suo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (suo *SettlementUpdateOne) AddArtifacts(a ...*Artifact) *SettlementUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (suo *SettlementUpdateOne) AddBookIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.AddBookIDs(ids...)
	return suo
}

// AddBooks adds the "books" edges to the Book entity.
func (suo *SettlementUpdateOne) AddBooks(b ...*Book) *SettlementUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return suo.AddBookIDs(ids...)
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (suo *SettlementUpdateOne) AddHerbariumIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.AddHerbariumIDs(ids...)
	return suo
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (suo *SettlementUpdateOne) AddHerbaria(h ...*Herbarium) *SettlementUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return suo.AddHerbariumIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (suo *SettlementUpdateOne) AddProtectedAreaPictureIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.AddProtectedAreaPictureIDs(ids...)
	return suo
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (suo *SettlementUpdateOne) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *SettlementUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProtectedAreaPictureIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (suo *SettlementUpdateOne) AddLocationIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.AddLocationIDs(ids...)
	return suo
}

// AddLocations adds the "locations" edges to the Location entity.
func (suo *SettlementUpdateOne) AddLocations(l ...*Location) *SettlementUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return suo.AddLocationIDs(ids...)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (suo *SettlementUpdateOne) SetRegionID(id int) *SettlementUpdateOne {
	suo.mutation.SetRegionID(id)
	return suo
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableRegionID(id *int) *SettlementUpdateOne {
	if id != nil {
		suo = suo.SetRegionID(*id)
	}
	return suo
}

// SetRegion sets the "region" edge to the Region entity.
func (suo *SettlementUpdateOne) SetRegion(r *Region) *SettlementUpdateOne {
	return suo.SetRegionID(r.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (suo *SettlementUpdateOne) SetDistrictID(id int) *SettlementUpdateOne {
	suo.mutation.SetDistrictID(id)
	return suo
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableDistrictID(id *int) *SettlementUpdateOne {
	if id != nil {
		suo = suo.SetDistrictID(*id)
	}
	return suo
}

// SetDistrict sets the "district" edge to the District entity.
func (suo *SettlementUpdateOne) SetDistrict(d *District) *SettlementUpdateOne {
	return suo.SetDistrictID(d.ID)
}

// AddKnownAsAfterIDs adds the "known_as_after" edge to the Settlement entity by IDs.
func (suo *SettlementUpdateOne) AddKnownAsAfterIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.AddKnownAsAfterIDs(ids...)
	return suo
}

// AddKnownAsAfter adds the "known_as_after" edges to the Settlement entity.
func (suo *SettlementUpdateOne) AddKnownAsAfter(s ...*Settlement) *SettlementUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddKnownAsAfterIDs(ids...)
}

// AddKnownAsBeforeIDs adds the "known_as_before" edge to the Settlement entity by IDs.
func (suo *SettlementUpdateOne) AddKnownAsBeforeIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.AddKnownAsBeforeIDs(ids...)
	return suo
}

// AddKnownAsBefore adds the "known_as_before" edges to the Settlement entity.
func (suo *SettlementUpdateOne) AddKnownAsBefore(s ...*Settlement) *SettlementUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddKnownAsBeforeIDs(ids...)
}

// Mutation returns the SettlementMutation object of the builder.
func (suo *SettlementUpdateOne) Mutation() *SettlementMutation {
	return suo.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (suo *SettlementUpdateOne) ClearArt() *SettlementUpdateOne {
	suo.mutation.ClearArt()
	return suo
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (suo *SettlementUpdateOne) RemoveArtIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.RemoveArtIDs(ids...)
	return suo
}

// RemoveArt removes "art" edges to Art entities.
func (suo *SettlementUpdateOne) RemoveArt(a ...*Art) *SettlementUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (suo *SettlementUpdateOne) ClearArtifacts() *SettlementUpdateOne {
	suo.mutation.ClearArtifacts()
	return suo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (suo *SettlementUpdateOne) RemoveArtifactIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.RemoveArtifactIDs(ids...)
	return suo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (suo *SettlementUpdateOne) RemoveArtifacts(a ...*Artifact) *SettlementUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveArtifactIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (suo *SettlementUpdateOne) ClearBooks() *SettlementUpdateOne {
	suo.mutation.ClearBooks()
	return suo
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (suo *SettlementUpdateOne) RemoveBookIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.RemoveBookIDs(ids...)
	return suo
}

// RemoveBooks removes "books" edges to Book entities.
func (suo *SettlementUpdateOne) RemoveBooks(b ...*Book) *SettlementUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return suo.RemoveBookIDs(ids...)
}

// ClearHerbaria clears all "herbaria" edges to the Herbarium entity.
func (suo *SettlementUpdateOne) ClearHerbaria() *SettlementUpdateOne {
	suo.mutation.ClearHerbaria()
	return suo
}

// RemoveHerbariumIDs removes the "herbaria" edge to Herbarium entities by IDs.
func (suo *SettlementUpdateOne) RemoveHerbariumIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.RemoveHerbariumIDs(ids...)
	return suo
}

// RemoveHerbaria removes "herbaria" edges to Herbarium entities.
func (suo *SettlementUpdateOne) RemoveHerbaria(h ...*Herbarium) *SettlementUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return suo.RemoveHerbariumIDs(ids...)
}

// ClearProtectedAreaPictures clears all "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (suo *SettlementUpdateOne) ClearProtectedAreaPictures() *SettlementUpdateOne {
	suo.mutation.ClearProtectedAreaPictures()
	return suo
}

// RemoveProtectedAreaPictureIDs removes the "protected_area_pictures" edge to ProtectedAreaPicture entities by IDs.
func (suo *SettlementUpdateOne) RemoveProtectedAreaPictureIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.RemoveProtectedAreaPictureIDs(ids...)
	return suo
}

// RemoveProtectedAreaPictures removes "protected_area_pictures" edges to ProtectedAreaPicture entities.
func (suo *SettlementUpdateOne) RemoveProtectedAreaPictures(p ...*ProtectedAreaPicture) *SettlementUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProtectedAreaPictureIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Location entity.
func (suo *SettlementUpdateOne) ClearLocations() *SettlementUpdateOne {
	suo.mutation.ClearLocations()
	return suo
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (suo *SettlementUpdateOne) RemoveLocationIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.RemoveLocationIDs(ids...)
	return suo
}

// RemoveLocations removes "locations" edges to Location entities.
func (suo *SettlementUpdateOne) RemoveLocations(l ...*Location) *SettlementUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return suo.RemoveLocationIDs(ids...)
}

// ClearRegion clears the "region" edge to the Region entity.
func (suo *SettlementUpdateOne) ClearRegion() *SettlementUpdateOne {
	suo.mutation.ClearRegion()
	return suo
}

// ClearDistrict clears the "district" edge to the District entity.
func (suo *SettlementUpdateOne) ClearDistrict() *SettlementUpdateOne {
	suo.mutation.ClearDistrict()
	return suo
}

// ClearKnownAsAfter clears all "known_as_after" edges to the Settlement entity.
func (suo *SettlementUpdateOne) ClearKnownAsAfter() *SettlementUpdateOne {
	suo.mutation.ClearKnownAsAfter()
	return suo
}

// RemoveKnownAsAfterIDs removes the "known_as_after" edge to Settlement entities by IDs.
func (suo *SettlementUpdateOne) RemoveKnownAsAfterIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.RemoveKnownAsAfterIDs(ids...)
	return suo
}

// RemoveKnownAsAfter removes "known_as_after" edges to Settlement entities.
func (suo *SettlementUpdateOne) RemoveKnownAsAfter(s ...*Settlement) *SettlementUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveKnownAsAfterIDs(ids...)
}

// ClearKnownAsBefore clears all "known_as_before" edges to the Settlement entity.
func (suo *SettlementUpdateOne) ClearKnownAsBefore() *SettlementUpdateOne {
	suo.mutation.ClearKnownAsBefore()
	return suo
}

// RemoveKnownAsBeforeIDs removes the "known_as_before" edge to Settlement entities by IDs.
func (suo *SettlementUpdateOne) RemoveKnownAsBeforeIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.RemoveKnownAsBeforeIDs(ids...)
	return suo
}

// RemoveKnownAsBefore removes "known_as_before" edges to Settlement entities.
func (suo *SettlementUpdateOne) RemoveKnownAsBefore(s ...*Settlement) *SettlementUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveKnownAsBeforeIDs(ids...)
}

// Where appends a list predicates to the SettlementUpdate builder.
func (suo *SettlementUpdateOne) Where(ps ...predicate.Settlement) *SettlementUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SettlementUpdateOne) Select(field string, fields ...string) *SettlementUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Settlement entity.
func (suo *SettlementUpdateOne) Save(ctx context.Context) (*Settlement, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SettlementUpdateOne) SaveX(ctx context.Context) *Settlement {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SettlementUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SettlementUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SettlementUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if settlement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized settlement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := settlement.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (suo *SettlementUpdateOne) sqlSave(ctx context.Context) (_node *Settlement, err error) {
	_spec := sqlgraph.NewUpdateSpec(settlement.Table, settlement.Columns, sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Settlement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, settlement.FieldID)
		for _, f := range fields {
			if !settlement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != settlement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.SetField(settlement.FieldCreatedBy, field.TypeString, value)
	}
	if suo.mutation.CreatedByCleared() {
		_spec.ClearField(settlement.FieldCreatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(settlement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(settlement.FieldUpdatedBy, field.TypeString, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(settlement.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.DisplayName(); ok {
		_spec.SetField(settlement.FieldDisplayName, field.TypeString, value)
	}
	if suo.mutation.DisplayNameCleared() {
		_spec.ClearField(settlement.FieldDisplayName, field.TypeString)
	}
	if value, ok := suo.mutation.Abbreviation(); ok {
		_spec.SetField(settlement.FieldAbbreviation, field.TypeString, value)
	}
	if suo.mutation.AbbreviationCleared() {
		_spec.ClearField(settlement.FieldAbbreviation, field.TypeString)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(settlement.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(settlement.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.ExternalLink(); ok {
		_spec.SetField(settlement.FieldExternalLink, field.TypeString, value)
	}
	if suo.mutation.ExternalLinkCleared() {
		_spec.ClearField(settlement.FieldExternalLink, field.TypeString)
	}
	if suo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ArtTable,
			Columns: []string{settlement.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedArtIDs(); len(nodes) > 0 && !suo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ArtTable,
			Columns: []string{settlement.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ArtTable,
			Columns: []string{settlement.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ArtifactsTable,
			Columns: []string{settlement.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !suo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ArtifactsTable,
			Columns: []string{settlement.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ArtifactsTable,
			Columns: []string{settlement.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.BooksTable,
			Columns: []string{settlement.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedBooksIDs(); len(nodes) > 0 && !suo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.BooksTable,
			Columns: []string{settlement.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.BooksTable,
			Columns: []string{settlement.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.HerbariaTable,
			Columns: []string{settlement.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedHerbariaIDs(); len(nodes) > 0 && !suo.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.HerbariaTable,
			Columns: []string{settlement.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.HerbariaTable,
			Columns: []string{settlement.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ProtectedAreaPicturesTable,
			Columns: []string{settlement.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProtectedAreaPicturesIDs(); len(nodes) > 0 && !suo.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ProtectedAreaPicturesTable,
			Columns: []string{settlement.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.ProtectedAreaPicturesTable,
			Columns: []string{settlement.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   settlement.LocationsTable,
			Columns: []string{settlement.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !suo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   settlement.LocationsTable,
			Columns: []string{settlement.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   settlement.LocationsTable,
			Columns: []string{settlement.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settlement.RegionTable,
			Columns: []string{settlement.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settlement.RegionTable,
			Columns: []string{settlement.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settlement.DistrictTable,
			Columns: []string{settlement.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settlement.DistrictTable,
			Columns: []string{settlement.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.KnownAsAfterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   settlement.KnownAsAfterTable,
			Columns: settlement.KnownAsAfterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedKnownAsAfterIDs(); len(nodes) > 0 && !suo.mutation.KnownAsAfterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   settlement.KnownAsAfterTable,
			Columns: settlement.KnownAsAfterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.KnownAsAfterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   settlement.KnownAsAfterTable,
			Columns: settlement.KnownAsAfterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.KnownAsBeforeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.KnownAsBeforeTable,
			Columns: settlement.KnownAsBeforePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedKnownAsBeforeIDs(); len(nodes) > 0 && !suo.mutation.KnownAsBeforeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.KnownAsBeforeTable,
			Columns: settlement.KnownAsBeforePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.KnownAsBeforeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   settlement.KnownAsBeforeTable,
			Columns: settlement.KnownAsBeforePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Settlement{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settlement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
