// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/predicate"
	"github.com/dkrasnovdev/heritage-api/ent/publisher"
)

// PublisherUpdate is the builder for updating Publisher entities.
type PublisherUpdate struct {
	config
	hooks    []Hook
	mutation *PublisherMutation
}

// Where appends a list predicates to the PublisherUpdate builder.
func (pu *PublisherUpdate) Where(ps ...predicate.Publisher) *PublisherUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *PublisherUpdate) SetCreatedBy(s string) *PublisherUpdate {
	pu.mutation.SetCreatedBy(s)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *PublisherUpdate) SetNillableCreatedBy(s *string) *PublisherUpdate {
	if s != nil {
		pu.SetCreatedBy(*s)
	}
	return pu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pu *PublisherUpdate) ClearCreatedBy() *PublisherUpdate {
	pu.mutation.ClearCreatedBy()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PublisherUpdate) SetUpdatedAt(t time.Time) *PublisherUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PublisherUpdate) SetUpdatedBy(s string) *PublisherUpdate {
	pu.mutation.SetUpdatedBy(s)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *PublisherUpdate) SetNillableUpdatedBy(s *string) *PublisherUpdate {
	if s != nil {
		pu.SetUpdatedBy(*s)
	}
	return pu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pu *PublisherUpdate) ClearUpdatedBy() *PublisherUpdate {
	pu.mutation.ClearUpdatedBy()
	return pu
}

// SetDisplayName sets the "display_name" field.
func (pu *PublisherUpdate) SetDisplayName(s string) *PublisherUpdate {
	pu.mutation.SetDisplayName(s)
	return pu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pu *PublisherUpdate) SetNillableDisplayName(s *string) *PublisherUpdate {
	if s != nil {
		pu.SetDisplayName(*s)
	}
	return pu
}

// ClearDisplayName clears the value of the "display_name" field.
func (pu *PublisherUpdate) ClearDisplayName() *PublisherUpdate {
	pu.mutation.ClearDisplayName()
	return pu
}

// SetDescription sets the "description" field.
func (pu *PublisherUpdate) SetDescription(s string) *PublisherUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PublisherUpdate) SetNillableDescription(s *string) *PublisherUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PublisherUpdate) ClearDescription() *PublisherUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetExternalLinks sets the "external_links" field.
func (pu *PublisherUpdate) SetExternalLinks(s []string) *PublisherUpdate {
	pu.mutation.SetExternalLinks(s)
	return pu
}

// AppendExternalLinks appends s to the "external_links" field.
func (pu *PublisherUpdate) AppendExternalLinks(s []string) *PublisherUpdate {
	pu.mutation.AppendExternalLinks(s)
	return pu
}

// ClearExternalLinks clears the value of the "external_links" field.
func (pu *PublisherUpdate) ClearExternalLinks() *PublisherUpdate {
	pu.mutation.ClearExternalLinks()
	return pu
}

// Mutation returns the PublisherMutation object of the builder.
func (pu *PublisherUpdate) Mutation() *PublisherMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PublisherUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PublisherUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PublisherUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PublisherUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PublisherUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if publisher.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized publisher.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := publisher.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pu *PublisherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(publisher.Table, publisher.Columns, sqlgraph.NewFieldSpec(publisher.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(publisher.FieldCreatedBy, field.TypeString, value)
	}
	if pu.mutation.CreatedByCleared() {
		_spec.ClearField(publisher.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(publisher.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(publisher.FieldUpdatedBy, field.TypeString, value)
	}
	if pu.mutation.UpdatedByCleared() {
		_spec.ClearField(publisher.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.DisplayName(); ok {
		_spec.SetField(publisher.FieldDisplayName, field.TypeString, value)
	}
	if pu.mutation.DisplayNameCleared() {
		_spec.ClearField(publisher.FieldDisplayName, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(publisher.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(publisher.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.ExternalLinks(); ok {
		_spec.SetField(publisher.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, publisher.FieldExternalLinks, value)
		})
	}
	if pu.mutation.ExternalLinksCleared() {
		_spec.ClearField(publisher.FieldExternalLinks, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publisher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PublisherUpdateOne is the builder for updating a single Publisher entity.
type PublisherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublisherMutation
}

// SetCreatedBy sets the "created_by" field.
func (puo *PublisherUpdateOne) SetCreatedBy(s string) *PublisherUpdateOne {
	puo.mutation.SetCreatedBy(s)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *PublisherUpdateOne) SetNillableCreatedBy(s *string) *PublisherUpdateOne {
	if s != nil {
		puo.SetCreatedBy(*s)
	}
	return puo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (puo *PublisherUpdateOne) ClearCreatedBy() *PublisherUpdateOne {
	puo.mutation.ClearCreatedBy()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PublisherUpdateOne) SetUpdatedAt(t time.Time) *PublisherUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PublisherUpdateOne) SetUpdatedBy(s string) *PublisherUpdateOne {
	puo.mutation.SetUpdatedBy(s)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *PublisherUpdateOne) SetNillableUpdatedBy(s *string) *PublisherUpdateOne {
	if s != nil {
		puo.SetUpdatedBy(*s)
	}
	return puo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puo *PublisherUpdateOne) ClearUpdatedBy() *PublisherUpdateOne {
	puo.mutation.ClearUpdatedBy()
	return puo
}

// SetDisplayName sets the "display_name" field.
func (puo *PublisherUpdateOne) SetDisplayName(s string) *PublisherUpdateOne {
	puo.mutation.SetDisplayName(s)
	return puo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (puo *PublisherUpdateOne) SetNillableDisplayName(s *string) *PublisherUpdateOne {
	if s != nil {
		puo.SetDisplayName(*s)
	}
	return puo
}

// ClearDisplayName clears the value of the "display_name" field.
func (puo *PublisherUpdateOne) ClearDisplayName() *PublisherUpdateOne {
	puo.mutation.ClearDisplayName()
	return puo
}

// SetDescription sets the "description" field.
func (puo *PublisherUpdateOne) SetDescription(s string) *PublisherUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PublisherUpdateOne) SetNillableDescription(s *string) *PublisherUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PublisherUpdateOne) ClearDescription() *PublisherUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetExternalLinks sets the "external_links" field.
func (puo *PublisherUpdateOne) SetExternalLinks(s []string) *PublisherUpdateOne {
	puo.mutation.SetExternalLinks(s)
	return puo
}

// AppendExternalLinks appends s to the "external_links" field.
func (puo *PublisherUpdateOne) AppendExternalLinks(s []string) *PublisherUpdateOne {
	puo.mutation.AppendExternalLinks(s)
	return puo
}

// ClearExternalLinks clears the value of the "external_links" field.
func (puo *PublisherUpdateOne) ClearExternalLinks() *PublisherUpdateOne {
	puo.mutation.ClearExternalLinks()
	return puo
}

// Mutation returns the PublisherMutation object of the builder.
func (puo *PublisherUpdateOne) Mutation() *PublisherMutation {
	return puo.mutation
}

// Where appends a list predicates to the PublisherUpdate builder.
func (puo *PublisherUpdateOne) Where(ps ...predicate.Publisher) *PublisherUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PublisherUpdateOne) Select(field string, fields ...string) *PublisherUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Publisher entity.
func (puo *PublisherUpdateOne) Save(ctx context.Context) (*Publisher, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PublisherUpdateOne) SaveX(ctx context.Context) *Publisher {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PublisherUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PublisherUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PublisherUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if publisher.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized publisher.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := publisher.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (puo *PublisherUpdateOne) sqlSave(ctx context.Context) (_node *Publisher, err error) {
	_spec := sqlgraph.NewUpdateSpec(publisher.Table, publisher.Columns, sqlgraph.NewFieldSpec(publisher.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Publisher.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publisher.FieldID)
		for _, f := range fields {
			if !publisher.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publisher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(publisher.FieldCreatedBy, field.TypeString, value)
	}
	if puo.mutation.CreatedByCleared() {
		_spec.ClearField(publisher.FieldCreatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(publisher.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(publisher.FieldUpdatedBy, field.TypeString, value)
	}
	if puo.mutation.UpdatedByCleared() {
		_spec.ClearField(publisher.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.DisplayName(); ok {
		_spec.SetField(publisher.FieldDisplayName, field.TypeString, value)
	}
	if puo.mutation.DisplayNameCleared() {
		_spec.ClearField(publisher.FieldDisplayName, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(publisher.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(publisher.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.ExternalLinks(); ok {
		_spec.SetField(publisher.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, publisher.FieldExternalLinks, value)
		})
	}
	if puo.mutation.ExternalLinksCleared() {
		_spec.ClearField(publisher.FieldExternalLinks, field.TypeJSON)
	}
	_node = &Publisher{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publisher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
