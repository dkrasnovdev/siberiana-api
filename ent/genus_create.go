// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/genus"
	"github.com/dkrasnovdev/siberiana-api/ent/herbarium"
)

// GenusCreate is the builder for creating a Genus entity.
type GenusCreate struct {
	config
	mutation *GenusMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gc *GenusCreate) SetCreatedAt(t time.Time) *GenusCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GenusCreate) SetNillableCreatedAt(t *time.Time) *GenusCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetCreatedBy sets the "created_by" field.
func (gc *GenusCreate) SetCreatedBy(s string) *GenusCreate {
	gc.mutation.SetCreatedBy(s)
	return gc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gc *GenusCreate) SetNillableCreatedBy(s *string) *GenusCreate {
	if s != nil {
		gc.SetCreatedBy(*s)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GenusCreate) SetUpdatedAt(t time.Time) *GenusCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GenusCreate) SetNillableUpdatedAt(t *time.Time) *GenusCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetUpdatedBy sets the "updated_by" field.
func (gc *GenusCreate) SetUpdatedBy(s string) *GenusCreate {
	gc.mutation.SetUpdatedBy(s)
	return gc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gc *GenusCreate) SetNillableUpdatedBy(s *string) *GenusCreate {
	if s != nil {
		gc.SetUpdatedBy(*s)
	}
	return gc
}

// SetDisplayName sets the "display_name" field.
func (gc *GenusCreate) SetDisplayName(s string) *GenusCreate {
	gc.mutation.SetDisplayName(s)
	return gc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (gc *GenusCreate) SetNillableDisplayName(s *string) *GenusCreate {
	if s != nil {
		gc.SetDisplayName(*s)
	}
	return gc
}

// SetAbbreviation sets the "abbreviation" field.
func (gc *GenusCreate) SetAbbreviation(s string) *GenusCreate {
	gc.mutation.SetAbbreviation(s)
	return gc
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (gc *GenusCreate) SetNillableAbbreviation(s *string) *GenusCreate {
	if s != nil {
		gc.SetAbbreviation(*s)
	}
	return gc
}

// SetDescription sets the "description" field.
func (gc *GenusCreate) SetDescription(s string) *GenusCreate {
	gc.mutation.SetDescription(s)
	return gc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gc *GenusCreate) SetNillableDescription(s *string) *GenusCreate {
	if s != nil {
		gc.SetDescription(*s)
	}
	return gc
}

// SetExternalLink sets the "external_link" field.
func (gc *GenusCreate) SetExternalLink(s string) *GenusCreate {
	gc.mutation.SetExternalLink(s)
	return gc
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (gc *GenusCreate) SetNillableExternalLink(s *string) *GenusCreate {
	if s != nil {
		gc.SetExternalLink(*s)
	}
	return gc
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (gc *GenusCreate) SetPrimaryImageURL(s string) *GenusCreate {
	gc.mutation.SetPrimaryImageURL(s)
	return gc
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (gc *GenusCreate) SetNillablePrimaryImageURL(s *string) *GenusCreate {
	if s != nil {
		gc.SetPrimaryImageURL(*s)
	}
	return gc
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (gc *GenusCreate) SetAdditionalImagesUrls(s []string) *GenusCreate {
	gc.mutation.SetAdditionalImagesUrls(s)
	return gc
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (gc *GenusCreate) AddHerbariumIDs(ids ...int) *GenusCreate {
	gc.mutation.AddHerbariumIDs(ids...)
	return gc
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (gc *GenusCreate) AddHerbaria(h ...*Herbarium) *GenusCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return gc.AddHerbariumIDs(ids...)
}

// Mutation returns the GenusMutation object of the builder.
func (gc *GenusCreate) Mutation() *GenusMutation {
	return gc.mutation
}

// Save creates the Genus in the database.
func (gc *GenusCreate) Save(ctx context.Context) (*Genus, error) {
	if err := gc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GenusCreate) SaveX(ctx context.Context) *Genus {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GenusCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GenusCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GenusCreate) defaults() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		if genus.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized genus.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := genus.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		if genus.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized genus.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := genus.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gc *GenusCreate) check() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Genus.created_at"`)}
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Genus.updated_at"`)}
	}
	return nil
}

func (gc *GenusCreate) sqlSave(ctx context.Context) (*Genus, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GenusCreate) createSpec() (*Genus, *sqlgraph.CreateSpec) {
	var (
		_node = &Genus{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(genus.Table, sqlgraph.NewFieldSpec(genus.FieldID, field.TypeInt))
	)
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(genus.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.CreatedBy(); ok {
		_spec.SetField(genus.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.SetField(genus.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gc.mutation.UpdatedBy(); ok {
		_spec.SetField(genus.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := gc.mutation.DisplayName(); ok {
		_spec.SetField(genus.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := gc.mutation.Abbreviation(); ok {
		_spec.SetField(genus.FieldAbbreviation, field.TypeString, value)
		_node.Abbreviation = value
	}
	if value, ok := gc.mutation.Description(); ok {
		_spec.SetField(genus.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := gc.mutation.ExternalLink(); ok {
		_spec.SetField(genus.FieldExternalLink, field.TypeString, value)
		_node.ExternalLink = value
	}
	if value, ok := gc.mutation.PrimaryImageURL(); ok {
		_spec.SetField(genus.FieldPrimaryImageURL, field.TypeString, value)
		_node.PrimaryImageURL = value
	}
	if value, ok := gc.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(genus.FieldAdditionalImagesUrls, field.TypeJSON, value)
		_node.AdditionalImagesUrls = value
	}
	if nodes := gc.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   genus.HerbariaTable,
			Columns: []string{genus.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GenusCreateBulk is the builder for creating many Genus entities in bulk.
type GenusCreateBulk struct {
	config
	err      error
	builders []*GenusCreate
}

// Save creates the Genus entities in the database.
func (gcb *GenusCreateBulk) Save(ctx context.Context) ([]*Genus, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Genus, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GenusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GenusCreateBulk) SaveX(ctx context.Context) []*Genus {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GenusCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GenusCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
