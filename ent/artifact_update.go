// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/culture"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/license"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/medium"
	"github.com/dkrasnovdev/siberiana-api/ent/model"
	"github.com/dkrasnovdev/siberiana-api/ent/monument"
	"github.com/dkrasnovdev/siberiana-api/ent/organization"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/project"
	"github.com/dkrasnovdev/siberiana-api/ent/publication"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/set"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
	"github.com/dkrasnovdev/siberiana-api/ent/technique"
)

// ArtifactUpdate is the builder for updating Artifact entities.
type ArtifactUpdate struct {
	config
	hooks    []Hook
	mutation *ArtifactMutation
}

// Where appends a list predicates to the ArtifactUpdate builder.
func (au *ArtifactUpdate) Where(ps ...predicate.Artifact) *ArtifactUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCreatedBy sets the "created_by" field.
func (au *ArtifactUpdate) SetCreatedBy(s string) *ArtifactUpdate {
	au.mutation.SetCreatedBy(s)
	return au
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableCreatedBy(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetCreatedBy(*s)
	}
	return au
}

// ClearCreatedBy clears the value of the "created_by" field.
func (au *ArtifactUpdate) ClearCreatedBy() *ArtifactUpdate {
	au.mutation.ClearCreatedBy()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *ArtifactUpdate) SetUpdatedAt(t time.Time) *ArtifactUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUpdatedBy sets the "updated_by" field.
func (au *ArtifactUpdate) SetUpdatedBy(s string) *ArtifactUpdate {
	au.mutation.SetUpdatedBy(s)
	return au
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableUpdatedBy(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetUpdatedBy(*s)
	}
	return au
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (au *ArtifactUpdate) ClearUpdatedBy() *ArtifactUpdate {
	au.mutation.ClearUpdatedBy()
	return au
}

// SetDisplayName sets the "display_name" field.
func (au *ArtifactUpdate) SetDisplayName(s string) *ArtifactUpdate {
	au.mutation.SetDisplayName(s)
	return au
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDisplayName(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetDisplayName(*s)
	}
	return au
}

// ClearDisplayName clears the value of the "display_name" field.
func (au *ArtifactUpdate) ClearDisplayName() *ArtifactUpdate {
	au.mutation.ClearDisplayName()
	return au
}

// SetAbbreviation sets the "abbreviation" field.
func (au *ArtifactUpdate) SetAbbreviation(s string) *ArtifactUpdate {
	au.mutation.SetAbbreviation(s)
	return au
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableAbbreviation(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetAbbreviation(*s)
	}
	return au
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (au *ArtifactUpdate) ClearAbbreviation() *ArtifactUpdate {
	au.mutation.ClearAbbreviation()
	return au
}

// SetDescription sets the "description" field.
func (au *ArtifactUpdate) SetDescription(s string) *ArtifactUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDescription(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *ArtifactUpdate) ClearDescription() *ArtifactUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetExternalLink sets the "external_link" field.
func (au *ArtifactUpdate) SetExternalLink(s string) *ArtifactUpdate {
	au.mutation.SetExternalLink(s)
	return au
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableExternalLink(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetExternalLink(*s)
	}
	return au
}

// ClearExternalLink clears the value of the "external_link" field.
func (au *ArtifactUpdate) ClearExternalLink() *ArtifactUpdate {
	au.mutation.ClearExternalLink()
	return au
}

// SetStatus sets the "status" field.
func (au *ArtifactUpdate) SetStatus(a artifact.Status) *ArtifactUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableStatus(a *artifact.Status) *ArtifactUpdate {
	if a != nil {
		au.SetStatus(*a)
	}
	return au
}

// ClearStatus clears the value of the "status" field.
func (au *ArtifactUpdate) ClearStatus() *ArtifactUpdate {
	au.mutation.ClearStatus()
	return au
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (au *ArtifactUpdate) SetPrimaryImageURL(s string) *ArtifactUpdate {
	au.mutation.SetPrimaryImageURL(s)
	return au
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillablePrimaryImageURL(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetPrimaryImageURL(*s)
	}
	return au
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (au *ArtifactUpdate) ClearPrimaryImageURL() *ArtifactUpdate {
	au.mutation.ClearPrimaryImageURL()
	return au
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (au *ArtifactUpdate) SetAdditionalImagesUrls(s []string) *ArtifactUpdate {
	au.mutation.SetAdditionalImagesUrls(s)
	return au
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (au *ArtifactUpdate) AppendAdditionalImagesUrls(s []string) *ArtifactUpdate {
	au.mutation.AppendAdditionalImagesUrls(s)
	return au
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (au *ArtifactUpdate) ClearAdditionalImagesUrls() *ArtifactUpdate {
	au.mutation.ClearAdditionalImagesUrls()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *ArtifactUpdate) SetDeletedAt(t time.Time) *ArtifactUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDeletedAt(t *time.Time) *ArtifactUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *ArtifactUpdate) ClearDeletedAt() *ArtifactUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetDeletedBy sets the "deleted_by" field.
func (au *ArtifactUpdate) SetDeletedBy(s string) *ArtifactUpdate {
	au.mutation.SetDeletedBy(s)
	return au
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDeletedBy(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetDeletedBy(*s)
	}
	return au
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (au *ArtifactUpdate) ClearDeletedBy() *ArtifactUpdate {
	au.mutation.ClearDeletedBy()
	return au
}

// SetDating sets the "dating" field.
func (au *ArtifactUpdate) SetDating(s string) *ArtifactUpdate {
	au.mutation.SetDating(s)
	return au
}

// SetNillableDating sets the "dating" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDating(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetDating(*s)
	}
	return au
}

// ClearDating clears the value of the "dating" field.
func (au *ArtifactUpdate) ClearDating() *ArtifactUpdate {
	au.mutation.ClearDating()
	return au
}

// SetDatingStart sets the "dating_start" field.
func (au *ArtifactUpdate) SetDatingStart(i int) *ArtifactUpdate {
	au.mutation.ResetDatingStart()
	au.mutation.SetDatingStart(i)
	return au
}

// SetNillableDatingStart sets the "dating_start" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDatingStart(i *int) *ArtifactUpdate {
	if i != nil {
		au.SetDatingStart(*i)
	}
	return au
}

// AddDatingStart adds i to the "dating_start" field.
func (au *ArtifactUpdate) AddDatingStart(i int) *ArtifactUpdate {
	au.mutation.AddDatingStart(i)
	return au
}

// ClearDatingStart clears the value of the "dating_start" field.
func (au *ArtifactUpdate) ClearDatingStart() *ArtifactUpdate {
	au.mutation.ClearDatingStart()
	return au
}

// SetDatingEnd sets the "dating_end" field.
func (au *ArtifactUpdate) SetDatingEnd(i int) *ArtifactUpdate {
	au.mutation.ResetDatingEnd()
	au.mutation.SetDatingEnd(i)
	return au
}

// SetNillableDatingEnd sets the "dating_end" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDatingEnd(i *int) *ArtifactUpdate {
	if i != nil {
		au.SetDatingEnd(*i)
	}
	return au
}

// AddDatingEnd adds i to the "dating_end" field.
func (au *ArtifactUpdate) AddDatingEnd(i int) *ArtifactUpdate {
	au.mutation.AddDatingEnd(i)
	return au
}

// ClearDatingEnd clears the value of the "dating_end" field.
func (au *ArtifactUpdate) ClearDatingEnd() *ArtifactUpdate {
	au.mutation.ClearDatingEnd()
	return au
}

// SetHeight sets the "height" field.
func (au *ArtifactUpdate) SetHeight(f float64) *ArtifactUpdate {
	au.mutation.ResetHeight()
	au.mutation.SetHeight(f)
	return au
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableHeight(f *float64) *ArtifactUpdate {
	if f != nil {
		au.SetHeight(*f)
	}
	return au
}

// AddHeight adds f to the "height" field.
func (au *ArtifactUpdate) AddHeight(f float64) *ArtifactUpdate {
	au.mutation.AddHeight(f)
	return au
}

// ClearHeight clears the value of the "height" field.
func (au *ArtifactUpdate) ClearHeight() *ArtifactUpdate {
	au.mutation.ClearHeight()
	return au
}

// SetWidth sets the "width" field.
func (au *ArtifactUpdate) SetWidth(f float64) *ArtifactUpdate {
	au.mutation.ResetWidth()
	au.mutation.SetWidth(f)
	return au
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableWidth(f *float64) *ArtifactUpdate {
	if f != nil {
		au.SetWidth(*f)
	}
	return au
}

// AddWidth adds f to the "width" field.
func (au *ArtifactUpdate) AddWidth(f float64) *ArtifactUpdate {
	au.mutation.AddWidth(f)
	return au
}

// ClearWidth clears the value of the "width" field.
func (au *ArtifactUpdate) ClearWidth() *ArtifactUpdate {
	au.mutation.ClearWidth()
	return au
}

// SetLength sets the "length" field.
func (au *ArtifactUpdate) SetLength(f float64) *ArtifactUpdate {
	au.mutation.ResetLength()
	au.mutation.SetLength(f)
	return au
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableLength(f *float64) *ArtifactUpdate {
	if f != nil {
		au.SetLength(*f)
	}
	return au
}

// AddLength adds f to the "length" field.
func (au *ArtifactUpdate) AddLength(f float64) *ArtifactUpdate {
	au.mutation.AddLength(f)
	return au
}

// ClearLength clears the value of the "length" field.
func (au *ArtifactUpdate) ClearLength() *ArtifactUpdate {
	au.mutation.ClearLength()
	return au
}

// SetDepth sets the "depth" field.
func (au *ArtifactUpdate) SetDepth(f float64) *ArtifactUpdate {
	au.mutation.ResetDepth()
	au.mutation.SetDepth(f)
	return au
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDepth(f *float64) *ArtifactUpdate {
	if f != nil {
		au.SetDepth(*f)
	}
	return au
}

// AddDepth adds f to the "depth" field.
func (au *ArtifactUpdate) AddDepth(f float64) *ArtifactUpdate {
	au.mutation.AddDepth(f)
	return au
}

// ClearDepth clears the value of the "depth" field.
func (au *ArtifactUpdate) ClearDepth() *ArtifactUpdate {
	au.mutation.ClearDepth()
	return au
}

// SetDiameter sets the "diameter" field.
func (au *ArtifactUpdate) SetDiameter(f float64) *ArtifactUpdate {
	au.mutation.ResetDiameter()
	au.mutation.SetDiameter(f)
	return au
}

// SetNillableDiameter sets the "diameter" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDiameter(f *float64) *ArtifactUpdate {
	if f != nil {
		au.SetDiameter(*f)
	}
	return au
}

// AddDiameter adds f to the "diameter" field.
func (au *ArtifactUpdate) AddDiameter(f float64) *ArtifactUpdate {
	au.mutation.AddDiameter(f)
	return au
}

// ClearDiameter clears the value of the "diameter" field.
func (au *ArtifactUpdate) ClearDiameter() *ArtifactUpdate {
	au.mutation.ClearDiameter()
	return au
}

// SetWeight sets the "weight" field.
func (au *ArtifactUpdate) SetWeight(s string) *ArtifactUpdate {
	au.mutation.SetWeight(s)
	return au
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableWeight(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetWeight(*s)
	}
	return au
}

// ClearWeight clears the value of the "weight" field.
func (au *ArtifactUpdate) ClearWeight() *ArtifactUpdate {
	au.mutation.ClearWeight()
	return au
}

// SetDimensions sets the "dimensions" field.
func (au *ArtifactUpdate) SetDimensions(s string) *ArtifactUpdate {
	au.mutation.SetDimensions(s)
	return au
}

// SetNillableDimensions sets the "dimensions" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDimensions(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetDimensions(*s)
	}
	return au
}

// ClearDimensions clears the value of the "dimensions" field.
func (au *ArtifactUpdate) ClearDimensions() *ArtifactUpdate {
	au.mutation.ClearDimensions()
	return au
}

// SetChemicalComposition sets the "chemical_composition" field.
func (au *ArtifactUpdate) SetChemicalComposition(s string) *ArtifactUpdate {
	au.mutation.SetChemicalComposition(s)
	return au
}

// SetNillableChemicalComposition sets the "chemical_composition" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableChemicalComposition(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetChemicalComposition(*s)
	}
	return au
}

// ClearChemicalComposition clears the value of the "chemical_composition" field.
func (au *ArtifactUpdate) ClearChemicalComposition() *ArtifactUpdate {
	au.mutation.ClearChemicalComposition()
	return au
}

// SetKpNumber sets the "kp_number" field.
func (au *ArtifactUpdate) SetKpNumber(s string) *ArtifactUpdate {
	au.mutation.SetKpNumber(s)
	return au
}

// SetNillableKpNumber sets the "kp_number" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableKpNumber(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetKpNumber(*s)
	}
	return au
}

// ClearKpNumber clears the value of the "kp_number" field.
func (au *ArtifactUpdate) ClearKpNumber() *ArtifactUpdate {
	au.mutation.ClearKpNumber()
	return au
}

// SetGoskatalogNumber sets the "goskatalog_number" field.
func (au *ArtifactUpdate) SetGoskatalogNumber(s string) *ArtifactUpdate {
	au.mutation.SetGoskatalogNumber(s)
	return au
}

// SetNillableGoskatalogNumber sets the "goskatalog_number" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableGoskatalogNumber(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetGoskatalogNumber(*s)
	}
	return au
}

// ClearGoskatalogNumber clears the value of the "goskatalog_number" field.
func (au *ArtifactUpdate) ClearGoskatalogNumber() *ArtifactUpdate {
	au.mutation.ClearGoskatalogNumber()
	return au
}

// SetInventoryNumber sets the "inventory_number" field.
func (au *ArtifactUpdate) SetInventoryNumber(s string) *ArtifactUpdate {
	au.mutation.SetInventoryNumber(s)
	return au
}

// SetNillableInventoryNumber sets the "inventory_number" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableInventoryNumber(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetInventoryNumber(*s)
	}
	return au
}

// ClearInventoryNumber clears the value of the "inventory_number" field.
func (au *ArtifactUpdate) ClearInventoryNumber() *ArtifactUpdate {
	au.mutation.ClearInventoryNumber()
	return au
}

// SetTypology sets the "typology" field.
func (au *ArtifactUpdate) SetTypology(s string) *ArtifactUpdate {
	au.mutation.SetTypology(s)
	return au
}

// SetNillableTypology sets the "typology" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableTypology(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetTypology(*s)
	}
	return au
}

// ClearTypology clears the value of the "typology" field.
func (au *ArtifactUpdate) ClearTypology() *ArtifactUpdate {
	au.mutation.ClearTypology()
	return au
}

// SetAdmissionDate sets the "admission_date" field.
func (au *ArtifactUpdate) SetAdmissionDate(t time.Time) *ArtifactUpdate {
	au.mutation.SetAdmissionDate(t)
	return au
}

// SetNillableAdmissionDate sets the "admission_date" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableAdmissionDate(t *time.Time) *ArtifactUpdate {
	if t != nil {
		au.SetAdmissionDate(*t)
	}
	return au
}

// ClearAdmissionDate clears the value of the "admission_date" field.
func (au *ArtifactUpdate) ClearAdmissionDate() *ArtifactUpdate {
	au.mutation.ClearAdmissionDate()
	return au
}

// AddAuthorIDs adds the "authors" edge to the Person entity by IDs.
func (au *ArtifactUpdate) AddAuthorIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddAuthorIDs(ids...)
	return au
}

// AddAuthors adds the "authors" edges to the Person entity.
func (au *ArtifactUpdate) AddAuthors(p ...*Person) *ArtifactUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddAuthorIDs(ids...)
}

// SetDonorID sets the "donor" edge to the Person entity by ID.
func (au *ArtifactUpdate) SetDonorID(id int) *ArtifactUpdate {
	au.mutation.SetDonorID(id)
	return au
}

// SetNillableDonorID sets the "donor" edge to the Person entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDonorID(id *int) *ArtifactUpdate {
	if id != nil {
		au = au.SetDonorID(*id)
	}
	return au
}

// SetDonor sets the "donor" edge to the Person entity.
func (au *ArtifactUpdate) SetDonor(p *Person) *ArtifactUpdate {
	return au.SetDonorID(p.ID)
}

// AddMediumIDs adds the "mediums" edge to the Medium entity by IDs.
func (au *ArtifactUpdate) AddMediumIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddMediumIDs(ids...)
	return au
}

// AddMediums adds the "mediums" edges to the Medium entity.
func (au *ArtifactUpdate) AddMediums(m ...*Medium) *ArtifactUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMediumIDs(ids...)
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (au *ArtifactUpdate) AddTechniqueIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddTechniqueIDs(ids...)
	return au
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (au *ArtifactUpdate) AddTechniques(t ...*Technique) *ArtifactUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTechniqueIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (au *ArtifactUpdate) AddProjectIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddProjectIDs(ids...)
	return au
}

// AddProjects adds the "projects" edges to the Project entity.
func (au *ArtifactUpdate) AddProjects(p ...*Project) *ArtifactUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddProjectIDs(ids...)
}

// AddPublicationIDs adds the "publications" edge to the Publication entity by IDs.
func (au *ArtifactUpdate) AddPublicationIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddPublicationIDs(ids...)
	return au
}

// AddPublications adds the "publications" edges to the Publication entity.
func (au *ArtifactUpdate) AddPublications(p ...*Publication) *ArtifactUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPublicationIDs(ids...)
}

// SetCulturalAffiliationID sets the "cultural_affiliation" edge to the Culture entity by ID.
func (au *ArtifactUpdate) SetCulturalAffiliationID(id int) *ArtifactUpdate {
	au.mutation.SetCulturalAffiliationID(id)
	return au
}

// SetNillableCulturalAffiliationID sets the "cultural_affiliation" edge to the Culture entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableCulturalAffiliationID(id *int) *ArtifactUpdate {
	if id != nil {
		au = au.SetCulturalAffiliationID(*id)
	}
	return au
}

// SetCulturalAffiliation sets the "cultural_affiliation" edge to the Culture entity.
func (au *ArtifactUpdate) SetCulturalAffiliation(c *Culture) *ArtifactUpdate {
	return au.SetCulturalAffiliationID(c.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (au *ArtifactUpdate) SetOrganizationID(id int) *ArtifactUpdate {
	au.mutation.SetOrganizationID(id)
	return au
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableOrganizationID(id *int) *ArtifactUpdate {
	if id != nil {
		au = au.SetOrganizationID(*id)
	}
	return au
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (au *ArtifactUpdate) SetOrganization(o *Organization) *ArtifactUpdate {
	return au.SetOrganizationID(o.ID)
}

// SetMonumentID sets the "monument" edge to the Monument entity by ID.
func (au *ArtifactUpdate) SetMonumentID(id int) *ArtifactUpdate {
	au.mutation.SetMonumentID(id)
	return au
}

// SetNillableMonumentID sets the "monument" edge to the Monument entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableMonumentID(id *int) *ArtifactUpdate {
	if id != nil {
		au = au.SetMonumentID(*id)
	}
	return au
}

// SetMonument sets the "monument" edge to the Monument entity.
func (au *ArtifactUpdate) SetMonument(m *Monument) *ArtifactUpdate {
	return au.SetMonumentID(m.ID)
}

// SetModelID sets the "model" edge to the Model entity by ID.
func (au *ArtifactUpdate) SetModelID(id int) *ArtifactUpdate {
	au.mutation.SetModelID(id)
	return au
}

// SetNillableModelID sets the "model" edge to the Model entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableModelID(id *int) *ArtifactUpdate {
	if id != nil {
		au = au.SetModelID(*id)
	}
	return au
}

// SetModel sets the "model" edge to the Model entity.
func (au *ArtifactUpdate) SetModel(m *Model) *ArtifactUpdate {
	return au.SetModelID(m.ID)
}

// SetSetID sets the "set" edge to the Set entity by ID.
func (au *ArtifactUpdate) SetSetID(id int) *ArtifactUpdate {
	au.mutation.SetSetID(id)
	return au
}

// SetNillableSetID sets the "set" edge to the Set entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableSetID(id *int) *ArtifactUpdate {
	if id != nil {
		au = au.SetSetID(*id)
	}
	return au
}

// SetSet sets the "set" edge to the Set entity.
func (au *ArtifactUpdate) SetSet(s *Set) *ArtifactUpdate {
	return au.SetSetID(s.ID)
}

// SetLocationID sets the "location" edge to the Location entity by ID.
func (au *ArtifactUpdate) SetLocationID(id int) *ArtifactUpdate {
	au.mutation.SetLocationID(id)
	return au
}

// SetNillableLocationID sets the "location" edge to the Location entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableLocationID(id *int) *ArtifactUpdate {
	if id != nil {
		au = au.SetLocationID(*id)
	}
	return au
}

// SetLocation sets the "location" edge to the Location entity.
func (au *ArtifactUpdate) SetLocation(l *Location) *ArtifactUpdate {
	return au.SetLocationID(l.ID)
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (au *ArtifactUpdate) SetCollectionID(id int) *ArtifactUpdate {
	au.mutation.SetCollectionID(id)
	return au
}

// SetCollection sets the "collection" edge to the Collection entity.
func (au *ArtifactUpdate) SetCollection(c *Collection) *ArtifactUpdate {
	return au.SetCollectionID(c.ID)
}

// SetLicenseID sets the "license" edge to the License entity by ID.
func (au *ArtifactUpdate) SetLicenseID(id int) *ArtifactUpdate {
	au.mutation.SetLicenseID(id)
	return au
}

// SetNillableLicenseID sets the "license" edge to the License entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableLicenseID(id *int) *ArtifactUpdate {
	if id != nil {
		au = au.SetLicenseID(*id)
	}
	return au
}

// SetLicense sets the "license" edge to the License entity.
func (au *ArtifactUpdate) SetLicense(l *License) *ArtifactUpdate {
	return au.SetLicenseID(l.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (au *ArtifactUpdate) SetCountryID(id int) *ArtifactUpdate {
	au.mutation.SetCountryID(id)
	return au
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableCountryID(id *int) *ArtifactUpdate {
	if id != nil {
		au = au.SetCountryID(*id)
	}
	return au
}

// SetCountry sets the "country" edge to the Country entity.
func (au *ArtifactUpdate) SetCountry(c *Country) *ArtifactUpdate {
	return au.SetCountryID(c.ID)
}

// SetSettlementID sets the "settlement" edge to the Settlement entity by ID.
func (au *ArtifactUpdate) SetSettlementID(id int) *ArtifactUpdate {
	au.mutation.SetSettlementID(id)
	return au
}

// SetNillableSettlementID sets the "settlement" edge to the Settlement entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableSettlementID(id *int) *ArtifactUpdate {
	if id != nil {
		au = au.SetSettlementID(*id)
	}
	return au
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (au *ArtifactUpdate) SetSettlement(s *Settlement) *ArtifactUpdate {
	return au.SetSettlementID(s.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (au *ArtifactUpdate) SetDistrictID(id int) *ArtifactUpdate {
	au.mutation.SetDistrictID(id)
	return au
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDistrictID(id *int) *ArtifactUpdate {
	if id != nil {
		au = au.SetDistrictID(*id)
	}
	return au
}

// SetDistrict sets the "district" edge to the District entity.
func (au *ArtifactUpdate) SetDistrict(d *District) *ArtifactUpdate {
	return au.SetDistrictID(d.ID)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (au *ArtifactUpdate) SetRegionID(id int) *ArtifactUpdate {
	au.mutation.SetRegionID(id)
	return au
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableRegionID(id *int) *ArtifactUpdate {
	if id != nil {
		au = au.SetRegionID(*id)
	}
	return au
}

// SetRegion sets the "region" edge to the Region entity.
func (au *ArtifactUpdate) SetRegion(r *Region) *ArtifactUpdate {
	return au.SetRegionID(r.ID)
}

// Mutation returns the ArtifactMutation object of the builder.
func (au *ArtifactUpdate) Mutation() *ArtifactMutation {
	return au.mutation
}

// ClearAuthors clears all "authors" edges to the Person entity.
func (au *ArtifactUpdate) ClearAuthors() *ArtifactUpdate {
	au.mutation.ClearAuthors()
	return au
}

// RemoveAuthorIDs removes the "authors" edge to Person entities by IDs.
func (au *ArtifactUpdate) RemoveAuthorIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemoveAuthorIDs(ids...)
	return au
}

// RemoveAuthors removes "authors" edges to Person entities.
func (au *ArtifactUpdate) RemoveAuthors(p ...*Person) *ArtifactUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemoveAuthorIDs(ids...)
}

// ClearDonor clears the "donor" edge to the Person entity.
func (au *ArtifactUpdate) ClearDonor() *ArtifactUpdate {
	au.mutation.ClearDonor()
	return au
}

// ClearMediums clears all "mediums" edges to the Medium entity.
func (au *ArtifactUpdate) ClearMediums() *ArtifactUpdate {
	au.mutation.ClearMediums()
	return au
}

// RemoveMediumIDs removes the "mediums" edge to Medium entities by IDs.
func (au *ArtifactUpdate) RemoveMediumIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemoveMediumIDs(ids...)
	return au
}

// RemoveMediums removes "mediums" edges to Medium entities.
func (au *ArtifactUpdate) RemoveMediums(m ...*Medium) *ArtifactUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMediumIDs(ids...)
}

// ClearTechniques clears all "techniques" edges to the Technique entity.
func (au *ArtifactUpdate) ClearTechniques() *ArtifactUpdate {
	au.mutation.ClearTechniques()
	return au
}

// RemoveTechniqueIDs removes the "techniques" edge to Technique entities by IDs.
func (au *ArtifactUpdate) RemoveTechniqueIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemoveTechniqueIDs(ids...)
	return au
}

// RemoveTechniques removes "techniques" edges to Technique entities.
func (au *ArtifactUpdate) RemoveTechniques(t ...*Technique) *ArtifactUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTechniqueIDs(ids...)
}

// ClearProjects clears all "projects" edges to the Project entity.
func (au *ArtifactUpdate) ClearProjects() *ArtifactUpdate {
	au.mutation.ClearProjects()
	return au
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (au *ArtifactUpdate) RemoveProjectIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemoveProjectIDs(ids...)
	return au
}

// RemoveProjects removes "projects" edges to Project entities.
func (au *ArtifactUpdate) RemoveProjects(p ...*Project) *ArtifactUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemoveProjectIDs(ids...)
}

// ClearPublications clears all "publications" edges to the Publication entity.
func (au *ArtifactUpdate) ClearPublications() *ArtifactUpdate {
	au.mutation.ClearPublications()
	return au
}

// RemovePublicationIDs removes the "publications" edge to Publication entities by IDs.
func (au *ArtifactUpdate) RemovePublicationIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemovePublicationIDs(ids...)
	return au
}

// RemovePublications removes "publications" edges to Publication entities.
func (au *ArtifactUpdate) RemovePublications(p ...*Publication) *ArtifactUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePublicationIDs(ids...)
}

// ClearCulturalAffiliation clears the "cultural_affiliation" edge to the Culture entity.
func (au *ArtifactUpdate) ClearCulturalAffiliation() *ArtifactUpdate {
	au.mutation.ClearCulturalAffiliation()
	return au
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (au *ArtifactUpdate) ClearOrganization() *ArtifactUpdate {
	au.mutation.ClearOrganization()
	return au
}

// ClearMonument clears the "monument" edge to the Monument entity.
func (au *ArtifactUpdate) ClearMonument() *ArtifactUpdate {
	au.mutation.ClearMonument()
	return au
}

// ClearModel clears the "model" edge to the Model entity.
func (au *ArtifactUpdate) ClearModel() *ArtifactUpdate {
	au.mutation.ClearModel()
	return au
}

// ClearSet clears the "set" edge to the Set entity.
func (au *ArtifactUpdate) ClearSet() *ArtifactUpdate {
	au.mutation.ClearSet()
	return au
}

// ClearLocation clears the "location" edge to the Location entity.
func (au *ArtifactUpdate) ClearLocation() *ArtifactUpdate {
	au.mutation.ClearLocation()
	return au
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (au *ArtifactUpdate) ClearCollection() *ArtifactUpdate {
	au.mutation.ClearCollection()
	return au
}

// ClearLicense clears the "license" edge to the License entity.
func (au *ArtifactUpdate) ClearLicense() *ArtifactUpdate {
	au.mutation.ClearLicense()
	return au
}

// ClearCountry clears the "country" edge to the Country entity.
func (au *ArtifactUpdate) ClearCountry() *ArtifactUpdate {
	au.mutation.ClearCountry()
	return au
}

// ClearSettlement clears the "settlement" edge to the Settlement entity.
func (au *ArtifactUpdate) ClearSettlement() *ArtifactUpdate {
	au.mutation.ClearSettlement()
	return au
}

// ClearDistrict clears the "district" edge to the District entity.
func (au *ArtifactUpdate) ClearDistrict() *ArtifactUpdate {
	au.mutation.ClearDistrict()
	return au
}

// ClearRegion clears the "region" edge to the Region entity.
func (au *ArtifactUpdate) ClearRegion() *ArtifactUpdate {
	au.mutation.ClearRegion()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArtifactUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArtifactUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArtifactUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArtifactUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ArtifactUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if artifact.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized artifact.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := artifact.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *ArtifactUpdate) check() error {
	if v, ok := au.mutation.Status(); ok {
		if err := artifact.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Artifact.status": %w`, err)}
		}
	}
	if _, ok := au.mutation.CollectionID(); au.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Artifact.collection"`)
	}
	return nil
}

func (au *ArtifactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(artifact.Table, artifact.Columns, sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedBy(); ok {
		_spec.SetField(artifact.FieldCreatedBy, field.TypeString, value)
	}
	if au.mutation.CreatedByCleared() {
		_spec.ClearField(artifact.FieldCreatedBy, field.TypeString)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(artifact.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedBy(); ok {
		_spec.SetField(artifact.FieldUpdatedBy, field.TypeString, value)
	}
	if au.mutation.UpdatedByCleared() {
		_spec.ClearField(artifact.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := au.mutation.DisplayName(); ok {
		_spec.SetField(artifact.FieldDisplayName, field.TypeString, value)
	}
	if au.mutation.DisplayNameCleared() {
		_spec.ClearField(artifact.FieldDisplayName, field.TypeString)
	}
	if value, ok := au.mutation.Abbreviation(); ok {
		_spec.SetField(artifact.FieldAbbreviation, field.TypeString, value)
	}
	if au.mutation.AbbreviationCleared() {
		_spec.ClearField(artifact.FieldAbbreviation, field.TypeString)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(artifact.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(artifact.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.ExternalLink(); ok {
		_spec.SetField(artifact.FieldExternalLink, field.TypeString, value)
	}
	if au.mutation.ExternalLinkCleared() {
		_spec.ClearField(artifact.FieldExternalLink, field.TypeString)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(artifact.FieldStatus, field.TypeEnum, value)
	}
	if au.mutation.StatusCleared() {
		_spec.ClearField(artifact.FieldStatus, field.TypeEnum)
	}
	if value, ok := au.mutation.PrimaryImageURL(); ok {
		_spec.SetField(artifact.FieldPrimaryImageURL, field.TypeString, value)
	}
	if au.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(artifact.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := au.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(artifact.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, artifact.FieldAdditionalImagesUrls, value)
		})
	}
	if au.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(artifact.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(artifact.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(artifact.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.DeletedBy(); ok {
		_spec.SetField(artifact.FieldDeletedBy, field.TypeString, value)
	}
	if au.mutation.DeletedByCleared() {
		_spec.ClearField(artifact.FieldDeletedBy, field.TypeString)
	}
	if value, ok := au.mutation.Dating(); ok {
		_spec.SetField(artifact.FieldDating, field.TypeString, value)
	}
	if au.mutation.DatingCleared() {
		_spec.ClearField(artifact.FieldDating, field.TypeString)
	}
	if value, ok := au.mutation.DatingStart(); ok {
		_spec.SetField(artifact.FieldDatingStart, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedDatingStart(); ok {
		_spec.AddField(artifact.FieldDatingStart, field.TypeInt, value)
	}
	if au.mutation.DatingStartCleared() {
		_spec.ClearField(artifact.FieldDatingStart, field.TypeInt)
	}
	if value, ok := au.mutation.DatingEnd(); ok {
		_spec.SetField(artifact.FieldDatingEnd, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedDatingEnd(); ok {
		_spec.AddField(artifact.FieldDatingEnd, field.TypeInt, value)
	}
	if au.mutation.DatingEndCleared() {
		_spec.ClearField(artifact.FieldDatingEnd, field.TypeInt)
	}
	if value, ok := au.mutation.Height(); ok {
		_spec.SetField(artifact.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedHeight(); ok {
		_spec.AddField(artifact.FieldHeight, field.TypeFloat64, value)
	}
	if au.mutation.HeightCleared() {
		_spec.ClearField(artifact.FieldHeight, field.TypeFloat64)
	}
	if value, ok := au.mutation.Width(); ok {
		_spec.SetField(artifact.FieldWidth, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedWidth(); ok {
		_spec.AddField(artifact.FieldWidth, field.TypeFloat64, value)
	}
	if au.mutation.WidthCleared() {
		_spec.ClearField(artifact.FieldWidth, field.TypeFloat64)
	}
	if value, ok := au.mutation.Length(); ok {
		_spec.SetField(artifact.FieldLength, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedLength(); ok {
		_spec.AddField(artifact.FieldLength, field.TypeFloat64, value)
	}
	if au.mutation.LengthCleared() {
		_spec.ClearField(artifact.FieldLength, field.TypeFloat64)
	}
	if value, ok := au.mutation.Depth(); ok {
		_spec.SetField(artifact.FieldDepth, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedDepth(); ok {
		_spec.AddField(artifact.FieldDepth, field.TypeFloat64, value)
	}
	if au.mutation.DepthCleared() {
		_spec.ClearField(artifact.FieldDepth, field.TypeFloat64)
	}
	if value, ok := au.mutation.Diameter(); ok {
		_spec.SetField(artifact.FieldDiameter, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedDiameter(); ok {
		_spec.AddField(artifact.FieldDiameter, field.TypeFloat64, value)
	}
	if au.mutation.DiameterCleared() {
		_spec.ClearField(artifact.FieldDiameter, field.TypeFloat64)
	}
	if value, ok := au.mutation.Weight(); ok {
		_spec.SetField(artifact.FieldWeight, field.TypeString, value)
	}
	if au.mutation.WeightCleared() {
		_spec.ClearField(artifact.FieldWeight, field.TypeString)
	}
	if value, ok := au.mutation.Dimensions(); ok {
		_spec.SetField(artifact.FieldDimensions, field.TypeString, value)
	}
	if au.mutation.DimensionsCleared() {
		_spec.ClearField(artifact.FieldDimensions, field.TypeString)
	}
	if value, ok := au.mutation.ChemicalComposition(); ok {
		_spec.SetField(artifact.FieldChemicalComposition, field.TypeString, value)
	}
	if au.mutation.ChemicalCompositionCleared() {
		_spec.ClearField(artifact.FieldChemicalComposition, field.TypeString)
	}
	if value, ok := au.mutation.KpNumber(); ok {
		_spec.SetField(artifact.FieldKpNumber, field.TypeString, value)
	}
	if au.mutation.KpNumberCleared() {
		_spec.ClearField(artifact.FieldKpNumber, field.TypeString)
	}
	if value, ok := au.mutation.GoskatalogNumber(); ok {
		_spec.SetField(artifact.FieldGoskatalogNumber, field.TypeString, value)
	}
	if au.mutation.GoskatalogNumberCleared() {
		_spec.ClearField(artifact.FieldGoskatalogNumber, field.TypeString)
	}
	if value, ok := au.mutation.InventoryNumber(); ok {
		_spec.SetField(artifact.FieldInventoryNumber, field.TypeString, value)
	}
	if au.mutation.InventoryNumberCleared() {
		_spec.ClearField(artifact.FieldInventoryNumber, field.TypeString)
	}
	if value, ok := au.mutation.Typology(); ok {
		_spec.SetField(artifact.FieldTypology, field.TypeString, value)
	}
	if au.mutation.TypologyCleared() {
		_spec.ClearField(artifact.FieldTypology, field.TypeString)
	}
	if value, ok := au.mutation.AdmissionDate(); ok {
		_spec.SetField(artifact.FieldAdmissionDate, field.TypeTime, value)
	}
	if au.mutation.AdmissionDateCleared() {
		_spec.ClearField(artifact.FieldAdmissionDate, field.TypeTime)
	}
	if au.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AuthorsTable,
			Columns: artifact.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAuthorsIDs(); len(nodes) > 0 && !au.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AuthorsTable,
			Columns: artifact.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AuthorsTable,
			Columns: artifact.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DonorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.DonorTable,
			Columns: []string{artifact.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DonorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.DonorTable,
			Columns: []string{artifact.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MediumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.MediumsTable,
			Columns: artifact.MediumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMediumsIDs(); len(nodes) > 0 && !au.mutation.MediumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.MediumsTable,
			Columns: artifact.MediumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MediumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.MediumsTable,
			Columns: artifact.MediumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.TechniquesTable,
			Columns: artifact.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTechniquesIDs(); len(nodes) > 0 && !au.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.TechniquesTable,
			Columns: artifact.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.TechniquesTable,
			Columns: artifact.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.ProjectsTable,
			Columns: artifact.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !au.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.ProjectsTable,
			Columns: artifact.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.ProjectsTable,
			Columns: artifact.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PublicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.PublicationsTable,
			Columns: artifact.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPublicationsIDs(); len(nodes) > 0 && !au.mutation.PublicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.PublicationsTable,
			Columns: artifact.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PublicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.PublicationsTable,
			Columns: artifact.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CulturalAffiliationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.CulturalAffiliationTable,
			Columns: []string{artifact.CulturalAffiliationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(culture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CulturalAffiliationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.CulturalAffiliationTable,
			Columns: []string{artifact.CulturalAffiliationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(culture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.OrganizationTable,
			Columns: []string{artifact.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.OrganizationTable,
			Columns: []string{artifact.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MonumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.MonumentTable,
			Columns: []string{artifact.MonumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monument.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MonumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.MonumentTable,
			Columns: []string{artifact.MonumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.ModelTable,
			Columns: []string{artifact.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.ModelTable,
			Columns: []string{artifact.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.SetTable,
			Columns: []string{artifact.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.SetTable,
			Columns: []string{artifact.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.LocationTable,
			Columns: []string{artifact.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.LocationTable,
			Columns: []string{artifact.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.CollectionTable,
			Columns: []string{artifact.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.CollectionTable,
			Columns: []string{artifact.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.LicenseTable,
			Columns: []string{artifact.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.LicenseTable,
			Columns: []string{artifact.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.CountryTable,
			Columns: []string{artifact.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.CountryTable,
			Columns: []string{artifact.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SettlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.SettlementTable,
			Columns: []string{artifact.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.SettlementTable,
			Columns: []string{artifact.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.DistrictTable,
			Columns: []string{artifact.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.DistrictTable,
			Columns: []string{artifact.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.RegionTable,
			Columns: []string{artifact.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.RegionTable,
			Columns: []string{artifact.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ArtifactUpdateOne is the builder for updating a single Artifact entity.
type ArtifactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArtifactMutation
}

// SetCreatedBy sets the "created_by" field.
func (auo *ArtifactUpdateOne) SetCreatedBy(s string) *ArtifactUpdateOne {
	auo.mutation.SetCreatedBy(s)
	return auo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableCreatedBy(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetCreatedBy(*s)
	}
	return auo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (auo *ArtifactUpdateOne) ClearCreatedBy() *ArtifactUpdateOne {
	auo.mutation.ClearCreatedBy()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *ArtifactUpdateOne) SetUpdatedAt(t time.Time) *ArtifactUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUpdatedBy sets the "updated_by" field.
func (auo *ArtifactUpdateOne) SetUpdatedBy(s string) *ArtifactUpdateOne {
	auo.mutation.SetUpdatedBy(s)
	return auo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableUpdatedBy(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetUpdatedBy(*s)
	}
	return auo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (auo *ArtifactUpdateOne) ClearUpdatedBy() *ArtifactUpdateOne {
	auo.mutation.ClearUpdatedBy()
	return auo
}

// SetDisplayName sets the "display_name" field.
func (auo *ArtifactUpdateOne) SetDisplayName(s string) *ArtifactUpdateOne {
	auo.mutation.SetDisplayName(s)
	return auo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDisplayName(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetDisplayName(*s)
	}
	return auo
}

// ClearDisplayName clears the value of the "display_name" field.
func (auo *ArtifactUpdateOne) ClearDisplayName() *ArtifactUpdateOne {
	auo.mutation.ClearDisplayName()
	return auo
}

// SetAbbreviation sets the "abbreviation" field.
func (auo *ArtifactUpdateOne) SetAbbreviation(s string) *ArtifactUpdateOne {
	auo.mutation.SetAbbreviation(s)
	return auo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableAbbreviation(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetAbbreviation(*s)
	}
	return auo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (auo *ArtifactUpdateOne) ClearAbbreviation() *ArtifactUpdateOne {
	auo.mutation.ClearAbbreviation()
	return auo
}

// SetDescription sets the "description" field.
func (auo *ArtifactUpdateOne) SetDescription(s string) *ArtifactUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDescription(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *ArtifactUpdateOne) ClearDescription() *ArtifactUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetExternalLink sets the "external_link" field.
func (auo *ArtifactUpdateOne) SetExternalLink(s string) *ArtifactUpdateOne {
	auo.mutation.SetExternalLink(s)
	return auo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableExternalLink(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetExternalLink(*s)
	}
	return auo
}

// ClearExternalLink clears the value of the "external_link" field.
func (auo *ArtifactUpdateOne) ClearExternalLink() *ArtifactUpdateOne {
	auo.mutation.ClearExternalLink()
	return auo
}

// SetStatus sets the "status" field.
func (auo *ArtifactUpdateOne) SetStatus(a artifact.Status) *ArtifactUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableStatus(a *artifact.Status) *ArtifactUpdateOne {
	if a != nil {
		auo.SetStatus(*a)
	}
	return auo
}

// ClearStatus clears the value of the "status" field.
func (auo *ArtifactUpdateOne) ClearStatus() *ArtifactUpdateOne {
	auo.mutation.ClearStatus()
	return auo
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (auo *ArtifactUpdateOne) SetPrimaryImageURL(s string) *ArtifactUpdateOne {
	auo.mutation.SetPrimaryImageURL(s)
	return auo
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillablePrimaryImageURL(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetPrimaryImageURL(*s)
	}
	return auo
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (auo *ArtifactUpdateOne) ClearPrimaryImageURL() *ArtifactUpdateOne {
	auo.mutation.ClearPrimaryImageURL()
	return auo
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (auo *ArtifactUpdateOne) SetAdditionalImagesUrls(s []string) *ArtifactUpdateOne {
	auo.mutation.SetAdditionalImagesUrls(s)
	return auo
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (auo *ArtifactUpdateOne) AppendAdditionalImagesUrls(s []string) *ArtifactUpdateOne {
	auo.mutation.AppendAdditionalImagesUrls(s)
	return auo
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (auo *ArtifactUpdateOne) ClearAdditionalImagesUrls() *ArtifactUpdateOne {
	auo.mutation.ClearAdditionalImagesUrls()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *ArtifactUpdateOne) SetDeletedAt(t time.Time) *ArtifactUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDeletedAt(t *time.Time) *ArtifactUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *ArtifactUpdateOne) ClearDeletedAt() *ArtifactUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetDeletedBy sets the "deleted_by" field.
func (auo *ArtifactUpdateOne) SetDeletedBy(s string) *ArtifactUpdateOne {
	auo.mutation.SetDeletedBy(s)
	return auo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDeletedBy(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetDeletedBy(*s)
	}
	return auo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (auo *ArtifactUpdateOne) ClearDeletedBy() *ArtifactUpdateOne {
	auo.mutation.ClearDeletedBy()
	return auo
}

// SetDating sets the "dating" field.
func (auo *ArtifactUpdateOne) SetDating(s string) *ArtifactUpdateOne {
	auo.mutation.SetDating(s)
	return auo
}

// SetNillableDating sets the "dating" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDating(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetDating(*s)
	}
	return auo
}

// ClearDating clears the value of the "dating" field.
func (auo *ArtifactUpdateOne) ClearDating() *ArtifactUpdateOne {
	auo.mutation.ClearDating()
	return auo
}

// SetDatingStart sets the "dating_start" field.
func (auo *ArtifactUpdateOne) SetDatingStart(i int) *ArtifactUpdateOne {
	auo.mutation.ResetDatingStart()
	auo.mutation.SetDatingStart(i)
	return auo
}

// SetNillableDatingStart sets the "dating_start" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDatingStart(i *int) *ArtifactUpdateOne {
	if i != nil {
		auo.SetDatingStart(*i)
	}
	return auo
}

// AddDatingStart adds i to the "dating_start" field.
func (auo *ArtifactUpdateOne) AddDatingStart(i int) *ArtifactUpdateOne {
	auo.mutation.AddDatingStart(i)
	return auo
}

// ClearDatingStart clears the value of the "dating_start" field.
func (auo *ArtifactUpdateOne) ClearDatingStart() *ArtifactUpdateOne {
	auo.mutation.ClearDatingStart()
	return auo
}

// SetDatingEnd sets the "dating_end" field.
func (auo *ArtifactUpdateOne) SetDatingEnd(i int) *ArtifactUpdateOne {
	auo.mutation.ResetDatingEnd()
	auo.mutation.SetDatingEnd(i)
	return auo
}

// SetNillableDatingEnd sets the "dating_end" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDatingEnd(i *int) *ArtifactUpdateOne {
	if i != nil {
		auo.SetDatingEnd(*i)
	}
	return auo
}

// AddDatingEnd adds i to the "dating_end" field.
func (auo *ArtifactUpdateOne) AddDatingEnd(i int) *ArtifactUpdateOne {
	auo.mutation.AddDatingEnd(i)
	return auo
}

// ClearDatingEnd clears the value of the "dating_end" field.
func (auo *ArtifactUpdateOne) ClearDatingEnd() *ArtifactUpdateOne {
	auo.mutation.ClearDatingEnd()
	return auo
}

// SetHeight sets the "height" field.
func (auo *ArtifactUpdateOne) SetHeight(f float64) *ArtifactUpdateOne {
	auo.mutation.ResetHeight()
	auo.mutation.SetHeight(f)
	return auo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableHeight(f *float64) *ArtifactUpdateOne {
	if f != nil {
		auo.SetHeight(*f)
	}
	return auo
}

// AddHeight adds f to the "height" field.
func (auo *ArtifactUpdateOne) AddHeight(f float64) *ArtifactUpdateOne {
	auo.mutation.AddHeight(f)
	return auo
}

// ClearHeight clears the value of the "height" field.
func (auo *ArtifactUpdateOne) ClearHeight() *ArtifactUpdateOne {
	auo.mutation.ClearHeight()
	return auo
}

// SetWidth sets the "width" field.
func (auo *ArtifactUpdateOne) SetWidth(f float64) *ArtifactUpdateOne {
	auo.mutation.ResetWidth()
	auo.mutation.SetWidth(f)
	return auo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableWidth(f *float64) *ArtifactUpdateOne {
	if f != nil {
		auo.SetWidth(*f)
	}
	return auo
}

// AddWidth adds f to the "width" field.
func (auo *ArtifactUpdateOne) AddWidth(f float64) *ArtifactUpdateOne {
	auo.mutation.AddWidth(f)
	return auo
}

// ClearWidth clears the value of the "width" field.
func (auo *ArtifactUpdateOne) ClearWidth() *ArtifactUpdateOne {
	auo.mutation.ClearWidth()
	return auo
}

// SetLength sets the "length" field.
func (auo *ArtifactUpdateOne) SetLength(f float64) *ArtifactUpdateOne {
	auo.mutation.ResetLength()
	auo.mutation.SetLength(f)
	return auo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableLength(f *float64) *ArtifactUpdateOne {
	if f != nil {
		auo.SetLength(*f)
	}
	return auo
}

// AddLength adds f to the "length" field.
func (auo *ArtifactUpdateOne) AddLength(f float64) *ArtifactUpdateOne {
	auo.mutation.AddLength(f)
	return auo
}

// ClearLength clears the value of the "length" field.
func (auo *ArtifactUpdateOne) ClearLength() *ArtifactUpdateOne {
	auo.mutation.ClearLength()
	return auo
}

// SetDepth sets the "depth" field.
func (auo *ArtifactUpdateOne) SetDepth(f float64) *ArtifactUpdateOne {
	auo.mutation.ResetDepth()
	auo.mutation.SetDepth(f)
	return auo
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDepth(f *float64) *ArtifactUpdateOne {
	if f != nil {
		auo.SetDepth(*f)
	}
	return auo
}

// AddDepth adds f to the "depth" field.
func (auo *ArtifactUpdateOne) AddDepth(f float64) *ArtifactUpdateOne {
	auo.mutation.AddDepth(f)
	return auo
}

// ClearDepth clears the value of the "depth" field.
func (auo *ArtifactUpdateOne) ClearDepth() *ArtifactUpdateOne {
	auo.mutation.ClearDepth()
	return auo
}

// SetDiameter sets the "diameter" field.
func (auo *ArtifactUpdateOne) SetDiameter(f float64) *ArtifactUpdateOne {
	auo.mutation.ResetDiameter()
	auo.mutation.SetDiameter(f)
	return auo
}

// SetNillableDiameter sets the "diameter" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDiameter(f *float64) *ArtifactUpdateOne {
	if f != nil {
		auo.SetDiameter(*f)
	}
	return auo
}

// AddDiameter adds f to the "diameter" field.
func (auo *ArtifactUpdateOne) AddDiameter(f float64) *ArtifactUpdateOne {
	auo.mutation.AddDiameter(f)
	return auo
}

// ClearDiameter clears the value of the "diameter" field.
func (auo *ArtifactUpdateOne) ClearDiameter() *ArtifactUpdateOne {
	auo.mutation.ClearDiameter()
	return auo
}

// SetWeight sets the "weight" field.
func (auo *ArtifactUpdateOne) SetWeight(s string) *ArtifactUpdateOne {
	auo.mutation.SetWeight(s)
	return auo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableWeight(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetWeight(*s)
	}
	return auo
}

// ClearWeight clears the value of the "weight" field.
func (auo *ArtifactUpdateOne) ClearWeight() *ArtifactUpdateOne {
	auo.mutation.ClearWeight()
	return auo
}

// SetDimensions sets the "dimensions" field.
func (auo *ArtifactUpdateOne) SetDimensions(s string) *ArtifactUpdateOne {
	auo.mutation.SetDimensions(s)
	return auo
}

// SetNillableDimensions sets the "dimensions" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDimensions(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetDimensions(*s)
	}
	return auo
}

// ClearDimensions clears the value of the "dimensions" field.
func (auo *ArtifactUpdateOne) ClearDimensions() *ArtifactUpdateOne {
	auo.mutation.ClearDimensions()
	return auo
}

// SetChemicalComposition sets the "chemical_composition" field.
func (auo *ArtifactUpdateOne) SetChemicalComposition(s string) *ArtifactUpdateOne {
	auo.mutation.SetChemicalComposition(s)
	return auo
}

// SetNillableChemicalComposition sets the "chemical_composition" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableChemicalComposition(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetChemicalComposition(*s)
	}
	return auo
}

// ClearChemicalComposition clears the value of the "chemical_composition" field.
func (auo *ArtifactUpdateOne) ClearChemicalComposition() *ArtifactUpdateOne {
	auo.mutation.ClearChemicalComposition()
	return auo
}

// SetKpNumber sets the "kp_number" field.
func (auo *ArtifactUpdateOne) SetKpNumber(s string) *ArtifactUpdateOne {
	auo.mutation.SetKpNumber(s)
	return auo
}

// SetNillableKpNumber sets the "kp_number" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableKpNumber(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetKpNumber(*s)
	}
	return auo
}

// ClearKpNumber clears the value of the "kp_number" field.
func (auo *ArtifactUpdateOne) ClearKpNumber() *ArtifactUpdateOne {
	auo.mutation.ClearKpNumber()
	return auo
}

// SetGoskatalogNumber sets the "goskatalog_number" field.
func (auo *ArtifactUpdateOne) SetGoskatalogNumber(s string) *ArtifactUpdateOne {
	auo.mutation.SetGoskatalogNumber(s)
	return auo
}

// SetNillableGoskatalogNumber sets the "goskatalog_number" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableGoskatalogNumber(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetGoskatalogNumber(*s)
	}
	return auo
}

// ClearGoskatalogNumber clears the value of the "goskatalog_number" field.
func (auo *ArtifactUpdateOne) ClearGoskatalogNumber() *ArtifactUpdateOne {
	auo.mutation.ClearGoskatalogNumber()
	return auo
}

// SetInventoryNumber sets the "inventory_number" field.
func (auo *ArtifactUpdateOne) SetInventoryNumber(s string) *ArtifactUpdateOne {
	auo.mutation.SetInventoryNumber(s)
	return auo
}

// SetNillableInventoryNumber sets the "inventory_number" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableInventoryNumber(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetInventoryNumber(*s)
	}
	return auo
}

// ClearInventoryNumber clears the value of the "inventory_number" field.
func (auo *ArtifactUpdateOne) ClearInventoryNumber() *ArtifactUpdateOne {
	auo.mutation.ClearInventoryNumber()
	return auo
}

// SetTypology sets the "typology" field.
func (auo *ArtifactUpdateOne) SetTypology(s string) *ArtifactUpdateOne {
	auo.mutation.SetTypology(s)
	return auo
}

// SetNillableTypology sets the "typology" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableTypology(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetTypology(*s)
	}
	return auo
}

// ClearTypology clears the value of the "typology" field.
func (auo *ArtifactUpdateOne) ClearTypology() *ArtifactUpdateOne {
	auo.mutation.ClearTypology()
	return auo
}

// SetAdmissionDate sets the "admission_date" field.
func (auo *ArtifactUpdateOne) SetAdmissionDate(t time.Time) *ArtifactUpdateOne {
	auo.mutation.SetAdmissionDate(t)
	return auo
}

// SetNillableAdmissionDate sets the "admission_date" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableAdmissionDate(t *time.Time) *ArtifactUpdateOne {
	if t != nil {
		auo.SetAdmissionDate(*t)
	}
	return auo
}

// ClearAdmissionDate clears the value of the "admission_date" field.
func (auo *ArtifactUpdateOne) ClearAdmissionDate() *ArtifactUpdateOne {
	auo.mutation.ClearAdmissionDate()
	return auo
}

// AddAuthorIDs adds the "authors" edge to the Person entity by IDs.
func (auo *ArtifactUpdateOne) AddAuthorIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddAuthorIDs(ids...)
	return auo
}

// AddAuthors adds the "authors" edges to the Person entity.
func (auo *ArtifactUpdateOne) AddAuthors(p ...*Person) *ArtifactUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddAuthorIDs(ids...)
}

// SetDonorID sets the "donor" edge to the Person entity by ID.
func (auo *ArtifactUpdateOne) SetDonorID(id int) *ArtifactUpdateOne {
	auo.mutation.SetDonorID(id)
	return auo
}

// SetNillableDonorID sets the "donor" edge to the Person entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDonorID(id *int) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetDonorID(*id)
	}
	return auo
}

// SetDonor sets the "donor" edge to the Person entity.
func (auo *ArtifactUpdateOne) SetDonor(p *Person) *ArtifactUpdateOne {
	return auo.SetDonorID(p.ID)
}

// AddMediumIDs adds the "mediums" edge to the Medium entity by IDs.
func (auo *ArtifactUpdateOne) AddMediumIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddMediumIDs(ids...)
	return auo
}

// AddMediums adds the "mediums" edges to the Medium entity.
func (auo *ArtifactUpdateOne) AddMediums(m ...*Medium) *ArtifactUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMediumIDs(ids...)
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (auo *ArtifactUpdateOne) AddTechniqueIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddTechniqueIDs(ids...)
	return auo
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (auo *ArtifactUpdateOne) AddTechniques(t ...*Technique) *ArtifactUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTechniqueIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (auo *ArtifactUpdateOne) AddProjectIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddProjectIDs(ids...)
	return auo
}

// AddProjects adds the "projects" edges to the Project entity.
func (auo *ArtifactUpdateOne) AddProjects(p ...*Project) *ArtifactUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddProjectIDs(ids...)
}

// AddPublicationIDs adds the "publications" edge to the Publication entity by IDs.
func (auo *ArtifactUpdateOne) AddPublicationIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddPublicationIDs(ids...)
	return auo
}

// AddPublications adds the "publications" edges to the Publication entity.
func (auo *ArtifactUpdateOne) AddPublications(p ...*Publication) *ArtifactUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPublicationIDs(ids...)
}

// SetCulturalAffiliationID sets the "cultural_affiliation" edge to the Culture entity by ID.
func (auo *ArtifactUpdateOne) SetCulturalAffiliationID(id int) *ArtifactUpdateOne {
	auo.mutation.SetCulturalAffiliationID(id)
	return auo
}

// SetNillableCulturalAffiliationID sets the "cultural_affiliation" edge to the Culture entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableCulturalAffiliationID(id *int) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetCulturalAffiliationID(*id)
	}
	return auo
}

// SetCulturalAffiliation sets the "cultural_affiliation" edge to the Culture entity.
func (auo *ArtifactUpdateOne) SetCulturalAffiliation(c *Culture) *ArtifactUpdateOne {
	return auo.SetCulturalAffiliationID(c.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (auo *ArtifactUpdateOne) SetOrganizationID(id int) *ArtifactUpdateOne {
	auo.mutation.SetOrganizationID(id)
	return auo
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableOrganizationID(id *int) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetOrganizationID(*id)
	}
	return auo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (auo *ArtifactUpdateOne) SetOrganization(o *Organization) *ArtifactUpdateOne {
	return auo.SetOrganizationID(o.ID)
}

// SetMonumentID sets the "monument" edge to the Monument entity by ID.
func (auo *ArtifactUpdateOne) SetMonumentID(id int) *ArtifactUpdateOne {
	auo.mutation.SetMonumentID(id)
	return auo
}

// SetNillableMonumentID sets the "monument" edge to the Monument entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableMonumentID(id *int) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetMonumentID(*id)
	}
	return auo
}

// SetMonument sets the "monument" edge to the Monument entity.
func (auo *ArtifactUpdateOne) SetMonument(m *Monument) *ArtifactUpdateOne {
	return auo.SetMonumentID(m.ID)
}

// SetModelID sets the "model" edge to the Model entity by ID.
func (auo *ArtifactUpdateOne) SetModelID(id int) *ArtifactUpdateOne {
	auo.mutation.SetModelID(id)
	return auo
}

// SetNillableModelID sets the "model" edge to the Model entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableModelID(id *int) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetModelID(*id)
	}
	return auo
}

// SetModel sets the "model" edge to the Model entity.
func (auo *ArtifactUpdateOne) SetModel(m *Model) *ArtifactUpdateOne {
	return auo.SetModelID(m.ID)
}

// SetSetID sets the "set" edge to the Set entity by ID.
func (auo *ArtifactUpdateOne) SetSetID(id int) *ArtifactUpdateOne {
	auo.mutation.SetSetID(id)
	return auo
}

// SetNillableSetID sets the "set" edge to the Set entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableSetID(id *int) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetSetID(*id)
	}
	return auo
}

// SetSet sets the "set" edge to the Set entity.
func (auo *ArtifactUpdateOne) SetSet(s *Set) *ArtifactUpdateOne {
	return auo.SetSetID(s.ID)
}

// SetLocationID sets the "location" edge to the Location entity by ID.
func (auo *ArtifactUpdateOne) SetLocationID(id int) *ArtifactUpdateOne {
	auo.mutation.SetLocationID(id)
	return auo
}

// SetNillableLocationID sets the "location" edge to the Location entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableLocationID(id *int) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetLocationID(*id)
	}
	return auo
}

// SetLocation sets the "location" edge to the Location entity.
func (auo *ArtifactUpdateOne) SetLocation(l *Location) *ArtifactUpdateOne {
	return auo.SetLocationID(l.ID)
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (auo *ArtifactUpdateOne) SetCollectionID(id int) *ArtifactUpdateOne {
	auo.mutation.SetCollectionID(id)
	return auo
}

// SetCollection sets the "collection" edge to the Collection entity.
func (auo *ArtifactUpdateOne) SetCollection(c *Collection) *ArtifactUpdateOne {
	return auo.SetCollectionID(c.ID)
}

// SetLicenseID sets the "license" edge to the License entity by ID.
func (auo *ArtifactUpdateOne) SetLicenseID(id int) *ArtifactUpdateOne {
	auo.mutation.SetLicenseID(id)
	return auo
}

// SetNillableLicenseID sets the "license" edge to the License entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableLicenseID(id *int) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetLicenseID(*id)
	}
	return auo
}

// SetLicense sets the "license" edge to the License entity.
func (auo *ArtifactUpdateOne) SetLicense(l *License) *ArtifactUpdateOne {
	return auo.SetLicenseID(l.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (auo *ArtifactUpdateOne) SetCountryID(id int) *ArtifactUpdateOne {
	auo.mutation.SetCountryID(id)
	return auo
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableCountryID(id *int) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetCountryID(*id)
	}
	return auo
}

// SetCountry sets the "country" edge to the Country entity.
func (auo *ArtifactUpdateOne) SetCountry(c *Country) *ArtifactUpdateOne {
	return auo.SetCountryID(c.ID)
}

// SetSettlementID sets the "settlement" edge to the Settlement entity by ID.
func (auo *ArtifactUpdateOne) SetSettlementID(id int) *ArtifactUpdateOne {
	auo.mutation.SetSettlementID(id)
	return auo
}

// SetNillableSettlementID sets the "settlement" edge to the Settlement entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableSettlementID(id *int) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetSettlementID(*id)
	}
	return auo
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (auo *ArtifactUpdateOne) SetSettlement(s *Settlement) *ArtifactUpdateOne {
	return auo.SetSettlementID(s.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (auo *ArtifactUpdateOne) SetDistrictID(id int) *ArtifactUpdateOne {
	auo.mutation.SetDistrictID(id)
	return auo
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDistrictID(id *int) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetDistrictID(*id)
	}
	return auo
}

// SetDistrict sets the "district" edge to the District entity.
func (auo *ArtifactUpdateOne) SetDistrict(d *District) *ArtifactUpdateOne {
	return auo.SetDistrictID(d.ID)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (auo *ArtifactUpdateOne) SetRegionID(id int) *ArtifactUpdateOne {
	auo.mutation.SetRegionID(id)
	return auo
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableRegionID(id *int) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetRegionID(*id)
	}
	return auo
}

// SetRegion sets the "region" edge to the Region entity.
func (auo *ArtifactUpdateOne) SetRegion(r *Region) *ArtifactUpdateOne {
	return auo.SetRegionID(r.ID)
}

// Mutation returns the ArtifactMutation object of the builder.
func (auo *ArtifactUpdateOne) Mutation() *ArtifactMutation {
	return auo.mutation
}

// ClearAuthors clears all "authors" edges to the Person entity.
func (auo *ArtifactUpdateOne) ClearAuthors() *ArtifactUpdateOne {
	auo.mutation.ClearAuthors()
	return auo
}

// RemoveAuthorIDs removes the "authors" edge to Person entities by IDs.
func (auo *ArtifactUpdateOne) RemoveAuthorIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemoveAuthorIDs(ids...)
	return auo
}

// RemoveAuthors removes "authors" edges to Person entities.
func (auo *ArtifactUpdateOne) RemoveAuthors(p ...*Person) *ArtifactUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemoveAuthorIDs(ids...)
}

// ClearDonor clears the "donor" edge to the Person entity.
func (auo *ArtifactUpdateOne) ClearDonor() *ArtifactUpdateOne {
	auo.mutation.ClearDonor()
	return auo
}

// ClearMediums clears all "mediums" edges to the Medium entity.
func (auo *ArtifactUpdateOne) ClearMediums() *ArtifactUpdateOne {
	auo.mutation.ClearMediums()
	return auo
}

// RemoveMediumIDs removes the "mediums" edge to Medium entities by IDs.
func (auo *ArtifactUpdateOne) RemoveMediumIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemoveMediumIDs(ids...)
	return auo
}

// RemoveMediums removes "mediums" edges to Medium entities.
func (auo *ArtifactUpdateOne) RemoveMediums(m ...*Medium) *ArtifactUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMediumIDs(ids...)
}

// ClearTechniques clears all "techniques" edges to the Technique entity.
func (auo *ArtifactUpdateOne) ClearTechniques() *ArtifactUpdateOne {
	auo.mutation.ClearTechniques()
	return auo
}

// RemoveTechniqueIDs removes the "techniques" edge to Technique entities by IDs.
func (auo *ArtifactUpdateOne) RemoveTechniqueIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemoveTechniqueIDs(ids...)
	return auo
}

// RemoveTechniques removes "techniques" edges to Technique entities.
func (auo *ArtifactUpdateOne) RemoveTechniques(t ...*Technique) *ArtifactUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTechniqueIDs(ids...)
}

// ClearProjects clears all "projects" edges to the Project entity.
func (auo *ArtifactUpdateOne) ClearProjects() *ArtifactUpdateOne {
	auo.mutation.ClearProjects()
	return auo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (auo *ArtifactUpdateOne) RemoveProjectIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemoveProjectIDs(ids...)
	return auo
}

// RemoveProjects removes "projects" edges to Project entities.
func (auo *ArtifactUpdateOne) RemoveProjects(p ...*Project) *ArtifactUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemoveProjectIDs(ids...)
}

// ClearPublications clears all "publications" edges to the Publication entity.
func (auo *ArtifactUpdateOne) ClearPublications() *ArtifactUpdateOne {
	auo.mutation.ClearPublications()
	return auo
}

// RemovePublicationIDs removes the "publications" edge to Publication entities by IDs.
func (auo *ArtifactUpdateOne) RemovePublicationIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemovePublicationIDs(ids...)
	return auo
}

// RemovePublications removes "publications" edges to Publication entities.
func (auo *ArtifactUpdateOne) RemovePublications(p ...*Publication) *ArtifactUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePublicationIDs(ids...)
}

// ClearCulturalAffiliation clears the "cultural_affiliation" edge to the Culture entity.
func (auo *ArtifactUpdateOne) ClearCulturalAffiliation() *ArtifactUpdateOne {
	auo.mutation.ClearCulturalAffiliation()
	return auo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (auo *ArtifactUpdateOne) ClearOrganization() *ArtifactUpdateOne {
	auo.mutation.ClearOrganization()
	return auo
}

// ClearMonument clears the "monument" edge to the Monument entity.
func (auo *ArtifactUpdateOne) ClearMonument() *ArtifactUpdateOne {
	auo.mutation.ClearMonument()
	return auo
}

// ClearModel clears the "model" edge to the Model entity.
func (auo *ArtifactUpdateOne) ClearModel() *ArtifactUpdateOne {
	auo.mutation.ClearModel()
	return auo
}

// ClearSet clears the "set" edge to the Set entity.
func (auo *ArtifactUpdateOne) ClearSet() *ArtifactUpdateOne {
	auo.mutation.ClearSet()
	return auo
}

// ClearLocation clears the "location" edge to the Location entity.
func (auo *ArtifactUpdateOne) ClearLocation() *ArtifactUpdateOne {
	auo.mutation.ClearLocation()
	return auo
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (auo *ArtifactUpdateOne) ClearCollection() *ArtifactUpdateOne {
	auo.mutation.ClearCollection()
	return auo
}

// ClearLicense clears the "license" edge to the License entity.
func (auo *ArtifactUpdateOne) ClearLicense() *ArtifactUpdateOne {
	auo.mutation.ClearLicense()
	return auo
}

// ClearCountry clears the "country" edge to the Country entity.
func (auo *ArtifactUpdateOne) ClearCountry() *ArtifactUpdateOne {
	auo.mutation.ClearCountry()
	return auo
}

// ClearSettlement clears the "settlement" edge to the Settlement entity.
func (auo *ArtifactUpdateOne) ClearSettlement() *ArtifactUpdateOne {
	auo.mutation.ClearSettlement()
	return auo
}

// ClearDistrict clears the "district" edge to the District entity.
func (auo *ArtifactUpdateOne) ClearDistrict() *ArtifactUpdateOne {
	auo.mutation.ClearDistrict()
	return auo
}

// ClearRegion clears the "region" edge to the Region entity.
func (auo *ArtifactUpdateOne) ClearRegion() *ArtifactUpdateOne {
	auo.mutation.ClearRegion()
	return auo
}

// Where appends a list predicates to the ArtifactUpdate builder.
func (auo *ArtifactUpdateOne) Where(ps ...predicate.Artifact) *ArtifactUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArtifactUpdateOne) Select(field string, fields ...string) *ArtifactUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Artifact entity.
func (auo *ArtifactUpdateOne) Save(ctx context.Context) (*Artifact, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArtifactUpdateOne) SaveX(ctx context.Context) *Artifact {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArtifactUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArtifactUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ArtifactUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if artifact.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized artifact.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := artifact.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *ArtifactUpdateOne) check() error {
	if v, ok := auo.mutation.Status(); ok {
		if err := artifact.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Artifact.status": %w`, err)}
		}
	}
	if _, ok := auo.mutation.CollectionID(); auo.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Artifact.collection"`)
	}
	return nil
}

func (auo *ArtifactUpdateOne) sqlSave(ctx context.Context) (_node *Artifact, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(artifact.Table, artifact.Columns, sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Artifact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artifact.FieldID)
		for _, f := range fields {
			if !artifact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != artifact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedBy(); ok {
		_spec.SetField(artifact.FieldCreatedBy, field.TypeString, value)
	}
	if auo.mutation.CreatedByCleared() {
		_spec.ClearField(artifact.FieldCreatedBy, field.TypeString)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(artifact.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedBy(); ok {
		_spec.SetField(artifact.FieldUpdatedBy, field.TypeString, value)
	}
	if auo.mutation.UpdatedByCleared() {
		_spec.ClearField(artifact.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := auo.mutation.DisplayName(); ok {
		_spec.SetField(artifact.FieldDisplayName, field.TypeString, value)
	}
	if auo.mutation.DisplayNameCleared() {
		_spec.ClearField(artifact.FieldDisplayName, field.TypeString)
	}
	if value, ok := auo.mutation.Abbreviation(); ok {
		_spec.SetField(artifact.FieldAbbreviation, field.TypeString, value)
	}
	if auo.mutation.AbbreviationCleared() {
		_spec.ClearField(artifact.FieldAbbreviation, field.TypeString)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(artifact.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(artifact.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.ExternalLink(); ok {
		_spec.SetField(artifact.FieldExternalLink, field.TypeString, value)
	}
	if auo.mutation.ExternalLinkCleared() {
		_spec.ClearField(artifact.FieldExternalLink, field.TypeString)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(artifact.FieldStatus, field.TypeEnum, value)
	}
	if auo.mutation.StatusCleared() {
		_spec.ClearField(artifact.FieldStatus, field.TypeEnum)
	}
	if value, ok := auo.mutation.PrimaryImageURL(); ok {
		_spec.SetField(artifact.FieldPrimaryImageURL, field.TypeString, value)
	}
	if auo.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(artifact.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := auo.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(artifact.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, artifact.FieldAdditionalImagesUrls, value)
		})
	}
	if auo.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(artifact.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(artifact.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(artifact.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.DeletedBy(); ok {
		_spec.SetField(artifact.FieldDeletedBy, field.TypeString, value)
	}
	if auo.mutation.DeletedByCleared() {
		_spec.ClearField(artifact.FieldDeletedBy, field.TypeString)
	}
	if value, ok := auo.mutation.Dating(); ok {
		_spec.SetField(artifact.FieldDating, field.TypeString, value)
	}
	if auo.mutation.DatingCleared() {
		_spec.ClearField(artifact.FieldDating, field.TypeString)
	}
	if value, ok := auo.mutation.DatingStart(); ok {
		_spec.SetField(artifact.FieldDatingStart, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedDatingStart(); ok {
		_spec.AddField(artifact.FieldDatingStart, field.TypeInt, value)
	}
	if auo.mutation.DatingStartCleared() {
		_spec.ClearField(artifact.FieldDatingStart, field.TypeInt)
	}
	if value, ok := auo.mutation.DatingEnd(); ok {
		_spec.SetField(artifact.FieldDatingEnd, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedDatingEnd(); ok {
		_spec.AddField(artifact.FieldDatingEnd, field.TypeInt, value)
	}
	if auo.mutation.DatingEndCleared() {
		_spec.ClearField(artifact.FieldDatingEnd, field.TypeInt)
	}
	if value, ok := auo.mutation.Height(); ok {
		_spec.SetField(artifact.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedHeight(); ok {
		_spec.AddField(artifact.FieldHeight, field.TypeFloat64, value)
	}
	if auo.mutation.HeightCleared() {
		_spec.ClearField(artifact.FieldHeight, field.TypeFloat64)
	}
	if value, ok := auo.mutation.Width(); ok {
		_spec.SetField(artifact.FieldWidth, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedWidth(); ok {
		_spec.AddField(artifact.FieldWidth, field.TypeFloat64, value)
	}
	if auo.mutation.WidthCleared() {
		_spec.ClearField(artifact.FieldWidth, field.TypeFloat64)
	}
	if value, ok := auo.mutation.Length(); ok {
		_spec.SetField(artifact.FieldLength, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedLength(); ok {
		_spec.AddField(artifact.FieldLength, field.TypeFloat64, value)
	}
	if auo.mutation.LengthCleared() {
		_spec.ClearField(artifact.FieldLength, field.TypeFloat64)
	}
	if value, ok := auo.mutation.Depth(); ok {
		_spec.SetField(artifact.FieldDepth, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedDepth(); ok {
		_spec.AddField(artifact.FieldDepth, field.TypeFloat64, value)
	}
	if auo.mutation.DepthCleared() {
		_spec.ClearField(artifact.FieldDepth, field.TypeFloat64)
	}
	if value, ok := auo.mutation.Diameter(); ok {
		_spec.SetField(artifact.FieldDiameter, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedDiameter(); ok {
		_spec.AddField(artifact.FieldDiameter, field.TypeFloat64, value)
	}
	if auo.mutation.DiameterCleared() {
		_spec.ClearField(artifact.FieldDiameter, field.TypeFloat64)
	}
	if value, ok := auo.mutation.Weight(); ok {
		_spec.SetField(artifact.FieldWeight, field.TypeString, value)
	}
	if auo.mutation.WeightCleared() {
		_spec.ClearField(artifact.FieldWeight, field.TypeString)
	}
	if value, ok := auo.mutation.Dimensions(); ok {
		_spec.SetField(artifact.FieldDimensions, field.TypeString, value)
	}
	if auo.mutation.DimensionsCleared() {
		_spec.ClearField(artifact.FieldDimensions, field.TypeString)
	}
	if value, ok := auo.mutation.ChemicalComposition(); ok {
		_spec.SetField(artifact.FieldChemicalComposition, field.TypeString, value)
	}
	if auo.mutation.ChemicalCompositionCleared() {
		_spec.ClearField(artifact.FieldChemicalComposition, field.TypeString)
	}
	if value, ok := auo.mutation.KpNumber(); ok {
		_spec.SetField(artifact.FieldKpNumber, field.TypeString, value)
	}
	if auo.mutation.KpNumberCleared() {
		_spec.ClearField(artifact.FieldKpNumber, field.TypeString)
	}
	if value, ok := auo.mutation.GoskatalogNumber(); ok {
		_spec.SetField(artifact.FieldGoskatalogNumber, field.TypeString, value)
	}
	if auo.mutation.GoskatalogNumberCleared() {
		_spec.ClearField(artifact.FieldGoskatalogNumber, field.TypeString)
	}
	if value, ok := auo.mutation.InventoryNumber(); ok {
		_spec.SetField(artifact.FieldInventoryNumber, field.TypeString, value)
	}
	if auo.mutation.InventoryNumberCleared() {
		_spec.ClearField(artifact.FieldInventoryNumber, field.TypeString)
	}
	if value, ok := auo.mutation.Typology(); ok {
		_spec.SetField(artifact.FieldTypology, field.TypeString, value)
	}
	if auo.mutation.TypologyCleared() {
		_spec.ClearField(artifact.FieldTypology, field.TypeString)
	}
	if value, ok := auo.mutation.AdmissionDate(); ok {
		_spec.SetField(artifact.FieldAdmissionDate, field.TypeTime, value)
	}
	if auo.mutation.AdmissionDateCleared() {
		_spec.ClearField(artifact.FieldAdmissionDate, field.TypeTime)
	}
	if auo.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AuthorsTable,
			Columns: artifact.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAuthorsIDs(); len(nodes) > 0 && !auo.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AuthorsTable,
			Columns: artifact.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AuthorsTable,
			Columns: artifact.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DonorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.DonorTable,
			Columns: []string{artifact.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DonorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.DonorTable,
			Columns: []string{artifact.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MediumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.MediumsTable,
			Columns: artifact.MediumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMediumsIDs(); len(nodes) > 0 && !auo.mutation.MediumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.MediumsTable,
			Columns: artifact.MediumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MediumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.MediumsTable,
			Columns: artifact.MediumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.TechniquesTable,
			Columns: artifact.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTechniquesIDs(); len(nodes) > 0 && !auo.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.TechniquesTable,
			Columns: artifact.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.TechniquesTable,
			Columns: artifact.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.ProjectsTable,
			Columns: artifact.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !auo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.ProjectsTable,
			Columns: artifact.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.ProjectsTable,
			Columns: artifact.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PublicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.PublicationsTable,
			Columns: artifact.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPublicationsIDs(); len(nodes) > 0 && !auo.mutation.PublicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.PublicationsTable,
			Columns: artifact.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PublicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.PublicationsTable,
			Columns: artifact.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CulturalAffiliationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.CulturalAffiliationTable,
			Columns: []string{artifact.CulturalAffiliationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(culture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CulturalAffiliationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.CulturalAffiliationTable,
			Columns: []string{artifact.CulturalAffiliationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(culture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.OrganizationTable,
			Columns: []string{artifact.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.OrganizationTable,
			Columns: []string{artifact.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MonumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.MonumentTable,
			Columns: []string{artifact.MonumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monument.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MonumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.MonumentTable,
			Columns: []string{artifact.MonumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monument.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.ModelTable,
			Columns: []string{artifact.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.ModelTable,
			Columns: []string{artifact.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.SetTable,
			Columns: []string{artifact.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.SetTable,
			Columns: []string{artifact.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(set.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.LocationTable,
			Columns: []string{artifact.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.LocationTable,
			Columns: []string{artifact.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.CollectionTable,
			Columns: []string{artifact.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.CollectionTable,
			Columns: []string{artifact.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.LicenseTable,
			Columns: []string{artifact.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.LicenseTable,
			Columns: []string{artifact.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.CountryTable,
			Columns: []string{artifact.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.CountryTable,
			Columns: []string{artifact.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SettlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.SettlementTable,
			Columns: []string{artifact.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.SettlementTable,
			Columns: []string{artifact.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.DistrictTable,
			Columns: []string{artifact.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.DistrictTable,
			Columns: []string{artifact.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.RegionTable,
			Columns: []string{artifact.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.RegionTable,
			Columns: []string{artifact.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Artifact{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
