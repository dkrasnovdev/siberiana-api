// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/interview"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
)

// InterviewUpdate is the builder for updating Interview entities.
type InterviewUpdate struct {
	config
	hooks    []Hook
	mutation *InterviewMutation
}

// Where appends a list predicates to the InterviewUpdate builder.
func (iu *InterviewUpdate) Where(ps ...predicate.Interview) *InterviewUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetCreatedBy sets the "created_by" field.
func (iu *InterviewUpdate) SetCreatedBy(s string) *InterviewUpdate {
	iu.mutation.SetCreatedBy(s)
	return iu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableCreatedBy(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetCreatedBy(*s)
	}
	return iu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (iu *InterviewUpdate) ClearCreatedBy() *InterviewUpdate {
	iu.mutation.ClearCreatedBy()
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InterviewUpdate) SetUpdatedAt(t time.Time) *InterviewUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetUpdatedBy sets the "updated_by" field.
func (iu *InterviewUpdate) SetUpdatedBy(s string) *InterviewUpdate {
	iu.mutation.SetUpdatedBy(s)
	return iu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableUpdatedBy(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetUpdatedBy(*s)
	}
	return iu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (iu *InterviewUpdate) ClearUpdatedBy() *InterviewUpdate {
	iu.mutation.ClearUpdatedBy()
	return iu
}

// SetDisplayName sets the "display_name" field.
func (iu *InterviewUpdate) SetDisplayName(s string) *InterviewUpdate {
	iu.mutation.SetDisplayName(s)
	return iu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableDisplayName(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetDisplayName(*s)
	}
	return iu
}

// ClearDisplayName clears the value of the "display_name" field.
func (iu *InterviewUpdate) ClearDisplayName() *InterviewUpdate {
	iu.mutation.ClearDisplayName()
	return iu
}

// SetAbbreviation sets the "abbreviation" field.
func (iu *InterviewUpdate) SetAbbreviation(s string) *InterviewUpdate {
	iu.mutation.SetAbbreviation(s)
	return iu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableAbbreviation(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetAbbreviation(*s)
	}
	return iu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (iu *InterviewUpdate) ClearAbbreviation() *InterviewUpdate {
	iu.mutation.ClearAbbreviation()
	return iu
}

// SetDescription sets the "description" field.
func (iu *InterviewUpdate) SetDescription(s string) *InterviewUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableDescription(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// ClearDescription clears the value of the "description" field.
func (iu *InterviewUpdate) ClearDescription() *InterviewUpdate {
	iu.mutation.ClearDescription()
	return iu
}

// SetExternalLink sets the "external_link" field.
func (iu *InterviewUpdate) SetExternalLink(s string) *InterviewUpdate {
	iu.mutation.SetExternalLink(s)
	return iu
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableExternalLink(s *string) *InterviewUpdate {
	if s != nil {
		iu.SetExternalLink(*s)
	}
	return iu
}

// ClearExternalLink clears the value of the "external_link" field.
func (iu *InterviewUpdate) ClearExternalLink() *InterviewUpdate {
	iu.mutation.ClearExternalLink()
	return iu
}

// SetDate sets the "date" field.
func (iu *InterviewUpdate) SetDate(t time.Time) *InterviewUpdate {
	iu.mutation.SetDate(t)
	return iu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (iu *InterviewUpdate) SetNillableDate(t *time.Time) *InterviewUpdate {
	if t != nil {
		iu.SetDate(*t)
	}
	return iu
}

// ClearDate clears the value of the "date" field.
func (iu *InterviewUpdate) ClearDate() *InterviewUpdate {
	iu.mutation.ClearDate()
	return iu
}

// Mutation returns the InterviewMutation object of the builder.
func (iu *InterviewUpdate) Mutation() *InterviewMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InterviewUpdate) Save(ctx context.Context) (int, error) {
	if err := iu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InterviewUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InterviewUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InterviewUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InterviewUpdate) defaults() error {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		if interview.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized interview.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := interview.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (iu *InterviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(interview.Table, interview.Columns, sqlgraph.NewFieldSpec(interview.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.CreatedBy(); ok {
		_spec.SetField(interview.FieldCreatedBy, field.TypeString, value)
	}
	if iu.mutation.CreatedByCleared() {
		_spec.ClearField(interview.FieldCreatedBy, field.TypeString)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(interview.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.UpdatedBy(); ok {
		_spec.SetField(interview.FieldUpdatedBy, field.TypeString, value)
	}
	if iu.mutation.UpdatedByCleared() {
		_spec.ClearField(interview.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := iu.mutation.DisplayName(); ok {
		_spec.SetField(interview.FieldDisplayName, field.TypeString, value)
	}
	if iu.mutation.DisplayNameCleared() {
		_spec.ClearField(interview.FieldDisplayName, field.TypeString)
	}
	if value, ok := iu.mutation.Abbreviation(); ok {
		_spec.SetField(interview.FieldAbbreviation, field.TypeString, value)
	}
	if iu.mutation.AbbreviationCleared() {
		_spec.ClearField(interview.FieldAbbreviation, field.TypeString)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(interview.FieldDescription, field.TypeString, value)
	}
	if iu.mutation.DescriptionCleared() {
		_spec.ClearField(interview.FieldDescription, field.TypeString)
	}
	if value, ok := iu.mutation.ExternalLink(); ok {
		_spec.SetField(interview.FieldExternalLink, field.TypeString, value)
	}
	if iu.mutation.ExternalLinkCleared() {
		_spec.ClearField(interview.FieldExternalLink, field.TypeString)
	}
	if value, ok := iu.mutation.Date(); ok {
		_spec.SetField(interview.FieldDate, field.TypeTime, value)
	}
	if iu.mutation.DateCleared() {
		_spec.ClearField(interview.FieldDate, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InterviewUpdateOne is the builder for updating a single Interview entity.
type InterviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InterviewMutation
}

// SetCreatedBy sets the "created_by" field.
func (iuo *InterviewUpdateOne) SetCreatedBy(s string) *InterviewUpdateOne {
	iuo.mutation.SetCreatedBy(s)
	return iuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableCreatedBy(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetCreatedBy(*s)
	}
	return iuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (iuo *InterviewUpdateOne) ClearCreatedBy() *InterviewUpdateOne {
	iuo.mutation.ClearCreatedBy()
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InterviewUpdateOne) SetUpdatedAt(t time.Time) *InterviewUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetUpdatedBy sets the "updated_by" field.
func (iuo *InterviewUpdateOne) SetUpdatedBy(s string) *InterviewUpdateOne {
	iuo.mutation.SetUpdatedBy(s)
	return iuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableUpdatedBy(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetUpdatedBy(*s)
	}
	return iuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (iuo *InterviewUpdateOne) ClearUpdatedBy() *InterviewUpdateOne {
	iuo.mutation.ClearUpdatedBy()
	return iuo
}

// SetDisplayName sets the "display_name" field.
func (iuo *InterviewUpdateOne) SetDisplayName(s string) *InterviewUpdateOne {
	iuo.mutation.SetDisplayName(s)
	return iuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableDisplayName(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetDisplayName(*s)
	}
	return iuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (iuo *InterviewUpdateOne) ClearDisplayName() *InterviewUpdateOne {
	iuo.mutation.ClearDisplayName()
	return iuo
}

// SetAbbreviation sets the "abbreviation" field.
func (iuo *InterviewUpdateOne) SetAbbreviation(s string) *InterviewUpdateOne {
	iuo.mutation.SetAbbreviation(s)
	return iuo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableAbbreviation(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetAbbreviation(*s)
	}
	return iuo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (iuo *InterviewUpdateOne) ClearAbbreviation() *InterviewUpdateOne {
	iuo.mutation.ClearAbbreviation()
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *InterviewUpdateOne) SetDescription(s string) *InterviewUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableDescription(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// ClearDescription clears the value of the "description" field.
func (iuo *InterviewUpdateOne) ClearDescription() *InterviewUpdateOne {
	iuo.mutation.ClearDescription()
	return iuo
}

// SetExternalLink sets the "external_link" field.
func (iuo *InterviewUpdateOne) SetExternalLink(s string) *InterviewUpdateOne {
	iuo.mutation.SetExternalLink(s)
	return iuo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableExternalLink(s *string) *InterviewUpdateOne {
	if s != nil {
		iuo.SetExternalLink(*s)
	}
	return iuo
}

// ClearExternalLink clears the value of the "external_link" field.
func (iuo *InterviewUpdateOne) ClearExternalLink() *InterviewUpdateOne {
	iuo.mutation.ClearExternalLink()
	return iuo
}

// SetDate sets the "date" field.
func (iuo *InterviewUpdateOne) SetDate(t time.Time) *InterviewUpdateOne {
	iuo.mutation.SetDate(t)
	return iuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (iuo *InterviewUpdateOne) SetNillableDate(t *time.Time) *InterviewUpdateOne {
	if t != nil {
		iuo.SetDate(*t)
	}
	return iuo
}

// ClearDate clears the value of the "date" field.
func (iuo *InterviewUpdateOne) ClearDate() *InterviewUpdateOne {
	iuo.mutation.ClearDate()
	return iuo
}

// Mutation returns the InterviewMutation object of the builder.
func (iuo *InterviewUpdateOne) Mutation() *InterviewMutation {
	return iuo.mutation
}

// Where appends a list predicates to the InterviewUpdate builder.
func (iuo *InterviewUpdateOne) Where(ps ...predicate.Interview) *InterviewUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InterviewUpdateOne) Select(field string, fields ...string) *InterviewUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Interview entity.
func (iuo *InterviewUpdateOne) Save(ctx context.Context) (*Interview, error) {
	if err := iuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InterviewUpdateOne) SaveX(ctx context.Context) *Interview {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InterviewUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InterviewUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InterviewUpdateOne) defaults() error {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		if interview.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized interview.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := interview.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (iuo *InterviewUpdateOne) sqlSave(ctx context.Context) (_node *Interview, err error) {
	_spec := sqlgraph.NewUpdateSpec(interview.Table, interview.Columns, sqlgraph.NewFieldSpec(interview.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Interview.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, interview.FieldID)
		for _, f := range fields {
			if !interview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != interview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.CreatedBy(); ok {
		_spec.SetField(interview.FieldCreatedBy, field.TypeString, value)
	}
	if iuo.mutation.CreatedByCleared() {
		_spec.ClearField(interview.FieldCreatedBy, field.TypeString)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(interview.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.UpdatedBy(); ok {
		_spec.SetField(interview.FieldUpdatedBy, field.TypeString, value)
	}
	if iuo.mutation.UpdatedByCleared() {
		_spec.ClearField(interview.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := iuo.mutation.DisplayName(); ok {
		_spec.SetField(interview.FieldDisplayName, field.TypeString, value)
	}
	if iuo.mutation.DisplayNameCleared() {
		_spec.ClearField(interview.FieldDisplayName, field.TypeString)
	}
	if value, ok := iuo.mutation.Abbreviation(); ok {
		_spec.SetField(interview.FieldAbbreviation, field.TypeString, value)
	}
	if iuo.mutation.AbbreviationCleared() {
		_spec.ClearField(interview.FieldAbbreviation, field.TypeString)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(interview.FieldDescription, field.TypeString, value)
	}
	if iuo.mutation.DescriptionCleared() {
		_spec.ClearField(interview.FieldDescription, field.TypeString)
	}
	if value, ok := iuo.mutation.ExternalLink(); ok {
		_spec.SetField(interview.FieldExternalLink, field.TypeString, value)
	}
	if iuo.mutation.ExternalLinkCleared() {
		_spec.ClearField(interview.FieldExternalLink, field.TypeString)
	}
	if value, ok := iuo.mutation.Date(); ok {
		_spec.SetField(interview.FieldDate, field.TypeTime, value)
	}
	if iuo.mutation.DateCleared() {
		_spec.ClearField(interview.FieldDate, field.TypeTime)
	}
	_node = &Interview{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
