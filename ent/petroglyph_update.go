// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/culture"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/model"
	"github.com/dkrasnovdev/siberiana-api/ent/mound"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/personalcollection"
	"github.com/dkrasnovdev/siberiana-api/ent/petroglyph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/publication"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/technique"
	"github.com/dkrasnovdev/siberiana-api/internal/ent/types"
)

// PetroglyphUpdate is the builder for updating Petroglyph entities.
type PetroglyphUpdate struct {
	config
	hooks    []Hook
	mutation *PetroglyphMutation
}

// Where appends a list predicates to the PetroglyphUpdate builder.
func (pu *PetroglyphUpdate) Where(ps ...predicate.Petroglyph) *PetroglyphUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *PetroglyphUpdate) SetCreatedBy(s string) *PetroglyphUpdate {
	pu.mutation.SetCreatedBy(s)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableCreatedBy(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetCreatedBy(*s)
	}
	return pu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pu *PetroglyphUpdate) ClearCreatedBy() *PetroglyphUpdate {
	pu.mutation.ClearCreatedBy()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PetroglyphUpdate) SetUpdatedAt(t time.Time) *PetroglyphUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PetroglyphUpdate) SetUpdatedBy(s string) *PetroglyphUpdate {
	pu.mutation.SetUpdatedBy(s)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableUpdatedBy(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetUpdatedBy(*s)
	}
	return pu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pu *PetroglyphUpdate) ClearUpdatedBy() *PetroglyphUpdate {
	pu.mutation.ClearUpdatedBy()
	return pu
}

// SetDating sets the "dating" field.
func (pu *PetroglyphUpdate) SetDating(s string) *PetroglyphUpdate {
	pu.mutation.SetDating(s)
	return pu
}

// SetNillableDating sets the "dating" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableDating(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetDating(*s)
	}
	return pu
}

// ClearDating clears the value of the "dating" field.
func (pu *PetroglyphUpdate) ClearDating() *PetroglyphUpdate {
	pu.mutation.ClearDating()
	return pu
}

// SetDatingStart sets the "dating_start" field.
func (pu *PetroglyphUpdate) SetDatingStart(i int) *PetroglyphUpdate {
	pu.mutation.ResetDatingStart()
	pu.mutation.SetDatingStart(i)
	return pu
}

// SetNillableDatingStart sets the "dating_start" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableDatingStart(i *int) *PetroglyphUpdate {
	if i != nil {
		pu.SetDatingStart(*i)
	}
	return pu
}

// AddDatingStart adds i to the "dating_start" field.
func (pu *PetroglyphUpdate) AddDatingStart(i int) *PetroglyphUpdate {
	pu.mutation.AddDatingStart(i)
	return pu
}

// ClearDatingStart clears the value of the "dating_start" field.
func (pu *PetroglyphUpdate) ClearDatingStart() *PetroglyphUpdate {
	pu.mutation.ClearDatingStart()
	return pu
}

// SetDatingEnd sets the "dating_end" field.
func (pu *PetroglyphUpdate) SetDatingEnd(i int) *PetroglyphUpdate {
	pu.mutation.ResetDatingEnd()
	pu.mutation.SetDatingEnd(i)
	return pu
}

// SetNillableDatingEnd sets the "dating_end" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableDatingEnd(i *int) *PetroglyphUpdate {
	if i != nil {
		pu.SetDatingEnd(*i)
	}
	return pu
}

// AddDatingEnd adds i to the "dating_end" field.
func (pu *PetroglyphUpdate) AddDatingEnd(i int) *PetroglyphUpdate {
	pu.mutation.AddDatingEnd(i)
	return pu
}

// ClearDatingEnd clears the value of the "dating_end" field.
func (pu *PetroglyphUpdate) ClearDatingEnd() *PetroglyphUpdate {
	pu.mutation.ClearDatingEnd()
	return pu
}

// SetDisplayName sets the "display_name" field.
func (pu *PetroglyphUpdate) SetDisplayName(s string) *PetroglyphUpdate {
	pu.mutation.SetDisplayName(s)
	return pu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableDisplayName(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetDisplayName(*s)
	}
	return pu
}

// ClearDisplayName clears the value of the "display_name" field.
func (pu *PetroglyphUpdate) ClearDisplayName() *PetroglyphUpdate {
	pu.mutation.ClearDisplayName()
	return pu
}

// SetAbbreviation sets the "abbreviation" field.
func (pu *PetroglyphUpdate) SetAbbreviation(s string) *PetroglyphUpdate {
	pu.mutation.SetAbbreviation(s)
	return pu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableAbbreviation(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetAbbreviation(*s)
	}
	return pu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (pu *PetroglyphUpdate) ClearAbbreviation() *PetroglyphUpdate {
	pu.mutation.ClearAbbreviation()
	return pu
}

// SetDescription sets the "description" field.
func (pu *PetroglyphUpdate) SetDescription(s string) *PetroglyphUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableDescription(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PetroglyphUpdate) ClearDescription() *PetroglyphUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetExternalLink sets the "external_link" field.
func (pu *PetroglyphUpdate) SetExternalLink(s string) *PetroglyphUpdate {
	pu.mutation.SetExternalLink(s)
	return pu
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableExternalLink(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetExternalLink(*s)
	}
	return pu
}

// ClearExternalLink clears the value of the "external_link" field.
func (pu *PetroglyphUpdate) ClearExternalLink() *PetroglyphUpdate {
	pu.mutation.ClearExternalLink()
	return pu
}

// SetStatus sets the "status" field.
func (pu *PetroglyphUpdate) SetStatus(pe petroglyph.Status) *PetroglyphUpdate {
	pu.mutation.SetStatus(pe)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableStatus(pe *petroglyph.Status) *PetroglyphUpdate {
	if pe != nil {
		pu.SetStatus(*pe)
	}
	return pu
}

// ClearStatus clears the value of the "status" field.
func (pu *PetroglyphUpdate) ClearStatus() *PetroglyphUpdate {
	pu.mutation.ClearStatus()
	return pu
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (pu *PetroglyphUpdate) SetPrimaryImageURL(s string) *PetroglyphUpdate {
	pu.mutation.SetPrimaryImageURL(s)
	return pu
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillablePrimaryImageURL(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetPrimaryImageURL(*s)
	}
	return pu
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (pu *PetroglyphUpdate) ClearPrimaryImageURL() *PetroglyphUpdate {
	pu.mutation.ClearPrimaryImageURL()
	return pu
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (pu *PetroglyphUpdate) SetAdditionalImagesUrls(s []string) *PetroglyphUpdate {
	pu.mutation.SetAdditionalImagesUrls(s)
	return pu
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (pu *PetroglyphUpdate) AppendAdditionalImagesUrls(s []string) *PetroglyphUpdate {
	pu.mutation.AppendAdditionalImagesUrls(s)
	return pu
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (pu *PetroglyphUpdate) ClearAdditionalImagesUrls() *PetroglyphUpdate {
	pu.mutation.ClearAdditionalImagesUrls()
	return pu
}

// SetHeight sets the "height" field.
func (pu *PetroglyphUpdate) SetHeight(f float64) *PetroglyphUpdate {
	pu.mutation.ResetHeight()
	pu.mutation.SetHeight(f)
	return pu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableHeight(f *float64) *PetroglyphUpdate {
	if f != nil {
		pu.SetHeight(*f)
	}
	return pu
}

// AddHeight adds f to the "height" field.
func (pu *PetroglyphUpdate) AddHeight(f float64) *PetroglyphUpdate {
	pu.mutation.AddHeight(f)
	return pu
}

// ClearHeight clears the value of the "height" field.
func (pu *PetroglyphUpdate) ClearHeight() *PetroglyphUpdate {
	pu.mutation.ClearHeight()
	return pu
}

// SetWidth sets the "width" field.
func (pu *PetroglyphUpdate) SetWidth(f float64) *PetroglyphUpdate {
	pu.mutation.ResetWidth()
	pu.mutation.SetWidth(f)
	return pu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableWidth(f *float64) *PetroglyphUpdate {
	if f != nil {
		pu.SetWidth(*f)
	}
	return pu
}

// AddWidth adds f to the "width" field.
func (pu *PetroglyphUpdate) AddWidth(f float64) *PetroglyphUpdate {
	pu.mutation.AddWidth(f)
	return pu
}

// ClearWidth clears the value of the "width" field.
func (pu *PetroglyphUpdate) ClearWidth() *PetroglyphUpdate {
	pu.mutation.ClearWidth()
	return pu
}

// SetLength sets the "length" field.
func (pu *PetroglyphUpdate) SetLength(f float64) *PetroglyphUpdate {
	pu.mutation.ResetLength()
	pu.mutation.SetLength(f)
	return pu
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableLength(f *float64) *PetroglyphUpdate {
	if f != nil {
		pu.SetLength(*f)
	}
	return pu
}

// AddLength adds f to the "length" field.
func (pu *PetroglyphUpdate) AddLength(f float64) *PetroglyphUpdate {
	pu.mutation.AddLength(f)
	return pu
}

// ClearLength clears the value of the "length" field.
func (pu *PetroglyphUpdate) ClearLength() *PetroglyphUpdate {
	pu.mutation.ClearLength()
	return pu
}

// SetDepth sets the "depth" field.
func (pu *PetroglyphUpdate) SetDepth(f float64) *PetroglyphUpdate {
	pu.mutation.ResetDepth()
	pu.mutation.SetDepth(f)
	return pu
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableDepth(f *float64) *PetroglyphUpdate {
	if f != nil {
		pu.SetDepth(*f)
	}
	return pu
}

// AddDepth adds f to the "depth" field.
func (pu *PetroglyphUpdate) AddDepth(f float64) *PetroglyphUpdate {
	pu.mutation.AddDepth(f)
	return pu
}

// ClearDepth clears the value of the "depth" field.
func (pu *PetroglyphUpdate) ClearDepth() *PetroglyphUpdate {
	pu.mutation.ClearDepth()
	return pu
}

// SetDiameter sets the "diameter" field.
func (pu *PetroglyphUpdate) SetDiameter(f float64) *PetroglyphUpdate {
	pu.mutation.ResetDiameter()
	pu.mutation.SetDiameter(f)
	return pu
}

// SetNillableDiameter sets the "diameter" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableDiameter(f *float64) *PetroglyphUpdate {
	if f != nil {
		pu.SetDiameter(*f)
	}
	return pu
}

// AddDiameter adds f to the "diameter" field.
func (pu *PetroglyphUpdate) AddDiameter(f float64) *PetroglyphUpdate {
	pu.mutation.AddDiameter(f)
	return pu
}

// ClearDiameter clears the value of the "diameter" field.
func (pu *PetroglyphUpdate) ClearDiameter() *PetroglyphUpdate {
	pu.mutation.ClearDiameter()
	return pu
}

// SetWeight sets the "weight" field.
func (pu *PetroglyphUpdate) SetWeight(s string) *PetroglyphUpdate {
	pu.mutation.SetWeight(s)
	return pu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableWeight(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetWeight(*s)
	}
	return pu
}

// ClearWeight clears the value of the "weight" field.
func (pu *PetroglyphUpdate) ClearWeight() *PetroglyphUpdate {
	pu.mutation.ClearWeight()
	return pu
}

// SetDimensions sets the "dimensions" field.
func (pu *PetroglyphUpdate) SetDimensions(s string) *PetroglyphUpdate {
	pu.mutation.SetDimensions(s)
	return pu
}

// SetNillableDimensions sets the "dimensions" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableDimensions(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetDimensions(*s)
	}
	return pu
}

// ClearDimensions clears the value of the "dimensions" field.
func (pu *PetroglyphUpdate) ClearDimensions() *PetroglyphUpdate {
	pu.mutation.ClearDimensions()
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PetroglyphUpdate) SetDeletedAt(t time.Time) *PetroglyphUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableDeletedAt(t *time.Time) *PetroglyphUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PetroglyphUpdate) ClearDeletedAt() *PetroglyphUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetDeletedBy sets the "deleted_by" field.
func (pu *PetroglyphUpdate) SetDeletedBy(s string) *PetroglyphUpdate {
	pu.mutation.SetDeletedBy(s)
	return pu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableDeletedBy(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetDeletedBy(*s)
	}
	return pu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pu *PetroglyphUpdate) ClearDeletedBy() *PetroglyphUpdate {
	pu.mutation.ClearDeletedBy()
	return pu
}

// SetNumber sets the "number" field.
func (pu *PetroglyphUpdate) SetNumber(s string) *PetroglyphUpdate {
	pu.mutation.SetNumber(s)
	return pu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableNumber(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetNumber(*s)
	}
	return pu
}

// ClearNumber clears the value of the "number" field.
func (pu *PetroglyphUpdate) ClearNumber() *PetroglyphUpdate {
	pu.mutation.ClearNumber()
	return pu
}

// SetOrientation sets the "orientation" field.
func (pu *PetroglyphUpdate) SetOrientation(s string) *PetroglyphUpdate {
	pu.mutation.SetOrientation(s)
	return pu
}

// SetNillableOrientation sets the "orientation" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableOrientation(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetOrientation(*s)
	}
	return pu
}

// ClearOrientation clears the value of the "orientation" field.
func (pu *PetroglyphUpdate) ClearOrientation() *PetroglyphUpdate {
	pu.mutation.ClearOrientation()
	return pu
}

// SetPosition sets the "position" field.
func (pu *PetroglyphUpdate) SetPosition(s string) *PetroglyphUpdate {
	pu.mutation.SetPosition(s)
	return pu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillablePosition(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetPosition(*s)
	}
	return pu
}

// ClearPosition clears the value of the "position" field.
func (pu *PetroglyphUpdate) ClearPosition() *PetroglyphUpdate {
	pu.mutation.ClearPosition()
	return pu
}

// SetGeometricShape sets the "geometric_shape" field.
func (pu *PetroglyphUpdate) SetGeometricShape(s string) *PetroglyphUpdate {
	pu.mutation.SetGeometricShape(s)
	return pu
}

// SetNillableGeometricShape sets the "geometric_shape" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableGeometricShape(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetGeometricShape(*s)
	}
	return pu
}

// ClearGeometricShape clears the value of the "geometric_shape" field.
func (pu *PetroglyphUpdate) ClearGeometricShape() *PetroglyphUpdate {
	pu.mutation.ClearGeometricShape()
	return pu
}

// SetPlanePreservation sets the "plane_preservation" field.
func (pu *PetroglyphUpdate) SetPlanePreservation(s string) *PetroglyphUpdate {
	pu.mutation.SetPlanePreservation(s)
	return pu
}

// SetNillablePlanePreservation sets the "plane_preservation" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillablePlanePreservation(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetPlanePreservation(*s)
	}
	return pu
}

// ClearPlanePreservation clears the value of the "plane_preservation" field.
func (pu *PetroglyphUpdate) ClearPlanePreservation() *PetroglyphUpdate {
	pu.mutation.ClearPlanePreservation()
	return pu
}

// SetPhotoCode sets the "photo_code" field.
func (pu *PetroglyphUpdate) SetPhotoCode(s string) *PetroglyphUpdate {
	pu.mutation.SetPhotoCode(s)
	return pu
}

// SetNillablePhotoCode sets the "photo_code" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillablePhotoCode(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetPhotoCode(*s)
	}
	return pu
}

// ClearPhotoCode clears the value of the "photo_code" field.
func (pu *PetroglyphUpdate) ClearPhotoCode() *PetroglyphUpdate {
	pu.mutation.ClearPhotoCode()
	return pu
}

// SetAccountingDocumentationInformation sets the "accounting_documentation_information" field.
func (pu *PetroglyphUpdate) SetAccountingDocumentationInformation(s string) *PetroglyphUpdate {
	pu.mutation.SetAccountingDocumentationInformation(s)
	return pu
}

// SetNillableAccountingDocumentationInformation sets the "accounting_documentation_information" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableAccountingDocumentationInformation(s *string) *PetroglyphUpdate {
	if s != nil {
		pu.SetAccountingDocumentationInformation(*s)
	}
	return pu
}

// ClearAccountingDocumentationInformation clears the value of the "accounting_documentation_information" field.
func (pu *PetroglyphUpdate) ClearAccountingDocumentationInformation() *PetroglyphUpdate {
	pu.mutation.ClearAccountingDocumentationInformation()
	return pu
}

// SetAccountingDocumentationDate sets the "accounting_documentation_date" field.
func (pu *PetroglyphUpdate) SetAccountingDocumentationDate(t time.Time) *PetroglyphUpdate {
	pu.mutation.SetAccountingDocumentationDate(t)
	return pu
}

// SetNillableAccountingDocumentationDate sets the "accounting_documentation_date" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableAccountingDocumentationDate(t *time.Time) *PetroglyphUpdate {
	if t != nil {
		pu.SetAccountingDocumentationDate(*t)
	}
	return pu
}

// ClearAccountingDocumentationDate clears the value of the "accounting_documentation_date" field.
func (pu *PetroglyphUpdate) ClearAccountingDocumentationDate() *PetroglyphUpdate {
	pu.mutation.ClearAccountingDocumentationDate()
	return pu
}

// SetGeometry sets the "geometry" field.
func (pu *PetroglyphUpdate) SetGeometry(t types.Geometry) *PetroglyphUpdate {
	pu.mutation.SetGeometry(t)
	return pu
}

// SetNillableGeometry sets the "geometry" field if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableGeometry(t *types.Geometry) *PetroglyphUpdate {
	if t != nil {
		pu.SetGeometry(*t)
	}
	return pu
}

// ClearGeometry clears the value of the "geometry" field.
func (pu *PetroglyphUpdate) ClearGeometry() *PetroglyphUpdate {
	pu.mutation.ClearGeometry()
	return pu
}

// SetCulturalAffiliationID sets the "cultural_affiliation" edge to the Culture entity by ID.
func (pu *PetroglyphUpdate) SetCulturalAffiliationID(id int) *PetroglyphUpdate {
	pu.mutation.SetCulturalAffiliationID(id)
	return pu
}

// SetNillableCulturalAffiliationID sets the "cultural_affiliation" edge to the Culture entity by ID if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableCulturalAffiliationID(id *int) *PetroglyphUpdate {
	if id != nil {
		pu = pu.SetCulturalAffiliationID(*id)
	}
	return pu
}

// SetCulturalAffiliation sets the "cultural_affiliation" edge to the Culture entity.
func (pu *PetroglyphUpdate) SetCulturalAffiliation(c *Culture) *PetroglyphUpdate {
	return pu.SetCulturalAffiliationID(c.ID)
}

// SetModelID sets the "model" edge to the Model entity by ID.
func (pu *PetroglyphUpdate) SetModelID(id int) *PetroglyphUpdate {
	pu.mutation.SetModelID(id)
	return pu
}

// SetNillableModelID sets the "model" edge to the Model entity by ID if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableModelID(id *int) *PetroglyphUpdate {
	if id != nil {
		pu = pu.SetModelID(*id)
	}
	return pu
}

// SetModel sets the "model" edge to the Model entity.
func (pu *PetroglyphUpdate) SetModel(m *Model) *PetroglyphUpdate {
	return pu.SetModelID(m.ID)
}

// SetMoundID sets the "mound" edge to the Mound entity by ID.
func (pu *PetroglyphUpdate) SetMoundID(id int) *PetroglyphUpdate {
	pu.mutation.SetMoundID(id)
	return pu
}

// SetNillableMoundID sets the "mound" edge to the Mound entity by ID if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableMoundID(id *int) *PetroglyphUpdate {
	if id != nil {
		pu = pu.SetMoundID(*id)
	}
	return pu
}

// SetMound sets the "mound" edge to the Mound entity.
func (pu *PetroglyphUpdate) SetMound(m *Mound) *PetroglyphUpdate {
	return pu.SetMoundID(m.ID)
}

// AddPublicationIDs adds the "publications" edge to the Publication entity by IDs.
func (pu *PetroglyphUpdate) AddPublicationIDs(ids ...int) *PetroglyphUpdate {
	pu.mutation.AddPublicationIDs(ids...)
	return pu
}

// AddPublications adds the "publications" edges to the Publication entity.
func (pu *PetroglyphUpdate) AddPublications(p ...*Publication) *PetroglyphUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPublicationIDs(ids...)
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (pu *PetroglyphUpdate) AddTechniqueIDs(ids ...int) *PetroglyphUpdate {
	pu.mutation.AddTechniqueIDs(ids...)
	return pu
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (pu *PetroglyphUpdate) AddTechniques(t ...*Technique) *PetroglyphUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTechniqueIDs(ids...)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (pu *PetroglyphUpdate) SetRegionID(id int) *PetroglyphUpdate {
	pu.mutation.SetRegionID(id)
	return pu
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableRegionID(id *int) *PetroglyphUpdate {
	if id != nil {
		pu = pu.SetRegionID(*id)
	}
	return pu
}

// SetRegion sets the "region" edge to the Region entity.
func (pu *PetroglyphUpdate) SetRegion(r *Region) *PetroglyphUpdate {
	return pu.SetRegionID(r.ID)
}

// SetAccountingDocumentationAddressID sets the "accounting_documentation_address" edge to the Location entity by ID.
func (pu *PetroglyphUpdate) SetAccountingDocumentationAddressID(id int) *PetroglyphUpdate {
	pu.mutation.SetAccountingDocumentationAddressID(id)
	return pu
}

// SetNillableAccountingDocumentationAddressID sets the "accounting_documentation_address" edge to the Location entity by ID if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableAccountingDocumentationAddressID(id *int) *PetroglyphUpdate {
	if id != nil {
		pu = pu.SetAccountingDocumentationAddressID(*id)
	}
	return pu
}

// SetAccountingDocumentationAddress sets the "accounting_documentation_address" edge to the Location entity.
func (pu *PetroglyphUpdate) SetAccountingDocumentationAddress(l *Location) *PetroglyphUpdate {
	return pu.SetAccountingDocumentationAddressID(l.ID)
}

// SetAccountingDocumentationAuthorID sets the "accounting_documentation_author" edge to the Person entity by ID.
func (pu *PetroglyphUpdate) SetAccountingDocumentationAuthorID(id int) *PetroglyphUpdate {
	pu.mutation.SetAccountingDocumentationAuthorID(id)
	return pu
}

// SetNillableAccountingDocumentationAuthorID sets the "accounting_documentation_author" edge to the Person entity by ID if the given value is not nil.
func (pu *PetroglyphUpdate) SetNillableAccountingDocumentationAuthorID(id *int) *PetroglyphUpdate {
	if id != nil {
		pu = pu.SetAccountingDocumentationAuthorID(*id)
	}
	return pu
}

// SetAccountingDocumentationAuthor sets the "accounting_documentation_author" edge to the Person entity.
func (pu *PetroglyphUpdate) SetAccountingDocumentationAuthor(p *Person) *PetroglyphUpdate {
	return pu.SetAccountingDocumentationAuthorID(p.ID)
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (pu *PetroglyphUpdate) SetCollectionID(id int) *PetroglyphUpdate {
	pu.mutation.SetCollectionID(id)
	return pu
}

// SetCollection sets the "collection" edge to the Collection entity.
func (pu *PetroglyphUpdate) SetCollection(c *Collection) *PetroglyphUpdate {
	return pu.SetCollectionID(c.ID)
}

// AddPersonalCollectionIDs adds the "personal_collection" edge to the PersonalCollection entity by IDs.
func (pu *PetroglyphUpdate) AddPersonalCollectionIDs(ids ...int) *PetroglyphUpdate {
	pu.mutation.AddPersonalCollectionIDs(ids...)
	return pu
}

// AddPersonalCollection adds the "personal_collection" edges to the PersonalCollection entity.
func (pu *PetroglyphUpdate) AddPersonalCollection(p ...*PersonalCollection) *PetroglyphUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPersonalCollectionIDs(ids...)
}

// Mutation returns the PetroglyphMutation object of the builder.
func (pu *PetroglyphUpdate) Mutation() *PetroglyphMutation {
	return pu.mutation
}

// ClearCulturalAffiliation clears the "cultural_affiliation" edge to the Culture entity.
func (pu *PetroglyphUpdate) ClearCulturalAffiliation() *PetroglyphUpdate {
	pu.mutation.ClearCulturalAffiliation()
	return pu
}

// ClearModel clears the "model" edge to the Model entity.
func (pu *PetroglyphUpdate) ClearModel() *PetroglyphUpdate {
	pu.mutation.ClearModel()
	return pu
}

// ClearMound clears the "mound" edge to the Mound entity.
func (pu *PetroglyphUpdate) ClearMound() *PetroglyphUpdate {
	pu.mutation.ClearMound()
	return pu
}

// ClearPublications clears all "publications" edges to the Publication entity.
func (pu *PetroglyphUpdate) ClearPublications() *PetroglyphUpdate {
	pu.mutation.ClearPublications()
	return pu
}

// RemovePublicationIDs removes the "publications" edge to Publication entities by IDs.
func (pu *PetroglyphUpdate) RemovePublicationIDs(ids ...int) *PetroglyphUpdate {
	pu.mutation.RemovePublicationIDs(ids...)
	return pu
}

// RemovePublications removes "publications" edges to Publication entities.
func (pu *PetroglyphUpdate) RemovePublications(p ...*Publication) *PetroglyphUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePublicationIDs(ids...)
}

// ClearTechniques clears all "techniques" edges to the Technique entity.
func (pu *PetroglyphUpdate) ClearTechniques() *PetroglyphUpdate {
	pu.mutation.ClearTechniques()
	return pu
}

// RemoveTechniqueIDs removes the "techniques" edge to Technique entities by IDs.
func (pu *PetroglyphUpdate) RemoveTechniqueIDs(ids ...int) *PetroglyphUpdate {
	pu.mutation.RemoveTechniqueIDs(ids...)
	return pu
}

// RemoveTechniques removes "techniques" edges to Technique entities.
func (pu *PetroglyphUpdate) RemoveTechniques(t ...*Technique) *PetroglyphUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTechniqueIDs(ids...)
}

// ClearRegion clears the "region" edge to the Region entity.
func (pu *PetroglyphUpdate) ClearRegion() *PetroglyphUpdate {
	pu.mutation.ClearRegion()
	return pu
}

// ClearAccountingDocumentationAddress clears the "accounting_documentation_address" edge to the Location entity.
func (pu *PetroglyphUpdate) ClearAccountingDocumentationAddress() *PetroglyphUpdate {
	pu.mutation.ClearAccountingDocumentationAddress()
	return pu
}

// ClearAccountingDocumentationAuthor clears the "accounting_documentation_author" edge to the Person entity.
func (pu *PetroglyphUpdate) ClearAccountingDocumentationAuthor() *PetroglyphUpdate {
	pu.mutation.ClearAccountingDocumentationAuthor()
	return pu
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (pu *PetroglyphUpdate) ClearCollection() *PetroglyphUpdate {
	pu.mutation.ClearCollection()
	return pu
}

// ClearPersonalCollection clears all "personal_collection" edges to the PersonalCollection entity.
func (pu *PetroglyphUpdate) ClearPersonalCollection() *PetroglyphUpdate {
	pu.mutation.ClearPersonalCollection()
	return pu
}

// RemovePersonalCollectionIDs removes the "personal_collection" edge to PersonalCollection entities by IDs.
func (pu *PetroglyphUpdate) RemovePersonalCollectionIDs(ids ...int) *PetroglyphUpdate {
	pu.mutation.RemovePersonalCollectionIDs(ids...)
	return pu
}

// RemovePersonalCollection removes "personal_collection" edges to PersonalCollection entities.
func (pu *PetroglyphUpdate) RemovePersonalCollection(p ...*PersonalCollection) *PetroglyphUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePersonalCollectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PetroglyphUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PetroglyphUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PetroglyphUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PetroglyphUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PetroglyphUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if petroglyph.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized petroglyph.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := petroglyph.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *PetroglyphUpdate) check() error {
	if v, ok := pu.mutation.Status(); ok {
		if err := petroglyph.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Petroglyph.status": %w`, err)}
		}
	}
	if _, ok := pu.mutation.CollectionID(); pu.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Petroglyph.collection"`)
	}
	return nil
}

func (pu *PetroglyphUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(petroglyph.Table, petroglyph.Columns, sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(petroglyph.FieldCreatedBy, field.TypeString, value)
	}
	if pu.mutation.CreatedByCleared() {
		_spec.ClearField(petroglyph.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(petroglyph.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(petroglyph.FieldUpdatedBy, field.TypeString, value)
	}
	if pu.mutation.UpdatedByCleared() {
		_spec.ClearField(petroglyph.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.Dating(); ok {
		_spec.SetField(petroglyph.FieldDating, field.TypeString, value)
	}
	if pu.mutation.DatingCleared() {
		_spec.ClearField(petroglyph.FieldDating, field.TypeString)
	}
	if value, ok := pu.mutation.DatingStart(); ok {
		_spec.SetField(petroglyph.FieldDatingStart, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDatingStart(); ok {
		_spec.AddField(petroglyph.FieldDatingStart, field.TypeInt, value)
	}
	if pu.mutation.DatingStartCleared() {
		_spec.ClearField(petroglyph.FieldDatingStart, field.TypeInt)
	}
	if value, ok := pu.mutation.DatingEnd(); ok {
		_spec.SetField(petroglyph.FieldDatingEnd, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDatingEnd(); ok {
		_spec.AddField(petroglyph.FieldDatingEnd, field.TypeInt, value)
	}
	if pu.mutation.DatingEndCleared() {
		_spec.ClearField(petroglyph.FieldDatingEnd, field.TypeInt)
	}
	if value, ok := pu.mutation.DisplayName(); ok {
		_spec.SetField(petroglyph.FieldDisplayName, field.TypeString, value)
	}
	if pu.mutation.DisplayNameCleared() {
		_spec.ClearField(petroglyph.FieldDisplayName, field.TypeString)
	}
	if value, ok := pu.mutation.Abbreviation(); ok {
		_spec.SetField(petroglyph.FieldAbbreviation, field.TypeString, value)
	}
	if pu.mutation.AbbreviationCleared() {
		_spec.ClearField(petroglyph.FieldAbbreviation, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(petroglyph.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(petroglyph.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.ExternalLink(); ok {
		_spec.SetField(petroglyph.FieldExternalLink, field.TypeString, value)
	}
	if pu.mutation.ExternalLinkCleared() {
		_spec.ClearField(petroglyph.FieldExternalLink, field.TypeString)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(petroglyph.FieldStatus, field.TypeEnum, value)
	}
	if pu.mutation.StatusCleared() {
		_spec.ClearField(petroglyph.FieldStatus, field.TypeEnum)
	}
	if value, ok := pu.mutation.PrimaryImageURL(); ok {
		_spec.SetField(petroglyph.FieldPrimaryImageURL, field.TypeString, value)
	}
	if pu.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(petroglyph.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := pu.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(petroglyph.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, petroglyph.FieldAdditionalImagesUrls, value)
		})
	}
	if pu.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(petroglyph.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := pu.mutation.Height(); ok {
		_spec.SetField(petroglyph.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedHeight(); ok {
		_spec.AddField(petroglyph.FieldHeight, field.TypeFloat64, value)
	}
	if pu.mutation.HeightCleared() {
		_spec.ClearField(petroglyph.FieldHeight, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Width(); ok {
		_spec.SetField(petroglyph.FieldWidth, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedWidth(); ok {
		_spec.AddField(petroglyph.FieldWidth, field.TypeFloat64, value)
	}
	if pu.mutation.WidthCleared() {
		_spec.ClearField(petroglyph.FieldWidth, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Length(); ok {
		_spec.SetField(petroglyph.FieldLength, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedLength(); ok {
		_spec.AddField(petroglyph.FieldLength, field.TypeFloat64, value)
	}
	if pu.mutation.LengthCleared() {
		_spec.ClearField(petroglyph.FieldLength, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Depth(); ok {
		_spec.SetField(petroglyph.FieldDepth, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedDepth(); ok {
		_spec.AddField(petroglyph.FieldDepth, field.TypeFloat64, value)
	}
	if pu.mutation.DepthCleared() {
		_spec.ClearField(petroglyph.FieldDepth, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Diameter(); ok {
		_spec.SetField(petroglyph.FieldDiameter, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedDiameter(); ok {
		_spec.AddField(petroglyph.FieldDiameter, field.TypeFloat64, value)
	}
	if pu.mutation.DiameterCleared() {
		_spec.ClearField(petroglyph.FieldDiameter, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Weight(); ok {
		_spec.SetField(petroglyph.FieldWeight, field.TypeString, value)
	}
	if pu.mutation.WeightCleared() {
		_spec.ClearField(petroglyph.FieldWeight, field.TypeString)
	}
	if value, ok := pu.mutation.Dimensions(); ok {
		_spec.SetField(petroglyph.FieldDimensions, field.TypeString, value)
	}
	if pu.mutation.DimensionsCleared() {
		_spec.ClearField(petroglyph.FieldDimensions, field.TypeString)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(petroglyph.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(petroglyph.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.DeletedBy(); ok {
		_spec.SetField(petroglyph.FieldDeletedBy, field.TypeString, value)
	}
	if pu.mutation.DeletedByCleared() {
		_spec.ClearField(petroglyph.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pu.mutation.Number(); ok {
		_spec.SetField(petroglyph.FieldNumber, field.TypeString, value)
	}
	if pu.mutation.NumberCleared() {
		_spec.ClearField(petroglyph.FieldNumber, field.TypeString)
	}
	if value, ok := pu.mutation.Orientation(); ok {
		_spec.SetField(petroglyph.FieldOrientation, field.TypeString, value)
	}
	if pu.mutation.OrientationCleared() {
		_spec.ClearField(petroglyph.FieldOrientation, field.TypeString)
	}
	if value, ok := pu.mutation.Position(); ok {
		_spec.SetField(petroglyph.FieldPosition, field.TypeString, value)
	}
	if pu.mutation.PositionCleared() {
		_spec.ClearField(petroglyph.FieldPosition, field.TypeString)
	}
	if value, ok := pu.mutation.GeometricShape(); ok {
		_spec.SetField(petroglyph.FieldGeometricShape, field.TypeString, value)
	}
	if pu.mutation.GeometricShapeCleared() {
		_spec.ClearField(petroglyph.FieldGeometricShape, field.TypeString)
	}
	if value, ok := pu.mutation.PlanePreservation(); ok {
		_spec.SetField(petroglyph.FieldPlanePreservation, field.TypeString, value)
	}
	if pu.mutation.PlanePreservationCleared() {
		_spec.ClearField(petroglyph.FieldPlanePreservation, field.TypeString)
	}
	if value, ok := pu.mutation.PhotoCode(); ok {
		_spec.SetField(petroglyph.FieldPhotoCode, field.TypeString, value)
	}
	if pu.mutation.PhotoCodeCleared() {
		_spec.ClearField(petroglyph.FieldPhotoCode, field.TypeString)
	}
	if value, ok := pu.mutation.AccountingDocumentationInformation(); ok {
		_spec.SetField(petroglyph.FieldAccountingDocumentationInformation, field.TypeString, value)
	}
	if pu.mutation.AccountingDocumentationInformationCleared() {
		_spec.ClearField(petroglyph.FieldAccountingDocumentationInformation, field.TypeString)
	}
	if value, ok := pu.mutation.AccountingDocumentationDate(); ok {
		_spec.SetField(petroglyph.FieldAccountingDocumentationDate, field.TypeTime, value)
	}
	if pu.mutation.AccountingDocumentationDateCleared() {
		_spec.ClearField(petroglyph.FieldAccountingDocumentationDate, field.TypeTime)
	}
	if value, ok := pu.mutation.Geometry(); ok {
		_spec.SetField(petroglyph.FieldGeometry, field.TypeOther, value)
	}
	if pu.mutation.GeometryCleared() {
		_spec.ClearField(petroglyph.FieldGeometry, field.TypeOther)
	}
	if pu.mutation.CulturalAffiliationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.CulturalAffiliationTable,
			Columns: []string{petroglyph.CulturalAffiliationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(culture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CulturalAffiliationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.CulturalAffiliationTable,
			Columns: []string{petroglyph.CulturalAffiliationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(culture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.ModelTable,
			Columns: []string{petroglyph.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.ModelTable,
			Columns: []string{petroglyph.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MoundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.MoundTable,
			Columns: []string{petroglyph.MoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mound.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MoundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.MoundTable,
			Columns: []string{petroglyph.MoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mound.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PublicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PublicationsTable,
			Columns: petroglyph.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPublicationsIDs(); len(nodes) > 0 && !pu.mutation.PublicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PublicationsTable,
			Columns: petroglyph.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PublicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PublicationsTable,
			Columns: petroglyph.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.TechniquesTable,
			Columns: petroglyph.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTechniquesIDs(); len(nodes) > 0 && !pu.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.TechniquesTable,
			Columns: petroglyph.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.TechniquesTable,
			Columns: petroglyph.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.RegionTable,
			Columns: []string{petroglyph.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.RegionTable,
			Columns: []string{petroglyph.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AccountingDocumentationAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.AccountingDocumentationAddressTable,
			Columns: []string{petroglyph.AccountingDocumentationAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AccountingDocumentationAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.AccountingDocumentationAddressTable,
			Columns: []string{petroglyph.AccountingDocumentationAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AccountingDocumentationAuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.AccountingDocumentationAuthorTable,
			Columns: []string{petroglyph.AccountingDocumentationAuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AccountingDocumentationAuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.AccountingDocumentationAuthorTable,
			Columns: []string{petroglyph.AccountingDocumentationAuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.CollectionTable,
			Columns: []string{petroglyph.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.CollectionTable,
			Columns: []string{petroglyph.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PersonalCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PersonalCollectionTable,
			Columns: petroglyph.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPersonalCollectionIDs(); len(nodes) > 0 && !pu.mutation.PersonalCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PersonalCollectionTable,
			Columns: petroglyph.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PersonalCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PersonalCollectionTable,
			Columns: petroglyph.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{petroglyph.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PetroglyphUpdateOne is the builder for updating a single Petroglyph entity.
type PetroglyphUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PetroglyphMutation
}

// SetCreatedBy sets the "created_by" field.
func (puo *PetroglyphUpdateOne) SetCreatedBy(s string) *PetroglyphUpdateOne {
	puo.mutation.SetCreatedBy(s)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableCreatedBy(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetCreatedBy(*s)
	}
	return puo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (puo *PetroglyphUpdateOne) ClearCreatedBy() *PetroglyphUpdateOne {
	puo.mutation.ClearCreatedBy()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PetroglyphUpdateOne) SetUpdatedAt(t time.Time) *PetroglyphUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PetroglyphUpdateOne) SetUpdatedBy(s string) *PetroglyphUpdateOne {
	puo.mutation.SetUpdatedBy(s)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableUpdatedBy(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetUpdatedBy(*s)
	}
	return puo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puo *PetroglyphUpdateOne) ClearUpdatedBy() *PetroglyphUpdateOne {
	puo.mutation.ClearUpdatedBy()
	return puo
}

// SetDating sets the "dating" field.
func (puo *PetroglyphUpdateOne) SetDating(s string) *PetroglyphUpdateOne {
	puo.mutation.SetDating(s)
	return puo
}

// SetNillableDating sets the "dating" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableDating(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetDating(*s)
	}
	return puo
}

// ClearDating clears the value of the "dating" field.
func (puo *PetroglyphUpdateOne) ClearDating() *PetroglyphUpdateOne {
	puo.mutation.ClearDating()
	return puo
}

// SetDatingStart sets the "dating_start" field.
func (puo *PetroglyphUpdateOne) SetDatingStart(i int) *PetroglyphUpdateOne {
	puo.mutation.ResetDatingStart()
	puo.mutation.SetDatingStart(i)
	return puo
}

// SetNillableDatingStart sets the "dating_start" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableDatingStart(i *int) *PetroglyphUpdateOne {
	if i != nil {
		puo.SetDatingStart(*i)
	}
	return puo
}

// AddDatingStart adds i to the "dating_start" field.
func (puo *PetroglyphUpdateOne) AddDatingStart(i int) *PetroglyphUpdateOne {
	puo.mutation.AddDatingStart(i)
	return puo
}

// ClearDatingStart clears the value of the "dating_start" field.
func (puo *PetroglyphUpdateOne) ClearDatingStart() *PetroglyphUpdateOne {
	puo.mutation.ClearDatingStart()
	return puo
}

// SetDatingEnd sets the "dating_end" field.
func (puo *PetroglyphUpdateOne) SetDatingEnd(i int) *PetroglyphUpdateOne {
	puo.mutation.ResetDatingEnd()
	puo.mutation.SetDatingEnd(i)
	return puo
}

// SetNillableDatingEnd sets the "dating_end" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableDatingEnd(i *int) *PetroglyphUpdateOne {
	if i != nil {
		puo.SetDatingEnd(*i)
	}
	return puo
}

// AddDatingEnd adds i to the "dating_end" field.
func (puo *PetroglyphUpdateOne) AddDatingEnd(i int) *PetroglyphUpdateOne {
	puo.mutation.AddDatingEnd(i)
	return puo
}

// ClearDatingEnd clears the value of the "dating_end" field.
func (puo *PetroglyphUpdateOne) ClearDatingEnd() *PetroglyphUpdateOne {
	puo.mutation.ClearDatingEnd()
	return puo
}

// SetDisplayName sets the "display_name" field.
func (puo *PetroglyphUpdateOne) SetDisplayName(s string) *PetroglyphUpdateOne {
	puo.mutation.SetDisplayName(s)
	return puo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableDisplayName(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetDisplayName(*s)
	}
	return puo
}

// ClearDisplayName clears the value of the "display_name" field.
func (puo *PetroglyphUpdateOne) ClearDisplayName() *PetroglyphUpdateOne {
	puo.mutation.ClearDisplayName()
	return puo
}

// SetAbbreviation sets the "abbreviation" field.
func (puo *PetroglyphUpdateOne) SetAbbreviation(s string) *PetroglyphUpdateOne {
	puo.mutation.SetAbbreviation(s)
	return puo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableAbbreviation(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetAbbreviation(*s)
	}
	return puo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (puo *PetroglyphUpdateOne) ClearAbbreviation() *PetroglyphUpdateOne {
	puo.mutation.ClearAbbreviation()
	return puo
}

// SetDescription sets the "description" field.
func (puo *PetroglyphUpdateOne) SetDescription(s string) *PetroglyphUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableDescription(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PetroglyphUpdateOne) ClearDescription() *PetroglyphUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetExternalLink sets the "external_link" field.
func (puo *PetroglyphUpdateOne) SetExternalLink(s string) *PetroglyphUpdateOne {
	puo.mutation.SetExternalLink(s)
	return puo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableExternalLink(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetExternalLink(*s)
	}
	return puo
}

// ClearExternalLink clears the value of the "external_link" field.
func (puo *PetroglyphUpdateOne) ClearExternalLink() *PetroglyphUpdateOne {
	puo.mutation.ClearExternalLink()
	return puo
}

// SetStatus sets the "status" field.
func (puo *PetroglyphUpdateOne) SetStatus(pe petroglyph.Status) *PetroglyphUpdateOne {
	puo.mutation.SetStatus(pe)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableStatus(pe *petroglyph.Status) *PetroglyphUpdateOne {
	if pe != nil {
		puo.SetStatus(*pe)
	}
	return puo
}

// ClearStatus clears the value of the "status" field.
func (puo *PetroglyphUpdateOne) ClearStatus() *PetroglyphUpdateOne {
	puo.mutation.ClearStatus()
	return puo
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (puo *PetroglyphUpdateOne) SetPrimaryImageURL(s string) *PetroglyphUpdateOne {
	puo.mutation.SetPrimaryImageURL(s)
	return puo
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillablePrimaryImageURL(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetPrimaryImageURL(*s)
	}
	return puo
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (puo *PetroglyphUpdateOne) ClearPrimaryImageURL() *PetroglyphUpdateOne {
	puo.mutation.ClearPrimaryImageURL()
	return puo
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (puo *PetroglyphUpdateOne) SetAdditionalImagesUrls(s []string) *PetroglyphUpdateOne {
	puo.mutation.SetAdditionalImagesUrls(s)
	return puo
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (puo *PetroglyphUpdateOne) AppendAdditionalImagesUrls(s []string) *PetroglyphUpdateOne {
	puo.mutation.AppendAdditionalImagesUrls(s)
	return puo
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (puo *PetroglyphUpdateOne) ClearAdditionalImagesUrls() *PetroglyphUpdateOne {
	puo.mutation.ClearAdditionalImagesUrls()
	return puo
}

// SetHeight sets the "height" field.
func (puo *PetroglyphUpdateOne) SetHeight(f float64) *PetroglyphUpdateOne {
	puo.mutation.ResetHeight()
	puo.mutation.SetHeight(f)
	return puo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableHeight(f *float64) *PetroglyphUpdateOne {
	if f != nil {
		puo.SetHeight(*f)
	}
	return puo
}

// AddHeight adds f to the "height" field.
func (puo *PetroglyphUpdateOne) AddHeight(f float64) *PetroglyphUpdateOne {
	puo.mutation.AddHeight(f)
	return puo
}

// ClearHeight clears the value of the "height" field.
func (puo *PetroglyphUpdateOne) ClearHeight() *PetroglyphUpdateOne {
	puo.mutation.ClearHeight()
	return puo
}

// SetWidth sets the "width" field.
func (puo *PetroglyphUpdateOne) SetWidth(f float64) *PetroglyphUpdateOne {
	puo.mutation.ResetWidth()
	puo.mutation.SetWidth(f)
	return puo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableWidth(f *float64) *PetroglyphUpdateOne {
	if f != nil {
		puo.SetWidth(*f)
	}
	return puo
}

// AddWidth adds f to the "width" field.
func (puo *PetroglyphUpdateOne) AddWidth(f float64) *PetroglyphUpdateOne {
	puo.mutation.AddWidth(f)
	return puo
}

// ClearWidth clears the value of the "width" field.
func (puo *PetroglyphUpdateOne) ClearWidth() *PetroglyphUpdateOne {
	puo.mutation.ClearWidth()
	return puo
}

// SetLength sets the "length" field.
func (puo *PetroglyphUpdateOne) SetLength(f float64) *PetroglyphUpdateOne {
	puo.mutation.ResetLength()
	puo.mutation.SetLength(f)
	return puo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableLength(f *float64) *PetroglyphUpdateOne {
	if f != nil {
		puo.SetLength(*f)
	}
	return puo
}

// AddLength adds f to the "length" field.
func (puo *PetroglyphUpdateOne) AddLength(f float64) *PetroglyphUpdateOne {
	puo.mutation.AddLength(f)
	return puo
}

// ClearLength clears the value of the "length" field.
func (puo *PetroglyphUpdateOne) ClearLength() *PetroglyphUpdateOne {
	puo.mutation.ClearLength()
	return puo
}

// SetDepth sets the "depth" field.
func (puo *PetroglyphUpdateOne) SetDepth(f float64) *PetroglyphUpdateOne {
	puo.mutation.ResetDepth()
	puo.mutation.SetDepth(f)
	return puo
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableDepth(f *float64) *PetroglyphUpdateOne {
	if f != nil {
		puo.SetDepth(*f)
	}
	return puo
}

// AddDepth adds f to the "depth" field.
func (puo *PetroglyphUpdateOne) AddDepth(f float64) *PetroglyphUpdateOne {
	puo.mutation.AddDepth(f)
	return puo
}

// ClearDepth clears the value of the "depth" field.
func (puo *PetroglyphUpdateOne) ClearDepth() *PetroglyphUpdateOne {
	puo.mutation.ClearDepth()
	return puo
}

// SetDiameter sets the "diameter" field.
func (puo *PetroglyphUpdateOne) SetDiameter(f float64) *PetroglyphUpdateOne {
	puo.mutation.ResetDiameter()
	puo.mutation.SetDiameter(f)
	return puo
}

// SetNillableDiameter sets the "diameter" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableDiameter(f *float64) *PetroglyphUpdateOne {
	if f != nil {
		puo.SetDiameter(*f)
	}
	return puo
}

// AddDiameter adds f to the "diameter" field.
func (puo *PetroglyphUpdateOne) AddDiameter(f float64) *PetroglyphUpdateOne {
	puo.mutation.AddDiameter(f)
	return puo
}

// ClearDiameter clears the value of the "diameter" field.
func (puo *PetroglyphUpdateOne) ClearDiameter() *PetroglyphUpdateOne {
	puo.mutation.ClearDiameter()
	return puo
}

// SetWeight sets the "weight" field.
func (puo *PetroglyphUpdateOne) SetWeight(s string) *PetroglyphUpdateOne {
	puo.mutation.SetWeight(s)
	return puo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableWeight(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetWeight(*s)
	}
	return puo
}

// ClearWeight clears the value of the "weight" field.
func (puo *PetroglyphUpdateOne) ClearWeight() *PetroglyphUpdateOne {
	puo.mutation.ClearWeight()
	return puo
}

// SetDimensions sets the "dimensions" field.
func (puo *PetroglyphUpdateOne) SetDimensions(s string) *PetroglyphUpdateOne {
	puo.mutation.SetDimensions(s)
	return puo
}

// SetNillableDimensions sets the "dimensions" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableDimensions(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetDimensions(*s)
	}
	return puo
}

// ClearDimensions clears the value of the "dimensions" field.
func (puo *PetroglyphUpdateOne) ClearDimensions() *PetroglyphUpdateOne {
	puo.mutation.ClearDimensions()
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PetroglyphUpdateOne) SetDeletedAt(t time.Time) *PetroglyphUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableDeletedAt(t *time.Time) *PetroglyphUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PetroglyphUpdateOne) ClearDeletedAt() *PetroglyphUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetDeletedBy sets the "deleted_by" field.
func (puo *PetroglyphUpdateOne) SetDeletedBy(s string) *PetroglyphUpdateOne {
	puo.mutation.SetDeletedBy(s)
	return puo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableDeletedBy(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetDeletedBy(*s)
	}
	return puo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (puo *PetroglyphUpdateOne) ClearDeletedBy() *PetroglyphUpdateOne {
	puo.mutation.ClearDeletedBy()
	return puo
}

// SetNumber sets the "number" field.
func (puo *PetroglyphUpdateOne) SetNumber(s string) *PetroglyphUpdateOne {
	puo.mutation.SetNumber(s)
	return puo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableNumber(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetNumber(*s)
	}
	return puo
}

// ClearNumber clears the value of the "number" field.
func (puo *PetroglyphUpdateOne) ClearNumber() *PetroglyphUpdateOne {
	puo.mutation.ClearNumber()
	return puo
}

// SetOrientation sets the "orientation" field.
func (puo *PetroglyphUpdateOne) SetOrientation(s string) *PetroglyphUpdateOne {
	puo.mutation.SetOrientation(s)
	return puo
}

// SetNillableOrientation sets the "orientation" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableOrientation(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetOrientation(*s)
	}
	return puo
}

// ClearOrientation clears the value of the "orientation" field.
func (puo *PetroglyphUpdateOne) ClearOrientation() *PetroglyphUpdateOne {
	puo.mutation.ClearOrientation()
	return puo
}

// SetPosition sets the "position" field.
func (puo *PetroglyphUpdateOne) SetPosition(s string) *PetroglyphUpdateOne {
	puo.mutation.SetPosition(s)
	return puo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillablePosition(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetPosition(*s)
	}
	return puo
}

// ClearPosition clears the value of the "position" field.
func (puo *PetroglyphUpdateOne) ClearPosition() *PetroglyphUpdateOne {
	puo.mutation.ClearPosition()
	return puo
}

// SetGeometricShape sets the "geometric_shape" field.
func (puo *PetroglyphUpdateOne) SetGeometricShape(s string) *PetroglyphUpdateOne {
	puo.mutation.SetGeometricShape(s)
	return puo
}

// SetNillableGeometricShape sets the "geometric_shape" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableGeometricShape(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetGeometricShape(*s)
	}
	return puo
}

// ClearGeometricShape clears the value of the "geometric_shape" field.
func (puo *PetroglyphUpdateOne) ClearGeometricShape() *PetroglyphUpdateOne {
	puo.mutation.ClearGeometricShape()
	return puo
}

// SetPlanePreservation sets the "plane_preservation" field.
func (puo *PetroglyphUpdateOne) SetPlanePreservation(s string) *PetroglyphUpdateOne {
	puo.mutation.SetPlanePreservation(s)
	return puo
}

// SetNillablePlanePreservation sets the "plane_preservation" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillablePlanePreservation(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetPlanePreservation(*s)
	}
	return puo
}

// ClearPlanePreservation clears the value of the "plane_preservation" field.
func (puo *PetroglyphUpdateOne) ClearPlanePreservation() *PetroglyphUpdateOne {
	puo.mutation.ClearPlanePreservation()
	return puo
}

// SetPhotoCode sets the "photo_code" field.
func (puo *PetroglyphUpdateOne) SetPhotoCode(s string) *PetroglyphUpdateOne {
	puo.mutation.SetPhotoCode(s)
	return puo
}

// SetNillablePhotoCode sets the "photo_code" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillablePhotoCode(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetPhotoCode(*s)
	}
	return puo
}

// ClearPhotoCode clears the value of the "photo_code" field.
func (puo *PetroglyphUpdateOne) ClearPhotoCode() *PetroglyphUpdateOne {
	puo.mutation.ClearPhotoCode()
	return puo
}

// SetAccountingDocumentationInformation sets the "accounting_documentation_information" field.
func (puo *PetroglyphUpdateOne) SetAccountingDocumentationInformation(s string) *PetroglyphUpdateOne {
	puo.mutation.SetAccountingDocumentationInformation(s)
	return puo
}

// SetNillableAccountingDocumentationInformation sets the "accounting_documentation_information" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableAccountingDocumentationInformation(s *string) *PetroglyphUpdateOne {
	if s != nil {
		puo.SetAccountingDocumentationInformation(*s)
	}
	return puo
}

// ClearAccountingDocumentationInformation clears the value of the "accounting_documentation_information" field.
func (puo *PetroglyphUpdateOne) ClearAccountingDocumentationInformation() *PetroglyphUpdateOne {
	puo.mutation.ClearAccountingDocumentationInformation()
	return puo
}

// SetAccountingDocumentationDate sets the "accounting_documentation_date" field.
func (puo *PetroglyphUpdateOne) SetAccountingDocumentationDate(t time.Time) *PetroglyphUpdateOne {
	puo.mutation.SetAccountingDocumentationDate(t)
	return puo
}

// SetNillableAccountingDocumentationDate sets the "accounting_documentation_date" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableAccountingDocumentationDate(t *time.Time) *PetroglyphUpdateOne {
	if t != nil {
		puo.SetAccountingDocumentationDate(*t)
	}
	return puo
}

// ClearAccountingDocumentationDate clears the value of the "accounting_documentation_date" field.
func (puo *PetroglyphUpdateOne) ClearAccountingDocumentationDate() *PetroglyphUpdateOne {
	puo.mutation.ClearAccountingDocumentationDate()
	return puo
}

// SetGeometry sets the "geometry" field.
func (puo *PetroglyphUpdateOne) SetGeometry(t types.Geometry) *PetroglyphUpdateOne {
	puo.mutation.SetGeometry(t)
	return puo
}

// SetNillableGeometry sets the "geometry" field if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableGeometry(t *types.Geometry) *PetroglyphUpdateOne {
	if t != nil {
		puo.SetGeometry(*t)
	}
	return puo
}

// ClearGeometry clears the value of the "geometry" field.
func (puo *PetroglyphUpdateOne) ClearGeometry() *PetroglyphUpdateOne {
	puo.mutation.ClearGeometry()
	return puo
}

// SetCulturalAffiliationID sets the "cultural_affiliation" edge to the Culture entity by ID.
func (puo *PetroglyphUpdateOne) SetCulturalAffiliationID(id int) *PetroglyphUpdateOne {
	puo.mutation.SetCulturalAffiliationID(id)
	return puo
}

// SetNillableCulturalAffiliationID sets the "cultural_affiliation" edge to the Culture entity by ID if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableCulturalAffiliationID(id *int) *PetroglyphUpdateOne {
	if id != nil {
		puo = puo.SetCulturalAffiliationID(*id)
	}
	return puo
}

// SetCulturalAffiliation sets the "cultural_affiliation" edge to the Culture entity.
func (puo *PetroglyphUpdateOne) SetCulturalAffiliation(c *Culture) *PetroglyphUpdateOne {
	return puo.SetCulturalAffiliationID(c.ID)
}

// SetModelID sets the "model" edge to the Model entity by ID.
func (puo *PetroglyphUpdateOne) SetModelID(id int) *PetroglyphUpdateOne {
	puo.mutation.SetModelID(id)
	return puo
}

// SetNillableModelID sets the "model" edge to the Model entity by ID if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableModelID(id *int) *PetroglyphUpdateOne {
	if id != nil {
		puo = puo.SetModelID(*id)
	}
	return puo
}

// SetModel sets the "model" edge to the Model entity.
func (puo *PetroglyphUpdateOne) SetModel(m *Model) *PetroglyphUpdateOne {
	return puo.SetModelID(m.ID)
}

// SetMoundID sets the "mound" edge to the Mound entity by ID.
func (puo *PetroglyphUpdateOne) SetMoundID(id int) *PetroglyphUpdateOne {
	puo.mutation.SetMoundID(id)
	return puo
}

// SetNillableMoundID sets the "mound" edge to the Mound entity by ID if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableMoundID(id *int) *PetroglyphUpdateOne {
	if id != nil {
		puo = puo.SetMoundID(*id)
	}
	return puo
}

// SetMound sets the "mound" edge to the Mound entity.
func (puo *PetroglyphUpdateOne) SetMound(m *Mound) *PetroglyphUpdateOne {
	return puo.SetMoundID(m.ID)
}

// AddPublicationIDs adds the "publications" edge to the Publication entity by IDs.
func (puo *PetroglyphUpdateOne) AddPublicationIDs(ids ...int) *PetroglyphUpdateOne {
	puo.mutation.AddPublicationIDs(ids...)
	return puo
}

// AddPublications adds the "publications" edges to the Publication entity.
func (puo *PetroglyphUpdateOne) AddPublications(p ...*Publication) *PetroglyphUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPublicationIDs(ids...)
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (puo *PetroglyphUpdateOne) AddTechniqueIDs(ids ...int) *PetroglyphUpdateOne {
	puo.mutation.AddTechniqueIDs(ids...)
	return puo
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (puo *PetroglyphUpdateOne) AddTechniques(t ...*Technique) *PetroglyphUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTechniqueIDs(ids...)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (puo *PetroglyphUpdateOne) SetRegionID(id int) *PetroglyphUpdateOne {
	puo.mutation.SetRegionID(id)
	return puo
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableRegionID(id *int) *PetroglyphUpdateOne {
	if id != nil {
		puo = puo.SetRegionID(*id)
	}
	return puo
}

// SetRegion sets the "region" edge to the Region entity.
func (puo *PetroglyphUpdateOne) SetRegion(r *Region) *PetroglyphUpdateOne {
	return puo.SetRegionID(r.ID)
}

// SetAccountingDocumentationAddressID sets the "accounting_documentation_address" edge to the Location entity by ID.
func (puo *PetroglyphUpdateOne) SetAccountingDocumentationAddressID(id int) *PetroglyphUpdateOne {
	puo.mutation.SetAccountingDocumentationAddressID(id)
	return puo
}

// SetNillableAccountingDocumentationAddressID sets the "accounting_documentation_address" edge to the Location entity by ID if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableAccountingDocumentationAddressID(id *int) *PetroglyphUpdateOne {
	if id != nil {
		puo = puo.SetAccountingDocumentationAddressID(*id)
	}
	return puo
}

// SetAccountingDocumentationAddress sets the "accounting_documentation_address" edge to the Location entity.
func (puo *PetroglyphUpdateOne) SetAccountingDocumentationAddress(l *Location) *PetroglyphUpdateOne {
	return puo.SetAccountingDocumentationAddressID(l.ID)
}

// SetAccountingDocumentationAuthorID sets the "accounting_documentation_author" edge to the Person entity by ID.
func (puo *PetroglyphUpdateOne) SetAccountingDocumentationAuthorID(id int) *PetroglyphUpdateOne {
	puo.mutation.SetAccountingDocumentationAuthorID(id)
	return puo
}

// SetNillableAccountingDocumentationAuthorID sets the "accounting_documentation_author" edge to the Person entity by ID if the given value is not nil.
func (puo *PetroglyphUpdateOne) SetNillableAccountingDocumentationAuthorID(id *int) *PetroglyphUpdateOne {
	if id != nil {
		puo = puo.SetAccountingDocumentationAuthorID(*id)
	}
	return puo
}

// SetAccountingDocumentationAuthor sets the "accounting_documentation_author" edge to the Person entity.
func (puo *PetroglyphUpdateOne) SetAccountingDocumentationAuthor(p *Person) *PetroglyphUpdateOne {
	return puo.SetAccountingDocumentationAuthorID(p.ID)
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (puo *PetroglyphUpdateOne) SetCollectionID(id int) *PetroglyphUpdateOne {
	puo.mutation.SetCollectionID(id)
	return puo
}

// SetCollection sets the "collection" edge to the Collection entity.
func (puo *PetroglyphUpdateOne) SetCollection(c *Collection) *PetroglyphUpdateOne {
	return puo.SetCollectionID(c.ID)
}

// AddPersonalCollectionIDs adds the "personal_collection" edge to the PersonalCollection entity by IDs.
func (puo *PetroglyphUpdateOne) AddPersonalCollectionIDs(ids ...int) *PetroglyphUpdateOne {
	puo.mutation.AddPersonalCollectionIDs(ids...)
	return puo
}

// AddPersonalCollection adds the "personal_collection" edges to the PersonalCollection entity.
func (puo *PetroglyphUpdateOne) AddPersonalCollection(p ...*PersonalCollection) *PetroglyphUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPersonalCollectionIDs(ids...)
}

// Mutation returns the PetroglyphMutation object of the builder.
func (puo *PetroglyphUpdateOne) Mutation() *PetroglyphMutation {
	return puo.mutation
}

// ClearCulturalAffiliation clears the "cultural_affiliation" edge to the Culture entity.
func (puo *PetroglyphUpdateOne) ClearCulturalAffiliation() *PetroglyphUpdateOne {
	puo.mutation.ClearCulturalAffiliation()
	return puo
}

// ClearModel clears the "model" edge to the Model entity.
func (puo *PetroglyphUpdateOne) ClearModel() *PetroglyphUpdateOne {
	puo.mutation.ClearModel()
	return puo
}

// ClearMound clears the "mound" edge to the Mound entity.
func (puo *PetroglyphUpdateOne) ClearMound() *PetroglyphUpdateOne {
	puo.mutation.ClearMound()
	return puo
}

// ClearPublications clears all "publications" edges to the Publication entity.
func (puo *PetroglyphUpdateOne) ClearPublications() *PetroglyphUpdateOne {
	puo.mutation.ClearPublications()
	return puo
}

// RemovePublicationIDs removes the "publications" edge to Publication entities by IDs.
func (puo *PetroglyphUpdateOne) RemovePublicationIDs(ids ...int) *PetroglyphUpdateOne {
	puo.mutation.RemovePublicationIDs(ids...)
	return puo
}

// RemovePublications removes "publications" edges to Publication entities.
func (puo *PetroglyphUpdateOne) RemovePublications(p ...*Publication) *PetroglyphUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePublicationIDs(ids...)
}

// ClearTechniques clears all "techniques" edges to the Technique entity.
func (puo *PetroglyphUpdateOne) ClearTechniques() *PetroglyphUpdateOne {
	puo.mutation.ClearTechniques()
	return puo
}

// RemoveTechniqueIDs removes the "techniques" edge to Technique entities by IDs.
func (puo *PetroglyphUpdateOne) RemoveTechniqueIDs(ids ...int) *PetroglyphUpdateOne {
	puo.mutation.RemoveTechniqueIDs(ids...)
	return puo
}

// RemoveTechniques removes "techniques" edges to Technique entities.
func (puo *PetroglyphUpdateOne) RemoveTechniques(t ...*Technique) *PetroglyphUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTechniqueIDs(ids...)
}

// ClearRegion clears the "region" edge to the Region entity.
func (puo *PetroglyphUpdateOne) ClearRegion() *PetroglyphUpdateOne {
	puo.mutation.ClearRegion()
	return puo
}

// ClearAccountingDocumentationAddress clears the "accounting_documentation_address" edge to the Location entity.
func (puo *PetroglyphUpdateOne) ClearAccountingDocumentationAddress() *PetroglyphUpdateOne {
	puo.mutation.ClearAccountingDocumentationAddress()
	return puo
}

// ClearAccountingDocumentationAuthor clears the "accounting_documentation_author" edge to the Person entity.
func (puo *PetroglyphUpdateOne) ClearAccountingDocumentationAuthor() *PetroglyphUpdateOne {
	puo.mutation.ClearAccountingDocumentationAuthor()
	return puo
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (puo *PetroglyphUpdateOne) ClearCollection() *PetroglyphUpdateOne {
	puo.mutation.ClearCollection()
	return puo
}

// ClearPersonalCollection clears all "personal_collection" edges to the PersonalCollection entity.
func (puo *PetroglyphUpdateOne) ClearPersonalCollection() *PetroglyphUpdateOne {
	puo.mutation.ClearPersonalCollection()
	return puo
}

// RemovePersonalCollectionIDs removes the "personal_collection" edge to PersonalCollection entities by IDs.
func (puo *PetroglyphUpdateOne) RemovePersonalCollectionIDs(ids ...int) *PetroglyphUpdateOne {
	puo.mutation.RemovePersonalCollectionIDs(ids...)
	return puo
}

// RemovePersonalCollection removes "personal_collection" edges to PersonalCollection entities.
func (puo *PetroglyphUpdateOne) RemovePersonalCollection(p ...*PersonalCollection) *PetroglyphUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePersonalCollectionIDs(ids...)
}

// Where appends a list predicates to the PetroglyphUpdate builder.
func (puo *PetroglyphUpdateOne) Where(ps ...predicate.Petroglyph) *PetroglyphUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PetroglyphUpdateOne) Select(field string, fields ...string) *PetroglyphUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Petroglyph entity.
func (puo *PetroglyphUpdateOne) Save(ctx context.Context) (*Petroglyph, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PetroglyphUpdateOne) SaveX(ctx context.Context) *Petroglyph {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PetroglyphUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PetroglyphUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PetroglyphUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if petroglyph.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized petroglyph.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := petroglyph.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *PetroglyphUpdateOne) check() error {
	if v, ok := puo.mutation.Status(); ok {
		if err := petroglyph.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Petroglyph.status": %w`, err)}
		}
	}
	if _, ok := puo.mutation.CollectionID(); puo.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Petroglyph.collection"`)
	}
	return nil
}

func (puo *PetroglyphUpdateOne) sqlSave(ctx context.Context) (_node *Petroglyph, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(petroglyph.Table, petroglyph.Columns, sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Petroglyph.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, petroglyph.FieldID)
		for _, f := range fields {
			if !petroglyph.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != petroglyph.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(petroglyph.FieldCreatedBy, field.TypeString, value)
	}
	if puo.mutation.CreatedByCleared() {
		_spec.ClearField(petroglyph.FieldCreatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(petroglyph.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(petroglyph.FieldUpdatedBy, field.TypeString, value)
	}
	if puo.mutation.UpdatedByCleared() {
		_spec.ClearField(petroglyph.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.Dating(); ok {
		_spec.SetField(petroglyph.FieldDating, field.TypeString, value)
	}
	if puo.mutation.DatingCleared() {
		_spec.ClearField(petroglyph.FieldDating, field.TypeString)
	}
	if value, ok := puo.mutation.DatingStart(); ok {
		_spec.SetField(petroglyph.FieldDatingStart, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDatingStart(); ok {
		_spec.AddField(petroglyph.FieldDatingStart, field.TypeInt, value)
	}
	if puo.mutation.DatingStartCleared() {
		_spec.ClearField(petroglyph.FieldDatingStart, field.TypeInt)
	}
	if value, ok := puo.mutation.DatingEnd(); ok {
		_spec.SetField(petroglyph.FieldDatingEnd, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDatingEnd(); ok {
		_spec.AddField(petroglyph.FieldDatingEnd, field.TypeInt, value)
	}
	if puo.mutation.DatingEndCleared() {
		_spec.ClearField(petroglyph.FieldDatingEnd, field.TypeInt)
	}
	if value, ok := puo.mutation.DisplayName(); ok {
		_spec.SetField(petroglyph.FieldDisplayName, field.TypeString, value)
	}
	if puo.mutation.DisplayNameCleared() {
		_spec.ClearField(petroglyph.FieldDisplayName, field.TypeString)
	}
	if value, ok := puo.mutation.Abbreviation(); ok {
		_spec.SetField(petroglyph.FieldAbbreviation, field.TypeString, value)
	}
	if puo.mutation.AbbreviationCleared() {
		_spec.ClearField(petroglyph.FieldAbbreviation, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(petroglyph.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(petroglyph.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.ExternalLink(); ok {
		_spec.SetField(petroglyph.FieldExternalLink, field.TypeString, value)
	}
	if puo.mutation.ExternalLinkCleared() {
		_spec.ClearField(petroglyph.FieldExternalLink, field.TypeString)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(petroglyph.FieldStatus, field.TypeEnum, value)
	}
	if puo.mutation.StatusCleared() {
		_spec.ClearField(petroglyph.FieldStatus, field.TypeEnum)
	}
	if value, ok := puo.mutation.PrimaryImageURL(); ok {
		_spec.SetField(petroglyph.FieldPrimaryImageURL, field.TypeString, value)
	}
	if puo.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(petroglyph.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := puo.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(petroglyph.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, petroglyph.FieldAdditionalImagesUrls, value)
		})
	}
	if puo.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(petroglyph.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := puo.mutation.Height(); ok {
		_spec.SetField(petroglyph.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedHeight(); ok {
		_spec.AddField(petroglyph.FieldHeight, field.TypeFloat64, value)
	}
	if puo.mutation.HeightCleared() {
		_spec.ClearField(petroglyph.FieldHeight, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Width(); ok {
		_spec.SetField(petroglyph.FieldWidth, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedWidth(); ok {
		_spec.AddField(petroglyph.FieldWidth, field.TypeFloat64, value)
	}
	if puo.mutation.WidthCleared() {
		_spec.ClearField(petroglyph.FieldWidth, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Length(); ok {
		_spec.SetField(petroglyph.FieldLength, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedLength(); ok {
		_spec.AddField(petroglyph.FieldLength, field.TypeFloat64, value)
	}
	if puo.mutation.LengthCleared() {
		_spec.ClearField(petroglyph.FieldLength, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Depth(); ok {
		_spec.SetField(petroglyph.FieldDepth, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedDepth(); ok {
		_spec.AddField(petroglyph.FieldDepth, field.TypeFloat64, value)
	}
	if puo.mutation.DepthCleared() {
		_spec.ClearField(petroglyph.FieldDepth, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Diameter(); ok {
		_spec.SetField(petroglyph.FieldDiameter, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedDiameter(); ok {
		_spec.AddField(petroglyph.FieldDiameter, field.TypeFloat64, value)
	}
	if puo.mutation.DiameterCleared() {
		_spec.ClearField(petroglyph.FieldDiameter, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Weight(); ok {
		_spec.SetField(petroglyph.FieldWeight, field.TypeString, value)
	}
	if puo.mutation.WeightCleared() {
		_spec.ClearField(petroglyph.FieldWeight, field.TypeString)
	}
	if value, ok := puo.mutation.Dimensions(); ok {
		_spec.SetField(petroglyph.FieldDimensions, field.TypeString, value)
	}
	if puo.mutation.DimensionsCleared() {
		_spec.ClearField(petroglyph.FieldDimensions, field.TypeString)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(petroglyph.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(petroglyph.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.DeletedBy(); ok {
		_spec.SetField(petroglyph.FieldDeletedBy, field.TypeString, value)
	}
	if puo.mutation.DeletedByCleared() {
		_spec.ClearField(petroglyph.FieldDeletedBy, field.TypeString)
	}
	if value, ok := puo.mutation.Number(); ok {
		_spec.SetField(petroglyph.FieldNumber, field.TypeString, value)
	}
	if puo.mutation.NumberCleared() {
		_spec.ClearField(petroglyph.FieldNumber, field.TypeString)
	}
	if value, ok := puo.mutation.Orientation(); ok {
		_spec.SetField(petroglyph.FieldOrientation, field.TypeString, value)
	}
	if puo.mutation.OrientationCleared() {
		_spec.ClearField(petroglyph.FieldOrientation, field.TypeString)
	}
	if value, ok := puo.mutation.Position(); ok {
		_spec.SetField(petroglyph.FieldPosition, field.TypeString, value)
	}
	if puo.mutation.PositionCleared() {
		_spec.ClearField(petroglyph.FieldPosition, field.TypeString)
	}
	if value, ok := puo.mutation.GeometricShape(); ok {
		_spec.SetField(petroglyph.FieldGeometricShape, field.TypeString, value)
	}
	if puo.mutation.GeometricShapeCleared() {
		_spec.ClearField(petroglyph.FieldGeometricShape, field.TypeString)
	}
	if value, ok := puo.mutation.PlanePreservation(); ok {
		_spec.SetField(petroglyph.FieldPlanePreservation, field.TypeString, value)
	}
	if puo.mutation.PlanePreservationCleared() {
		_spec.ClearField(petroglyph.FieldPlanePreservation, field.TypeString)
	}
	if value, ok := puo.mutation.PhotoCode(); ok {
		_spec.SetField(petroglyph.FieldPhotoCode, field.TypeString, value)
	}
	if puo.mutation.PhotoCodeCleared() {
		_spec.ClearField(petroglyph.FieldPhotoCode, field.TypeString)
	}
	if value, ok := puo.mutation.AccountingDocumentationInformation(); ok {
		_spec.SetField(petroglyph.FieldAccountingDocumentationInformation, field.TypeString, value)
	}
	if puo.mutation.AccountingDocumentationInformationCleared() {
		_spec.ClearField(petroglyph.FieldAccountingDocumentationInformation, field.TypeString)
	}
	if value, ok := puo.mutation.AccountingDocumentationDate(); ok {
		_spec.SetField(petroglyph.FieldAccountingDocumentationDate, field.TypeTime, value)
	}
	if puo.mutation.AccountingDocumentationDateCleared() {
		_spec.ClearField(petroglyph.FieldAccountingDocumentationDate, field.TypeTime)
	}
	if value, ok := puo.mutation.Geometry(); ok {
		_spec.SetField(petroglyph.FieldGeometry, field.TypeOther, value)
	}
	if puo.mutation.GeometryCleared() {
		_spec.ClearField(petroglyph.FieldGeometry, field.TypeOther)
	}
	if puo.mutation.CulturalAffiliationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.CulturalAffiliationTable,
			Columns: []string{petroglyph.CulturalAffiliationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(culture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CulturalAffiliationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.CulturalAffiliationTable,
			Columns: []string{petroglyph.CulturalAffiliationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(culture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.ModelTable,
			Columns: []string{petroglyph.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.ModelTable,
			Columns: []string{petroglyph.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MoundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.MoundTable,
			Columns: []string{petroglyph.MoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mound.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MoundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.MoundTable,
			Columns: []string{petroglyph.MoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mound.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PublicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PublicationsTable,
			Columns: petroglyph.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPublicationsIDs(); len(nodes) > 0 && !puo.mutation.PublicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PublicationsTable,
			Columns: petroglyph.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PublicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PublicationsTable,
			Columns: petroglyph.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.TechniquesTable,
			Columns: petroglyph.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTechniquesIDs(); len(nodes) > 0 && !puo.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.TechniquesTable,
			Columns: petroglyph.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.TechniquesTable,
			Columns: petroglyph.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.RegionTable,
			Columns: []string{petroglyph.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.RegionTable,
			Columns: []string{petroglyph.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AccountingDocumentationAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.AccountingDocumentationAddressTable,
			Columns: []string{petroglyph.AccountingDocumentationAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AccountingDocumentationAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.AccountingDocumentationAddressTable,
			Columns: []string{petroglyph.AccountingDocumentationAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AccountingDocumentationAuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.AccountingDocumentationAuthorTable,
			Columns: []string{petroglyph.AccountingDocumentationAuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AccountingDocumentationAuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.AccountingDocumentationAuthorTable,
			Columns: []string{petroglyph.AccountingDocumentationAuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.CollectionTable,
			Columns: []string{petroglyph.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.CollectionTable,
			Columns: []string{petroglyph.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PersonalCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PersonalCollectionTable,
			Columns: petroglyph.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPersonalCollectionIDs(); len(nodes) > 0 && !puo.mutation.PersonalCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PersonalCollectionTable,
			Columns: petroglyph.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PersonalCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PersonalCollectionTable,
			Columns: petroglyph.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Petroglyph{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{petroglyph.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
