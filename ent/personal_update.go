// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/personal"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/proxy"
)

// PersonalUpdate is the builder for updating Personal entities.
type PersonalUpdate struct {
	config
	hooks    []Hook
	mutation *PersonalMutation
}

// Where appends a list predicates to the PersonalUpdate builder.
func (pu *PersonalUpdate) Where(ps ...predicate.Personal) *PersonalUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDisplayName sets the "display_name" field.
func (pu *PersonalUpdate) SetDisplayName(s string) *PersonalUpdate {
	pu.mutation.SetDisplayName(s)
	return pu
}

// AddProxyIDs adds the "proxies" edge to the Proxy entity by IDs.
func (pu *PersonalUpdate) AddProxyIDs(ids ...int) *PersonalUpdate {
	pu.mutation.AddProxyIDs(ids...)
	return pu
}

// AddProxies adds the "proxies" edges to the Proxy entity.
func (pu *PersonalUpdate) AddProxies(p ...*Proxy) *PersonalUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProxyIDs(ids...)
}

// Mutation returns the PersonalMutation object of the builder.
func (pu *PersonalUpdate) Mutation() *PersonalMutation {
	return pu.mutation
}

// ClearProxies clears all "proxies" edges to the Proxy entity.
func (pu *PersonalUpdate) ClearProxies() *PersonalUpdate {
	pu.mutation.ClearProxies()
	return pu
}

// RemoveProxyIDs removes the "proxies" edge to Proxy entities by IDs.
func (pu *PersonalUpdate) RemoveProxyIDs(ids ...int) *PersonalUpdate {
	pu.mutation.RemoveProxyIDs(ids...)
	return pu
}

// RemoveProxies removes "proxies" edges to Proxy entities.
func (pu *PersonalUpdate) RemoveProxies(p ...*Proxy) *PersonalUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProxyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonalUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonalUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonalUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PersonalUpdate) check() error {
	if v, ok := pu.mutation.DisplayName(); ok {
		if err := personal.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Personal.display_name": %w`, err)}
		}
	}
	return nil
}

func (pu *PersonalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(personal.Table, personal.Columns, sqlgraph.NewFieldSpec(personal.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.DisplayName(); ok {
		_spec.SetField(personal.FieldDisplayName, field.TypeString, value)
	}
	if pu.mutation.ProxiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personal.ProxiesTable,
			Columns: []string{personal.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProxiesIDs(); len(nodes) > 0 && !pu.mutation.ProxiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personal.ProxiesTable,
			Columns: []string{personal.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProxiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personal.ProxiesTable,
			Columns: []string{personal.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PersonalUpdateOne is the builder for updating a single Personal entity.
type PersonalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonalMutation
}

// SetDisplayName sets the "display_name" field.
func (puo *PersonalUpdateOne) SetDisplayName(s string) *PersonalUpdateOne {
	puo.mutation.SetDisplayName(s)
	return puo
}

// AddProxyIDs adds the "proxies" edge to the Proxy entity by IDs.
func (puo *PersonalUpdateOne) AddProxyIDs(ids ...int) *PersonalUpdateOne {
	puo.mutation.AddProxyIDs(ids...)
	return puo
}

// AddProxies adds the "proxies" edges to the Proxy entity.
func (puo *PersonalUpdateOne) AddProxies(p ...*Proxy) *PersonalUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProxyIDs(ids...)
}

// Mutation returns the PersonalMutation object of the builder.
func (puo *PersonalUpdateOne) Mutation() *PersonalMutation {
	return puo.mutation
}

// ClearProxies clears all "proxies" edges to the Proxy entity.
func (puo *PersonalUpdateOne) ClearProxies() *PersonalUpdateOne {
	puo.mutation.ClearProxies()
	return puo
}

// RemoveProxyIDs removes the "proxies" edge to Proxy entities by IDs.
func (puo *PersonalUpdateOne) RemoveProxyIDs(ids ...int) *PersonalUpdateOne {
	puo.mutation.RemoveProxyIDs(ids...)
	return puo
}

// RemoveProxies removes "proxies" edges to Proxy entities.
func (puo *PersonalUpdateOne) RemoveProxies(p ...*Proxy) *PersonalUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProxyIDs(ids...)
}

// Where appends a list predicates to the PersonalUpdate builder.
func (puo *PersonalUpdateOne) Where(ps ...predicate.Personal) *PersonalUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonalUpdateOne) Select(field string, fields ...string) *PersonalUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Personal entity.
func (puo *PersonalUpdateOne) Save(ctx context.Context) (*Personal, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonalUpdateOne) SaveX(ctx context.Context) *Personal {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonalUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonalUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PersonalUpdateOne) check() error {
	if v, ok := puo.mutation.DisplayName(); ok {
		if err := personal.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Personal.display_name": %w`, err)}
		}
	}
	return nil
}

func (puo *PersonalUpdateOne) sqlSave(ctx context.Context) (_node *Personal, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(personal.Table, personal.Columns, sqlgraph.NewFieldSpec(personal.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Personal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personal.FieldID)
		for _, f := range fields {
			if !personal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.DisplayName(); ok {
		_spec.SetField(personal.FieldDisplayName, field.TypeString, value)
	}
	if puo.mutation.ProxiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personal.ProxiesTable,
			Columns: []string{personal.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProxiesIDs(); len(nodes) > 0 && !puo.mutation.ProxiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personal.ProxiesTable,
			Columns: []string{personal.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProxiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personal.ProxiesTable,
			Columns: []string{personal.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Personal{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
