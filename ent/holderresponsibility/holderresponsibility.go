// Code generated by ent, DO NOT EDIT.

package holderresponsibility

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the holderresponsibility type in the database.
	Label = "holder_responsibility"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeHolder holds the string denoting the holder edge name in mutations.
	EdgeHolder = "holder"
	// Table holds the table name of the holderresponsibility in the database.
	Table = "holder_responsibilities"
	// HolderTable is the table that holds the holder relation/edge. The primary key declared below.
	HolderTable = "holder_holder_responsibilities"
	// HolderInverseTable is the table name for the Holder entity.
	// It exists in this package in order to avoid circular dependency with the "holder" package.
	HolderInverseTable = "holders"
)

// Columns holds all SQL columns for holderresponsibility fields.
var Columns = []string{
	FieldID,
}

var (
	// HolderPrimaryKey and HolderColumn2 are the table columns denoting the
	// primary key for the holder relation (M2M).
	HolderPrimaryKey = []string{"holder_id", "holder_responsibility_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the HolderResponsibility queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHolderCount orders the results by holder count.
func ByHolderCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHolderStep(), opts...)
	}
}

// ByHolder orders the results by holder terms.
func ByHolder(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHolderStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newHolderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HolderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, HolderTable, HolderPrimaryKey...),
	)
}
