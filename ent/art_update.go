// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artgenre"
	"github.com/dkrasnovdev/siberiana-api/ent/artstyle"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/personalcollection"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
	"github.com/dkrasnovdev/siberiana-api/ent/technique"
)

// ArtUpdate is the builder for updating Art entities.
type ArtUpdate struct {
	config
	hooks    []Hook
	mutation *ArtMutation
}

// Where appends a list predicates to the ArtUpdate builder.
func (au *ArtUpdate) Where(ps ...predicate.Art) *ArtUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCreatedBy sets the "created_by" field.
func (au *ArtUpdate) SetCreatedBy(s string) *ArtUpdate {
	au.mutation.SetCreatedBy(s)
	return au
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (au *ArtUpdate) SetNillableCreatedBy(s *string) *ArtUpdate {
	if s != nil {
		au.SetCreatedBy(*s)
	}
	return au
}

// ClearCreatedBy clears the value of the "created_by" field.
func (au *ArtUpdate) ClearCreatedBy() *ArtUpdate {
	au.mutation.ClearCreatedBy()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *ArtUpdate) SetUpdatedAt(t time.Time) *ArtUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUpdatedBy sets the "updated_by" field.
func (au *ArtUpdate) SetUpdatedBy(s string) *ArtUpdate {
	au.mutation.SetUpdatedBy(s)
	return au
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (au *ArtUpdate) SetNillableUpdatedBy(s *string) *ArtUpdate {
	if s != nil {
		au.SetUpdatedBy(*s)
	}
	return au
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (au *ArtUpdate) ClearUpdatedBy() *ArtUpdate {
	au.mutation.ClearUpdatedBy()
	return au
}

// SetDating sets the "dating" field.
func (au *ArtUpdate) SetDating(s string) *ArtUpdate {
	au.mutation.SetDating(s)
	return au
}

// SetNillableDating sets the "dating" field if the given value is not nil.
func (au *ArtUpdate) SetNillableDating(s *string) *ArtUpdate {
	if s != nil {
		au.SetDating(*s)
	}
	return au
}

// ClearDating clears the value of the "dating" field.
func (au *ArtUpdate) ClearDating() *ArtUpdate {
	au.mutation.ClearDating()
	return au
}

// SetDatingStart sets the "dating_start" field.
func (au *ArtUpdate) SetDatingStart(i int) *ArtUpdate {
	au.mutation.ResetDatingStart()
	au.mutation.SetDatingStart(i)
	return au
}

// SetNillableDatingStart sets the "dating_start" field if the given value is not nil.
func (au *ArtUpdate) SetNillableDatingStart(i *int) *ArtUpdate {
	if i != nil {
		au.SetDatingStart(*i)
	}
	return au
}

// AddDatingStart adds i to the "dating_start" field.
func (au *ArtUpdate) AddDatingStart(i int) *ArtUpdate {
	au.mutation.AddDatingStart(i)
	return au
}

// ClearDatingStart clears the value of the "dating_start" field.
func (au *ArtUpdate) ClearDatingStart() *ArtUpdate {
	au.mutation.ClearDatingStart()
	return au
}

// SetDatingEnd sets the "dating_end" field.
func (au *ArtUpdate) SetDatingEnd(i int) *ArtUpdate {
	au.mutation.ResetDatingEnd()
	au.mutation.SetDatingEnd(i)
	return au
}

// SetNillableDatingEnd sets the "dating_end" field if the given value is not nil.
func (au *ArtUpdate) SetNillableDatingEnd(i *int) *ArtUpdate {
	if i != nil {
		au.SetDatingEnd(*i)
	}
	return au
}

// AddDatingEnd adds i to the "dating_end" field.
func (au *ArtUpdate) AddDatingEnd(i int) *ArtUpdate {
	au.mutation.AddDatingEnd(i)
	return au
}

// ClearDatingEnd clears the value of the "dating_end" field.
func (au *ArtUpdate) ClearDatingEnd() *ArtUpdate {
	au.mutation.ClearDatingEnd()
	return au
}

// SetDisplayName sets the "display_name" field.
func (au *ArtUpdate) SetDisplayName(s string) *ArtUpdate {
	au.mutation.SetDisplayName(s)
	return au
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (au *ArtUpdate) SetNillableDisplayName(s *string) *ArtUpdate {
	if s != nil {
		au.SetDisplayName(*s)
	}
	return au
}

// ClearDisplayName clears the value of the "display_name" field.
func (au *ArtUpdate) ClearDisplayName() *ArtUpdate {
	au.mutation.ClearDisplayName()
	return au
}

// SetAbbreviation sets the "abbreviation" field.
func (au *ArtUpdate) SetAbbreviation(s string) *ArtUpdate {
	au.mutation.SetAbbreviation(s)
	return au
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (au *ArtUpdate) SetNillableAbbreviation(s *string) *ArtUpdate {
	if s != nil {
		au.SetAbbreviation(*s)
	}
	return au
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (au *ArtUpdate) ClearAbbreviation() *ArtUpdate {
	au.mutation.ClearAbbreviation()
	return au
}

// SetDescription sets the "description" field.
func (au *ArtUpdate) SetDescription(s string) *ArtUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *ArtUpdate) SetNillableDescription(s *string) *ArtUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *ArtUpdate) ClearDescription() *ArtUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetExternalLink sets the "external_link" field.
func (au *ArtUpdate) SetExternalLink(s string) *ArtUpdate {
	au.mutation.SetExternalLink(s)
	return au
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (au *ArtUpdate) SetNillableExternalLink(s *string) *ArtUpdate {
	if s != nil {
		au.SetExternalLink(*s)
	}
	return au
}

// ClearExternalLink clears the value of the "external_link" field.
func (au *ArtUpdate) ClearExternalLink() *ArtUpdate {
	au.mutation.ClearExternalLink()
	return au
}

// SetStatus sets the "status" field.
func (au *ArtUpdate) SetStatus(a art.Status) *ArtUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *ArtUpdate) SetNillableStatus(a *art.Status) *ArtUpdate {
	if a != nil {
		au.SetStatus(*a)
	}
	return au
}

// ClearStatus clears the value of the "status" field.
func (au *ArtUpdate) ClearStatus() *ArtUpdate {
	au.mutation.ClearStatus()
	return au
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (au *ArtUpdate) SetPrimaryImageURL(s string) *ArtUpdate {
	au.mutation.SetPrimaryImageURL(s)
	return au
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (au *ArtUpdate) SetNillablePrimaryImageURL(s *string) *ArtUpdate {
	if s != nil {
		au.SetPrimaryImageURL(*s)
	}
	return au
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (au *ArtUpdate) ClearPrimaryImageURL() *ArtUpdate {
	au.mutation.ClearPrimaryImageURL()
	return au
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (au *ArtUpdate) SetAdditionalImagesUrls(s []string) *ArtUpdate {
	au.mutation.SetAdditionalImagesUrls(s)
	return au
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (au *ArtUpdate) AppendAdditionalImagesUrls(s []string) *ArtUpdate {
	au.mutation.AppendAdditionalImagesUrls(s)
	return au
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (au *ArtUpdate) ClearAdditionalImagesUrls() *ArtUpdate {
	au.mutation.ClearAdditionalImagesUrls()
	return au
}

// SetHeight sets the "height" field.
func (au *ArtUpdate) SetHeight(f float64) *ArtUpdate {
	au.mutation.ResetHeight()
	au.mutation.SetHeight(f)
	return au
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (au *ArtUpdate) SetNillableHeight(f *float64) *ArtUpdate {
	if f != nil {
		au.SetHeight(*f)
	}
	return au
}

// AddHeight adds f to the "height" field.
func (au *ArtUpdate) AddHeight(f float64) *ArtUpdate {
	au.mutation.AddHeight(f)
	return au
}

// ClearHeight clears the value of the "height" field.
func (au *ArtUpdate) ClearHeight() *ArtUpdate {
	au.mutation.ClearHeight()
	return au
}

// SetWidth sets the "width" field.
func (au *ArtUpdate) SetWidth(f float64) *ArtUpdate {
	au.mutation.ResetWidth()
	au.mutation.SetWidth(f)
	return au
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (au *ArtUpdate) SetNillableWidth(f *float64) *ArtUpdate {
	if f != nil {
		au.SetWidth(*f)
	}
	return au
}

// AddWidth adds f to the "width" field.
func (au *ArtUpdate) AddWidth(f float64) *ArtUpdate {
	au.mutation.AddWidth(f)
	return au
}

// ClearWidth clears the value of the "width" field.
func (au *ArtUpdate) ClearWidth() *ArtUpdate {
	au.mutation.ClearWidth()
	return au
}

// SetLength sets the "length" field.
func (au *ArtUpdate) SetLength(f float64) *ArtUpdate {
	au.mutation.ResetLength()
	au.mutation.SetLength(f)
	return au
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (au *ArtUpdate) SetNillableLength(f *float64) *ArtUpdate {
	if f != nil {
		au.SetLength(*f)
	}
	return au
}

// AddLength adds f to the "length" field.
func (au *ArtUpdate) AddLength(f float64) *ArtUpdate {
	au.mutation.AddLength(f)
	return au
}

// ClearLength clears the value of the "length" field.
func (au *ArtUpdate) ClearLength() *ArtUpdate {
	au.mutation.ClearLength()
	return au
}

// SetDepth sets the "depth" field.
func (au *ArtUpdate) SetDepth(f float64) *ArtUpdate {
	au.mutation.ResetDepth()
	au.mutation.SetDepth(f)
	return au
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (au *ArtUpdate) SetNillableDepth(f *float64) *ArtUpdate {
	if f != nil {
		au.SetDepth(*f)
	}
	return au
}

// AddDepth adds f to the "depth" field.
func (au *ArtUpdate) AddDepth(f float64) *ArtUpdate {
	au.mutation.AddDepth(f)
	return au
}

// ClearDepth clears the value of the "depth" field.
func (au *ArtUpdate) ClearDepth() *ArtUpdate {
	au.mutation.ClearDepth()
	return au
}

// SetDiameter sets the "diameter" field.
func (au *ArtUpdate) SetDiameter(f float64) *ArtUpdate {
	au.mutation.ResetDiameter()
	au.mutation.SetDiameter(f)
	return au
}

// SetNillableDiameter sets the "diameter" field if the given value is not nil.
func (au *ArtUpdate) SetNillableDiameter(f *float64) *ArtUpdate {
	if f != nil {
		au.SetDiameter(*f)
	}
	return au
}

// AddDiameter adds f to the "diameter" field.
func (au *ArtUpdate) AddDiameter(f float64) *ArtUpdate {
	au.mutation.AddDiameter(f)
	return au
}

// ClearDiameter clears the value of the "diameter" field.
func (au *ArtUpdate) ClearDiameter() *ArtUpdate {
	au.mutation.ClearDiameter()
	return au
}

// SetWeight sets the "weight" field.
func (au *ArtUpdate) SetWeight(s string) *ArtUpdate {
	au.mutation.SetWeight(s)
	return au
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (au *ArtUpdate) SetNillableWeight(s *string) *ArtUpdate {
	if s != nil {
		au.SetWeight(*s)
	}
	return au
}

// ClearWeight clears the value of the "weight" field.
func (au *ArtUpdate) ClearWeight() *ArtUpdate {
	au.mutation.ClearWeight()
	return au
}

// SetDimensions sets the "dimensions" field.
func (au *ArtUpdate) SetDimensions(s string) *ArtUpdate {
	au.mutation.SetDimensions(s)
	return au
}

// SetNillableDimensions sets the "dimensions" field if the given value is not nil.
func (au *ArtUpdate) SetNillableDimensions(s *string) *ArtUpdate {
	if s != nil {
		au.SetDimensions(*s)
	}
	return au
}

// ClearDimensions clears the value of the "dimensions" field.
func (au *ArtUpdate) ClearDimensions() *ArtUpdate {
	au.mutation.ClearDimensions()
	return au
}

// SetNumber sets the "number" field.
func (au *ArtUpdate) SetNumber(s string) *ArtUpdate {
	au.mutation.SetNumber(s)
	return au
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (au *ArtUpdate) SetNillableNumber(s *string) *ArtUpdate {
	if s != nil {
		au.SetNumber(*s)
	}
	return au
}

// ClearNumber clears the value of the "number" field.
func (au *ArtUpdate) ClearNumber() *ArtUpdate {
	au.mutation.ClearNumber()
	return au
}

// SetAuthorID sets the "author" edge to the Person entity by ID.
func (au *ArtUpdate) SetAuthorID(id int) *ArtUpdate {
	au.mutation.SetAuthorID(id)
	return au
}

// SetNillableAuthorID sets the "author" edge to the Person entity by ID if the given value is not nil.
func (au *ArtUpdate) SetNillableAuthorID(id *int) *ArtUpdate {
	if id != nil {
		au = au.SetAuthorID(*id)
	}
	return au
}

// SetAuthor sets the "author" edge to the Person entity.
func (au *ArtUpdate) SetAuthor(p *Person) *ArtUpdate {
	return au.SetAuthorID(p.ID)
}

// AddArtGenreIDs adds the "art_genre" edge to the ArtGenre entity by IDs.
func (au *ArtUpdate) AddArtGenreIDs(ids ...int) *ArtUpdate {
	au.mutation.AddArtGenreIDs(ids...)
	return au
}

// AddArtGenre adds the "art_genre" edges to the ArtGenre entity.
func (au *ArtUpdate) AddArtGenre(a ...*ArtGenre) *ArtUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddArtGenreIDs(ids...)
}

// AddArtStyleIDs adds the "art_style" edge to the ArtStyle entity by IDs.
func (au *ArtUpdate) AddArtStyleIDs(ids ...int) *ArtUpdate {
	au.mutation.AddArtStyleIDs(ids...)
	return au
}

// AddArtStyle adds the "art_style" edges to the ArtStyle entity.
func (au *ArtUpdate) AddArtStyle(a ...*ArtStyle) *ArtUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddArtStyleIDs(ids...)
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (au *ArtUpdate) AddTechniqueIDs(ids ...int) *ArtUpdate {
	au.mutation.AddTechniqueIDs(ids...)
	return au
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (au *ArtUpdate) AddTechniques(t ...*Technique) *ArtUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTechniqueIDs(ids...)
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (au *ArtUpdate) SetCollectionID(id int) *ArtUpdate {
	au.mutation.SetCollectionID(id)
	return au
}

// SetCollection sets the "collection" edge to the Collection entity.
func (au *ArtUpdate) SetCollection(c *Collection) *ArtUpdate {
	return au.SetCollectionID(c.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (au *ArtUpdate) SetCountryID(id int) *ArtUpdate {
	au.mutation.SetCountryID(id)
	return au
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (au *ArtUpdate) SetNillableCountryID(id *int) *ArtUpdate {
	if id != nil {
		au = au.SetCountryID(*id)
	}
	return au
}

// SetCountry sets the "country" edge to the Country entity.
func (au *ArtUpdate) SetCountry(c *Country) *ArtUpdate {
	return au.SetCountryID(c.ID)
}

// SetSettlementID sets the "settlement" edge to the Settlement entity by ID.
func (au *ArtUpdate) SetSettlementID(id int) *ArtUpdate {
	au.mutation.SetSettlementID(id)
	return au
}

// SetNillableSettlementID sets the "settlement" edge to the Settlement entity by ID if the given value is not nil.
func (au *ArtUpdate) SetNillableSettlementID(id *int) *ArtUpdate {
	if id != nil {
		au = au.SetSettlementID(*id)
	}
	return au
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (au *ArtUpdate) SetSettlement(s *Settlement) *ArtUpdate {
	return au.SetSettlementID(s.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (au *ArtUpdate) SetDistrictID(id int) *ArtUpdate {
	au.mutation.SetDistrictID(id)
	return au
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (au *ArtUpdate) SetNillableDistrictID(id *int) *ArtUpdate {
	if id != nil {
		au = au.SetDistrictID(*id)
	}
	return au
}

// SetDistrict sets the "district" edge to the District entity.
func (au *ArtUpdate) SetDistrict(d *District) *ArtUpdate {
	return au.SetDistrictID(d.ID)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (au *ArtUpdate) SetRegionID(id int) *ArtUpdate {
	au.mutation.SetRegionID(id)
	return au
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (au *ArtUpdate) SetNillableRegionID(id *int) *ArtUpdate {
	if id != nil {
		au = au.SetRegionID(*id)
	}
	return au
}

// SetRegion sets the "region" edge to the Region entity.
func (au *ArtUpdate) SetRegion(r *Region) *ArtUpdate {
	return au.SetRegionID(r.ID)
}

// AddPersonalCollectionIDs adds the "personal_collection" edge to the PersonalCollection entity by IDs.
func (au *ArtUpdate) AddPersonalCollectionIDs(ids ...int) *ArtUpdate {
	au.mutation.AddPersonalCollectionIDs(ids...)
	return au
}

// AddPersonalCollection adds the "personal_collection" edges to the PersonalCollection entity.
func (au *ArtUpdate) AddPersonalCollection(p ...*PersonalCollection) *ArtUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPersonalCollectionIDs(ids...)
}

// Mutation returns the ArtMutation object of the builder.
func (au *ArtUpdate) Mutation() *ArtMutation {
	return au.mutation
}

// ClearAuthor clears the "author" edge to the Person entity.
func (au *ArtUpdate) ClearAuthor() *ArtUpdate {
	au.mutation.ClearAuthor()
	return au
}

// ClearArtGenre clears all "art_genre" edges to the ArtGenre entity.
func (au *ArtUpdate) ClearArtGenre() *ArtUpdate {
	au.mutation.ClearArtGenre()
	return au
}

// RemoveArtGenreIDs removes the "art_genre" edge to ArtGenre entities by IDs.
func (au *ArtUpdate) RemoveArtGenreIDs(ids ...int) *ArtUpdate {
	au.mutation.RemoveArtGenreIDs(ids...)
	return au
}

// RemoveArtGenre removes "art_genre" edges to ArtGenre entities.
func (au *ArtUpdate) RemoveArtGenre(a ...*ArtGenre) *ArtUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveArtGenreIDs(ids...)
}

// ClearArtStyle clears all "art_style" edges to the ArtStyle entity.
func (au *ArtUpdate) ClearArtStyle() *ArtUpdate {
	au.mutation.ClearArtStyle()
	return au
}

// RemoveArtStyleIDs removes the "art_style" edge to ArtStyle entities by IDs.
func (au *ArtUpdate) RemoveArtStyleIDs(ids ...int) *ArtUpdate {
	au.mutation.RemoveArtStyleIDs(ids...)
	return au
}

// RemoveArtStyle removes "art_style" edges to ArtStyle entities.
func (au *ArtUpdate) RemoveArtStyle(a ...*ArtStyle) *ArtUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveArtStyleIDs(ids...)
}

// ClearTechniques clears all "techniques" edges to the Technique entity.
func (au *ArtUpdate) ClearTechniques() *ArtUpdate {
	au.mutation.ClearTechniques()
	return au
}

// RemoveTechniqueIDs removes the "techniques" edge to Technique entities by IDs.
func (au *ArtUpdate) RemoveTechniqueIDs(ids ...int) *ArtUpdate {
	au.mutation.RemoveTechniqueIDs(ids...)
	return au
}

// RemoveTechniques removes "techniques" edges to Technique entities.
func (au *ArtUpdate) RemoveTechniques(t ...*Technique) *ArtUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTechniqueIDs(ids...)
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (au *ArtUpdate) ClearCollection() *ArtUpdate {
	au.mutation.ClearCollection()
	return au
}

// ClearCountry clears the "country" edge to the Country entity.
func (au *ArtUpdate) ClearCountry() *ArtUpdate {
	au.mutation.ClearCountry()
	return au
}

// ClearSettlement clears the "settlement" edge to the Settlement entity.
func (au *ArtUpdate) ClearSettlement() *ArtUpdate {
	au.mutation.ClearSettlement()
	return au
}

// ClearDistrict clears the "district" edge to the District entity.
func (au *ArtUpdate) ClearDistrict() *ArtUpdate {
	au.mutation.ClearDistrict()
	return au
}

// ClearRegion clears the "region" edge to the Region entity.
func (au *ArtUpdate) ClearRegion() *ArtUpdate {
	au.mutation.ClearRegion()
	return au
}

// ClearPersonalCollection clears all "personal_collection" edges to the PersonalCollection entity.
func (au *ArtUpdate) ClearPersonalCollection() *ArtUpdate {
	au.mutation.ClearPersonalCollection()
	return au
}

// RemovePersonalCollectionIDs removes the "personal_collection" edge to PersonalCollection entities by IDs.
func (au *ArtUpdate) RemovePersonalCollectionIDs(ids ...int) *ArtUpdate {
	au.mutation.RemovePersonalCollectionIDs(ids...)
	return au
}

// RemovePersonalCollection removes "personal_collection" edges to PersonalCollection entities.
func (au *ArtUpdate) RemovePersonalCollection(p ...*PersonalCollection) *ArtUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePersonalCollectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArtUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArtUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArtUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArtUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ArtUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if art.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized art.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := art.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *ArtUpdate) check() error {
	if v, ok := au.mutation.Status(); ok {
		if err := art.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Art.status": %w`, err)}
		}
	}
	if _, ok := au.mutation.CollectionID(); au.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Art.collection"`)
	}
	return nil
}

func (au *ArtUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(art.Table, art.Columns, sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedBy(); ok {
		_spec.SetField(art.FieldCreatedBy, field.TypeString, value)
	}
	if au.mutation.CreatedByCleared() {
		_spec.ClearField(art.FieldCreatedBy, field.TypeString)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(art.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedBy(); ok {
		_spec.SetField(art.FieldUpdatedBy, field.TypeString, value)
	}
	if au.mutation.UpdatedByCleared() {
		_spec.ClearField(art.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := au.mutation.Dating(); ok {
		_spec.SetField(art.FieldDating, field.TypeString, value)
	}
	if au.mutation.DatingCleared() {
		_spec.ClearField(art.FieldDating, field.TypeString)
	}
	if value, ok := au.mutation.DatingStart(); ok {
		_spec.SetField(art.FieldDatingStart, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedDatingStart(); ok {
		_spec.AddField(art.FieldDatingStart, field.TypeInt, value)
	}
	if au.mutation.DatingStartCleared() {
		_spec.ClearField(art.FieldDatingStart, field.TypeInt)
	}
	if value, ok := au.mutation.DatingEnd(); ok {
		_spec.SetField(art.FieldDatingEnd, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedDatingEnd(); ok {
		_spec.AddField(art.FieldDatingEnd, field.TypeInt, value)
	}
	if au.mutation.DatingEndCleared() {
		_spec.ClearField(art.FieldDatingEnd, field.TypeInt)
	}
	if value, ok := au.mutation.DisplayName(); ok {
		_spec.SetField(art.FieldDisplayName, field.TypeString, value)
	}
	if au.mutation.DisplayNameCleared() {
		_spec.ClearField(art.FieldDisplayName, field.TypeString)
	}
	if value, ok := au.mutation.Abbreviation(); ok {
		_spec.SetField(art.FieldAbbreviation, field.TypeString, value)
	}
	if au.mutation.AbbreviationCleared() {
		_spec.ClearField(art.FieldAbbreviation, field.TypeString)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(art.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(art.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.ExternalLink(); ok {
		_spec.SetField(art.FieldExternalLink, field.TypeString, value)
	}
	if au.mutation.ExternalLinkCleared() {
		_spec.ClearField(art.FieldExternalLink, field.TypeString)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(art.FieldStatus, field.TypeEnum, value)
	}
	if au.mutation.StatusCleared() {
		_spec.ClearField(art.FieldStatus, field.TypeEnum)
	}
	if value, ok := au.mutation.PrimaryImageURL(); ok {
		_spec.SetField(art.FieldPrimaryImageURL, field.TypeString, value)
	}
	if au.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(art.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := au.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(art.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, art.FieldAdditionalImagesUrls, value)
		})
	}
	if au.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(art.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := au.mutation.Height(); ok {
		_spec.SetField(art.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedHeight(); ok {
		_spec.AddField(art.FieldHeight, field.TypeFloat64, value)
	}
	if au.mutation.HeightCleared() {
		_spec.ClearField(art.FieldHeight, field.TypeFloat64)
	}
	if value, ok := au.mutation.Width(); ok {
		_spec.SetField(art.FieldWidth, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedWidth(); ok {
		_spec.AddField(art.FieldWidth, field.TypeFloat64, value)
	}
	if au.mutation.WidthCleared() {
		_spec.ClearField(art.FieldWidth, field.TypeFloat64)
	}
	if value, ok := au.mutation.Length(); ok {
		_spec.SetField(art.FieldLength, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedLength(); ok {
		_spec.AddField(art.FieldLength, field.TypeFloat64, value)
	}
	if au.mutation.LengthCleared() {
		_spec.ClearField(art.FieldLength, field.TypeFloat64)
	}
	if value, ok := au.mutation.Depth(); ok {
		_spec.SetField(art.FieldDepth, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedDepth(); ok {
		_spec.AddField(art.FieldDepth, field.TypeFloat64, value)
	}
	if au.mutation.DepthCleared() {
		_spec.ClearField(art.FieldDepth, field.TypeFloat64)
	}
	if value, ok := au.mutation.Diameter(); ok {
		_spec.SetField(art.FieldDiameter, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedDiameter(); ok {
		_spec.AddField(art.FieldDiameter, field.TypeFloat64, value)
	}
	if au.mutation.DiameterCleared() {
		_spec.ClearField(art.FieldDiameter, field.TypeFloat64)
	}
	if value, ok := au.mutation.Weight(); ok {
		_spec.SetField(art.FieldWeight, field.TypeString, value)
	}
	if au.mutation.WeightCleared() {
		_spec.ClearField(art.FieldWeight, field.TypeString)
	}
	if value, ok := au.mutation.Dimensions(); ok {
		_spec.SetField(art.FieldDimensions, field.TypeString, value)
	}
	if au.mutation.DimensionsCleared() {
		_spec.ClearField(art.FieldDimensions, field.TypeString)
	}
	if value, ok := au.mutation.Number(); ok {
		_spec.SetField(art.FieldNumber, field.TypeString, value)
	}
	if au.mutation.NumberCleared() {
		_spec.ClearField(art.FieldNumber, field.TypeString)
	}
	if au.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.AuthorTable,
			Columns: []string{art.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.AuthorTable,
			Columns: []string{art.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ArtGenreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.ArtGenreTable,
			Columns: art.ArtGenrePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artgenre.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedArtGenreIDs(); len(nodes) > 0 && !au.mutation.ArtGenreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.ArtGenreTable,
			Columns: art.ArtGenrePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artgenre.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ArtGenreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.ArtGenreTable,
			Columns: art.ArtGenrePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artgenre.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ArtStyleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.ArtStyleTable,
			Columns: art.ArtStylePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artstyle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedArtStyleIDs(); len(nodes) > 0 && !au.mutation.ArtStyleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.ArtStyleTable,
			Columns: art.ArtStylePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artstyle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ArtStyleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.ArtStyleTable,
			Columns: art.ArtStylePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artstyle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.TechniquesTable,
			Columns: art.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTechniquesIDs(); len(nodes) > 0 && !au.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.TechniquesTable,
			Columns: art.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.TechniquesTable,
			Columns: art.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.CollectionTable,
			Columns: []string{art.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.CollectionTable,
			Columns: []string{art.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.CountryTable,
			Columns: []string{art.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.CountryTable,
			Columns: []string{art.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SettlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.SettlementTable,
			Columns: []string{art.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.SettlementTable,
			Columns: []string{art.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.DistrictTable,
			Columns: []string{art.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.DistrictTable,
			Columns: []string{art.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.RegionTable,
			Columns: []string{art.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.RegionTable,
			Columns: []string{art.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PersonalCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.PersonalCollectionTable,
			Columns: art.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPersonalCollectionIDs(); len(nodes) > 0 && !au.mutation.PersonalCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.PersonalCollectionTable,
			Columns: art.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PersonalCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.PersonalCollectionTable,
			Columns: art.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{art.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ArtUpdateOne is the builder for updating a single Art entity.
type ArtUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArtMutation
}

// SetCreatedBy sets the "created_by" field.
func (auo *ArtUpdateOne) SetCreatedBy(s string) *ArtUpdateOne {
	auo.mutation.SetCreatedBy(s)
	return auo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableCreatedBy(s *string) *ArtUpdateOne {
	if s != nil {
		auo.SetCreatedBy(*s)
	}
	return auo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (auo *ArtUpdateOne) ClearCreatedBy() *ArtUpdateOne {
	auo.mutation.ClearCreatedBy()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *ArtUpdateOne) SetUpdatedAt(t time.Time) *ArtUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUpdatedBy sets the "updated_by" field.
func (auo *ArtUpdateOne) SetUpdatedBy(s string) *ArtUpdateOne {
	auo.mutation.SetUpdatedBy(s)
	return auo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableUpdatedBy(s *string) *ArtUpdateOne {
	if s != nil {
		auo.SetUpdatedBy(*s)
	}
	return auo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (auo *ArtUpdateOne) ClearUpdatedBy() *ArtUpdateOne {
	auo.mutation.ClearUpdatedBy()
	return auo
}

// SetDating sets the "dating" field.
func (auo *ArtUpdateOne) SetDating(s string) *ArtUpdateOne {
	auo.mutation.SetDating(s)
	return auo
}

// SetNillableDating sets the "dating" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableDating(s *string) *ArtUpdateOne {
	if s != nil {
		auo.SetDating(*s)
	}
	return auo
}

// ClearDating clears the value of the "dating" field.
func (auo *ArtUpdateOne) ClearDating() *ArtUpdateOne {
	auo.mutation.ClearDating()
	return auo
}

// SetDatingStart sets the "dating_start" field.
func (auo *ArtUpdateOne) SetDatingStart(i int) *ArtUpdateOne {
	auo.mutation.ResetDatingStart()
	auo.mutation.SetDatingStart(i)
	return auo
}

// SetNillableDatingStart sets the "dating_start" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableDatingStart(i *int) *ArtUpdateOne {
	if i != nil {
		auo.SetDatingStart(*i)
	}
	return auo
}

// AddDatingStart adds i to the "dating_start" field.
func (auo *ArtUpdateOne) AddDatingStart(i int) *ArtUpdateOne {
	auo.mutation.AddDatingStart(i)
	return auo
}

// ClearDatingStart clears the value of the "dating_start" field.
func (auo *ArtUpdateOne) ClearDatingStart() *ArtUpdateOne {
	auo.mutation.ClearDatingStart()
	return auo
}

// SetDatingEnd sets the "dating_end" field.
func (auo *ArtUpdateOne) SetDatingEnd(i int) *ArtUpdateOne {
	auo.mutation.ResetDatingEnd()
	auo.mutation.SetDatingEnd(i)
	return auo
}

// SetNillableDatingEnd sets the "dating_end" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableDatingEnd(i *int) *ArtUpdateOne {
	if i != nil {
		auo.SetDatingEnd(*i)
	}
	return auo
}

// AddDatingEnd adds i to the "dating_end" field.
func (auo *ArtUpdateOne) AddDatingEnd(i int) *ArtUpdateOne {
	auo.mutation.AddDatingEnd(i)
	return auo
}

// ClearDatingEnd clears the value of the "dating_end" field.
func (auo *ArtUpdateOne) ClearDatingEnd() *ArtUpdateOne {
	auo.mutation.ClearDatingEnd()
	return auo
}

// SetDisplayName sets the "display_name" field.
func (auo *ArtUpdateOne) SetDisplayName(s string) *ArtUpdateOne {
	auo.mutation.SetDisplayName(s)
	return auo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableDisplayName(s *string) *ArtUpdateOne {
	if s != nil {
		auo.SetDisplayName(*s)
	}
	return auo
}

// ClearDisplayName clears the value of the "display_name" field.
func (auo *ArtUpdateOne) ClearDisplayName() *ArtUpdateOne {
	auo.mutation.ClearDisplayName()
	return auo
}

// SetAbbreviation sets the "abbreviation" field.
func (auo *ArtUpdateOne) SetAbbreviation(s string) *ArtUpdateOne {
	auo.mutation.SetAbbreviation(s)
	return auo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableAbbreviation(s *string) *ArtUpdateOne {
	if s != nil {
		auo.SetAbbreviation(*s)
	}
	return auo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (auo *ArtUpdateOne) ClearAbbreviation() *ArtUpdateOne {
	auo.mutation.ClearAbbreviation()
	return auo
}

// SetDescription sets the "description" field.
func (auo *ArtUpdateOne) SetDescription(s string) *ArtUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableDescription(s *string) *ArtUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *ArtUpdateOne) ClearDescription() *ArtUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetExternalLink sets the "external_link" field.
func (auo *ArtUpdateOne) SetExternalLink(s string) *ArtUpdateOne {
	auo.mutation.SetExternalLink(s)
	return auo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableExternalLink(s *string) *ArtUpdateOne {
	if s != nil {
		auo.SetExternalLink(*s)
	}
	return auo
}

// ClearExternalLink clears the value of the "external_link" field.
func (auo *ArtUpdateOne) ClearExternalLink() *ArtUpdateOne {
	auo.mutation.ClearExternalLink()
	return auo
}

// SetStatus sets the "status" field.
func (auo *ArtUpdateOne) SetStatus(a art.Status) *ArtUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableStatus(a *art.Status) *ArtUpdateOne {
	if a != nil {
		auo.SetStatus(*a)
	}
	return auo
}

// ClearStatus clears the value of the "status" field.
func (auo *ArtUpdateOne) ClearStatus() *ArtUpdateOne {
	auo.mutation.ClearStatus()
	return auo
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (auo *ArtUpdateOne) SetPrimaryImageURL(s string) *ArtUpdateOne {
	auo.mutation.SetPrimaryImageURL(s)
	return auo
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillablePrimaryImageURL(s *string) *ArtUpdateOne {
	if s != nil {
		auo.SetPrimaryImageURL(*s)
	}
	return auo
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (auo *ArtUpdateOne) ClearPrimaryImageURL() *ArtUpdateOne {
	auo.mutation.ClearPrimaryImageURL()
	return auo
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (auo *ArtUpdateOne) SetAdditionalImagesUrls(s []string) *ArtUpdateOne {
	auo.mutation.SetAdditionalImagesUrls(s)
	return auo
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (auo *ArtUpdateOne) AppendAdditionalImagesUrls(s []string) *ArtUpdateOne {
	auo.mutation.AppendAdditionalImagesUrls(s)
	return auo
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (auo *ArtUpdateOne) ClearAdditionalImagesUrls() *ArtUpdateOne {
	auo.mutation.ClearAdditionalImagesUrls()
	return auo
}

// SetHeight sets the "height" field.
func (auo *ArtUpdateOne) SetHeight(f float64) *ArtUpdateOne {
	auo.mutation.ResetHeight()
	auo.mutation.SetHeight(f)
	return auo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableHeight(f *float64) *ArtUpdateOne {
	if f != nil {
		auo.SetHeight(*f)
	}
	return auo
}

// AddHeight adds f to the "height" field.
func (auo *ArtUpdateOne) AddHeight(f float64) *ArtUpdateOne {
	auo.mutation.AddHeight(f)
	return auo
}

// ClearHeight clears the value of the "height" field.
func (auo *ArtUpdateOne) ClearHeight() *ArtUpdateOne {
	auo.mutation.ClearHeight()
	return auo
}

// SetWidth sets the "width" field.
func (auo *ArtUpdateOne) SetWidth(f float64) *ArtUpdateOne {
	auo.mutation.ResetWidth()
	auo.mutation.SetWidth(f)
	return auo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableWidth(f *float64) *ArtUpdateOne {
	if f != nil {
		auo.SetWidth(*f)
	}
	return auo
}

// AddWidth adds f to the "width" field.
func (auo *ArtUpdateOne) AddWidth(f float64) *ArtUpdateOne {
	auo.mutation.AddWidth(f)
	return auo
}

// ClearWidth clears the value of the "width" field.
func (auo *ArtUpdateOne) ClearWidth() *ArtUpdateOne {
	auo.mutation.ClearWidth()
	return auo
}

// SetLength sets the "length" field.
func (auo *ArtUpdateOne) SetLength(f float64) *ArtUpdateOne {
	auo.mutation.ResetLength()
	auo.mutation.SetLength(f)
	return auo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableLength(f *float64) *ArtUpdateOne {
	if f != nil {
		auo.SetLength(*f)
	}
	return auo
}

// AddLength adds f to the "length" field.
func (auo *ArtUpdateOne) AddLength(f float64) *ArtUpdateOne {
	auo.mutation.AddLength(f)
	return auo
}

// ClearLength clears the value of the "length" field.
func (auo *ArtUpdateOne) ClearLength() *ArtUpdateOne {
	auo.mutation.ClearLength()
	return auo
}

// SetDepth sets the "depth" field.
func (auo *ArtUpdateOne) SetDepth(f float64) *ArtUpdateOne {
	auo.mutation.ResetDepth()
	auo.mutation.SetDepth(f)
	return auo
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableDepth(f *float64) *ArtUpdateOne {
	if f != nil {
		auo.SetDepth(*f)
	}
	return auo
}

// AddDepth adds f to the "depth" field.
func (auo *ArtUpdateOne) AddDepth(f float64) *ArtUpdateOne {
	auo.mutation.AddDepth(f)
	return auo
}

// ClearDepth clears the value of the "depth" field.
func (auo *ArtUpdateOne) ClearDepth() *ArtUpdateOne {
	auo.mutation.ClearDepth()
	return auo
}

// SetDiameter sets the "diameter" field.
func (auo *ArtUpdateOne) SetDiameter(f float64) *ArtUpdateOne {
	auo.mutation.ResetDiameter()
	auo.mutation.SetDiameter(f)
	return auo
}

// SetNillableDiameter sets the "diameter" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableDiameter(f *float64) *ArtUpdateOne {
	if f != nil {
		auo.SetDiameter(*f)
	}
	return auo
}

// AddDiameter adds f to the "diameter" field.
func (auo *ArtUpdateOne) AddDiameter(f float64) *ArtUpdateOne {
	auo.mutation.AddDiameter(f)
	return auo
}

// ClearDiameter clears the value of the "diameter" field.
func (auo *ArtUpdateOne) ClearDiameter() *ArtUpdateOne {
	auo.mutation.ClearDiameter()
	return auo
}

// SetWeight sets the "weight" field.
func (auo *ArtUpdateOne) SetWeight(s string) *ArtUpdateOne {
	auo.mutation.SetWeight(s)
	return auo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableWeight(s *string) *ArtUpdateOne {
	if s != nil {
		auo.SetWeight(*s)
	}
	return auo
}

// ClearWeight clears the value of the "weight" field.
func (auo *ArtUpdateOne) ClearWeight() *ArtUpdateOne {
	auo.mutation.ClearWeight()
	return auo
}

// SetDimensions sets the "dimensions" field.
func (auo *ArtUpdateOne) SetDimensions(s string) *ArtUpdateOne {
	auo.mutation.SetDimensions(s)
	return auo
}

// SetNillableDimensions sets the "dimensions" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableDimensions(s *string) *ArtUpdateOne {
	if s != nil {
		auo.SetDimensions(*s)
	}
	return auo
}

// ClearDimensions clears the value of the "dimensions" field.
func (auo *ArtUpdateOne) ClearDimensions() *ArtUpdateOne {
	auo.mutation.ClearDimensions()
	return auo
}

// SetNumber sets the "number" field.
func (auo *ArtUpdateOne) SetNumber(s string) *ArtUpdateOne {
	auo.mutation.SetNumber(s)
	return auo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableNumber(s *string) *ArtUpdateOne {
	if s != nil {
		auo.SetNumber(*s)
	}
	return auo
}

// ClearNumber clears the value of the "number" field.
func (auo *ArtUpdateOne) ClearNumber() *ArtUpdateOne {
	auo.mutation.ClearNumber()
	return auo
}

// SetAuthorID sets the "author" edge to the Person entity by ID.
func (auo *ArtUpdateOne) SetAuthorID(id int) *ArtUpdateOne {
	auo.mutation.SetAuthorID(id)
	return auo
}

// SetNillableAuthorID sets the "author" edge to the Person entity by ID if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableAuthorID(id *int) *ArtUpdateOne {
	if id != nil {
		auo = auo.SetAuthorID(*id)
	}
	return auo
}

// SetAuthor sets the "author" edge to the Person entity.
func (auo *ArtUpdateOne) SetAuthor(p *Person) *ArtUpdateOne {
	return auo.SetAuthorID(p.ID)
}

// AddArtGenreIDs adds the "art_genre" edge to the ArtGenre entity by IDs.
func (auo *ArtUpdateOne) AddArtGenreIDs(ids ...int) *ArtUpdateOne {
	auo.mutation.AddArtGenreIDs(ids...)
	return auo
}

// AddArtGenre adds the "art_genre" edges to the ArtGenre entity.
func (auo *ArtUpdateOne) AddArtGenre(a ...*ArtGenre) *ArtUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddArtGenreIDs(ids...)
}

// AddArtStyleIDs adds the "art_style" edge to the ArtStyle entity by IDs.
func (auo *ArtUpdateOne) AddArtStyleIDs(ids ...int) *ArtUpdateOne {
	auo.mutation.AddArtStyleIDs(ids...)
	return auo
}

// AddArtStyle adds the "art_style" edges to the ArtStyle entity.
func (auo *ArtUpdateOne) AddArtStyle(a ...*ArtStyle) *ArtUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddArtStyleIDs(ids...)
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (auo *ArtUpdateOne) AddTechniqueIDs(ids ...int) *ArtUpdateOne {
	auo.mutation.AddTechniqueIDs(ids...)
	return auo
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (auo *ArtUpdateOne) AddTechniques(t ...*Technique) *ArtUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTechniqueIDs(ids...)
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (auo *ArtUpdateOne) SetCollectionID(id int) *ArtUpdateOne {
	auo.mutation.SetCollectionID(id)
	return auo
}

// SetCollection sets the "collection" edge to the Collection entity.
func (auo *ArtUpdateOne) SetCollection(c *Collection) *ArtUpdateOne {
	return auo.SetCollectionID(c.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (auo *ArtUpdateOne) SetCountryID(id int) *ArtUpdateOne {
	auo.mutation.SetCountryID(id)
	return auo
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableCountryID(id *int) *ArtUpdateOne {
	if id != nil {
		auo = auo.SetCountryID(*id)
	}
	return auo
}

// SetCountry sets the "country" edge to the Country entity.
func (auo *ArtUpdateOne) SetCountry(c *Country) *ArtUpdateOne {
	return auo.SetCountryID(c.ID)
}

// SetSettlementID sets the "settlement" edge to the Settlement entity by ID.
func (auo *ArtUpdateOne) SetSettlementID(id int) *ArtUpdateOne {
	auo.mutation.SetSettlementID(id)
	return auo
}

// SetNillableSettlementID sets the "settlement" edge to the Settlement entity by ID if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableSettlementID(id *int) *ArtUpdateOne {
	if id != nil {
		auo = auo.SetSettlementID(*id)
	}
	return auo
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (auo *ArtUpdateOne) SetSettlement(s *Settlement) *ArtUpdateOne {
	return auo.SetSettlementID(s.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (auo *ArtUpdateOne) SetDistrictID(id int) *ArtUpdateOne {
	auo.mutation.SetDistrictID(id)
	return auo
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableDistrictID(id *int) *ArtUpdateOne {
	if id != nil {
		auo = auo.SetDistrictID(*id)
	}
	return auo
}

// SetDistrict sets the "district" edge to the District entity.
func (auo *ArtUpdateOne) SetDistrict(d *District) *ArtUpdateOne {
	return auo.SetDistrictID(d.ID)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (auo *ArtUpdateOne) SetRegionID(id int) *ArtUpdateOne {
	auo.mutation.SetRegionID(id)
	return auo
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (auo *ArtUpdateOne) SetNillableRegionID(id *int) *ArtUpdateOne {
	if id != nil {
		auo = auo.SetRegionID(*id)
	}
	return auo
}

// SetRegion sets the "region" edge to the Region entity.
func (auo *ArtUpdateOne) SetRegion(r *Region) *ArtUpdateOne {
	return auo.SetRegionID(r.ID)
}

// AddPersonalCollectionIDs adds the "personal_collection" edge to the PersonalCollection entity by IDs.
func (auo *ArtUpdateOne) AddPersonalCollectionIDs(ids ...int) *ArtUpdateOne {
	auo.mutation.AddPersonalCollectionIDs(ids...)
	return auo
}

// AddPersonalCollection adds the "personal_collection" edges to the PersonalCollection entity.
func (auo *ArtUpdateOne) AddPersonalCollection(p ...*PersonalCollection) *ArtUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPersonalCollectionIDs(ids...)
}

// Mutation returns the ArtMutation object of the builder.
func (auo *ArtUpdateOne) Mutation() *ArtMutation {
	return auo.mutation
}

// ClearAuthor clears the "author" edge to the Person entity.
func (auo *ArtUpdateOne) ClearAuthor() *ArtUpdateOne {
	auo.mutation.ClearAuthor()
	return auo
}

// ClearArtGenre clears all "art_genre" edges to the ArtGenre entity.
func (auo *ArtUpdateOne) ClearArtGenre() *ArtUpdateOne {
	auo.mutation.ClearArtGenre()
	return auo
}

// RemoveArtGenreIDs removes the "art_genre" edge to ArtGenre entities by IDs.
func (auo *ArtUpdateOne) RemoveArtGenreIDs(ids ...int) *ArtUpdateOne {
	auo.mutation.RemoveArtGenreIDs(ids...)
	return auo
}

// RemoveArtGenre removes "art_genre" edges to ArtGenre entities.
func (auo *ArtUpdateOne) RemoveArtGenre(a ...*ArtGenre) *ArtUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveArtGenreIDs(ids...)
}

// ClearArtStyle clears all "art_style" edges to the ArtStyle entity.
func (auo *ArtUpdateOne) ClearArtStyle() *ArtUpdateOne {
	auo.mutation.ClearArtStyle()
	return auo
}

// RemoveArtStyleIDs removes the "art_style" edge to ArtStyle entities by IDs.
func (auo *ArtUpdateOne) RemoveArtStyleIDs(ids ...int) *ArtUpdateOne {
	auo.mutation.RemoveArtStyleIDs(ids...)
	return auo
}

// RemoveArtStyle removes "art_style" edges to ArtStyle entities.
func (auo *ArtUpdateOne) RemoveArtStyle(a ...*ArtStyle) *ArtUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveArtStyleIDs(ids...)
}

// ClearTechniques clears all "techniques" edges to the Technique entity.
func (auo *ArtUpdateOne) ClearTechniques() *ArtUpdateOne {
	auo.mutation.ClearTechniques()
	return auo
}

// RemoveTechniqueIDs removes the "techniques" edge to Technique entities by IDs.
func (auo *ArtUpdateOne) RemoveTechniqueIDs(ids ...int) *ArtUpdateOne {
	auo.mutation.RemoveTechniqueIDs(ids...)
	return auo
}

// RemoveTechniques removes "techniques" edges to Technique entities.
func (auo *ArtUpdateOne) RemoveTechniques(t ...*Technique) *ArtUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTechniqueIDs(ids...)
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (auo *ArtUpdateOne) ClearCollection() *ArtUpdateOne {
	auo.mutation.ClearCollection()
	return auo
}

// ClearCountry clears the "country" edge to the Country entity.
func (auo *ArtUpdateOne) ClearCountry() *ArtUpdateOne {
	auo.mutation.ClearCountry()
	return auo
}

// ClearSettlement clears the "settlement" edge to the Settlement entity.
func (auo *ArtUpdateOne) ClearSettlement() *ArtUpdateOne {
	auo.mutation.ClearSettlement()
	return auo
}

// ClearDistrict clears the "district" edge to the District entity.
func (auo *ArtUpdateOne) ClearDistrict() *ArtUpdateOne {
	auo.mutation.ClearDistrict()
	return auo
}

// ClearRegion clears the "region" edge to the Region entity.
func (auo *ArtUpdateOne) ClearRegion() *ArtUpdateOne {
	auo.mutation.ClearRegion()
	return auo
}

// ClearPersonalCollection clears all "personal_collection" edges to the PersonalCollection entity.
func (auo *ArtUpdateOne) ClearPersonalCollection() *ArtUpdateOne {
	auo.mutation.ClearPersonalCollection()
	return auo
}

// RemovePersonalCollectionIDs removes the "personal_collection" edge to PersonalCollection entities by IDs.
func (auo *ArtUpdateOne) RemovePersonalCollectionIDs(ids ...int) *ArtUpdateOne {
	auo.mutation.RemovePersonalCollectionIDs(ids...)
	return auo
}

// RemovePersonalCollection removes "personal_collection" edges to PersonalCollection entities.
func (auo *ArtUpdateOne) RemovePersonalCollection(p ...*PersonalCollection) *ArtUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePersonalCollectionIDs(ids...)
}

// Where appends a list predicates to the ArtUpdate builder.
func (auo *ArtUpdateOne) Where(ps ...predicate.Art) *ArtUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArtUpdateOne) Select(field string, fields ...string) *ArtUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Art entity.
func (auo *ArtUpdateOne) Save(ctx context.Context) (*Art, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArtUpdateOne) SaveX(ctx context.Context) *Art {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArtUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArtUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ArtUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if art.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized art.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := art.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *ArtUpdateOne) check() error {
	if v, ok := auo.mutation.Status(); ok {
		if err := art.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Art.status": %w`, err)}
		}
	}
	if _, ok := auo.mutation.CollectionID(); auo.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Art.collection"`)
	}
	return nil
}

func (auo *ArtUpdateOne) sqlSave(ctx context.Context) (_node *Art, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(art.Table, art.Columns, sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Art.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, art.FieldID)
		for _, f := range fields {
			if !art.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != art.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedBy(); ok {
		_spec.SetField(art.FieldCreatedBy, field.TypeString, value)
	}
	if auo.mutation.CreatedByCleared() {
		_spec.ClearField(art.FieldCreatedBy, field.TypeString)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(art.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedBy(); ok {
		_spec.SetField(art.FieldUpdatedBy, field.TypeString, value)
	}
	if auo.mutation.UpdatedByCleared() {
		_spec.ClearField(art.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := auo.mutation.Dating(); ok {
		_spec.SetField(art.FieldDating, field.TypeString, value)
	}
	if auo.mutation.DatingCleared() {
		_spec.ClearField(art.FieldDating, field.TypeString)
	}
	if value, ok := auo.mutation.DatingStart(); ok {
		_spec.SetField(art.FieldDatingStart, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedDatingStart(); ok {
		_spec.AddField(art.FieldDatingStart, field.TypeInt, value)
	}
	if auo.mutation.DatingStartCleared() {
		_spec.ClearField(art.FieldDatingStart, field.TypeInt)
	}
	if value, ok := auo.mutation.DatingEnd(); ok {
		_spec.SetField(art.FieldDatingEnd, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedDatingEnd(); ok {
		_spec.AddField(art.FieldDatingEnd, field.TypeInt, value)
	}
	if auo.mutation.DatingEndCleared() {
		_spec.ClearField(art.FieldDatingEnd, field.TypeInt)
	}
	if value, ok := auo.mutation.DisplayName(); ok {
		_spec.SetField(art.FieldDisplayName, field.TypeString, value)
	}
	if auo.mutation.DisplayNameCleared() {
		_spec.ClearField(art.FieldDisplayName, field.TypeString)
	}
	if value, ok := auo.mutation.Abbreviation(); ok {
		_spec.SetField(art.FieldAbbreviation, field.TypeString, value)
	}
	if auo.mutation.AbbreviationCleared() {
		_spec.ClearField(art.FieldAbbreviation, field.TypeString)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(art.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(art.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.ExternalLink(); ok {
		_spec.SetField(art.FieldExternalLink, field.TypeString, value)
	}
	if auo.mutation.ExternalLinkCleared() {
		_spec.ClearField(art.FieldExternalLink, field.TypeString)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(art.FieldStatus, field.TypeEnum, value)
	}
	if auo.mutation.StatusCleared() {
		_spec.ClearField(art.FieldStatus, field.TypeEnum)
	}
	if value, ok := auo.mutation.PrimaryImageURL(); ok {
		_spec.SetField(art.FieldPrimaryImageURL, field.TypeString, value)
	}
	if auo.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(art.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := auo.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(art.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, art.FieldAdditionalImagesUrls, value)
		})
	}
	if auo.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(art.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := auo.mutation.Height(); ok {
		_spec.SetField(art.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedHeight(); ok {
		_spec.AddField(art.FieldHeight, field.TypeFloat64, value)
	}
	if auo.mutation.HeightCleared() {
		_spec.ClearField(art.FieldHeight, field.TypeFloat64)
	}
	if value, ok := auo.mutation.Width(); ok {
		_spec.SetField(art.FieldWidth, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedWidth(); ok {
		_spec.AddField(art.FieldWidth, field.TypeFloat64, value)
	}
	if auo.mutation.WidthCleared() {
		_spec.ClearField(art.FieldWidth, field.TypeFloat64)
	}
	if value, ok := auo.mutation.Length(); ok {
		_spec.SetField(art.FieldLength, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedLength(); ok {
		_spec.AddField(art.FieldLength, field.TypeFloat64, value)
	}
	if auo.mutation.LengthCleared() {
		_spec.ClearField(art.FieldLength, field.TypeFloat64)
	}
	if value, ok := auo.mutation.Depth(); ok {
		_spec.SetField(art.FieldDepth, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedDepth(); ok {
		_spec.AddField(art.FieldDepth, field.TypeFloat64, value)
	}
	if auo.mutation.DepthCleared() {
		_spec.ClearField(art.FieldDepth, field.TypeFloat64)
	}
	if value, ok := auo.mutation.Diameter(); ok {
		_spec.SetField(art.FieldDiameter, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedDiameter(); ok {
		_spec.AddField(art.FieldDiameter, field.TypeFloat64, value)
	}
	if auo.mutation.DiameterCleared() {
		_spec.ClearField(art.FieldDiameter, field.TypeFloat64)
	}
	if value, ok := auo.mutation.Weight(); ok {
		_spec.SetField(art.FieldWeight, field.TypeString, value)
	}
	if auo.mutation.WeightCleared() {
		_spec.ClearField(art.FieldWeight, field.TypeString)
	}
	if value, ok := auo.mutation.Dimensions(); ok {
		_spec.SetField(art.FieldDimensions, field.TypeString, value)
	}
	if auo.mutation.DimensionsCleared() {
		_spec.ClearField(art.FieldDimensions, field.TypeString)
	}
	if value, ok := auo.mutation.Number(); ok {
		_spec.SetField(art.FieldNumber, field.TypeString, value)
	}
	if auo.mutation.NumberCleared() {
		_spec.ClearField(art.FieldNumber, field.TypeString)
	}
	if auo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.AuthorTable,
			Columns: []string{art.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.AuthorTable,
			Columns: []string{art.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ArtGenreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.ArtGenreTable,
			Columns: art.ArtGenrePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artgenre.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedArtGenreIDs(); len(nodes) > 0 && !auo.mutation.ArtGenreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.ArtGenreTable,
			Columns: art.ArtGenrePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artgenre.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ArtGenreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.ArtGenreTable,
			Columns: art.ArtGenrePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artgenre.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ArtStyleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.ArtStyleTable,
			Columns: art.ArtStylePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artstyle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedArtStyleIDs(); len(nodes) > 0 && !auo.mutation.ArtStyleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.ArtStyleTable,
			Columns: art.ArtStylePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artstyle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ArtStyleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.ArtStyleTable,
			Columns: art.ArtStylePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artstyle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.TechniquesTable,
			Columns: art.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTechniquesIDs(); len(nodes) > 0 && !auo.mutation.TechniquesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.TechniquesTable,
			Columns: art.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.TechniquesTable,
			Columns: art.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.CollectionTable,
			Columns: []string{art.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.CollectionTable,
			Columns: []string{art.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.CountryTable,
			Columns: []string{art.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.CountryTable,
			Columns: []string{art.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SettlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.SettlementTable,
			Columns: []string{art.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.SettlementTable,
			Columns: []string{art.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.DistrictTable,
			Columns: []string{art.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.DistrictTable,
			Columns: []string{art.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.RegionTable,
			Columns: []string{art.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   art.RegionTable,
			Columns: []string{art.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PersonalCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.PersonalCollectionTable,
			Columns: art.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPersonalCollectionIDs(); len(nodes) > 0 && !auo.mutation.PersonalCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.PersonalCollectionTable,
			Columns: art.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PersonalCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   art.PersonalCollectionTable,
			Columns: art.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Art{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{art.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
