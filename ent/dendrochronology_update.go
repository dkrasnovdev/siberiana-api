// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronologicalanalysis"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronology"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
)

// DendrochronologyUpdate is the builder for updating Dendrochronology entities.
type DendrochronologyUpdate struct {
	config
	hooks    []Hook
	mutation *DendrochronologyMutation
}

// Where appends a list predicates to the DendrochronologyUpdate builder.
func (du *DendrochronologyUpdate) Where(ps ...predicate.Dendrochronology) *DendrochronologyUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetCreatedBy sets the "created_by" field.
func (du *DendrochronologyUpdate) SetCreatedBy(s string) *DendrochronologyUpdate {
	du.mutation.SetCreatedBy(s)
	return du
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableCreatedBy(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetCreatedBy(*s)
	}
	return du
}

// ClearCreatedBy clears the value of the "created_by" field.
func (du *DendrochronologyUpdate) ClearCreatedBy() *DendrochronologyUpdate {
	du.mutation.ClearCreatedBy()
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DendrochronologyUpdate) SetUpdatedAt(t time.Time) *DendrochronologyUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DendrochronologyUpdate) SetUpdatedBy(s string) *DendrochronologyUpdate {
	du.mutation.SetUpdatedBy(s)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableUpdatedBy(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetUpdatedBy(*s)
	}
	return du
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (du *DendrochronologyUpdate) ClearUpdatedBy() *DendrochronologyUpdate {
	du.mutation.ClearUpdatedBy()
	return du
}

// SetDating sets the "dating" field.
func (du *DendrochronologyUpdate) SetDating(s string) *DendrochronologyUpdate {
	du.mutation.SetDating(s)
	return du
}

// SetNillableDating sets the "dating" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableDating(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetDating(*s)
	}
	return du
}

// ClearDating clears the value of the "dating" field.
func (du *DendrochronologyUpdate) ClearDating() *DendrochronologyUpdate {
	du.mutation.ClearDating()
	return du
}

// SetDatingStart sets the "dating_start" field.
func (du *DendrochronologyUpdate) SetDatingStart(i int) *DendrochronologyUpdate {
	du.mutation.ResetDatingStart()
	du.mutation.SetDatingStart(i)
	return du
}

// SetNillableDatingStart sets the "dating_start" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableDatingStart(i *int) *DendrochronologyUpdate {
	if i != nil {
		du.SetDatingStart(*i)
	}
	return du
}

// AddDatingStart adds i to the "dating_start" field.
func (du *DendrochronologyUpdate) AddDatingStart(i int) *DendrochronologyUpdate {
	du.mutation.AddDatingStart(i)
	return du
}

// ClearDatingStart clears the value of the "dating_start" field.
func (du *DendrochronologyUpdate) ClearDatingStart() *DendrochronologyUpdate {
	du.mutation.ClearDatingStart()
	return du
}

// SetDatingEnd sets the "dating_end" field.
func (du *DendrochronologyUpdate) SetDatingEnd(i int) *DendrochronologyUpdate {
	du.mutation.ResetDatingEnd()
	du.mutation.SetDatingEnd(i)
	return du
}

// SetNillableDatingEnd sets the "dating_end" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableDatingEnd(i *int) *DendrochronologyUpdate {
	if i != nil {
		du.SetDatingEnd(*i)
	}
	return du
}

// AddDatingEnd adds i to the "dating_end" field.
func (du *DendrochronologyUpdate) AddDatingEnd(i int) *DendrochronologyUpdate {
	du.mutation.AddDatingEnd(i)
	return du
}

// ClearDatingEnd clears the value of the "dating_end" field.
func (du *DendrochronologyUpdate) ClearDatingEnd() *DendrochronologyUpdate {
	du.mutation.ClearDatingEnd()
	return du
}

// SetDisplayName sets the "display_name" field.
func (du *DendrochronologyUpdate) SetDisplayName(s string) *DendrochronologyUpdate {
	du.mutation.SetDisplayName(s)
	return du
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableDisplayName(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetDisplayName(*s)
	}
	return du
}

// ClearDisplayName clears the value of the "display_name" field.
func (du *DendrochronologyUpdate) ClearDisplayName() *DendrochronologyUpdate {
	du.mutation.ClearDisplayName()
	return du
}

// SetAbbreviation sets the "abbreviation" field.
func (du *DendrochronologyUpdate) SetAbbreviation(s string) *DendrochronologyUpdate {
	du.mutation.SetAbbreviation(s)
	return du
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableAbbreviation(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetAbbreviation(*s)
	}
	return du
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (du *DendrochronologyUpdate) ClearAbbreviation() *DendrochronologyUpdate {
	du.mutation.ClearAbbreviation()
	return du
}

// SetDescription sets the "description" field.
func (du *DendrochronologyUpdate) SetDescription(s string) *DendrochronologyUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableDescription(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// ClearDescription clears the value of the "description" field.
func (du *DendrochronologyUpdate) ClearDescription() *DendrochronologyUpdate {
	du.mutation.ClearDescription()
	return du
}

// SetExternalLink sets the "external_link" field.
func (du *DendrochronologyUpdate) SetExternalLink(s string) *DendrochronologyUpdate {
	du.mutation.SetExternalLink(s)
	return du
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableExternalLink(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetExternalLink(*s)
	}
	return du
}

// ClearExternalLink clears the value of the "external_link" field.
func (du *DendrochronologyUpdate) ClearExternalLink() *DendrochronologyUpdate {
	du.mutation.ClearExternalLink()
	return du
}

// SetStatus sets the "status" field.
func (du *DendrochronologyUpdate) SetStatus(d dendrochronology.Status) *DendrochronologyUpdate {
	du.mutation.SetStatus(d)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableStatus(d *dendrochronology.Status) *DendrochronologyUpdate {
	if d != nil {
		du.SetStatus(*d)
	}
	return du
}

// ClearStatus clears the value of the "status" field.
func (du *DendrochronologyUpdate) ClearStatus() *DendrochronologyUpdate {
	du.mutation.ClearStatus()
	return du
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (du *DendrochronologyUpdate) SetPrimaryImageURL(s string) *DendrochronologyUpdate {
	du.mutation.SetPrimaryImageURL(s)
	return du
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillablePrimaryImageURL(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetPrimaryImageURL(*s)
	}
	return du
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (du *DendrochronologyUpdate) ClearPrimaryImageURL() *DendrochronologyUpdate {
	du.mutation.ClearPrimaryImageURL()
	return du
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (du *DendrochronologyUpdate) SetAdditionalImagesUrls(s []string) *DendrochronologyUpdate {
	du.mutation.SetAdditionalImagesUrls(s)
	return du
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (du *DendrochronologyUpdate) AppendAdditionalImagesUrls(s []string) *DendrochronologyUpdate {
	du.mutation.AppendAdditionalImagesUrls(s)
	return du
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (du *DendrochronologyUpdate) ClearAdditionalImagesUrls() *DendrochronologyUpdate {
	du.mutation.ClearAdditionalImagesUrls()
	return du
}

// SetDeletedAt sets the "deleted_at" field.
func (du *DendrochronologyUpdate) SetDeletedAt(t time.Time) *DendrochronologyUpdate {
	du.mutation.SetDeletedAt(t)
	return du
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableDeletedAt(t *time.Time) *DendrochronologyUpdate {
	if t != nil {
		du.SetDeletedAt(*t)
	}
	return du
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (du *DendrochronologyUpdate) ClearDeletedAt() *DendrochronologyUpdate {
	du.mutation.ClearDeletedAt()
	return du
}

// SetDeletedBy sets the "deleted_by" field.
func (du *DendrochronologyUpdate) SetDeletedBy(s string) *DendrochronologyUpdate {
	du.mutation.SetDeletedBy(s)
	return du
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableDeletedBy(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetDeletedBy(*s)
	}
	return du
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (du *DendrochronologyUpdate) ClearDeletedBy() *DendrochronologyUpdate {
	du.mutation.ClearDeletedBy()
	return du
}

// SetAnalysisData sets the "analysis_data" field.
func (du *DendrochronologyUpdate) SetAnalysisData(s string) *DendrochronologyUpdate {
	du.mutation.SetAnalysisData(s)
	return du
}

// SetNillableAnalysisData sets the "analysis_data" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableAnalysisData(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetAnalysisData(*s)
	}
	return du
}

// ClearAnalysisData clears the value of the "analysis_data" field.
func (du *DendrochronologyUpdate) ClearAnalysisData() *DendrochronologyUpdate {
	du.mutation.ClearAnalysisData()
	return du
}

// SetAnalysisURL sets the "analysis_url" field.
func (du *DendrochronologyUpdate) SetAnalysisURL(s string) *DendrochronologyUpdate {
	du.mutation.SetAnalysisURL(s)
	return du
}

// SetNillableAnalysisURL sets the "analysis_url" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableAnalysisURL(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetAnalysisURL(*s)
	}
	return du
}

// ClearAnalysisURL clears the value of the "analysis_url" field.
func (du *DendrochronologyUpdate) ClearAnalysisURL() *DendrochronologyUpdate {
	du.mutation.ClearAnalysisURL()
	return du
}

// SetDataURL sets the "data_url" field.
func (du *DendrochronologyUpdate) SetDataURL(s string) *DendrochronologyUpdate {
	du.mutation.SetDataURL(s)
	return du
}

// SetNillableDataURL sets the "data_url" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableDataURL(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetDataURL(*s)
	}
	return du
}

// ClearDataURL clears the value of the "data_url" field.
func (du *DendrochronologyUpdate) ClearDataURL() *DendrochronologyUpdate {
	du.mutation.ClearDataURL()
	return du
}

// SetChartURL sets the "chart_url" field.
func (du *DendrochronologyUpdate) SetChartURL(s string) *DendrochronologyUpdate {
	du.mutation.SetChartURL(s)
	return du
}

// SetNillableChartURL sets the "chart_url" field if the given value is not nil.
func (du *DendrochronologyUpdate) SetNillableChartURL(s *string) *DendrochronologyUpdate {
	if s != nil {
		du.SetChartURL(*s)
	}
	return du
}

// ClearChartURL clears the value of the "chart_url" field.
func (du *DendrochronologyUpdate) ClearChartURL() *DendrochronologyUpdate {
	du.mutation.ClearChartURL()
	return du
}

// AddAnalysiIDs adds the "analysis" edge to the DendrochronologicalAnalysis entity by IDs.
func (du *DendrochronologyUpdate) AddAnalysiIDs(ids ...int) *DendrochronologyUpdate {
	du.mutation.AddAnalysiIDs(ids...)
	return du
}

// AddAnalysis adds the "analysis" edges to the DendrochronologicalAnalysis entity.
func (du *DendrochronologyUpdate) AddAnalysis(d ...*DendrochronologicalAnalysis) *DendrochronologyUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddAnalysiIDs(ids...)
}

// Mutation returns the DendrochronologyMutation object of the builder.
func (du *DendrochronologyUpdate) Mutation() *DendrochronologyMutation {
	return du.mutation
}

// ClearAnalysis clears all "analysis" edges to the DendrochronologicalAnalysis entity.
func (du *DendrochronologyUpdate) ClearAnalysis() *DendrochronologyUpdate {
	du.mutation.ClearAnalysis()
	return du
}

// RemoveAnalysiIDs removes the "analysis" edge to DendrochronologicalAnalysis entities by IDs.
func (du *DendrochronologyUpdate) RemoveAnalysiIDs(ids ...int) *DendrochronologyUpdate {
	du.mutation.RemoveAnalysiIDs(ids...)
	return du
}

// RemoveAnalysis removes "analysis" edges to DendrochronologicalAnalysis entities.
func (du *DendrochronologyUpdate) RemoveAnalysis(d ...*DendrochronologicalAnalysis) *DendrochronologyUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveAnalysiIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DendrochronologyUpdate) Save(ctx context.Context) (int, error) {
	if err := du.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DendrochronologyUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DendrochronologyUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DendrochronologyUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DendrochronologyUpdate) defaults() error {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		if dendrochronology.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized dendrochronology.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := dendrochronology.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (du *DendrochronologyUpdate) check() error {
	if v, ok := du.mutation.Status(); ok {
		if err := dendrochronology.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Dendrochronology.status": %w`, err)}
		}
	}
	return nil
}

func (du *DendrochronologyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dendrochronology.Table, dendrochronology.Columns, sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.CreatedBy(); ok {
		_spec.SetField(dendrochronology.FieldCreatedBy, field.TypeString, value)
	}
	if du.mutation.CreatedByCleared() {
		_spec.ClearField(dendrochronology.FieldCreatedBy, field.TypeString)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(dendrochronology.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.UpdatedBy(); ok {
		_spec.SetField(dendrochronology.FieldUpdatedBy, field.TypeString, value)
	}
	if du.mutation.UpdatedByCleared() {
		_spec.ClearField(dendrochronology.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := du.mutation.Dating(); ok {
		_spec.SetField(dendrochronology.FieldDating, field.TypeString, value)
	}
	if du.mutation.DatingCleared() {
		_spec.ClearField(dendrochronology.FieldDating, field.TypeString)
	}
	if value, ok := du.mutation.DatingStart(); ok {
		_spec.SetField(dendrochronology.FieldDatingStart, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedDatingStart(); ok {
		_spec.AddField(dendrochronology.FieldDatingStart, field.TypeInt, value)
	}
	if du.mutation.DatingStartCleared() {
		_spec.ClearField(dendrochronology.FieldDatingStart, field.TypeInt)
	}
	if value, ok := du.mutation.DatingEnd(); ok {
		_spec.SetField(dendrochronology.FieldDatingEnd, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedDatingEnd(); ok {
		_spec.AddField(dendrochronology.FieldDatingEnd, field.TypeInt, value)
	}
	if du.mutation.DatingEndCleared() {
		_spec.ClearField(dendrochronology.FieldDatingEnd, field.TypeInt)
	}
	if value, ok := du.mutation.DisplayName(); ok {
		_spec.SetField(dendrochronology.FieldDisplayName, field.TypeString, value)
	}
	if du.mutation.DisplayNameCleared() {
		_spec.ClearField(dendrochronology.FieldDisplayName, field.TypeString)
	}
	if value, ok := du.mutation.Abbreviation(); ok {
		_spec.SetField(dendrochronology.FieldAbbreviation, field.TypeString, value)
	}
	if du.mutation.AbbreviationCleared() {
		_spec.ClearField(dendrochronology.FieldAbbreviation, field.TypeString)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(dendrochronology.FieldDescription, field.TypeString, value)
	}
	if du.mutation.DescriptionCleared() {
		_spec.ClearField(dendrochronology.FieldDescription, field.TypeString)
	}
	if value, ok := du.mutation.ExternalLink(); ok {
		_spec.SetField(dendrochronology.FieldExternalLink, field.TypeString, value)
	}
	if du.mutation.ExternalLinkCleared() {
		_spec.ClearField(dendrochronology.FieldExternalLink, field.TypeString)
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(dendrochronology.FieldStatus, field.TypeEnum, value)
	}
	if du.mutation.StatusCleared() {
		_spec.ClearField(dendrochronology.FieldStatus, field.TypeEnum)
	}
	if value, ok := du.mutation.PrimaryImageURL(); ok {
		_spec.SetField(dendrochronology.FieldPrimaryImageURL, field.TypeString, value)
	}
	if du.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(dendrochronology.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := du.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(dendrochronology.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dendrochronology.FieldAdditionalImagesUrls, value)
		})
	}
	if du.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(dendrochronology.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := du.mutation.DeletedAt(); ok {
		_spec.SetField(dendrochronology.FieldDeletedAt, field.TypeTime, value)
	}
	if du.mutation.DeletedAtCleared() {
		_spec.ClearField(dendrochronology.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := du.mutation.DeletedBy(); ok {
		_spec.SetField(dendrochronology.FieldDeletedBy, field.TypeString, value)
	}
	if du.mutation.DeletedByCleared() {
		_spec.ClearField(dendrochronology.FieldDeletedBy, field.TypeString)
	}
	if value, ok := du.mutation.AnalysisData(); ok {
		_spec.SetField(dendrochronology.FieldAnalysisData, field.TypeString, value)
	}
	if du.mutation.AnalysisDataCleared() {
		_spec.ClearField(dendrochronology.FieldAnalysisData, field.TypeString)
	}
	if value, ok := du.mutation.AnalysisURL(); ok {
		_spec.SetField(dendrochronology.FieldAnalysisURL, field.TypeString, value)
	}
	if du.mutation.AnalysisURLCleared() {
		_spec.ClearField(dendrochronology.FieldAnalysisURL, field.TypeString)
	}
	if value, ok := du.mutation.DataURL(); ok {
		_spec.SetField(dendrochronology.FieldDataURL, field.TypeString, value)
	}
	if du.mutation.DataURLCleared() {
		_spec.ClearField(dendrochronology.FieldDataURL, field.TypeString)
	}
	if value, ok := du.mutation.ChartURL(); ok {
		_spec.SetField(dendrochronology.FieldChartURL, field.TypeString, value)
	}
	if du.mutation.ChartURLCleared() {
		_spec.ClearField(dendrochronology.FieldChartURL, field.TypeString)
	}
	if du.mutation.AnalysisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dendrochronology.AnalysisTable,
			Columns: []string{dendrochronology.AnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronologicalanalysis.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedAnalysisIDs(); len(nodes) > 0 && !du.mutation.AnalysisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dendrochronology.AnalysisTable,
			Columns: []string{dendrochronology.AnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronologicalanalysis.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.AnalysisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dendrochronology.AnalysisTable,
			Columns: []string{dendrochronology.AnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronologicalanalysis.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dendrochronology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DendrochronologyUpdateOne is the builder for updating a single Dendrochronology entity.
type DendrochronologyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DendrochronologyMutation
}

// SetCreatedBy sets the "created_by" field.
func (duo *DendrochronologyUpdateOne) SetCreatedBy(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetCreatedBy(s)
	return duo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableCreatedBy(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetCreatedBy(*s)
	}
	return duo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (duo *DendrochronologyUpdateOne) ClearCreatedBy() *DendrochronologyUpdateOne {
	duo.mutation.ClearCreatedBy()
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DendrochronologyUpdateOne) SetUpdatedAt(t time.Time) *DendrochronologyUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DendrochronologyUpdateOne) SetUpdatedBy(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetUpdatedBy(s)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableUpdatedBy(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetUpdatedBy(*s)
	}
	return duo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (duo *DendrochronologyUpdateOne) ClearUpdatedBy() *DendrochronologyUpdateOne {
	duo.mutation.ClearUpdatedBy()
	return duo
}

// SetDating sets the "dating" field.
func (duo *DendrochronologyUpdateOne) SetDating(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetDating(s)
	return duo
}

// SetNillableDating sets the "dating" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableDating(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetDating(*s)
	}
	return duo
}

// ClearDating clears the value of the "dating" field.
func (duo *DendrochronologyUpdateOne) ClearDating() *DendrochronologyUpdateOne {
	duo.mutation.ClearDating()
	return duo
}

// SetDatingStart sets the "dating_start" field.
func (duo *DendrochronologyUpdateOne) SetDatingStart(i int) *DendrochronologyUpdateOne {
	duo.mutation.ResetDatingStart()
	duo.mutation.SetDatingStart(i)
	return duo
}

// SetNillableDatingStart sets the "dating_start" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableDatingStart(i *int) *DendrochronologyUpdateOne {
	if i != nil {
		duo.SetDatingStart(*i)
	}
	return duo
}

// AddDatingStart adds i to the "dating_start" field.
func (duo *DendrochronologyUpdateOne) AddDatingStart(i int) *DendrochronologyUpdateOne {
	duo.mutation.AddDatingStart(i)
	return duo
}

// ClearDatingStart clears the value of the "dating_start" field.
func (duo *DendrochronologyUpdateOne) ClearDatingStart() *DendrochronologyUpdateOne {
	duo.mutation.ClearDatingStart()
	return duo
}

// SetDatingEnd sets the "dating_end" field.
func (duo *DendrochronologyUpdateOne) SetDatingEnd(i int) *DendrochronologyUpdateOne {
	duo.mutation.ResetDatingEnd()
	duo.mutation.SetDatingEnd(i)
	return duo
}

// SetNillableDatingEnd sets the "dating_end" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableDatingEnd(i *int) *DendrochronologyUpdateOne {
	if i != nil {
		duo.SetDatingEnd(*i)
	}
	return duo
}

// AddDatingEnd adds i to the "dating_end" field.
func (duo *DendrochronologyUpdateOne) AddDatingEnd(i int) *DendrochronologyUpdateOne {
	duo.mutation.AddDatingEnd(i)
	return duo
}

// ClearDatingEnd clears the value of the "dating_end" field.
func (duo *DendrochronologyUpdateOne) ClearDatingEnd() *DendrochronologyUpdateOne {
	duo.mutation.ClearDatingEnd()
	return duo
}

// SetDisplayName sets the "display_name" field.
func (duo *DendrochronologyUpdateOne) SetDisplayName(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetDisplayName(s)
	return duo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableDisplayName(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetDisplayName(*s)
	}
	return duo
}

// ClearDisplayName clears the value of the "display_name" field.
func (duo *DendrochronologyUpdateOne) ClearDisplayName() *DendrochronologyUpdateOne {
	duo.mutation.ClearDisplayName()
	return duo
}

// SetAbbreviation sets the "abbreviation" field.
func (duo *DendrochronologyUpdateOne) SetAbbreviation(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetAbbreviation(s)
	return duo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableAbbreviation(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetAbbreviation(*s)
	}
	return duo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (duo *DendrochronologyUpdateOne) ClearAbbreviation() *DendrochronologyUpdateOne {
	duo.mutation.ClearAbbreviation()
	return duo
}

// SetDescription sets the "description" field.
func (duo *DendrochronologyUpdateOne) SetDescription(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableDescription(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// ClearDescription clears the value of the "description" field.
func (duo *DendrochronologyUpdateOne) ClearDescription() *DendrochronologyUpdateOne {
	duo.mutation.ClearDescription()
	return duo
}

// SetExternalLink sets the "external_link" field.
func (duo *DendrochronologyUpdateOne) SetExternalLink(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetExternalLink(s)
	return duo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableExternalLink(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetExternalLink(*s)
	}
	return duo
}

// ClearExternalLink clears the value of the "external_link" field.
func (duo *DendrochronologyUpdateOne) ClearExternalLink() *DendrochronologyUpdateOne {
	duo.mutation.ClearExternalLink()
	return duo
}

// SetStatus sets the "status" field.
func (duo *DendrochronologyUpdateOne) SetStatus(d dendrochronology.Status) *DendrochronologyUpdateOne {
	duo.mutation.SetStatus(d)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableStatus(d *dendrochronology.Status) *DendrochronologyUpdateOne {
	if d != nil {
		duo.SetStatus(*d)
	}
	return duo
}

// ClearStatus clears the value of the "status" field.
func (duo *DendrochronologyUpdateOne) ClearStatus() *DendrochronologyUpdateOne {
	duo.mutation.ClearStatus()
	return duo
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (duo *DendrochronologyUpdateOne) SetPrimaryImageURL(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetPrimaryImageURL(s)
	return duo
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillablePrimaryImageURL(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetPrimaryImageURL(*s)
	}
	return duo
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (duo *DendrochronologyUpdateOne) ClearPrimaryImageURL() *DendrochronologyUpdateOne {
	duo.mutation.ClearPrimaryImageURL()
	return duo
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (duo *DendrochronologyUpdateOne) SetAdditionalImagesUrls(s []string) *DendrochronologyUpdateOne {
	duo.mutation.SetAdditionalImagesUrls(s)
	return duo
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (duo *DendrochronologyUpdateOne) AppendAdditionalImagesUrls(s []string) *DendrochronologyUpdateOne {
	duo.mutation.AppendAdditionalImagesUrls(s)
	return duo
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (duo *DendrochronologyUpdateOne) ClearAdditionalImagesUrls() *DendrochronologyUpdateOne {
	duo.mutation.ClearAdditionalImagesUrls()
	return duo
}

// SetDeletedAt sets the "deleted_at" field.
func (duo *DendrochronologyUpdateOne) SetDeletedAt(t time.Time) *DendrochronologyUpdateOne {
	duo.mutation.SetDeletedAt(t)
	return duo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableDeletedAt(t *time.Time) *DendrochronologyUpdateOne {
	if t != nil {
		duo.SetDeletedAt(*t)
	}
	return duo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (duo *DendrochronologyUpdateOne) ClearDeletedAt() *DendrochronologyUpdateOne {
	duo.mutation.ClearDeletedAt()
	return duo
}

// SetDeletedBy sets the "deleted_by" field.
func (duo *DendrochronologyUpdateOne) SetDeletedBy(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetDeletedBy(s)
	return duo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableDeletedBy(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetDeletedBy(*s)
	}
	return duo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (duo *DendrochronologyUpdateOne) ClearDeletedBy() *DendrochronologyUpdateOne {
	duo.mutation.ClearDeletedBy()
	return duo
}

// SetAnalysisData sets the "analysis_data" field.
func (duo *DendrochronologyUpdateOne) SetAnalysisData(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetAnalysisData(s)
	return duo
}

// SetNillableAnalysisData sets the "analysis_data" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableAnalysisData(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetAnalysisData(*s)
	}
	return duo
}

// ClearAnalysisData clears the value of the "analysis_data" field.
func (duo *DendrochronologyUpdateOne) ClearAnalysisData() *DendrochronologyUpdateOne {
	duo.mutation.ClearAnalysisData()
	return duo
}

// SetAnalysisURL sets the "analysis_url" field.
func (duo *DendrochronologyUpdateOne) SetAnalysisURL(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetAnalysisURL(s)
	return duo
}

// SetNillableAnalysisURL sets the "analysis_url" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableAnalysisURL(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetAnalysisURL(*s)
	}
	return duo
}

// ClearAnalysisURL clears the value of the "analysis_url" field.
func (duo *DendrochronologyUpdateOne) ClearAnalysisURL() *DendrochronologyUpdateOne {
	duo.mutation.ClearAnalysisURL()
	return duo
}

// SetDataURL sets the "data_url" field.
func (duo *DendrochronologyUpdateOne) SetDataURL(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetDataURL(s)
	return duo
}

// SetNillableDataURL sets the "data_url" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableDataURL(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetDataURL(*s)
	}
	return duo
}

// ClearDataURL clears the value of the "data_url" field.
func (duo *DendrochronologyUpdateOne) ClearDataURL() *DendrochronologyUpdateOne {
	duo.mutation.ClearDataURL()
	return duo
}

// SetChartURL sets the "chart_url" field.
func (duo *DendrochronologyUpdateOne) SetChartURL(s string) *DendrochronologyUpdateOne {
	duo.mutation.SetChartURL(s)
	return duo
}

// SetNillableChartURL sets the "chart_url" field if the given value is not nil.
func (duo *DendrochronologyUpdateOne) SetNillableChartURL(s *string) *DendrochronologyUpdateOne {
	if s != nil {
		duo.SetChartURL(*s)
	}
	return duo
}

// ClearChartURL clears the value of the "chart_url" field.
func (duo *DendrochronologyUpdateOne) ClearChartURL() *DendrochronologyUpdateOne {
	duo.mutation.ClearChartURL()
	return duo
}

// AddAnalysiIDs adds the "analysis" edge to the DendrochronologicalAnalysis entity by IDs.
func (duo *DendrochronologyUpdateOne) AddAnalysiIDs(ids ...int) *DendrochronologyUpdateOne {
	duo.mutation.AddAnalysiIDs(ids...)
	return duo
}

// AddAnalysis adds the "analysis" edges to the DendrochronologicalAnalysis entity.
func (duo *DendrochronologyUpdateOne) AddAnalysis(d ...*DendrochronologicalAnalysis) *DendrochronologyUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddAnalysiIDs(ids...)
}

// Mutation returns the DendrochronologyMutation object of the builder.
func (duo *DendrochronologyUpdateOne) Mutation() *DendrochronologyMutation {
	return duo.mutation
}

// ClearAnalysis clears all "analysis" edges to the DendrochronologicalAnalysis entity.
func (duo *DendrochronologyUpdateOne) ClearAnalysis() *DendrochronologyUpdateOne {
	duo.mutation.ClearAnalysis()
	return duo
}

// RemoveAnalysiIDs removes the "analysis" edge to DendrochronologicalAnalysis entities by IDs.
func (duo *DendrochronologyUpdateOne) RemoveAnalysiIDs(ids ...int) *DendrochronologyUpdateOne {
	duo.mutation.RemoveAnalysiIDs(ids...)
	return duo
}

// RemoveAnalysis removes "analysis" edges to DendrochronologicalAnalysis entities.
func (duo *DendrochronologyUpdateOne) RemoveAnalysis(d ...*DendrochronologicalAnalysis) *DendrochronologyUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveAnalysiIDs(ids...)
}

// Where appends a list predicates to the DendrochronologyUpdate builder.
func (duo *DendrochronologyUpdateOne) Where(ps ...predicate.Dendrochronology) *DendrochronologyUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DendrochronologyUpdateOne) Select(field string, fields ...string) *DendrochronologyUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dendrochronology entity.
func (duo *DendrochronologyUpdateOne) Save(ctx context.Context) (*Dendrochronology, error) {
	if err := duo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DendrochronologyUpdateOne) SaveX(ctx context.Context) *Dendrochronology {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DendrochronologyUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DendrochronologyUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DendrochronologyUpdateOne) defaults() error {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		if dendrochronology.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized dendrochronology.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := dendrochronology.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (duo *DendrochronologyUpdateOne) check() error {
	if v, ok := duo.mutation.Status(); ok {
		if err := dendrochronology.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Dendrochronology.status": %w`, err)}
		}
	}
	return nil
}

func (duo *DendrochronologyUpdateOne) sqlSave(ctx context.Context) (_node *Dendrochronology, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dendrochronology.Table, dendrochronology.Columns, sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dendrochronology.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dendrochronology.FieldID)
		for _, f := range fields {
			if !dendrochronology.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dendrochronology.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.CreatedBy(); ok {
		_spec.SetField(dendrochronology.FieldCreatedBy, field.TypeString, value)
	}
	if duo.mutation.CreatedByCleared() {
		_spec.ClearField(dendrochronology.FieldCreatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(dendrochronology.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.UpdatedBy(); ok {
		_spec.SetField(dendrochronology.FieldUpdatedBy, field.TypeString, value)
	}
	if duo.mutation.UpdatedByCleared() {
		_spec.ClearField(dendrochronology.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.Dating(); ok {
		_spec.SetField(dendrochronology.FieldDating, field.TypeString, value)
	}
	if duo.mutation.DatingCleared() {
		_spec.ClearField(dendrochronology.FieldDating, field.TypeString)
	}
	if value, ok := duo.mutation.DatingStart(); ok {
		_spec.SetField(dendrochronology.FieldDatingStart, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedDatingStart(); ok {
		_spec.AddField(dendrochronology.FieldDatingStart, field.TypeInt, value)
	}
	if duo.mutation.DatingStartCleared() {
		_spec.ClearField(dendrochronology.FieldDatingStart, field.TypeInt)
	}
	if value, ok := duo.mutation.DatingEnd(); ok {
		_spec.SetField(dendrochronology.FieldDatingEnd, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedDatingEnd(); ok {
		_spec.AddField(dendrochronology.FieldDatingEnd, field.TypeInt, value)
	}
	if duo.mutation.DatingEndCleared() {
		_spec.ClearField(dendrochronology.FieldDatingEnd, field.TypeInt)
	}
	if value, ok := duo.mutation.DisplayName(); ok {
		_spec.SetField(dendrochronology.FieldDisplayName, field.TypeString, value)
	}
	if duo.mutation.DisplayNameCleared() {
		_spec.ClearField(dendrochronology.FieldDisplayName, field.TypeString)
	}
	if value, ok := duo.mutation.Abbreviation(); ok {
		_spec.SetField(dendrochronology.FieldAbbreviation, field.TypeString, value)
	}
	if duo.mutation.AbbreviationCleared() {
		_spec.ClearField(dendrochronology.FieldAbbreviation, field.TypeString)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(dendrochronology.FieldDescription, field.TypeString, value)
	}
	if duo.mutation.DescriptionCleared() {
		_spec.ClearField(dendrochronology.FieldDescription, field.TypeString)
	}
	if value, ok := duo.mutation.ExternalLink(); ok {
		_spec.SetField(dendrochronology.FieldExternalLink, field.TypeString, value)
	}
	if duo.mutation.ExternalLinkCleared() {
		_spec.ClearField(dendrochronology.FieldExternalLink, field.TypeString)
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(dendrochronology.FieldStatus, field.TypeEnum, value)
	}
	if duo.mutation.StatusCleared() {
		_spec.ClearField(dendrochronology.FieldStatus, field.TypeEnum)
	}
	if value, ok := duo.mutation.PrimaryImageURL(); ok {
		_spec.SetField(dendrochronology.FieldPrimaryImageURL, field.TypeString, value)
	}
	if duo.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(dendrochronology.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := duo.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(dendrochronology.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dendrochronology.FieldAdditionalImagesUrls, value)
		})
	}
	if duo.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(dendrochronology.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := duo.mutation.DeletedAt(); ok {
		_spec.SetField(dendrochronology.FieldDeletedAt, field.TypeTime, value)
	}
	if duo.mutation.DeletedAtCleared() {
		_spec.ClearField(dendrochronology.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.DeletedBy(); ok {
		_spec.SetField(dendrochronology.FieldDeletedBy, field.TypeString, value)
	}
	if duo.mutation.DeletedByCleared() {
		_spec.ClearField(dendrochronology.FieldDeletedBy, field.TypeString)
	}
	if value, ok := duo.mutation.AnalysisData(); ok {
		_spec.SetField(dendrochronology.FieldAnalysisData, field.TypeString, value)
	}
	if duo.mutation.AnalysisDataCleared() {
		_spec.ClearField(dendrochronology.FieldAnalysisData, field.TypeString)
	}
	if value, ok := duo.mutation.AnalysisURL(); ok {
		_spec.SetField(dendrochronology.FieldAnalysisURL, field.TypeString, value)
	}
	if duo.mutation.AnalysisURLCleared() {
		_spec.ClearField(dendrochronology.FieldAnalysisURL, field.TypeString)
	}
	if value, ok := duo.mutation.DataURL(); ok {
		_spec.SetField(dendrochronology.FieldDataURL, field.TypeString, value)
	}
	if duo.mutation.DataURLCleared() {
		_spec.ClearField(dendrochronology.FieldDataURL, field.TypeString)
	}
	if value, ok := duo.mutation.ChartURL(); ok {
		_spec.SetField(dendrochronology.FieldChartURL, field.TypeString, value)
	}
	if duo.mutation.ChartURLCleared() {
		_spec.ClearField(dendrochronology.FieldChartURL, field.TypeString)
	}
	if duo.mutation.AnalysisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dendrochronology.AnalysisTable,
			Columns: []string{dendrochronology.AnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronologicalanalysis.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedAnalysisIDs(); len(nodes) > 0 && !duo.mutation.AnalysisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dendrochronology.AnalysisTable,
			Columns: []string{dendrochronology.AnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronologicalanalysis.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.AnalysisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dendrochronology.AnalysisTable,
			Columns: []string{dendrochronology.AnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronologicalanalysis.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dendrochronology{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dendrochronology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
