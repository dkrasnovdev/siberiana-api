// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/visit"
)

// Visit is the model entity for the Visit schema.
type Visit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Year holds the value of the "year" field.
	Year int `json:"year,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VisitQuery when eager-loading is set.
	Edges        VisitEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VisitEdges holds the relations/edges for other nodes in the graph.
type VisitEdges struct {
	// Mounds holds the value of the mounds edge.
	Mounds []*Mound `json:"mounds,omitempty"`
	// Visitors holds the value of the visitors edge.
	Visitors []*Person `json:"visitors,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedMounds   map[string][]*Mound
	namedVisitors map[string][]*Person
}

// MoundsOrErr returns the Mounds value or an error if the edge
// was not loaded in eager-loading.
func (e VisitEdges) MoundsOrErr() ([]*Mound, error) {
	if e.loadedTypes[0] {
		return e.Mounds, nil
	}
	return nil, &NotLoadedError{edge: "mounds"}
}

// VisitorsOrErr returns the Visitors value or an error if the edge
// was not loaded in eager-loading.
func (e VisitEdges) VisitorsOrErr() ([]*Person, error) {
	if e.loadedTypes[1] {
		return e.Visitors, nil
	}
	return nil, &NotLoadedError{edge: "visitors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Visit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case visit.FieldID, visit.FieldYear:
			values[i] = new(sql.NullInt64)
		case visit.FieldCreatedBy, visit.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case visit.FieldCreatedAt, visit.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Visit fields.
func (v *Visit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case visit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case visit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case visit.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				v.CreatedBy = value.String
			}
		case visit.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case visit.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				v.UpdatedBy = value.String
			}
		case visit.FieldYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				v.Year = int(value.Int64)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Visit.
// This includes values selected through modifiers, order, etc.
func (v *Visit) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryMounds queries the "mounds" edge of the Visit entity.
func (v *Visit) QueryMounds() *MoundQuery {
	return NewVisitClient(v.config).QueryMounds(v)
}

// QueryVisitors queries the "visitors" edge of the Visit entity.
func (v *Visit) QueryVisitors() *PersonQuery {
	return NewVisitClient(v.config).QueryVisitors(v)
}

// Update returns a builder for updating this Visit.
// Note that you need to call Visit.Unwrap() before calling this method if this Visit
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Visit) Update() *VisitUpdateOne {
	return NewVisitClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Visit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Visit) Unwrap() *Visit {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Visit is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Visit) String() string {
	var builder strings.Builder
	builder.WriteString("Visit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(v.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(v.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("year=")
	builder.WriteString(fmt.Sprintf("%v", v.Year))
	builder.WriteByte(')')
	return builder.String()
}

// NamedMounds returns the Mounds named value or an error if the edge was not
// loaded in eager-loading with this name.
func (v *Visit) NamedMounds(name string) ([]*Mound, error) {
	if v.Edges.namedMounds == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := v.Edges.namedMounds[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (v *Visit) appendNamedMounds(name string, edges ...*Mound) {
	if v.Edges.namedMounds == nil {
		v.Edges.namedMounds = make(map[string][]*Mound)
	}
	if len(edges) == 0 {
		v.Edges.namedMounds[name] = []*Mound{}
	} else {
		v.Edges.namedMounds[name] = append(v.Edges.namedMounds[name], edges...)
	}
}

// NamedVisitors returns the Visitors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (v *Visit) NamedVisitors(name string) ([]*Person, error) {
	if v.Edges.namedVisitors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := v.Edges.namedVisitors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (v *Visit) appendNamedVisitors(name string, edges ...*Person) {
	if v.Edges.namedVisitors == nil {
		v.Edges.namedVisitors = make(map[string][]*Person)
	}
	if len(edges) == 0 {
		v.Edges.namedVisitors[name] = []*Person{}
	} else {
		v.Edges.namedVisitors[name] = append(v.Edges.namedVisitors[name], edges...)
	}
}

// Visits is a parsable slice of Visit.
type Visits []*Visit
