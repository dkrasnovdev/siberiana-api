// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/petroglyph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/technique"
)

// TechniqueUpdate is the builder for updating Technique entities.
type TechniqueUpdate struct {
	config
	hooks    []Hook
	mutation *TechniqueMutation
}

// Where appends a list predicates to the TechniqueUpdate builder.
func (tu *TechniqueUpdate) Where(ps ...predicate.Technique) *TechniqueUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetCreatedBy sets the "created_by" field.
func (tu *TechniqueUpdate) SetCreatedBy(s string) *TechniqueUpdate {
	tu.mutation.SetCreatedBy(s)
	return tu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tu *TechniqueUpdate) SetNillableCreatedBy(s *string) *TechniqueUpdate {
	if s != nil {
		tu.SetCreatedBy(*s)
	}
	return tu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tu *TechniqueUpdate) ClearCreatedBy() *TechniqueUpdate {
	tu.mutation.ClearCreatedBy()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TechniqueUpdate) SetUpdatedAt(t time.Time) *TechniqueUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetUpdatedBy sets the "updated_by" field.
func (tu *TechniqueUpdate) SetUpdatedBy(s string) *TechniqueUpdate {
	tu.mutation.SetUpdatedBy(s)
	return tu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tu *TechniqueUpdate) SetNillableUpdatedBy(s *string) *TechniqueUpdate {
	if s != nil {
		tu.SetUpdatedBy(*s)
	}
	return tu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tu *TechniqueUpdate) ClearUpdatedBy() *TechniqueUpdate {
	tu.mutation.ClearUpdatedBy()
	return tu
}

// SetDisplayName sets the "display_name" field.
func (tu *TechniqueUpdate) SetDisplayName(s string) *TechniqueUpdate {
	tu.mutation.SetDisplayName(s)
	return tu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (tu *TechniqueUpdate) SetNillableDisplayName(s *string) *TechniqueUpdate {
	if s != nil {
		tu.SetDisplayName(*s)
	}
	return tu
}

// ClearDisplayName clears the value of the "display_name" field.
func (tu *TechniqueUpdate) ClearDisplayName() *TechniqueUpdate {
	tu.mutation.ClearDisplayName()
	return tu
}

// SetAbbreviation sets the "abbreviation" field.
func (tu *TechniqueUpdate) SetAbbreviation(s string) *TechniqueUpdate {
	tu.mutation.SetAbbreviation(s)
	return tu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (tu *TechniqueUpdate) SetNillableAbbreviation(s *string) *TechniqueUpdate {
	if s != nil {
		tu.SetAbbreviation(*s)
	}
	return tu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (tu *TechniqueUpdate) ClearAbbreviation() *TechniqueUpdate {
	tu.mutation.ClearAbbreviation()
	return tu
}

// SetDescription sets the "description" field.
func (tu *TechniqueUpdate) SetDescription(s string) *TechniqueUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TechniqueUpdate) SetNillableDescription(s *string) *TechniqueUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TechniqueUpdate) ClearDescription() *TechniqueUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetExternalLink sets the "external_link" field.
func (tu *TechniqueUpdate) SetExternalLink(s string) *TechniqueUpdate {
	tu.mutation.SetExternalLink(s)
	return tu
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (tu *TechniqueUpdate) SetNillableExternalLink(s *string) *TechniqueUpdate {
	if s != nil {
		tu.SetExternalLink(*s)
	}
	return tu
}

// ClearExternalLink clears the value of the "external_link" field.
func (tu *TechniqueUpdate) ClearExternalLink() *TechniqueUpdate {
	tu.mutation.ClearExternalLink()
	return tu
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (tu *TechniqueUpdate) AddArtIDs(ids ...int) *TechniqueUpdate {
	tu.mutation.AddArtIDs(ids...)
	return tu
}

// AddArt adds the "art" edges to the Art entity.
func (tu *TechniqueUpdate) AddArt(a ...*Art) *TechniqueUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (tu *TechniqueUpdate) AddArtifactIDs(ids ...int) *TechniqueUpdate {
	tu.mutation.AddArtifactIDs(ids...)
	return tu
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (tu *TechniqueUpdate) AddArtifacts(a ...*Artifact) *TechniqueUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddArtifactIDs(ids...)
}

// AddPetroglyphIDs adds the "petroglyphs" edge to the Petroglyph entity by IDs.
func (tu *TechniqueUpdate) AddPetroglyphIDs(ids ...int) *TechniqueUpdate {
	tu.mutation.AddPetroglyphIDs(ids...)
	return tu
}

// AddPetroglyphs adds the "petroglyphs" edges to the Petroglyph entity.
func (tu *TechniqueUpdate) AddPetroglyphs(p ...*Petroglyph) *TechniqueUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddPetroglyphIDs(ids...)
}

// Mutation returns the TechniqueMutation object of the builder.
func (tu *TechniqueUpdate) Mutation() *TechniqueMutation {
	return tu.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (tu *TechniqueUpdate) ClearArt() *TechniqueUpdate {
	tu.mutation.ClearArt()
	return tu
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (tu *TechniqueUpdate) RemoveArtIDs(ids ...int) *TechniqueUpdate {
	tu.mutation.RemoveArtIDs(ids...)
	return tu
}

// RemoveArt removes "art" edges to Art entities.
func (tu *TechniqueUpdate) RemoveArt(a ...*Art) *TechniqueUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (tu *TechniqueUpdate) ClearArtifacts() *TechniqueUpdate {
	tu.mutation.ClearArtifacts()
	return tu
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (tu *TechniqueUpdate) RemoveArtifactIDs(ids ...int) *TechniqueUpdate {
	tu.mutation.RemoveArtifactIDs(ids...)
	return tu
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (tu *TechniqueUpdate) RemoveArtifacts(a ...*Artifact) *TechniqueUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveArtifactIDs(ids...)
}

// ClearPetroglyphs clears all "petroglyphs" edges to the Petroglyph entity.
func (tu *TechniqueUpdate) ClearPetroglyphs() *TechniqueUpdate {
	tu.mutation.ClearPetroglyphs()
	return tu
}

// RemovePetroglyphIDs removes the "petroglyphs" edge to Petroglyph entities by IDs.
func (tu *TechniqueUpdate) RemovePetroglyphIDs(ids ...int) *TechniqueUpdate {
	tu.mutation.RemovePetroglyphIDs(ids...)
	return tu
}

// RemovePetroglyphs removes "petroglyphs" edges to Petroglyph entities.
func (tu *TechniqueUpdate) RemovePetroglyphs(p ...*Petroglyph) *TechniqueUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemovePetroglyphIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TechniqueUpdate) Save(ctx context.Context) (int, error) {
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TechniqueUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TechniqueUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TechniqueUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TechniqueUpdate) defaults() error {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		if technique.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized technique.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := technique.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (tu *TechniqueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(technique.Table, technique.Columns, sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.CreatedBy(); ok {
		_spec.SetField(technique.FieldCreatedBy, field.TypeString, value)
	}
	if tu.mutation.CreatedByCleared() {
		_spec.ClearField(technique.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(technique.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedBy(); ok {
		_spec.SetField(technique.FieldUpdatedBy, field.TypeString, value)
	}
	if tu.mutation.UpdatedByCleared() {
		_spec.ClearField(technique.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tu.mutation.DisplayName(); ok {
		_spec.SetField(technique.FieldDisplayName, field.TypeString, value)
	}
	if tu.mutation.DisplayNameCleared() {
		_spec.ClearField(technique.FieldDisplayName, field.TypeString)
	}
	if value, ok := tu.mutation.Abbreviation(); ok {
		_spec.SetField(technique.FieldAbbreviation, field.TypeString, value)
	}
	if tu.mutation.AbbreviationCleared() {
		_spec.ClearField(technique.FieldAbbreviation, field.TypeString)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(technique.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(technique.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.ExternalLink(); ok {
		_spec.SetField(technique.FieldExternalLink, field.TypeString, value)
	}
	if tu.mutation.ExternalLinkCleared() {
		_spec.ClearField(technique.FieldExternalLink, field.TypeString)
	}
	if tu.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.ArtTable,
			Columns: technique.ArtPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedArtIDs(); len(nodes) > 0 && !tu.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.ArtTable,
			Columns: technique.ArtPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.ArtTable,
			Columns: technique.ArtPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.ArtifactsTable,
			Columns: technique.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !tu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.ArtifactsTable,
			Columns: technique.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.ArtifactsTable,
			Columns: technique.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.PetroglyphsTable,
			Columns: technique.PetroglyphsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPetroglyphsIDs(); len(nodes) > 0 && !tu.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.PetroglyphsTable,
			Columns: technique.PetroglyphsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PetroglyphsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.PetroglyphsTable,
			Columns: technique.PetroglyphsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{technique.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TechniqueUpdateOne is the builder for updating a single Technique entity.
type TechniqueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TechniqueMutation
}

// SetCreatedBy sets the "created_by" field.
func (tuo *TechniqueUpdateOne) SetCreatedBy(s string) *TechniqueUpdateOne {
	tuo.mutation.SetCreatedBy(s)
	return tuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tuo *TechniqueUpdateOne) SetNillableCreatedBy(s *string) *TechniqueUpdateOne {
	if s != nil {
		tuo.SetCreatedBy(*s)
	}
	return tuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tuo *TechniqueUpdateOne) ClearCreatedBy() *TechniqueUpdateOne {
	tuo.mutation.ClearCreatedBy()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TechniqueUpdateOne) SetUpdatedAt(t time.Time) *TechniqueUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tuo *TechniqueUpdateOne) SetUpdatedBy(s string) *TechniqueUpdateOne {
	tuo.mutation.SetUpdatedBy(s)
	return tuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tuo *TechniqueUpdateOne) SetNillableUpdatedBy(s *string) *TechniqueUpdateOne {
	if s != nil {
		tuo.SetUpdatedBy(*s)
	}
	return tuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tuo *TechniqueUpdateOne) ClearUpdatedBy() *TechniqueUpdateOne {
	tuo.mutation.ClearUpdatedBy()
	return tuo
}

// SetDisplayName sets the "display_name" field.
func (tuo *TechniqueUpdateOne) SetDisplayName(s string) *TechniqueUpdateOne {
	tuo.mutation.SetDisplayName(s)
	return tuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (tuo *TechniqueUpdateOne) SetNillableDisplayName(s *string) *TechniqueUpdateOne {
	if s != nil {
		tuo.SetDisplayName(*s)
	}
	return tuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (tuo *TechniqueUpdateOne) ClearDisplayName() *TechniqueUpdateOne {
	tuo.mutation.ClearDisplayName()
	return tuo
}

// SetAbbreviation sets the "abbreviation" field.
func (tuo *TechniqueUpdateOne) SetAbbreviation(s string) *TechniqueUpdateOne {
	tuo.mutation.SetAbbreviation(s)
	return tuo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (tuo *TechniqueUpdateOne) SetNillableAbbreviation(s *string) *TechniqueUpdateOne {
	if s != nil {
		tuo.SetAbbreviation(*s)
	}
	return tuo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (tuo *TechniqueUpdateOne) ClearAbbreviation() *TechniqueUpdateOne {
	tuo.mutation.ClearAbbreviation()
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TechniqueUpdateOne) SetDescription(s string) *TechniqueUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TechniqueUpdateOne) SetNillableDescription(s *string) *TechniqueUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TechniqueUpdateOne) ClearDescription() *TechniqueUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetExternalLink sets the "external_link" field.
func (tuo *TechniqueUpdateOne) SetExternalLink(s string) *TechniqueUpdateOne {
	tuo.mutation.SetExternalLink(s)
	return tuo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (tuo *TechniqueUpdateOne) SetNillableExternalLink(s *string) *TechniqueUpdateOne {
	if s != nil {
		tuo.SetExternalLink(*s)
	}
	return tuo
}

// ClearExternalLink clears the value of the "external_link" field.
func (tuo *TechniqueUpdateOne) ClearExternalLink() *TechniqueUpdateOne {
	tuo.mutation.ClearExternalLink()
	return tuo
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (tuo *TechniqueUpdateOne) AddArtIDs(ids ...int) *TechniqueUpdateOne {
	tuo.mutation.AddArtIDs(ids...)
	return tuo
}

// AddArt adds the "art" edges to the Art entity.
func (tuo *TechniqueUpdateOne) AddArt(a ...*Art) *TechniqueUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (tuo *TechniqueUpdateOne) AddArtifactIDs(ids ...int) *TechniqueUpdateOne {
	tuo.mutation.AddArtifactIDs(ids...)
	return tuo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (tuo *TechniqueUpdateOne) AddArtifacts(a ...*Artifact) *TechniqueUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddArtifactIDs(ids...)
}

// AddPetroglyphIDs adds the "petroglyphs" edge to the Petroglyph entity by IDs.
func (tuo *TechniqueUpdateOne) AddPetroglyphIDs(ids ...int) *TechniqueUpdateOne {
	tuo.mutation.AddPetroglyphIDs(ids...)
	return tuo
}

// AddPetroglyphs adds the "petroglyphs" edges to the Petroglyph entity.
func (tuo *TechniqueUpdateOne) AddPetroglyphs(p ...*Petroglyph) *TechniqueUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddPetroglyphIDs(ids...)
}

// Mutation returns the TechniqueMutation object of the builder.
func (tuo *TechniqueUpdateOne) Mutation() *TechniqueMutation {
	return tuo.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (tuo *TechniqueUpdateOne) ClearArt() *TechniqueUpdateOne {
	tuo.mutation.ClearArt()
	return tuo
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (tuo *TechniqueUpdateOne) RemoveArtIDs(ids ...int) *TechniqueUpdateOne {
	tuo.mutation.RemoveArtIDs(ids...)
	return tuo
}

// RemoveArt removes "art" edges to Art entities.
func (tuo *TechniqueUpdateOne) RemoveArt(a ...*Art) *TechniqueUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (tuo *TechniqueUpdateOne) ClearArtifacts() *TechniqueUpdateOne {
	tuo.mutation.ClearArtifacts()
	return tuo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (tuo *TechniqueUpdateOne) RemoveArtifactIDs(ids ...int) *TechniqueUpdateOne {
	tuo.mutation.RemoveArtifactIDs(ids...)
	return tuo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (tuo *TechniqueUpdateOne) RemoveArtifacts(a ...*Artifact) *TechniqueUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveArtifactIDs(ids...)
}

// ClearPetroglyphs clears all "petroglyphs" edges to the Petroglyph entity.
func (tuo *TechniqueUpdateOne) ClearPetroglyphs() *TechniqueUpdateOne {
	tuo.mutation.ClearPetroglyphs()
	return tuo
}

// RemovePetroglyphIDs removes the "petroglyphs" edge to Petroglyph entities by IDs.
func (tuo *TechniqueUpdateOne) RemovePetroglyphIDs(ids ...int) *TechniqueUpdateOne {
	tuo.mutation.RemovePetroglyphIDs(ids...)
	return tuo
}

// RemovePetroglyphs removes "petroglyphs" edges to Petroglyph entities.
func (tuo *TechniqueUpdateOne) RemovePetroglyphs(p ...*Petroglyph) *TechniqueUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemovePetroglyphIDs(ids...)
}

// Where appends a list predicates to the TechniqueUpdate builder.
func (tuo *TechniqueUpdateOne) Where(ps ...predicate.Technique) *TechniqueUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TechniqueUpdateOne) Select(field string, fields ...string) *TechniqueUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Technique entity.
func (tuo *TechniqueUpdateOne) Save(ctx context.Context) (*Technique, error) {
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TechniqueUpdateOne) SaveX(ctx context.Context) *Technique {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TechniqueUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TechniqueUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TechniqueUpdateOne) defaults() error {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		if technique.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized technique.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := technique.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (tuo *TechniqueUpdateOne) sqlSave(ctx context.Context) (_node *Technique, err error) {
	_spec := sqlgraph.NewUpdateSpec(technique.Table, technique.Columns, sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Technique.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, technique.FieldID)
		for _, f := range fields {
			if !technique.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != technique.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.CreatedBy(); ok {
		_spec.SetField(technique.FieldCreatedBy, field.TypeString, value)
	}
	if tuo.mutation.CreatedByCleared() {
		_spec.ClearField(technique.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(technique.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedBy(); ok {
		_spec.SetField(technique.FieldUpdatedBy, field.TypeString, value)
	}
	if tuo.mutation.UpdatedByCleared() {
		_spec.ClearField(technique.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tuo.mutation.DisplayName(); ok {
		_spec.SetField(technique.FieldDisplayName, field.TypeString, value)
	}
	if tuo.mutation.DisplayNameCleared() {
		_spec.ClearField(technique.FieldDisplayName, field.TypeString)
	}
	if value, ok := tuo.mutation.Abbreviation(); ok {
		_spec.SetField(technique.FieldAbbreviation, field.TypeString, value)
	}
	if tuo.mutation.AbbreviationCleared() {
		_spec.ClearField(technique.FieldAbbreviation, field.TypeString)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(technique.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(technique.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.ExternalLink(); ok {
		_spec.SetField(technique.FieldExternalLink, field.TypeString, value)
	}
	if tuo.mutation.ExternalLinkCleared() {
		_spec.ClearField(technique.FieldExternalLink, field.TypeString)
	}
	if tuo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.ArtTable,
			Columns: technique.ArtPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedArtIDs(); len(nodes) > 0 && !tuo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.ArtTable,
			Columns: technique.ArtPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.ArtTable,
			Columns: technique.ArtPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.ArtifactsTable,
			Columns: technique.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !tuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.ArtifactsTable,
			Columns: technique.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.ArtifactsTable,
			Columns: technique.ArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.PetroglyphsTable,
			Columns: technique.PetroglyphsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPetroglyphsIDs(); len(nodes) > 0 && !tuo.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.PetroglyphsTable,
			Columns: technique.PetroglyphsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PetroglyphsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   technique.PetroglyphsTable,
			Columns: technique.PetroglyphsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Technique{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{technique.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
