// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/herbarium"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
)

// CountryUpdate is the builder for updating Country entities.
type CountryUpdate struct {
	config
	hooks    []Hook
	mutation *CountryMutation
}

// Where appends a list predicates to the CountryUpdate builder.
func (cu *CountryUpdate) Where(ps ...predicate.Country) *CountryUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedBy sets the "created_by" field.
func (cu *CountryUpdate) SetCreatedBy(s string) *CountryUpdate {
	cu.mutation.SetCreatedBy(s)
	return cu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableCreatedBy(s *string) *CountryUpdate {
	if s != nil {
		cu.SetCreatedBy(*s)
	}
	return cu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (cu *CountryUpdate) ClearCreatedBy() *CountryUpdate {
	cu.mutation.ClearCreatedBy()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CountryUpdate) SetUpdatedAt(t time.Time) *CountryUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CountryUpdate) SetUpdatedBy(s string) *CountryUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableUpdatedBy(s *string) *CountryUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *CountryUpdate) ClearUpdatedBy() *CountryUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetDisplayName sets the "display_name" field.
func (cu *CountryUpdate) SetDisplayName(s string) *CountryUpdate {
	cu.mutation.SetDisplayName(s)
	return cu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableDisplayName(s *string) *CountryUpdate {
	if s != nil {
		cu.SetDisplayName(*s)
	}
	return cu
}

// ClearDisplayName clears the value of the "display_name" field.
func (cu *CountryUpdate) ClearDisplayName() *CountryUpdate {
	cu.mutation.ClearDisplayName()
	return cu
}

// SetAbbreviation sets the "abbreviation" field.
func (cu *CountryUpdate) SetAbbreviation(s string) *CountryUpdate {
	cu.mutation.SetAbbreviation(s)
	return cu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableAbbreviation(s *string) *CountryUpdate {
	if s != nil {
		cu.SetAbbreviation(*s)
	}
	return cu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (cu *CountryUpdate) ClearAbbreviation() *CountryUpdate {
	cu.mutation.ClearAbbreviation()
	return cu
}

// SetDescription sets the "description" field.
func (cu *CountryUpdate) SetDescription(s string) *CountryUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableDescription(s *string) *CountryUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CountryUpdate) ClearDescription() *CountryUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetExternalLink sets the "external_link" field.
func (cu *CountryUpdate) SetExternalLink(s string) *CountryUpdate {
	cu.mutation.SetExternalLink(s)
	return cu
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableExternalLink(s *string) *CountryUpdate {
	if s != nil {
		cu.SetExternalLink(*s)
	}
	return cu
}

// ClearExternalLink clears the value of the "external_link" field.
func (cu *CountryUpdate) ClearExternalLink() *CountryUpdate {
	cu.mutation.ClearExternalLink()
	return cu
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (cu *CountryUpdate) AddArtIDs(ids ...int) *CountryUpdate {
	cu.mutation.AddArtIDs(ids...)
	return cu
}

// AddArt adds the "art" edges to the Art entity.
func (cu *CountryUpdate) AddArt(a ...*Art) *CountryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (cu *CountryUpdate) AddArtifactIDs(ids ...int) *CountryUpdate {
	cu.mutation.AddArtifactIDs(ids...)
	return cu
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (cu *CountryUpdate) AddArtifacts(a ...*Artifact) *CountryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (cu *CountryUpdate) AddBookIDs(ids ...int) *CountryUpdate {
	cu.mutation.AddBookIDs(ids...)
	return cu
}

// AddBooks adds the "books" edges to the Book entity.
func (cu *CountryUpdate) AddBooks(b ...*Book) *CountryUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddBookIDs(ids...)
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (cu *CountryUpdate) AddHerbariumIDs(ids ...int) *CountryUpdate {
	cu.mutation.AddHerbariumIDs(ids...)
	return cu
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (cu *CountryUpdate) AddHerbaria(h ...*Herbarium) *CountryUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cu.AddHerbariumIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (cu *CountryUpdate) AddProtectedAreaPictureIDs(ids ...int) *CountryUpdate {
	cu.mutation.AddProtectedAreaPictureIDs(ids...)
	return cu
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (cu *CountryUpdate) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *CountryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProtectedAreaPictureIDs(ids...)
}

// AddRegionIDs adds the "regions" edge to the Region entity by IDs.
func (cu *CountryUpdate) AddRegionIDs(ids ...int) *CountryUpdate {
	cu.mutation.AddRegionIDs(ids...)
	return cu
}

// AddRegions adds the "regions" edges to the Region entity.
func (cu *CountryUpdate) AddRegions(r ...*Region) *CountryUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddRegionIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (cu *CountryUpdate) AddLocationIDs(ids ...int) *CountryUpdate {
	cu.mutation.AddLocationIDs(ids...)
	return cu
}

// AddLocations adds the "locations" edges to the Location entity.
func (cu *CountryUpdate) AddLocations(l ...*Location) *CountryUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.AddLocationIDs(ids...)
}

// AddKnownAsAfterIDs adds the "known_as_after" edge to the Country entity by IDs.
func (cu *CountryUpdate) AddKnownAsAfterIDs(ids ...int) *CountryUpdate {
	cu.mutation.AddKnownAsAfterIDs(ids...)
	return cu
}

// AddKnownAsAfter adds the "known_as_after" edges to the Country entity.
func (cu *CountryUpdate) AddKnownAsAfter(c ...*Country) *CountryUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddKnownAsAfterIDs(ids...)
}

// AddKnownAsBeforeIDs adds the "known_as_before" edge to the Country entity by IDs.
func (cu *CountryUpdate) AddKnownAsBeforeIDs(ids ...int) *CountryUpdate {
	cu.mutation.AddKnownAsBeforeIDs(ids...)
	return cu
}

// AddKnownAsBefore adds the "known_as_before" edges to the Country entity.
func (cu *CountryUpdate) AddKnownAsBefore(c ...*Country) *CountryUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddKnownAsBeforeIDs(ids...)
}

// Mutation returns the CountryMutation object of the builder.
func (cu *CountryUpdate) Mutation() *CountryMutation {
	return cu.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (cu *CountryUpdate) ClearArt() *CountryUpdate {
	cu.mutation.ClearArt()
	return cu
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (cu *CountryUpdate) RemoveArtIDs(ids ...int) *CountryUpdate {
	cu.mutation.RemoveArtIDs(ids...)
	return cu
}

// RemoveArt removes "art" edges to Art entities.
func (cu *CountryUpdate) RemoveArt(a ...*Art) *CountryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (cu *CountryUpdate) ClearArtifacts() *CountryUpdate {
	cu.mutation.ClearArtifacts()
	return cu
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (cu *CountryUpdate) RemoveArtifactIDs(ids ...int) *CountryUpdate {
	cu.mutation.RemoveArtifactIDs(ids...)
	return cu
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (cu *CountryUpdate) RemoveArtifacts(a ...*Artifact) *CountryUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveArtifactIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (cu *CountryUpdate) ClearBooks() *CountryUpdate {
	cu.mutation.ClearBooks()
	return cu
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (cu *CountryUpdate) RemoveBookIDs(ids ...int) *CountryUpdate {
	cu.mutation.RemoveBookIDs(ids...)
	return cu
}

// RemoveBooks removes "books" edges to Book entities.
func (cu *CountryUpdate) RemoveBooks(b ...*Book) *CountryUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveBookIDs(ids...)
}

// ClearHerbaria clears all "herbaria" edges to the Herbarium entity.
func (cu *CountryUpdate) ClearHerbaria() *CountryUpdate {
	cu.mutation.ClearHerbaria()
	return cu
}

// RemoveHerbariumIDs removes the "herbaria" edge to Herbarium entities by IDs.
func (cu *CountryUpdate) RemoveHerbariumIDs(ids ...int) *CountryUpdate {
	cu.mutation.RemoveHerbariumIDs(ids...)
	return cu
}

// RemoveHerbaria removes "herbaria" edges to Herbarium entities.
func (cu *CountryUpdate) RemoveHerbaria(h ...*Herbarium) *CountryUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cu.RemoveHerbariumIDs(ids...)
}

// ClearProtectedAreaPictures clears all "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (cu *CountryUpdate) ClearProtectedAreaPictures() *CountryUpdate {
	cu.mutation.ClearProtectedAreaPictures()
	return cu
}

// RemoveProtectedAreaPictureIDs removes the "protected_area_pictures" edge to ProtectedAreaPicture entities by IDs.
func (cu *CountryUpdate) RemoveProtectedAreaPictureIDs(ids ...int) *CountryUpdate {
	cu.mutation.RemoveProtectedAreaPictureIDs(ids...)
	return cu
}

// RemoveProtectedAreaPictures removes "protected_area_pictures" edges to ProtectedAreaPicture entities.
func (cu *CountryUpdate) RemoveProtectedAreaPictures(p ...*ProtectedAreaPicture) *CountryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProtectedAreaPictureIDs(ids...)
}

// ClearRegions clears all "regions" edges to the Region entity.
func (cu *CountryUpdate) ClearRegions() *CountryUpdate {
	cu.mutation.ClearRegions()
	return cu
}

// RemoveRegionIDs removes the "regions" edge to Region entities by IDs.
func (cu *CountryUpdate) RemoveRegionIDs(ids ...int) *CountryUpdate {
	cu.mutation.RemoveRegionIDs(ids...)
	return cu
}

// RemoveRegions removes "regions" edges to Region entities.
func (cu *CountryUpdate) RemoveRegions(r ...*Region) *CountryUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveRegionIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Location entity.
func (cu *CountryUpdate) ClearLocations() *CountryUpdate {
	cu.mutation.ClearLocations()
	return cu
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (cu *CountryUpdate) RemoveLocationIDs(ids ...int) *CountryUpdate {
	cu.mutation.RemoveLocationIDs(ids...)
	return cu
}

// RemoveLocations removes "locations" edges to Location entities.
func (cu *CountryUpdate) RemoveLocations(l ...*Location) *CountryUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.RemoveLocationIDs(ids...)
}

// ClearKnownAsAfter clears all "known_as_after" edges to the Country entity.
func (cu *CountryUpdate) ClearKnownAsAfter() *CountryUpdate {
	cu.mutation.ClearKnownAsAfter()
	return cu
}

// RemoveKnownAsAfterIDs removes the "known_as_after" edge to Country entities by IDs.
func (cu *CountryUpdate) RemoveKnownAsAfterIDs(ids ...int) *CountryUpdate {
	cu.mutation.RemoveKnownAsAfterIDs(ids...)
	return cu
}

// RemoveKnownAsAfter removes "known_as_after" edges to Country entities.
func (cu *CountryUpdate) RemoveKnownAsAfter(c ...*Country) *CountryUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveKnownAsAfterIDs(ids...)
}

// ClearKnownAsBefore clears all "known_as_before" edges to the Country entity.
func (cu *CountryUpdate) ClearKnownAsBefore() *CountryUpdate {
	cu.mutation.ClearKnownAsBefore()
	return cu
}

// RemoveKnownAsBeforeIDs removes the "known_as_before" edge to Country entities by IDs.
func (cu *CountryUpdate) RemoveKnownAsBeforeIDs(ids ...int) *CountryUpdate {
	cu.mutation.RemoveKnownAsBeforeIDs(ids...)
	return cu
}

// RemoveKnownAsBefore removes "known_as_before" edges to Country entities.
func (cu *CountryUpdate) RemoveKnownAsBefore(c ...*Country) *CountryUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveKnownAsBeforeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CountryUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CountryUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CountryUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CountryUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CountryUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if country.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized country.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := country.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cu *CountryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(country.Table, country.Columns, sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedBy(); ok {
		_spec.SetField(country.FieldCreatedBy, field.TypeString, value)
	}
	if cu.mutation.CreatedByCleared() {
		_spec.ClearField(country.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(country.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(country.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(country.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.DisplayName(); ok {
		_spec.SetField(country.FieldDisplayName, field.TypeString, value)
	}
	if cu.mutation.DisplayNameCleared() {
		_spec.ClearField(country.FieldDisplayName, field.TypeString)
	}
	if value, ok := cu.mutation.Abbreviation(); ok {
		_spec.SetField(country.FieldAbbreviation, field.TypeString, value)
	}
	if cu.mutation.AbbreviationCleared() {
		_spec.ClearField(country.FieldAbbreviation, field.TypeString)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(country.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(country.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.ExternalLink(); ok {
		_spec.SetField(country.FieldExternalLink, field.TypeString, value)
	}
	if cu.mutation.ExternalLinkCleared() {
		_spec.ClearField(country.FieldExternalLink, field.TypeString)
	}
	if cu.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ArtTable,
			Columns: []string{country.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedArtIDs(); len(nodes) > 0 && !cu.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ArtTable,
			Columns: []string{country.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ArtTable,
			Columns: []string{country.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ArtifactsTable,
			Columns: []string{country.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !cu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ArtifactsTable,
			Columns: []string{country.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ArtifactsTable,
			Columns: []string{country.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.BooksTable,
			Columns: []string{country.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedBooksIDs(); len(nodes) > 0 && !cu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.BooksTable,
			Columns: []string{country.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.BooksTable,
			Columns: []string{country.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.HerbariaTable,
			Columns: []string{country.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedHerbariaIDs(); len(nodes) > 0 && !cu.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.HerbariaTable,
			Columns: []string{country.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.HerbariaTable,
			Columns: []string{country.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ProtectedAreaPicturesTable,
			Columns: []string{country.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProtectedAreaPicturesIDs(); len(nodes) > 0 && !cu.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ProtectedAreaPicturesTable,
			Columns: []string{country.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ProtectedAreaPicturesTable,
			Columns: []string{country.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.RegionsTable,
			Columns: []string{country.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRegionsIDs(); len(nodes) > 0 && !cu.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.RegionsTable,
			Columns: []string{country.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RegionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.RegionsTable,
			Columns: []string{country.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.LocationsTable,
			Columns: []string{country.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !cu.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.LocationsTable,
			Columns: []string{country.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.LocationsTable,
			Columns: []string{country.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.KnownAsAfterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.KnownAsAfterTable,
			Columns: country.KnownAsAfterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedKnownAsAfterIDs(); len(nodes) > 0 && !cu.mutation.KnownAsAfterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.KnownAsAfterTable,
			Columns: country.KnownAsAfterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.KnownAsAfterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.KnownAsAfterTable,
			Columns: country.KnownAsAfterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.KnownAsBeforeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.KnownAsBeforeTable,
			Columns: country.KnownAsBeforePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedKnownAsBeforeIDs(); len(nodes) > 0 && !cu.mutation.KnownAsBeforeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.KnownAsBeforeTable,
			Columns: country.KnownAsBeforePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.KnownAsBeforeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.KnownAsBeforeTable,
			Columns: country.KnownAsBeforePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{country.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CountryUpdateOne is the builder for updating a single Country entity.
type CountryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CountryMutation
}

// SetCreatedBy sets the "created_by" field.
func (cuo *CountryUpdateOne) SetCreatedBy(s string) *CountryUpdateOne {
	cuo.mutation.SetCreatedBy(s)
	return cuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableCreatedBy(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetCreatedBy(*s)
	}
	return cuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (cuo *CountryUpdateOne) ClearCreatedBy() *CountryUpdateOne {
	cuo.mutation.ClearCreatedBy()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CountryUpdateOne) SetUpdatedAt(t time.Time) *CountryUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CountryUpdateOne) SetUpdatedBy(s string) *CountryUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableUpdatedBy(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *CountryUpdateOne) ClearUpdatedBy() *CountryUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetDisplayName sets the "display_name" field.
func (cuo *CountryUpdateOne) SetDisplayName(s string) *CountryUpdateOne {
	cuo.mutation.SetDisplayName(s)
	return cuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableDisplayName(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetDisplayName(*s)
	}
	return cuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (cuo *CountryUpdateOne) ClearDisplayName() *CountryUpdateOne {
	cuo.mutation.ClearDisplayName()
	return cuo
}

// SetAbbreviation sets the "abbreviation" field.
func (cuo *CountryUpdateOne) SetAbbreviation(s string) *CountryUpdateOne {
	cuo.mutation.SetAbbreviation(s)
	return cuo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableAbbreviation(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetAbbreviation(*s)
	}
	return cuo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (cuo *CountryUpdateOne) ClearAbbreviation() *CountryUpdateOne {
	cuo.mutation.ClearAbbreviation()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CountryUpdateOne) SetDescription(s string) *CountryUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableDescription(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CountryUpdateOne) ClearDescription() *CountryUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetExternalLink sets the "external_link" field.
func (cuo *CountryUpdateOne) SetExternalLink(s string) *CountryUpdateOne {
	cuo.mutation.SetExternalLink(s)
	return cuo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableExternalLink(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetExternalLink(*s)
	}
	return cuo
}

// ClearExternalLink clears the value of the "external_link" field.
func (cuo *CountryUpdateOne) ClearExternalLink() *CountryUpdateOne {
	cuo.mutation.ClearExternalLink()
	return cuo
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (cuo *CountryUpdateOne) AddArtIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.AddArtIDs(ids...)
	return cuo
}

// AddArt adds the "art" edges to the Art entity.
func (cuo *CountryUpdateOne) AddArt(a ...*Art) *CountryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (cuo *CountryUpdateOne) AddArtifactIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.AddArtifactIDs(ids...)
	return cuo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (cuo *CountryUpdateOne) AddArtifacts(a ...*Artifact) *CountryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (cuo *CountryUpdateOne) AddBookIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.AddBookIDs(ids...)
	return cuo
}

// AddBooks adds the "books" edges to the Book entity.
func (cuo *CountryUpdateOne) AddBooks(b ...*Book) *CountryUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddBookIDs(ids...)
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (cuo *CountryUpdateOne) AddHerbariumIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.AddHerbariumIDs(ids...)
	return cuo
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (cuo *CountryUpdateOne) AddHerbaria(h ...*Herbarium) *CountryUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cuo.AddHerbariumIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (cuo *CountryUpdateOne) AddProtectedAreaPictureIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.AddProtectedAreaPictureIDs(ids...)
	return cuo
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (cuo *CountryUpdateOne) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *CountryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProtectedAreaPictureIDs(ids...)
}

// AddRegionIDs adds the "regions" edge to the Region entity by IDs.
func (cuo *CountryUpdateOne) AddRegionIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.AddRegionIDs(ids...)
	return cuo
}

// AddRegions adds the "regions" edges to the Region entity.
func (cuo *CountryUpdateOne) AddRegions(r ...*Region) *CountryUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddRegionIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (cuo *CountryUpdateOne) AddLocationIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.AddLocationIDs(ids...)
	return cuo
}

// AddLocations adds the "locations" edges to the Location entity.
func (cuo *CountryUpdateOne) AddLocations(l ...*Location) *CountryUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.AddLocationIDs(ids...)
}

// AddKnownAsAfterIDs adds the "known_as_after" edge to the Country entity by IDs.
func (cuo *CountryUpdateOne) AddKnownAsAfterIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.AddKnownAsAfterIDs(ids...)
	return cuo
}

// AddKnownAsAfter adds the "known_as_after" edges to the Country entity.
func (cuo *CountryUpdateOne) AddKnownAsAfter(c ...*Country) *CountryUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddKnownAsAfterIDs(ids...)
}

// AddKnownAsBeforeIDs adds the "known_as_before" edge to the Country entity by IDs.
func (cuo *CountryUpdateOne) AddKnownAsBeforeIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.AddKnownAsBeforeIDs(ids...)
	return cuo
}

// AddKnownAsBefore adds the "known_as_before" edges to the Country entity.
func (cuo *CountryUpdateOne) AddKnownAsBefore(c ...*Country) *CountryUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddKnownAsBeforeIDs(ids...)
}

// Mutation returns the CountryMutation object of the builder.
func (cuo *CountryUpdateOne) Mutation() *CountryMutation {
	return cuo.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (cuo *CountryUpdateOne) ClearArt() *CountryUpdateOne {
	cuo.mutation.ClearArt()
	return cuo
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (cuo *CountryUpdateOne) RemoveArtIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.RemoveArtIDs(ids...)
	return cuo
}

// RemoveArt removes "art" edges to Art entities.
func (cuo *CountryUpdateOne) RemoveArt(a ...*Art) *CountryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (cuo *CountryUpdateOne) ClearArtifacts() *CountryUpdateOne {
	cuo.mutation.ClearArtifacts()
	return cuo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (cuo *CountryUpdateOne) RemoveArtifactIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.RemoveArtifactIDs(ids...)
	return cuo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (cuo *CountryUpdateOne) RemoveArtifacts(a ...*Artifact) *CountryUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveArtifactIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (cuo *CountryUpdateOne) ClearBooks() *CountryUpdateOne {
	cuo.mutation.ClearBooks()
	return cuo
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (cuo *CountryUpdateOne) RemoveBookIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.RemoveBookIDs(ids...)
	return cuo
}

// RemoveBooks removes "books" edges to Book entities.
func (cuo *CountryUpdateOne) RemoveBooks(b ...*Book) *CountryUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveBookIDs(ids...)
}

// ClearHerbaria clears all "herbaria" edges to the Herbarium entity.
func (cuo *CountryUpdateOne) ClearHerbaria() *CountryUpdateOne {
	cuo.mutation.ClearHerbaria()
	return cuo
}

// RemoveHerbariumIDs removes the "herbaria" edge to Herbarium entities by IDs.
func (cuo *CountryUpdateOne) RemoveHerbariumIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.RemoveHerbariumIDs(ids...)
	return cuo
}

// RemoveHerbaria removes "herbaria" edges to Herbarium entities.
func (cuo *CountryUpdateOne) RemoveHerbaria(h ...*Herbarium) *CountryUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cuo.RemoveHerbariumIDs(ids...)
}

// ClearProtectedAreaPictures clears all "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (cuo *CountryUpdateOne) ClearProtectedAreaPictures() *CountryUpdateOne {
	cuo.mutation.ClearProtectedAreaPictures()
	return cuo
}

// RemoveProtectedAreaPictureIDs removes the "protected_area_pictures" edge to ProtectedAreaPicture entities by IDs.
func (cuo *CountryUpdateOne) RemoveProtectedAreaPictureIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.RemoveProtectedAreaPictureIDs(ids...)
	return cuo
}

// RemoveProtectedAreaPictures removes "protected_area_pictures" edges to ProtectedAreaPicture entities.
func (cuo *CountryUpdateOne) RemoveProtectedAreaPictures(p ...*ProtectedAreaPicture) *CountryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProtectedAreaPictureIDs(ids...)
}

// ClearRegions clears all "regions" edges to the Region entity.
func (cuo *CountryUpdateOne) ClearRegions() *CountryUpdateOne {
	cuo.mutation.ClearRegions()
	return cuo
}

// RemoveRegionIDs removes the "regions" edge to Region entities by IDs.
func (cuo *CountryUpdateOne) RemoveRegionIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.RemoveRegionIDs(ids...)
	return cuo
}

// RemoveRegions removes "regions" edges to Region entities.
func (cuo *CountryUpdateOne) RemoveRegions(r ...*Region) *CountryUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveRegionIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Location entity.
func (cuo *CountryUpdateOne) ClearLocations() *CountryUpdateOne {
	cuo.mutation.ClearLocations()
	return cuo
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (cuo *CountryUpdateOne) RemoveLocationIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.RemoveLocationIDs(ids...)
	return cuo
}

// RemoveLocations removes "locations" edges to Location entities.
func (cuo *CountryUpdateOne) RemoveLocations(l ...*Location) *CountryUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.RemoveLocationIDs(ids...)
}

// ClearKnownAsAfter clears all "known_as_after" edges to the Country entity.
func (cuo *CountryUpdateOne) ClearKnownAsAfter() *CountryUpdateOne {
	cuo.mutation.ClearKnownAsAfter()
	return cuo
}

// RemoveKnownAsAfterIDs removes the "known_as_after" edge to Country entities by IDs.
func (cuo *CountryUpdateOne) RemoveKnownAsAfterIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.RemoveKnownAsAfterIDs(ids...)
	return cuo
}

// RemoveKnownAsAfter removes "known_as_after" edges to Country entities.
func (cuo *CountryUpdateOne) RemoveKnownAsAfter(c ...*Country) *CountryUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveKnownAsAfterIDs(ids...)
}

// ClearKnownAsBefore clears all "known_as_before" edges to the Country entity.
func (cuo *CountryUpdateOne) ClearKnownAsBefore() *CountryUpdateOne {
	cuo.mutation.ClearKnownAsBefore()
	return cuo
}

// RemoveKnownAsBeforeIDs removes the "known_as_before" edge to Country entities by IDs.
func (cuo *CountryUpdateOne) RemoveKnownAsBeforeIDs(ids ...int) *CountryUpdateOne {
	cuo.mutation.RemoveKnownAsBeforeIDs(ids...)
	return cuo
}

// RemoveKnownAsBefore removes "known_as_before" edges to Country entities.
func (cuo *CountryUpdateOne) RemoveKnownAsBefore(c ...*Country) *CountryUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveKnownAsBeforeIDs(ids...)
}

// Where appends a list predicates to the CountryUpdate builder.
func (cuo *CountryUpdateOne) Where(ps ...predicate.Country) *CountryUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CountryUpdateOne) Select(field string, fields ...string) *CountryUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Country entity.
func (cuo *CountryUpdateOne) Save(ctx context.Context) (*Country, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CountryUpdateOne) SaveX(ctx context.Context) *Country {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CountryUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CountryUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CountryUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if country.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized country.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := country.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cuo *CountryUpdateOne) sqlSave(ctx context.Context) (_node *Country, err error) {
	_spec := sqlgraph.NewUpdateSpec(country.Table, country.Columns, sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Country.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, country.FieldID)
		for _, f := range fields {
			if !country.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != country.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedBy(); ok {
		_spec.SetField(country.FieldCreatedBy, field.TypeString, value)
	}
	if cuo.mutation.CreatedByCleared() {
		_spec.ClearField(country.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(country.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(country.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(country.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.DisplayName(); ok {
		_spec.SetField(country.FieldDisplayName, field.TypeString, value)
	}
	if cuo.mutation.DisplayNameCleared() {
		_spec.ClearField(country.FieldDisplayName, field.TypeString)
	}
	if value, ok := cuo.mutation.Abbreviation(); ok {
		_spec.SetField(country.FieldAbbreviation, field.TypeString, value)
	}
	if cuo.mutation.AbbreviationCleared() {
		_spec.ClearField(country.FieldAbbreviation, field.TypeString)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(country.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(country.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.ExternalLink(); ok {
		_spec.SetField(country.FieldExternalLink, field.TypeString, value)
	}
	if cuo.mutation.ExternalLinkCleared() {
		_spec.ClearField(country.FieldExternalLink, field.TypeString)
	}
	if cuo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ArtTable,
			Columns: []string{country.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedArtIDs(); len(nodes) > 0 && !cuo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ArtTable,
			Columns: []string{country.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ArtTable,
			Columns: []string{country.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ArtifactsTable,
			Columns: []string{country.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !cuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ArtifactsTable,
			Columns: []string{country.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ArtifactsTable,
			Columns: []string{country.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.BooksTable,
			Columns: []string{country.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedBooksIDs(); len(nodes) > 0 && !cuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.BooksTable,
			Columns: []string{country.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.BooksTable,
			Columns: []string{country.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.HerbariaTable,
			Columns: []string{country.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedHerbariaIDs(); len(nodes) > 0 && !cuo.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.HerbariaTable,
			Columns: []string{country.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.HerbariaTable,
			Columns: []string{country.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ProtectedAreaPicturesTable,
			Columns: []string{country.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProtectedAreaPicturesIDs(); len(nodes) > 0 && !cuo.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ProtectedAreaPicturesTable,
			Columns: []string{country.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ProtectedAreaPicturesTable,
			Columns: []string{country.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.RegionsTable,
			Columns: []string{country.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRegionsIDs(); len(nodes) > 0 && !cuo.mutation.RegionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.RegionsTable,
			Columns: []string{country.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RegionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.RegionsTable,
			Columns: []string{country.RegionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.LocationsTable,
			Columns: []string{country.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !cuo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.LocationsTable,
			Columns: []string{country.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.LocationsTable,
			Columns: []string{country.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.KnownAsAfterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.KnownAsAfterTable,
			Columns: country.KnownAsAfterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedKnownAsAfterIDs(); len(nodes) > 0 && !cuo.mutation.KnownAsAfterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.KnownAsAfterTable,
			Columns: country.KnownAsAfterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.KnownAsAfterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.KnownAsAfterTable,
			Columns: country.KnownAsAfterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.KnownAsBeforeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.KnownAsBeforeTable,
			Columns: country.KnownAsBeforePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedKnownAsBeforeIDs(); len(nodes) > 0 && !cuo.mutation.KnownAsBeforeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.KnownAsBeforeTable,
			Columns: country.KnownAsBeforePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.KnownAsBeforeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.KnownAsBeforeTable,
			Columns: country.KnownAsBeforePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Country{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{country.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
