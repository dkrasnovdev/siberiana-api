// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
)

// Art is the model entity for the Art schema.
type Art struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Dating holds the value of the "dating" field.
	Dating string `json:"dating,omitempty"`
	// DatingStart holds the value of the "dating_start" field.
	DatingStart int `json:"dating_start,omitempty"`
	// DatingEnd holds the value of the "dating_end" field.
	DatingEnd int `json:"dating_end,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Abbreviation holds the value of the "abbreviation" field.
	Abbreviation string `json:"abbreviation,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ExternalLink holds the value of the "external_link" field.
	ExternalLink string `json:"external_link,omitempty"`
	// Status holds the value of the "status" field.
	Status art.Status `json:"status,omitempty"`
	// PrimaryImageURL holds the value of the "primary_image_url" field.
	PrimaryImageURL string `json:"primary_image_url,omitempty"`
	// AdditionalImagesUrls holds the value of the "additional_images_urls" field.
	AdditionalImagesUrls []string `json:"additional_images_urls,omitempty"`
	// Height holds the value of the "height" field.
	Height float64 `json:"height,omitempty"`
	// Width holds the value of the "width" field.
	Width float64 `json:"width,omitempty"`
	// Length holds the value of the "length" field.
	Length float64 `json:"length,omitempty"`
	// Depth holds the value of the "depth" field.
	Depth float64 `json:"depth,omitempty"`
	// Diameter holds the value of the "diameter" field.
	Diameter float64 `json:"diameter,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight string `json:"weight,omitempty"`
	// Dimensions holds the value of the "dimensions" field.
	Dimensions string `json:"dimensions,omitempty"`
	// Number holds the value of the "number" field.
	Number string `json:"number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArtQuery when eager-loading is set.
	Edges          ArtEdges `json:"edges"`
	collection_art *int
	country_art    *int
	district_art   *int
	person_art     *int
	region_art     *int
	settlement_art *int
	selectValues   sql.SelectValues
}

// ArtEdges holds the relations/edges for other nodes in the graph.
type ArtEdges struct {
	// Author holds the value of the author edge.
	Author *Person `json:"author,omitempty"`
	// ArtGenre holds the value of the art_genre edge.
	ArtGenre []*ArtGenre `json:"art_genre,omitempty"`
	// ArtStyle holds the value of the art_style edge.
	ArtStyle []*ArtStyle `json:"art_style,omitempty"`
	// Techniques holds the value of the techniques edge.
	Techniques []*Technique `json:"techniques,omitempty"`
	// Collection holds the value of the collection edge.
	Collection *Collection `json:"collection,omitempty"`
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// Settlement holds the value of the settlement edge.
	Settlement *Settlement `json:"settlement,omitempty"`
	// District holds the value of the district edge.
	District *District `json:"district,omitempty"`
	// Region holds the value of the region edge.
	Region *Region `json:"region,omitempty"`
	// PersonalCollection holds the value of the personal_collection edge.
	PersonalCollection []*PersonalCollection `json:"personal_collection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
	// totalCount holds the count of the edges above.
	totalCount [10]map[string]int

	namedArtGenre           map[string][]*ArtGenre
	namedArtStyle           map[string][]*ArtStyle
	namedTechniques         map[string][]*Technique
	namedPersonalCollection map[string][]*PersonalCollection
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArtEdges) AuthorOrErr() (*Person, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: person.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// ArtGenreOrErr returns the ArtGenre value or an error if the edge
// was not loaded in eager-loading.
func (e ArtEdges) ArtGenreOrErr() ([]*ArtGenre, error) {
	if e.loadedTypes[1] {
		return e.ArtGenre, nil
	}
	return nil, &NotLoadedError{edge: "art_genre"}
}

// ArtStyleOrErr returns the ArtStyle value or an error if the edge
// was not loaded in eager-loading.
func (e ArtEdges) ArtStyleOrErr() ([]*ArtStyle, error) {
	if e.loadedTypes[2] {
		return e.ArtStyle, nil
	}
	return nil, &NotLoadedError{edge: "art_style"}
}

// TechniquesOrErr returns the Techniques value or an error if the edge
// was not loaded in eager-loading.
func (e ArtEdges) TechniquesOrErr() ([]*Technique, error) {
	if e.loadedTypes[3] {
		return e.Techniques, nil
	}
	return nil, &NotLoadedError{edge: "techniques"}
}

// CollectionOrErr returns the Collection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArtEdges) CollectionOrErr() (*Collection, error) {
	if e.loadedTypes[4] {
		if e.Collection == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: collection.Label}
		}
		return e.Collection, nil
	}
	return nil, &NotLoadedError{edge: "collection"}
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArtEdges) CountryOrErr() (*Country, error) {
	if e.loadedTypes[5] {
		if e.Country == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: country.Label}
		}
		return e.Country, nil
	}
	return nil, &NotLoadedError{edge: "country"}
}

// SettlementOrErr returns the Settlement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArtEdges) SettlementOrErr() (*Settlement, error) {
	if e.loadedTypes[6] {
		if e.Settlement == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: settlement.Label}
		}
		return e.Settlement, nil
	}
	return nil, &NotLoadedError{edge: "settlement"}
}

// DistrictOrErr returns the District value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArtEdges) DistrictOrErr() (*District, error) {
	if e.loadedTypes[7] {
		if e.District == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: district.Label}
		}
		return e.District, nil
	}
	return nil, &NotLoadedError{edge: "district"}
}

// RegionOrErr returns the Region value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArtEdges) RegionOrErr() (*Region, error) {
	if e.loadedTypes[8] {
		if e.Region == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: region.Label}
		}
		return e.Region, nil
	}
	return nil, &NotLoadedError{edge: "region"}
}

// PersonalCollectionOrErr returns the PersonalCollection value or an error if the edge
// was not loaded in eager-loading.
func (e ArtEdges) PersonalCollectionOrErr() ([]*PersonalCollection, error) {
	if e.loadedTypes[9] {
		return e.PersonalCollection, nil
	}
	return nil, &NotLoadedError{edge: "personal_collection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Art) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case art.FieldAdditionalImagesUrls:
			values[i] = new([]byte)
		case art.FieldHeight, art.FieldWidth, art.FieldLength, art.FieldDepth, art.FieldDiameter:
			values[i] = new(sql.NullFloat64)
		case art.FieldID, art.FieldDatingStart, art.FieldDatingEnd:
			values[i] = new(sql.NullInt64)
		case art.FieldCreatedBy, art.FieldUpdatedBy, art.FieldDating, art.FieldDisplayName, art.FieldAbbreviation, art.FieldDescription, art.FieldExternalLink, art.FieldStatus, art.FieldPrimaryImageURL, art.FieldWeight, art.FieldDimensions, art.FieldNumber:
			values[i] = new(sql.NullString)
		case art.FieldCreatedAt, art.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case art.ForeignKeys[0]: // collection_art
			values[i] = new(sql.NullInt64)
		case art.ForeignKeys[1]: // country_art
			values[i] = new(sql.NullInt64)
		case art.ForeignKeys[2]: // district_art
			values[i] = new(sql.NullInt64)
		case art.ForeignKeys[3]: // person_art
			values[i] = new(sql.NullInt64)
		case art.ForeignKeys[4]: // region_art
			values[i] = new(sql.NullInt64)
		case art.ForeignKeys[5]: // settlement_art
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Art fields.
func (a *Art) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case art.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case art.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case art.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				a.CreatedBy = value.String
			}
		case art.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case art.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				a.UpdatedBy = value.String
			}
		case art.FieldDating:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dating", values[i])
			} else if value.Valid {
				a.Dating = value.String
			}
		case art.FieldDatingStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dating_start", values[i])
			} else if value.Valid {
				a.DatingStart = int(value.Int64)
			}
		case art.FieldDatingEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dating_end", values[i])
			} else if value.Valid {
				a.DatingEnd = int(value.Int64)
			}
		case art.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				a.DisplayName = value.String
			}
		case art.FieldAbbreviation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abbreviation", values[i])
			} else if value.Valid {
				a.Abbreviation = value.String
			}
		case art.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case art.FieldExternalLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_link", values[i])
			} else if value.Valid {
				a.ExternalLink = value.String
			}
		case art.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = art.Status(value.String)
			}
		case art.FieldPrimaryImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_image_url", values[i])
			} else if value.Valid {
				a.PrimaryImageURL = value.String
			}
		case art.FieldAdditionalImagesUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field additional_images_urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.AdditionalImagesUrls); err != nil {
					return fmt.Errorf("unmarshal field additional_images_urls: %w", err)
				}
			}
		case art.FieldHeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				a.Height = value.Float64
			}
		case art.FieldWidth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				a.Width = value.Float64
			}
		case art.FieldLength:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				a.Length = value.Float64
			}
		case art.FieldDepth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field depth", values[i])
			} else if value.Valid {
				a.Depth = value.Float64
			}
		case art.FieldDiameter:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field diameter", values[i])
			} else if value.Valid {
				a.Diameter = value.Float64
			}
		case art.FieldWeight:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				a.Weight = value.String
			}
		case art.FieldDimensions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dimensions", values[i])
			} else if value.Valid {
				a.Dimensions = value.String
			}
		case art.FieldNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				a.Number = value.String
			}
		case art.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field collection_art", value)
			} else if value.Valid {
				a.collection_art = new(int)
				*a.collection_art = int(value.Int64)
			}
		case art.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field country_art", value)
			} else if value.Valid {
				a.country_art = new(int)
				*a.country_art = int(value.Int64)
			}
		case art.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field district_art", value)
			} else if value.Valid {
				a.district_art = new(int)
				*a.district_art = int(value.Int64)
			}
		case art.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field person_art", value)
			} else if value.Valid {
				a.person_art = new(int)
				*a.person_art = int(value.Int64)
			}
		case art.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field region_art", value)
			} else if value.Valid {
				a.region_art = new(int)
				*a.region_art = int(value.Int64)
			}
		case art.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field settlement_art", value)
			} else if value.Valid {
				a.settlement_art = new(int)
				*a.settlement_art = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Art.
// This includes values selected through modifiers, order, etc.
func (a *Art) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the Art entity.
func (a *Art) QueryAuthor() *PersonQuery {
	return NewArtClient(a.config).QueryAuthor(a)
}

// QueryArtGenre queries the "art_genre" edge of the Art entity.
func (a *Art) QueryArtGenre() *ArtGenreQuery {
	return NewArtClient(a.config).QueryArtGenre(a)
}

// QueryArtStyle queries the "art_style" edge of the Art entity.
func (a *Art) QueryArtStyle() *ArtStyleQuery {
	return NewArtClient(a.config).QueryArtStyle(a)
}

// QueryTechniques queries the "techniques" edge of the Art entity.
func (a *Art) QueryTechniques() *TechniqueQuery {
	return NewArtClient(a.config).QueryTechniques(a)
}

// QueryCollection queries the "collection" edge of the Art entity.
func (a *Art) QueryCollection() *CollectionQuery {
	return NewArtClient(a.config).QueryCollection(a)
}

// QueryCountry queries the "country" edge of the Art entity.
func (a *Art) QueryCountry() *CountryQuery {
	return NewArtClient(a.config).QueryCountry(a)
}

// QuerySettlement queries the "settlement" edge of the Art entity.
func (a *Art) QuerySettlement() *SettlementQuery {
	return NewArtClient(a.config).QuerySettlement(a)
}

// QueryDistrict queries the "district" edge of the Art entity.
func (a *Art) QueryDistrict() *DistrictQuery {
	return NewArtClient(a.config).QueryDistrict(a)
}

// QueryRegion queries the "region" edge of the Art entity.
func (a *Art) QueryRegion() *RegionQuery {
	return NewArtClient(a.config).QueryRegion(a)
}

// QueryPersonalCollection queries the "personal_collection" edge of the Art entity.
func (a *Art) QueryPersonalCollection() *PersonalCollectionQuery {
	return NewArtClient(a.config).QueryPersonalCollection(a)
}

// Update returns a builder for updating this Art.
// Note that you need to call Art.Unwrap() before calling this method if this Art
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Art) Update() *ArtUpdateOne {
	return NewArtClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Art entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Art) Unwrap() *Art {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Art is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Art) String() string {
	var builder strings.Builder
	builder.WriteString("Art(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(a.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(a.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("dating=")
	builder.WriteString(a.Dating)
	builder.WriteString(", ")
	builder.WriteString("dating_start=")
	builder.WriteString(fmt.Sprintf("%v", a.DatingStart))
	builder.WriteString(", ")
	builder.WriteString("dating_end=")
	builder.WriteString(fmt.Sprintf("%v", a.DatingEnd))
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(a.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("abbreviation=")
	builder.WriteString(a.Abbreviation)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteString(", ")
	builder.WriteString("external_link=")
	builder.WriteString(a.ExternalLink)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ")
	builder.WriteString("primary_image_url=")
	builder.WriteString(a.PrimaryImageURL)
	builder.WriteString(", ")
	builder.WriteString("additional_images_urls=")
	builder.WriteString(fmt.Sprintf("%v", a.AdditionalImagesUrls))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", a.Height))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", a.Width))
	builder.WriteString(", ")
	builder.WriteString("length=")
	builder.WriteString(fmt.Sprintf("%v", a.Length))
	builder.WriteString(", ")
	builder.WriteString("depth=")
	builder.WriteString(fmt.Sprintf("%v", a.Depth))
	builder.WriteString(", ")
	builder.WriteString("diameter=")
	builder.WriteString(fmt.Sprintf("%v", a.Diameter))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(a.Weight)
	builder.WriteString(", ")
	builder.WriteString("dimensions=")
	builder.WriteString(a.Dimensions)
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(a.Number)
	builder.WriteByte(')')
	return builder.String()
}

// NamedArtGenre returns the ArtGenre named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Art) NamedArtGenre(name string) ([]*ArtGenre, error) {
	if a.Edges.namedArtGenre == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedArtGenre[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Art) appendNamedArtGenre(name string, edges ...*ArtGenre) {
	if a.Edges.namedArtGenre == nil {
		a.Edges.namedArtGenre = make(map[string][]*ArtGenre)
	}
	if len(edges) == 0 {
		a.Edges.namedArtGenre[name] = []*ArtGenre{}
	} else {
		a.Edges.namedArtGenre[name] = append(a.Edges.namedArtGenre[name], edges...)
	}
}

// NamedArtStyle returns the ArtStyle named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Art) NamedArtStyle(name string) ([]*ArtStyle, error) {
	if a.Edges.namedArtStyle == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedArtStyle[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Art) appendNamedArtStyle(name string, edges ...*ArtStyle) {
	if a.Edges.namedArtStyle == nil {
		a.Edges.namedArtStyle = make(map[string][]*ArtStyle)
	}
	if len(edges) == 0 {
		a.Edges.namedArtStyle[name] = []*ArtStyle{}
	} else {
		a.Edges.namedArtStyle[name] = append(a.Edges.namedArtStyle[name], edges...)
	}
}

// NamedTechniques returns the Techniques named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Art) NamedTechniques(name string) ([]*Technique, error) {
	if a.Edges.namedTechniques == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedTechniques[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Art) appendNamedTechniques(name string, edges ...*Technique) {
	if a.Edges.namedTechniques == nil {
		a.Edges.namedTechniques = make(map[string][]*Technique)
	}
	if len(edges) == 0 {
		a.Edges.namedTechniques[name] = []*Technique{}
	} else {
		a.Edges.namedTechniques[name] = append(a.Edges.namedTechniques[name], edges...)
	}
}

// NamedPersonalCollection returns the PersonalCollection named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Art) NamedPersonalCollection(name string) ([]*PersonalCollection, error) {
	if a.Edges.namedPersonalCollection == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedPersonalCollection[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Art) appendNamedPersonalCollection(name string, edges ...*PersonalCollection) {
	if a.Edges.namedPersonalCollection == nil {
		a.Edges.namedPersonalCollection = make(map[string][]*PersonalCollection)
	}
	if len(edges) == 0 {
		a.Edges.namedPersonalCollection[name] = []*PersonalCollection{}
	} else {
		a.Edges.namedPersonalCollection[name] = append(a.Edges.namedPersonalCollection[name], edges...)
	}
}

// Arts is a parsable slice of Art.
type Arts []*Art
