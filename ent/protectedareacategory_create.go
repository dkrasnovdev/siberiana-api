// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/protectedareacategory"
)

// ProtectedAreaCategoryCreate is the builder for creating a ProtectedAreaCategory entity.
type ProtectedAreaCategoryCreate struct {
	config
	mutation *ProtectedAreaCategoryMutation
	hooks    []Hook
}

// Mutation returns the ProtectedAreaCategoryMutation object of the builder.
func (pacc *ProtectedAreaCategoryCreate) Mutation() *ProtectedAreaCategoryMutation {
	return pacc.mutation
}

// Save creates the ProtectedAreaCategory in the database.
func (pacc *ProtectedAreaCategoryCreate) Save(ctx context.Context) (*ProtectedAreaCategory, error) {
	return withHooks(ctx, pacc.sqlSave, pacc.mutation, pacc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pacc *ProtectedAreaCategoryCreate) SaveX(ctx context.Context) *ProtectedAreaCategory {
	v, err := pacc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacc *ProtectedAreaCategoryCreate) Exec(ctx context.Context) error {
	_, err := pacc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacc *ProtectedAreaCategoryCreate) ExecX(ctx context.Context) {
	if err := pacc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pacc *ProtectedAreaCategoryCreate) check() error {
	return nil
}

func (pacc *ProtectedAreaCategoryCreate) sqlSave(ctx context.Context) (*ProtectedAreaCategory, error) {
	if err := pacc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pacc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pacc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pacc.mutation.id = &_node.ID
	pacc.mutation.done = true
	return _node, nil
}

func (pacc *ProtectedAreaCategoryCreate) createSpec() (*ProtectedAreaCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &ProtectedAreaCategory{config: pacc.config}
		_spec = sqlgraph.NewCreateSpec(protectedareacategory.Table, sqlgraph.NewFieldSpec(protectedareacategory.FieldID, field.TypeInt))
	)
	return _node, _spec
}

// ProtectedAreaCategoryCreateBulk is the builder for creating many ProtectedAreaCategory entities in bulk.
type ProtectedAreaCategoryCreateBulk struct {
	config
	builders []*ProtectedAreaCategoryCreate
}

// Save creates the ProtectedAreaCategory entities in the database.
func (paccb *ProtectedAreaCategoryCreateBulk) Save(ctx context.Context) ([]*ProtectedAreaCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(paccb.builders))
	nodes := make([]*ProtectedAreaCategory, len(paccb.builders))
	mutators := make([]Mutator, len(paccb.builders))
	for i := range paccb.builders {
		func(i int, root context.Context) {
			builder := paccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProtectedAreaCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, paccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, paccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, paccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (paccb *ProtectedAreaCategoryCreateBulk) SaveX(ctx context.Context) []*ProtectedAreaCategory {
	v, err := paccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (paccb *ProtectedAreaCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := paccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (paccb *ProtectedAreaCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := paccb.Exec(ctx); err != nil {
		panic(err)
	}
}
