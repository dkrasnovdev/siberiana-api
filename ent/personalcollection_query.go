// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/personalcollection"
	"github.com/dkrasnovdev/siberiana-api/ent/petroglyph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
)

// PersonalCollectionQuery is the builder for querying PersonalCollection entities.
type PersonalCollectionQuery struct {
	config
	ctx                            *QueryContext
	order                          []personalcollection.OrderOption
	inters                         []Interceptor
	predicates                     []predicate.PersonalCollection
	withArt                        *ArtQuery
	withArtifacts                  *ArtifactQuery
	withPetroglyphs                *PetroglyphQuery
	withBooks                      *BookQuery
	withProtectedAreaPictures      *ProtectedAreaPictureQuery
	modifiers                      []func(*sql.Selector)
	loadTotal                      []func(context.Context, []*PersonalCollection) error
	withNamedArt                   map[string]*ArtQuery
	withNamedArtifacts             map[string]*ArtifactQuery
	withNamedPetroglyphs           map[string]*PetroglyphQuery
	withNamedBooks                 map[string]*BookQuery
	withNamedProtectedAreaPictures map[string]*ProtectedAreaPictureQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PersonalCollectionQuery builder.
func (pcq *PersonalCollectionQuery) Where(ps ...predicate.PersonalCollection) *PersonalCollectionQuery {
	pcq.predicates = append(pcq.predicates, ps...)
	return pcq
}

// Limit the number of records to be returned by this query.
func (pcq *PersonalCollectionQuery) Limit(limit int) *PersonalCollectionQuery {
	pcq.ctx.Limit = &limit
	return pcq
}

// Offset to start from.
func (pcq *PersonalCollectionQuery) Offset(offset int) *PersonalCollectionQuery {
	pcq.ctx.Offset = &offset
	return pcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pcq *PersonalCollectionQuery) Unique(unique bool) *PersonalCollectionQuery {
	pcq.ctx.Unique = &unique
	return pcq
}

// Order specifies how the records should be ordered.
func (pcq *PersonalCollectionQuery) Order(o ...personalcollection.OrderOption) *PersonalCollectionQuery {
	pcq.order = append(pcq.order, o...)
	return pcq
}

// QueryArt chains the current query on the "art" edge.
func (pcq *PersonalCollectionQuery) QueryArt() *ArtQuery {
	query := (&ArtClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(personalcollection.Table, personalcollection.FieldID, selector),
			sqlgraph.To(art.Table, art.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, personalcollection.ArtTable, personalcollection.ArtPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArtifacts chains the current query on the "artifacts" edge.
func (pcq *PersonalCollectionQuery) QueryArtifacts() *ArtifactQuery {
	query := (&ArtifactClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(personalcollection.Table, personalcollection.FieldID, selector),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, personalcollection.ArtifactsTable, personalcollection.ArtifactsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPetroglyphs chains the current query on the "petroglyphs" edge.
func (pcq *PersonalCollectionQuery) QueryPetroglyphs() *PetroglyphQuery {
	query := (&PetroglyphClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(personalcollection.Table, personalcollection.FieldID, selector),
			sqlgraph.To(petroglyph.Table, petroglyph.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, personalcollection.PetroglyphsTable, personalcollection.PetroglyphsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBooks chains the current query on the "books" edge.
func (pcq *PersonalCollectionQuery) QueryBooks() *BookQuery {
	query := (&BookClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(personalcollection.Table, personalcollection.FieldID, selector),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, personalcollection.BooksTable, personalcollection.BooksPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProtectedAreaPictures chains the current query on the "protected_area_pictures" edge.
func (pcq *PersonalCollectionQuery) QueryProtectedAreaPictures() *ProtectedAreaPictureQuery {
	query := (&ProtectedAreaPictureClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(personalcollection.Table, personalcollection.FieldID, selector),
			sqlgraph.To(protectedareapicture.Table, protectedareapicture.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, personalcollection.ProtectedAreaPicturesTable, personalcollection.ProtectedAreaPicturesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PersonalCollection entity from the query.
// Returns a *NotFoundError when no PersonalCollection was found.
func (pcq *PersonalCollectionQuery) First(ctx context.Context) (*PersonalCollection, error) {
	nodes, err := pcq.Limit(1).All(setContextOp(ctx, pcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{personalcollection.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pcq *PersonalCollectionQuery) FirstX(ctx context.Context) *PersonalCollection {
	node, err := pcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PersonalCollection ID from the query.
// Returns a *NotFoundError when no PersonalCollection ID was found.
func (pcq *PersonalCollectionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pcq.Limit(1).IDs(setContextOp(ctx, pcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{personalcollection.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pcq *PersonalCollectionQuery) FirstIDX(ctx context.Context) int {
	id, err := pcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PersonalCollection entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PersonalCollection entity is found.
// Returns a *NotFoundError when no PersonalCollection entities are found.
func (pcq *PersonalCollectionQuery) Only(ctx context.Context) (*PersonalCollection, error) {
	nodes, err := pcq.Limit(2).All(setContextOp(ctx, pcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{personalcollection.Label}
	default:
		return nil, &NotSingularError{personalcollection.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pcq *PersonalCollectionQuery) OnlyX(ctx context.Context) *PersonalCollection {
	node, err := pcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PersonalCollection ID in the query.
// Returns a *NotSingularError when more than one PersonalCollection ID is found.
// Returns a *NotFoundError when no entities are found.
func (pcq *PersonalCollectionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pcq.Limit(2).IDs(setContextOp(ctx, pcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{personalcollection.Label}
	default:
		err = &NotSingularError{personalcollection.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pcq *PersonalCollectionQuery) OnlyIDX(ctx context.Context) int {
	id, err := pcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PersonalCollections.
func (pcq *PersonalCollectionQuery) All(ctx context.Context) ([]*PersonalCollection, error) {
	ctx = setContextOp(ctx, pcq.ctx, "All")
	if err := pcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PersonalCollection, *PersonalCollectionQuery]()
	return withInterceptors[[]*PersonalCollection](ctx, pcq, qr, pcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pcq *PersonalCollectionQuery) AllX(ctx context.Context) []*PersonalCollection {
	nodes, err := pcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PersonalCollection IDs.
func (pcq *PersonalCollectionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pcq.ctx.Unique == nil && pcq.path != nil {
		pcq.Unique(true)
	}
	ctx = setContextOp(ctx, pcq.ctx, "IDs")
	if err = pcq.Select(personalcollection.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pcq *PersonalCollectionQuery) IDsX(ctx context.Context) []int {
	ids, err := pcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pcq *PersonalCollectionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pcq.ctx, "Count")
	if err := pcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pcq, querierCount[*PersonalCollectionQuery](), pcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pcq *PersonalCollectionQuery) CountX(ctx context.Context) int {
	count, err := pcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pcq *PersonalCollectionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pcq.ctx, "Exist")
	switch _, err := pcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pcq *PersonalCollectionQuery) ExistX(ctx context.Context) bool {
	exist, err := pcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PersonalCollectionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pcq *PersonalCollectionQuery) Clone() *PersonalCollectionQuery {
	if pcq == nil {
		return nil
	}
	return &PersonalCollectionQuery{
		config:                    pcq.config,
		ctx:                       pcq.ctx.Clone(),
		order:                     append([]personalcollection.OrderOption{}, pcq.order...),
		inters:                    append([]Interceptor{}, pcq.inters...),
		predicates:                append([]predicate.PersonalCollection{}, pcq.predicates...),
		withArt:                   pcq.withArt.Clone(),
		withArtifacts:             pcq.withArtifacts.Clone(),
		withPetroglyphs:           pcq.withPetroglyphs.Clone(),
		withBooks:                 pcq.withBooks.Clone(),
		withProtectedAreaPictures: pcq.withProtectedAreaPictures.Clone(),
		// clone intermediate query.
		sql:  pcq.sql.Clone(),
		path: pcq.path,
	}
}

// WithArt tells the query-builder to eager-load the nodes that are connected to
// the "art" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PersonalCollectionQuery) WithArt(opts ...func(*ArtQuery)) *PersonalCollectionQuery {
	query := (&ArtClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withArt = query
	return pcq
}

// WithArtifacts tells the query-builder to eager-load the nodes that are connected to
// the "artifacts" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PersonalCollectionQuery) WithArtifacts(opts ...func(*ArtifactQuery)) *PersonalCollectionQuery {
	query := (&ArtifactClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withArtifacts = query
	return pcq
}

// WithPetroglyphs tells the query-builder to eager-load the nodes that are connected to
// the "petroglyphs" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PersonalCollectionQuery) WithPetroglyphs(opts ...func(*PetroglyphQuery)) *PersonalCollectionQuery {
	query := (&PetroglyphClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withPetroglyphs = query
	return pcq
}

// WithBooks tells the query-builder to eager-load the nodes that are connected to
// the "books" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PersonalCollectionQuery) WithBooks(opts ...func(*BookQuery)) *PersonalCollectionQuery {
	query := (&BookClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withBooks = query
	return pcq
}

// WithProtectedAreaPictures tells the query-builder to eager-load the nodes that are connected to
// the "protected_area_pictures" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PersonalCollectionQuery) WithProtectedAreaPictures(opts ...func(*ProtectedAreaPictureQuery)) *PersonalCollectionQuery {
	query := (&ProtectedAreaPictureClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withProtectedAreaPictures = query
	return pcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PersonalCollection.Query().
//		GroupBy(personalcollection.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pcq *PersonalCollectionQuery) GroupBy(field string, fields ...string) *PersonalCollectionGroupBy {
	pcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PersonalCollectionGroupBy{build: pcq}
	grbuild.flds = &pcq.ctx.Fields
	grbuild.label = personalcollection.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PersonalCollection.Query().
//		Select(personalcollection.FieldCreatedAt).
//		Scan(ctx, &v)
func (pcq *PersonalCollectionQuery) Select(fields ...string) *PersonalCollectionSelect {
	pcq.ctx.Fields = append(pcq.ctx.Fields, fields...)
	sbuild := &PersonalCollectionSelect{PersonalCollectionQuery: pcq}
	sbuild.label = personalcollection.Label
	sbuild.flds, sbuild.scan = &pcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PersonalCollectionSelect configured with the given aggregations.
func (pcq *PersonalCollectionQuery) Aggregate(fns ...AggregateFunc) *PersonalCollectionSelect {
	return pcq.Select().Aggregate(fns...)
}

func (pcq *PersonalCollectionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pcq); err != nil {
				return err
			}
		}
	}
	for _, f := range pcq.ctx.Fields {
		if !personalcollection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pcq.path != nil {
		prev, err := pcq.path(ctx)
		if err != nil {
			return err
		}
		pcq.sql = prev
	}
	if personalcollection.Policy == nil {
		return errors.New("ent: uninitialized personalcollection.Policy (forgotten import ent/runtime?)")
	}
	if err := personalcollection.Policy.EvalQuery(ctx, pcq); err != nil {
		return err
	}
	return nil
}

func (pcq *PersonalCollectionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PersonalCollection, error) {
	var (
		nodes       = []*PersonalCollection{}
		_spec       = pcq.querySpec()
		loadedTypes = [5]bool{
			pcq.withArt != nil,
			pcq.withArtifacts != nil,
			pcq.withPetroglyphs != nil,
			pcq.withBooks != nil,
			pcq.withProtectedAreaPictures != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PersonalCollection).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PersonalCollection{config: pcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pcq.modifiers) > 0 {
		_spec.Modifiers = pcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pcq.withArt; query != nil {
		if err := pcq.loadArt(ctx, query, nodes,
			func(n *PersonalCollection) { n.Edges.Art = []*Art{} },
			func(n *PersonalCollection, e *Art) { n.Edges.Art = append(n.Edges.Art, e) }); err != nil {
			return nil, err
		}
	}
	if query := pcq.withArtifacts; query != nil {
		if err := pcq.loadArtifacts(ctx, query, nodes,
			func(n *PersonalCollection) { n.Edges.Artifacts = []*Artifact{} },
			func(n *PersonalCollection, e *Artifact) { n.Edges.Artifacts = append(n.Edges.Artifacts, e) }); err != nil {
			return nil, err
		}
	}
	if query := pcq.withPetroglyphs; query != nil {
		if err := pcq.loadPetroglyphs(ctx, query, nodes,
			func(n *PersonalCollection) { n.Edges.Petroglyphs = []*Petroglyph{} },
			func(n *PersonalCollection, e *Petroglyph) { n.Edges.Petroglyphs = append(n.Edges.Petroglyphs, e) }); err != nil {
			return nil, err
		}
	}
	if query := pcq.withBooks; query != nil {
		if err := pcq.loadBooks(ctx, query, nodes,
			func(n *PersonalCollection) { n.Edges.Books = []*Book{} },
			func(n *PersonalCollection, e *Book) { n.Edges.Books = append(n.Edges.Books, e) }); err != nil {
			return nil, err
		}
	}
	if query := pcq.withProtectedAreaPictures; query != nil {
		if err := pcq.loadProtectedAreaPictures(ctx, query, nodes,
			func(n *PersonalCollection) { n.Edges.ProtectedAreaPictures = []*ProtectedAreaPicture{} },
			func(n *PersonalCollection, e *ProtectedAreaPicture) {
				n.Edges.ProtectedAreaPictures = append(n.Edges.ProtectedAreaPictures, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range pcq.withNamedArt {
		if err := pcq.loadArt(ctx, query, nodes,
			func(n *PersonalCollection) { n.appendNamedArt(name) },
			func(n *PersonalCollection, e *Art) { n.appendNamedArt(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pcq.withNamedArtifacts {
		if err := pcq.loadArtifacts(ctx, query, nodes,
			func(n *PersonalCollection) { n.appendNamedArtifacts(name) },
			func(n *PersonalCollection, e *Artifact) { n.appendNamedArtifacts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pcq.withNamedPetroglyphs {
		if err := pcq.loadPetroglyphs(ctx, query, nodes,
			func(n *PersonalCollection) { n.appendNamedPetroglyphs(name) },
			func(n *PersonalCollection, e *Petroglyph) { n.appendNamedPetroglyphs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pcq.withNamedBooks {
		if err := pcq.loadBooks(ctx, query, nodes,
			func(n *PersonalCollection) { n.appendNamedBooks(name) },
			func(n *PersonalCollection, e *Book) { n.appendNamedBooks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pcq.withNamedProtectedAreaPictures {
		if err := pcq.loadProtectedAreaPictures(ctx, query, nodes,
			func(n *PersonalCollection) { n.appendNamedProtectedAreaPictures(name) },
			func(n *PersonalCollection, e *ProtectedAreaPicture) { n.appendNamedProtectedAreaPictures(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pcq.loadTotal {
		if err := pcq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pcq *PersonalCollectionQuery) loadArt(ctx context.Context, query *ArtQuery, nodes []*PersonalCollection, init func(*PersonalCollection), assign func(*PersonalCollection, *Art)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*PersonalCollection)
	nids := make(map[int]map[*PersonalCollection]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(personalcollection.ArtTable)
		s.Join(joinT).On(s.C(art.FieldID), joinT.C(personalcollection.ArtPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(personalcollection.ArtPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(personalcollection.ArtPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*PersonalCollection]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Art](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "art" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pcq *PersonalCollectionQuery) loadArtifacts(ctx context.Context, query *ArtifactQuery, nodes []*PersonalCollection, init func(*PersonalCollection), assign func(*PersonalCollection, *Artifact)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*PersonalCollection)
	nids := make(map[int]map[*PersonalCollection]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(personalcollection.ArtifactsTable)
		s.Join(joinT).On(s.C(artifact.FieldID), joinT.C(personalcollection.ArtifactsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(personalcollection.ArtifactsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(personalcollection.ArtifactsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*PersonalCollection]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Artifact](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "artifacts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pcq *PersonalCollectionQuery) loadPetroglyphs(ctx context.Context, query *PetroglyphQuery, nodes []*PersonalCollection, init func(*PersonalCollection), assign func(*PersonalCollection, *Petroglyph)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*PersonalCollection)
	nids := make(map[int]map[*PersonalCollection]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(personalcollection.PetroglyphsTable)
		s.Join(joinT).On(s.C(petroglyph.FieldID), joinT.C(personalcollection.PetroglyphsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(personalcollection.PetroglyphsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(personalcollection.PetroglyphsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*PersonalCollection]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Petroglyph](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "petroglyphs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pcq *PersonalCollectionQuery) loadBooks(ctx context.Context, query *BookQuery, nodes []*PersonalCollection, init func(*PersonalCollection), assign func(*PersonalCollection, *Book)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*PersonalCollection)
	nids := make(map[int]map[*PersonalCollection]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(personalcollection.BooksTable)
		s.Join(joinT).On(s.C(book.FieldID), joinT.C(personalcollection.BooksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(personalcollection.BooksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(personalcollection.BooksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*PersonalCollection]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Book](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "books" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pcq *PersonalCollectionQuery) loadProtectedAreaPictures(ctx context.Context, query *ProtectedAreaPictureQuery, nodes []*PersonalCollection, init func(*PersonalCollection), assign func(*PersonalCollection, *ProtectedAreaPicture)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*PersonalCollection)
	nids := make(map[int]map[*PersonalCollection]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(personalcollection.ProtectedAreaPicturesTable)
		s.Join(joinT).On(s.C(protectedareapicture.FieldID), joinT.C(personalcollection.ProtectedAreaPicturesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(personalcollection.ProtectedAreaPicturesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(personalcollection.ProtectedAreaPicturesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*PersonalCollection]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ProtectedAreaPicture](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "protected_area_pictures" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (pcq *PersonalCollectionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pcq.querySpec()
	if len(pcq.modifiers) > 0 {
		_spec.Modifiers = pcq.modifiers
	}
	_spec.Node.Columns = pcq.ctx.Fields
	if len(pcq.ctx.Fields) > 0 {
		_spec.Unique = pcq.ctx.Unique != nil && *pcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pcq.driver, _spec)
}

func (pcq *PersonalCollectionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(personalcollection.Table, personalcollection.Columns, sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt))
	_spec.From = pcq.sql
	if unique := pcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pcq.path != nil {
		_spec.Unique = true
	}
	if fields := pcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personalcollection.FieldID)
		for i := range fields {
			if fields[i] != personalcollection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pcq *PersonalCollectionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pcq.driver.Dialect())
	t1 := builder.Table(personalcollection.Table)
	columns := pcq.ctx.Fields
	if len(columns) == 0 {
		columns = personalcollection.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pcq.sql != nil {
		selector = pcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pcq.ctx.Unique != nil && *pcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pcq.predicates {
		p(selector)
	}
	for _, p := range pcq.order {
		p(selector)
	}
	if offset := pcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedArt tells the query-builder to eager-load the nodes that are connected to the "art"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pcq *PersonalCollectionQuery) WithNamedArt(name string, opts ...func(*ArtQuery)) *PersonalCollectionQuery {
	query := (&ArtClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pcq.withNamedArt == nil {
		pcq.withNamedArt = make(map[string]*ArtQuery)
	}
	pcq.withNamedArt[name] = query
	return pcq
}

// WithNamedArtifacts tells the query-builder to eager-load the nodes that are connected to the "artifacts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pcq *PersonalCollectionQuery) WithNamedArtifacts(name string, opts ...func(*ArtifactQuery)) *PersonalCollectionQuery {
	query := (&ArtifactClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pcq.withNamedArtifacts == nil {
		pcq.withNamedArtifacts = make(map[string]*ArtifactQuery)
	}
	pcq.withNamedArtifacts[name] = query
	return pcq
}

// WithNamedPetroglyphs tells the query-builder to eager-load the nodes that are connected to the "petroglyphs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pcq *PersonalCollectionQuery) WithNamedPetroglyphs(name string, opts ...func(*PetroglyphQuery)) *PersonalCollectionQuery {
	query := (&PetroglyphClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pcq.withNamedPetroglyphs == nil {
		pcq.withNamedPetroglyphs = make(map[string]*PetroglyphQuery)
	}
	pcq.withNamedPetroglyphs[name] = query
	return pcq
}

// WithNamedBooks tells the query-builder to eager-load the nodes that are connected to the "books"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pcq *PersonalCollectionQuery) WithNamedBooks(name string, opts ...func(*BookQuery)) *PersonalCollectionQuery {
	query := (&BookClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pcq.withNamedBooks == nil {
		pcq.withNamedBooks = make(map[string]*BookQuery)
	}
	pcq.withNamedBooks[name] = query
	return pcq
}

// WithNamedProtectedAreaPictures tells the query-builder to eager-load the nodes that are connected to the "protected_area_pictures"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pcq *PersonalCollectionQuery) WithNamedProtectedAreaPictures(name string, opts ...func(*ProtectedAreaPictureQuery)) *PersonalCollectionQuery {
	query := (&ProtectedAreaPictureClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pcq.withNamedProtectedAreaPictures == nil {
		pcq.withNamedProtectedAreaPictures = make(map[string]*ProtectedAreaPictureQuery)
	}
	pcq.withNamedProtectedAreaPictures[name] = query
	return pcq
}

// PersonalCollectionGroupBy is the group-by builder for PersonalCollection entities.
type PersonalCollectionGroupBy struct {
	selector
	build *PersonalCollectionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pcgb *PersonalCollectionGroupBy) Aggregate(fns ...AggregateFunc) *PersonalCollectionGroupBy {
	pcgb.fns = append(pcgb.fns, fns...)
	return pcgb
}

// Scan applies the selector query and scans the result into the given value.
func (pcgb *PersonalCollectionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcgb.build.ctx, "GroupBy")
	if err := pcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PersonalCollectionQuery, *PersonalCollectionGroupBy](ctx, pcgb.build, pcgb, pcgb.build.inters, v)
}

func (pcgb *PersonalCollectionGroupBy) sqlScan(ctx context.Context, root *PersonalCollectionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pcgb.fns))
	for _, fn := range pcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pcgb.flds)+len(pcgb.fns))
		for _, f := range *pcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PersonalCollectionSelect is the builder for selecting fields of PersonalCollection entities.
type PersonalCollectionSelect struct {
	*PersonalCollectionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pcs *PersonalCollectionSelect) Aggregate(fns ...AggregateFunc) *PersonalCollectionSelect {
	pcs.fns = append(pcs.fns, fns...)
	return pcs
}

// Scan applies the selector query and scans the result into the given value.
func (pcs *PersonalCollectionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcs.ctx, "Select")
	if err := pcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PersonalCollectionQuery, *PersonalCollectionSelect](ctx, pcs.PersonalCollectionQuery, pcs, pcs.inters, v)
}

func (pcs *PersonalCollectionSelect) sqlScan(ctx context.Context, root *PersonalCollectionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pcs.fns))
	for _, fn := range pcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
