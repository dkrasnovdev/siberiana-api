// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
)

// LocationQuery is the builder for querying Location entities.
type LocationQuery struct {
	config
	ctx                            *QueryContext
	order                          []location.OrderOption
	inters                         []Interceptor
	predicates                     []predicate.Location
	withArtifacts                  *ArtifactQuery
	withBooks                      *BookQuery
	withProtectedAreaPictures      *ProtectedAreaPictureQuery
	withCountry                    *CountryQuery
	withDistrict                   *DistrictQuery
	withSettlement                 *SettlementQuery
	withRegion                     *RegionQuery
	modifiers                      []func(*sql.Selector)
	loadTotal                      []func(context.Context, []*Location) error
	withNamedArtifacts             map[string]*ArtifactQuery
	withNamedBooks                 map[string]*BookQuery
	withNamedProtectedAreaPictures map[string]*ProtectedAreaPictureQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LocationQuery builder.
func (lq *LocationQuery) Where(ps ...predicate.Location) *LocationQuery {
	lq.predicates = append(lq.predicates, ps...)
	return lq
}

// Limit the number of records to be returned by this query.
func (lq *LocationQuery) Limit(limit int) *LocationQuery {
	lq.ctx.Limit = &limit
	return lq
}

// Offset to start from.
func (lq *LocationQuery) Offset(offset int) *LocationQuery {
	lq.ctx.Offset = &offset
	return lq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lq *LocationQuery) Unique(unique bool) *LocationQuery {
	lq.ctx.Unique = &unique
	return lq
}

// Order specifies how the records should be ordered.
func (lq *LocationQuery) Order(o ...location.OrderOption) *LocationQuery {
	lq.order = append(lq.order, o...)
	return lq
}

// QueryArtifacts chains the current query on the "artifacts" edge.
func (lq *LocationQuery) QueryArtifacts() *ArtifactQuery {
	query := (&ArtifactClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, location.ArtifactsTable, location.ArtifactsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBooks chains the current query on the "books" edge.
func (lq *LocationQuery) QueryBooks() *BookQuery {
	query := (&BookClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, location.BooksTable, location.BooksColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProtectedAreaPictures chains the current query on the "protected_area_pictures" edge.
func (lq *LocationQuery) QueryProtectedAreaPictures() *ProtectedAreaPictureQuery {
	query := (&ProtectedAreaPictureClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(protectedareapicture.Table, protectedareapicture.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, location.ProtectedAreaPicturesTable, location.ProtectedAreaPicturesColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountry chains the current query on the "country" edge.
func (lq *LocationQuery) QueryCountry() *CountryQuery {
	query := (&CountryClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, location.CountryTable, location.CountryColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDistrict chains the current query on the "district" edge.
func (lq *LocationQuery) QueryDistrict() *DistrictQuery {
	query := (&DistrictClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(district.Table, district.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, location.DistrictTable, location.DistrictColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySettlement chains the current query on the "settlement" edge.
func (lq *LocationQuery) QuerySettlement() *SettlementQuery {
	query := (&SettlementClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(settlement.Table, settlement.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, location.SettlementTable, location.SettlementColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRegion chains the current query on the "region" edge.
func (lq *LocationQuery) QueryRegion() *RegionQuery {
	query := (&RegionClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(region.Table, region.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, location.RegionTable, location.RegionColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Location entity from the query.
// Returns a *NotFoundError when no Location was found.
func (lq *LocationQuery) First(ctx context.Context) (*Location, error) {
	nodes, err := lq.Limit(1).All(setContextOp(ctx, lq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{location.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lq *LocationQuery) FirstX(ctx context.Context) *Location {
	node, err := lq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Location ID from the query.
// Returns a *NotFoundError when no Location ID was found.
func (lq *LocationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lq.Limit(1).IDs(setContextOp(ctx, lq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{location.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lq *LocationQuery) FirstIDX(ctx context.Context) int {
	id, err := lq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Location entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Location entity is found.
// Returns a *NotFoundError when no Location entities are found.
func (lq *LocationQuery) Only(ctx context.Context) (*Location, error) {
	nodes, err := lq.Limit(2).All(setContextOp(ctx, lq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{location.Label}
	default:
		return nil, &NotSingularError{location.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lq *LocationQuery) OnlyX(ctx context.Context) *Location {
	node, err := lq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Location ID in the query.
// Returns a *NotSingularError when more than one Location ID is found.
// Returns a *NotFoundError when no entities are found.
func (lq *LocationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lq.Limit(2).IDs(setContextOp(ctx, lq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{location.Label}
	default:
		err = &NotSingularError{location.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lq *LocationQuery) OnlyIDX(ctx context.Context) int {
	id, err := lq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Locations.
func (lq *LocationQuery) All(ctx context.Context) ([]*Location, error) {
	ctx = setContextOp(ctx, lq.ctx, "All")
	if err := lq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Location, *LocationQuery]()
	return withInterceptors[[]*Location](ctx, lq, qr, lq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lq *LocationQuery) AllX(ctx context.Context) []*Location {
	nodes, err := lq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Location IDs.
func (lq *LocationQuery) IDs(ctx context.Context) (ids []int, err error) {
	if lq.ctx.Unique == nil && lq.path != nil {
		lq.Unique(true)
	}
	ctx = setContextOp(ctx, lq.ctx, "IDs")
	if err = lq.Select(location.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lq *LocationQuery) IDsX(ctx context.Context) []int {
	ids, err := lq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lq *LocationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lq.ctx, "Count")
	if err := lq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lq, querierCount[*LocationQuery](), lq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lq *LocationQuery) CountX(ctx context.Context) int {
	count, err := lq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lq *LocationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lq.ctx, "Exist")
	switch _, err := lq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lq *LocationQuery) ExistX(ctx context.Context) bool {
	exist, err := lq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LocationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lq *LocationQuery) Clone() *LocationQuery {
	if lq == nil {
		return nil
	}
	return &LocationQuery{
		config:                    lq.config,
		ctx:                       lq.ctx.Clone(),
		order:                     append([]location.OrderOption{}, lq.order...),
		inters:                    append([]Interceptor{}, lq.inters...),
		predicates:                append([]predicate.Location{}, lq.predicates...),
		withArtifacts:             lq.withArtifacts.Clone(),
		withBooks:                 lq.withBooks.Clone(),
		withProtectedAreaPictures: lq.withProtectedAreaPictures.Clone(),
		withCountry:               lq.withCountry.Clone(),
		withDistrict:              lq.withDistrict.Clone(),
		withSettlement:            lq.withSettlement.Clone(),
		withRegion:                lq.withRegion.Clone(),
		// clone intermediate query.
		sql:  lq.sql.Clone(),
		path: lq.path,
	}
}

// WithArtifacts tells the query-builder to eager-load the nodes that are connected to
// the "artifacts" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithArtifacts(opts ...func(*ArtifactQuery)) *LocationQuery {
	query := (&ArtifactClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withArtifacts = query
	return lq
}

// WithBooks tells the query-builder to eager-load the nodes that are connected to
// the "books" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithBooks(opts ...func(*BookQuery)) *LocationQuery {
	query := (&BookClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withBooks = query
	return lq
}

// WithProtectedAreaPictures tells the query-builder to eager-load the nodes that are connected to
// the "protected_area_pictures" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithProtectedAreaPictures(opts ...func(*ProtectedAreaPictureQuery)) *LocationQuery {
	query := (&ProtectedAreaPictureClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withProtectedAreaPictures = query
	return lq
}

// WithCountry tells the query-builder to eager-load the nodes that are connected to
// the "country" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithCountry(opts ...func(*CountryQuery)) *LocationQuery {
	query := (&CountryClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withCountry = query
	return lq
}

// WithDistrict tells the query-builder to eager-load the nodes that are connected to
// the "district" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithDistrict(opts ...func(*DistrictQuery)) *LocationQuery {
	query := (&DistrictClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withDistrict = query
	return lq
}

// WithSettlement tells the query-builder to eager-load the nodes that are connected to
// the "settlement" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithSettlement(opts ...func(*SettlementQuery)) *LocationQuery {
	query := (&SettlementClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withSettlement = query
	return lq
}

// WithRegion tells the query-builder to eager-load the nodes that are connected to
// the "region" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithRegion(opts ...func(*RegionQuery)) *LocationQuery {
	query := (&RegionClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withRegion = query
	return lq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Location.Query().
//		GroupBy(location.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lq *LocationQuery) GroupBy(field string, fields ...string) *LocationGroupBy {
	lq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LocationGroupBy{build: lq}
	grbuild.flds = &lq.ctx.Fields
	grbuild.label = location.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Location.Query().
//		Select(location.FieldCreatedAt).
//		Scan(ctx, &v)
func (lq *LocationQuery) Select(fields ...string) *LocationSelect {
	lq.ctx.Fields = append(lq.ctx.Fields, fields...)
	sbuild := &LocationSelect{LocationQuery: lq}
	sbuild.label = location.Label
	sbuild.flds, sbuild.scan = &lq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LocationSelect configured with the given aggregations.
func (lq *LocationQuery) Aggregate(fns ...AggregateFunc) *LocationSelect {
	return lq.Select().Aggregate(fns...)
}

func (lq *LocationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lq); err != nil {
				return err
			}
		}
	}
	for _, f := range lq.ctx.Fields {
		if !location.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lq.path != nil {
		prev, err := lq.path(ctx)
		if err != nil {
			return err
		}
		lq.sql = prev
	}
	if location.Policy == nil {
		return errors.New("ent: uninitialized location.Policy (forgotten import ent/runtime?)")
	}
	if err := location.Policy.EvalQuery(ctx, lq); err != nil {
		return err
	}
	return nil
}

func (lq *LocationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Location, error) {
	var (
		nodes       = []*Location{}
		_spec       = lq.querySpec()
		loadedTypes = [7]bool{
			lq.withArtifacts != nil,
			lq.withBooks != nil,
			lq.withProtectedAreaPictures != nil,
			lq.withCountry != nil,
			lq.withDistrict != nil,
			lq.withSettlement != nil,
			lq.withRegion != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Location).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Location{config: lq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(lq.modifiers) > 0 {
		_spec.Modifiers = lq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lq.withArtifacts; query != nil {
		if err := lq.loadArtifacts(ctx, query, nodes,
			func(n *Location) { n.Edges.Artifacts = []*Artifact{} },
			func(n *Location, e *Artifact) { n.Edges.Artifacts = append(n.Edges.Artifacts, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withBooks; query != nil {
		if err := lq.loadBooks(ctx, query, nodes,
			func(n *Location) { n.Edges.Books = []*Book{} },
			func(n *Location, e *Book) { n.Edges.Books = append(n.Edges.Books, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withProtectedAreaPictures; query != nil {
		if err := lq.loadProtectedAreaPictures(ctx, query, nodes,
			func(n *Location) { n.Edges.ProtectedAreaPictures = []*ProtectedAreaPicture{} },
			func(n *Location, e *ProtectedAreaPicture) {
				n.Edges.ProtectedAreaPictures = append(n.Edges.ProtectedAreaPictures, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := lq.withCountry; query != nil {
		if err := lq.loadCountry(ctx, query, nodes, nil,
			func(n *Location, e *Country) { n.Edges.Country = e }); err != nil {
			return nil, err
		}
	}
	if query := lq.withDistrict; query != nil {
		if err := lq.loadDistrict(ctx, query, nodes, nil,
			func(n *Location, e *District) { n.Edges.District = e }); err != nil {
			return nil, err
		}
	}
	if query := lq.withSettlement; query != nil {
		if err := lq.loadSettlement(ctx, query, nodes, nil,
			func(n *Location, e *Settlement) { n.Edges.Settlement = e }); err != nil {
			return nil, err
		}
	}
	if query := lq.withRegion; query != nil {
		if err := lq.loadRegion(ctx, query, nodes, nil,
			func(n *Location, e *Region) { n.Edges.Region = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range lq.withNamedArtifacts {
		if err := lq.loadArtifacts(ctx, query, nodes,
			func(n *Location) { n.appendNamedArtifacts(name) },
			func(n *Location, e *Artifact) { n.appendNamedArtifacts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range lq.withNamedBooks {
		if err := lq.loadBooks(ctx, query, nodes,
			func(n *Location) { n.appendNamedBooks(name) },
			func(n *Location, e *Book) { n.appendNamedBooks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range lq.withNamedProtectedAreaPictures {
		if err := lq.loadProtectedAreaPictures(ctx, query, nodes,
			func(n *Location) { n.appendNamedProtectedAreaPictures(name) },
			func(n *Location, e *ProtectedAreaPicture) { n.appendNamedProtectedAreaPictures(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range lq.loadTotal {
		if err := lq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lq *LocationQuery) loadArtifacts(ctx context.Context, query *ArtifactQuery, nodes []*Location, init func(*Location), assign func(*Location, *Artifact)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Location)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Artifact(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(location.ArtifactsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.location_artifacts
		if fk == nil {
			return fmt.Errorf(`foreign-key "location_artifacts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "location_artifacts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LocationQuery) loadBooks(ctx context.Context, query *BookQuery, nodes []*Location, init func(*Location), assign func(*Location, *Book)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Location)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Book(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(location.BooksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.location_books
		if fk == nil {
			return fmt.Errorf(`foreign-key "location_books" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "location_books" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LocationQuery) loadProtectedAreaPictures(ctx context.Context, query *ProtectedAreaPictureQuery, nodes []*Location, init func(*Location), assign func(*Location, *ProtectedAreaPicture)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Location)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProtectedAreaPicture(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(location.ProtectedAreaPicturesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.location_protected_area_pictures
		if fk == nil {
			return fmt.Errorf(`foreign-key "location_protected_area_pictures" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "location_protected_area_pictures" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LocationQuery) loadCountry(ctx context.Context, query *CountryQuery, nodes []*Location, init func(*Location), assign func(*Location, *Country)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Location)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Country(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(location.CountryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.location_country
		if fk == nil {
			return fmt.Errorf(`foreign-key "location_country" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "location_country" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LocationQuery) loadDistrict(ctx context.Context, query *DistrictQuery, nodes []*Location, init func(*Location), assign func(*Location, *District)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Location)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.District(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(location.DistrictColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.location_district
		if fk == nil {
			return fmt.Errorf(`foreign-key "location_district" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "location_district" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LocationQuery) loadSettlement(ctx context.Context, query *SettlementQuery, nodes []*Location, init func(*Location), assign func(*Location, *Settlement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Location)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Settlement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(location.SettlementColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.location_settlement
		if fk == nil {
			return fmt.Errorf(`foreign-key "location_settlement" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "location_settlement" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LocationQuery) loadRegion(ctx context.Context, query *RegionQuery, nodes []*Location, init func(*Location), assign func(*Location, *Region)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Location)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Region(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(location.RegionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.location_region
		if fk == nil {
			return fmt.Errorf(`foreign-key "location_region" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "location_region" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (lq *LocationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lq.querySpec()
	if len(lq.modifiers) > 0 {
		_spec.Modifiers = lq.modifiers
	}
	_spec.Node.Columns = lq.ctx.Fields
	if len(lq.ctx.Fields) > 0 {
		_spec.Unique = lq.ctx.Unique != nil && *lq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lq.driver, _spec)
}

func (lq *LocationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(location.Table, location.Columns, sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt))
	_spec.From = lq.sql
	if unique := lq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lq.path != nil {
		_spec.Unique = true
	}
	if fields := lq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, location.FieldID)
		for i := range fields {
			if fields[i] != location.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := lq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lq *LocationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lq.driver.Dialect())
	t1 := builder.Table(location.Table)
	columns := lq.ctx.Fields
	if len(columns) == 0 {
		columns = location.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lq.sql != nil {
		selector = lq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lq.ctx.Unique != nil && *lq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lq.predicates {
		p(selector)
	}
	for _, p := range lq.order {
		p(selector)
	}
	if offset := lq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedArtifacts tells the query-builder to eager-load the nodes that are connected to the "artifacts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithNamedArtifacts(name string, opts ...func(*ArtifactQuery)) *LocationQuery {
	query := (&ArtifactClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lq.withNamedArtifacts == nil {
		lq.withNamedArtifacts = make(map[string]*ArtifactQuery)
	}
	lq.withNamedArtifacts[name] = query
	return lq
}

// WithNamedBooks tells the query-builder to eager-load the nodes that are connected to the "books"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithNamedBooks(name string, opts ...func(*BookQuery)) *LocationQuery {
	query := (&BookClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lq.withNamedBooks == nil {
		lq.withNamedBooks = make(map[string]*BookQuery)
	}
	lq.withNamedBooks[name] = query
	return lq
}

// WithNamedProtectedAreaPictures tells the query-builder to eager-load the nodes that are connected to the "protected_area_pictures"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithNamedProtectedAreaPictures(name string, opts ...func(*ProtectedAreaPictureQuery)) *LocationQuery {
	query := (&ProtectedAreaPictureClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lq.withNamedProtectedAreaPictures == nil {
		lq.withNamedProtectedAreaPictures = make(map[string]*ProtectedAreaPictureQuery)
	}
	lq.withNamedProtectedAreaPictures[name] = query
	return lq
}

// LocationGroupBy is the group-by builder for Location entities.
type LocationGroupBy struct {
	selector
	build *LocationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lgb *LocationGroupBy) Aggregate(fns ...AggregateFunc) *LocationGroupBy {
	lgb.fns = append(lgb.fns, fns...)
	return lgb
}

// Scan applies the selector query and scans the result into the given value.
func (lgb *LocationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lgb.build.ctx, "GroupBy")
	if err := lgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LocationQuery, *LocationGroupBy](ctx, lgb.build, lgb, lgb.build.inters, v)
}

func (lgb *LocationGroupBy) sqlScan(ctx context.Context, root *LocationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lgb.fns))
	for _, fn := range lgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lgb.flds)+len(lgb.fns))
		for _, f := range *lgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LocationSelect is the builder for selecting fields of Location entities.
type LocationSelect struct {
	*LocationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ls *LocationSelect) Aggregate(fns ...AggregateFunc) *LocationSelect {
	ls.fns = append(ls.fns, fns...)
	return ls
}

// Scan applies the selector query and scans the result into the given value.
func (ls *LocationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ls.ctx, "Select")
	if err := ls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LocationQuery, *LocationSelect](ctx, ls.LocationQuery, ls, ls.inters, v)
}

func (ls *LocationSelect) sqlScan(ctx context.Context, root *LocationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ls.fns))
	for _, fn := range ls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
