// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/periodical"
)

// PeriodicalCreate is the builder for creating a Periodical entity.
type PeriodicalCreate struct {
	config
	mutation *PeriodicalMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PeriodicalCreate) SetCreatedAt(t time.Time) *PeriodicalCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PeriodicalCreate) SetNillableCreatedAt(t *time.Time) *PeriodicalCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *PeriodicalCreate) SetCreatedBy(s string) *PeriodicalCreate {
	pc.mutation.SetCreatedBy(s)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *PeriodicalCreate) SetNillableCreatedBy(s *string) *PeriodicalCreate {
	if s != nil {
		pc.SetCreatedBy(*s)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PeriodicalCreate) SetUpdatedAt(t time.Time) *PeriodicalCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PeriodicalCreate) SetNillableUpdatedAt(t *time.Time) *PeriodicalCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *PeriodicalCreate) SetUpdatedBy(s string) *PeriodicalCreate {
	pc.mutation.SetUpdatedBy(s)
	return pc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pc *PeriodicalCreate) SetNillableUpdatedBy(s *string) *PeriodicalCreate {
	if s != nil {
		pc.SetUpdatedBy(*s)
	}
	return pc
}

// SetDisplayName sets the "display_name" field.
func (pc *PeriodicalCreate) SetDisplayName(s string) *PeriodicalCreate {
	pc.mutation.SetDisplayName(s)
	return pc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pc *PeriodicalCreate) SetNillableDisplayName(s *string) *PeriodicalCreate {
	if s != nil {
		pc.SetDisplayName(*s)
	}
	return pc
}

// SetAbbreviation sets the "abbreviation" field.
func (pc *PeriodicalCreate) SetAbbreviation(s string) *PeriodicalCreate {
	pc.mutation.SetAbbreviation(s)
	return pc
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (pc *PeriodicalCreate) SetNillableAbbreviation(s *string) *PeriodicalCreate {
	if s != nil {
		pc.SetAbbreviation(*s)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *PeriodicalCreate) SetDescription(s string) *PeriodicalCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PeriodicalCreate) SetNillableDescription(s *string) *PeriodicalCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetExternalLink sets the "external_link" field.
func (pc *PeriodicalCreate) SetExternalLink(s string) *PeriodicalCreate {
	pc.mutation.SetExternalLink(s)
	return pc
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (pc *PeriodicalCreate) SetNillableExternalLink(s *string) *PeriodicalCreate {
	if s != nil {
		pc.SetExternalLink(*s)
	}
	return pc
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (pc *PeriodicalCreate) AddBookIDs(ids ...int) *PeriodicalCreate {
	pc.mutation.AddBookIDs(ids...)
	return pc
}

// AddBooks adds the "books" edges to the Book entity.
func (pc *PeriodicalCreate) AddBooks(b ...*Book) *PeriodicalCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pc.AddBookIDs(ids...)
}

// Mutation returns the PeriodicalMutation object of the builder.
func (pc *PeriodicalCreate) Mutation() *PeriodicalMutation {
	return pc.mutation
}

// Save creates the Periodical in the database.
func (pc *PeriodicalCreate) Save(ctx context.Context) (*Periodical, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PeriodicalCreate) SaveX(ctx context.Context) *Periodical {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PeriodicalCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PeriodicalCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PeriodicalCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if periodical.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized periodical.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := periodical.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if periodical.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized periodical.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := periodical.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PeriodicalCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Periodical.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Periodical.updated_at"`)}
	}
	return nil
}

func (pc *PeriodicalCreate) sqlSave(ctx context.Context) (*Periodical, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PeriodicalCreate) createSpec() (*Periodical, *sqlgraph.CreateSpec) {
	var (
		_node = &Periodical{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(periodical.Table, sqlgraph.NewFieldSpec(periodical.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(periodical.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(periodical.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(periodical.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(periodical.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.DisplayName(); ok {
		_spec.SetField(periodical.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := pc.mutation.Abbreviation(); ok {
		_spec.SetField(periodical.FieldAbbreviation, field.TypeString, value)
		_node.Abbreviation = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(periodical.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.ExternalLink(); ok {
		_spec.SetField(periodical.FieldExternalLink, field.TypeString, value)
		_node.ExternalLink = value
	}
	if nodes := pc.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   periodical.BooksTable,
			Columns: []string{periodical.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PeriodicalCreateBulk is the builder for creating many Periodical entities in bulk.
type PeriodicalCreateBulk struct {
	config
	err      error
	builders []*PeriodicalCreate
}

// Save creates the Periodical entities in the database.
func (pcb *PeriodicalCreateBulk) Save(ctx context.Context) ([]*Periodical, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Periodical, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PeriodicalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PeriodicalCreateBulk) SaveX(ctx context.Context) []*Periodical {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PeriodicalCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PeriodicalCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
