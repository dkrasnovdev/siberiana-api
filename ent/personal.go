// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/personal"
)

// Personal is the model entity for the Personal schema.
type Personal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID string `json:"owner_id,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonalQuery when eager-loading is set.
	Edges        PersonalEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PersonalEdges holds the relations/edges for other nodes in the graph.
type PersonalEdges struct {
	// Artifacts holds the value of the artifacts edge.
	Artifacts []*Artifact `json:"artifacts,omitempty"`
	// Petroglyphs holds the value of the petroglyphs edge.
	Petroglyphs []*Petroglyph `json:"petroglyphs,omitempty"`
	// Books holds the value of the books edge.
	Books []*Book `json:"books,omitempty"`
	// ProtectedAreaPictures holds the value of the protected_area_pictures edge.
	ProtectedAreaPictures []*ProtectedAreaPicture `json:"protected_area_pictures,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedArtifacts             map[string][]*Artifact
	namedPetroglyphs           map[string][]*Petroglyph
	namedBooks                 map[string][]*Book
	namedProtectedAreaPictures map[string][]*ProtectedAreaPicture
}

// ArtifactsOrErr returns the Artifacts value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalEdges) ArtifactsOrErr() ([]*Artifact, error) {
	if e.loadedTypes[0] {
		return e.Artifacts, nil
	}
	return nil, &NotLoadedError{edge: "artifacts"}
}

// PetroglyphsOrErr returns the Petroglyphs value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalEdges) PetroglyphsOrErr() ([]*Petroglyph, error) {
	if e.loadedTypes[1] {
		return e.Petroglyphs, nil
	}
	return nil, &NotLoadedError{edge: "petroglyphs"}
}

// BooksOrErr returns the Books value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalEdges) BooksOrErr() ([]*Book, error) {
	if e.loadedTypes[2] {
		return e.Books, nil
	}
	return nil, &NotLoadedError{edge: "books"}
}

// ProtectedAreaPicturesOrErr returns the ProtectedAreaPictures value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalEdges) ProtectedAreaPicturesOrErr() ([]*ProtectedAreaPicture, error) {
	if e.loadedTypes[3] {
		return e.ProtectedAreaPictures, nil
	}
	return nil, &NotLoadedError{edge: "protected_area_pictures"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Personal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case personal.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case personal.FieldID:
			values[i] = new(sql.NullInt64)
		case personal.FieldCreatedBy, personal.FieldUpdatedBy, personal.FieldOwnerID, personal.FieldDisplayName:
			values[i] = new(sql.NullString)
		case personal.FieldCreatedAt, personal.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Personal fields.
func (pe *Personal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case personal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pe.CreatedAt = value.Time
			}
		case personal.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pe.CreatedBy = value.String
			}
		case personal.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pe.UpdatedAt = value.Time
			}
		case personal.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pe.UpdatedBy = value.String
			}
		case personal.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				pe.OwnerID = value.String
			}
		case personal.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				pe.DisplayName = value.String
			}
		case personal.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				pe.IsPublic = value.Bool
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Personal.
// This includes values selected through modifiers, order, etc.
func (pe *Personal) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryArtifacts queries the "artifacts" edge of the Personal entity.
func (pe *Personal) QueryArtifacts() *ArtifactQuery {
	return NewPersonalClient(pe.config).QueryArtifacts(pe)
}

// QueryPetroglyphs queries the "petroglyphs" edge of the Personal entity.
func (pe *Personal) QueryPetroglyphs() *PetroglyphQuery {
	return NewPersonalClient(pe.config).QueryPetroglyphs(pe)
}

// QueryBooks queries the "books" edge of the Personal entity.
func (pe *Personal) QueryBooks() *BookQuery {
	return NewPersonalClient(pe.config).QueryBooks(pe)
}

// QueryProtectedAreaPictures queries the "protected_area_pictures" edge of the Personal entity.
func (pe *Personal) QueryProtectedAreaPictures() *ProtectedAreaPictureQuery {
	return NewPersonalClient(pe.config).QueryProtectedAreaPictures(pe)
}

// Update returns a builder for updating this Personal.
// Note that you need to call Personal.Unwrap() before calling this method if this Personal
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Personal) Update() *PersonalUpdateOne {
	return NewPersonalClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Personal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Personal) Unwrap() *Personal {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Personal is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Personal) String() string {
	var builder strings.Builder
	builder.WriteString("Personal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pe.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pe.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pe.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(pe.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(pe.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", pe.IsPublic))
	builder.WriteByte(')')
	return builder.String()
}

// NamedArtifacts returns the Artifacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pe *Personal) NamedArtifacts(name string) ([]*Artifact, error) {
	if pe.Edges.namedArtifacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pe.Edges.namedArtifacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pe *Personal) appendNamedArtifacts(name string, edges ...*Artifact) {
	if pe.Edges.namedArtifacts == nil {
		pe.Edges.namedArtifacts = make(map[string][]*Artifact)
	}
	if len(edges) == 0 {
		pe.Edges.namedArtifacts[name] = []*Artifact{}
	} else {
		pe.Edges.namedArtifacts[name] = append(pe.Edges.namedArtifacts[name], edges...)
	}
}

// NamedPetroglyphs returns the Petroglyphs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pe *Personal) NamedPetroglyphs(name string) ([]*Petroglyph, error) {
	if pe.Edges.namedPetroglyphs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pe.Edges.namedPetroglyphs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pe *Personal) appendNamedPetroglyphs(name string, edges ...*Petroglyph) {
	if pe.Edges.namedPetroglyphs == nil {
		pe.Edges.namedPetroglyphs = make(map[string][]*Petroglyph)
	}
	if len(edges) == 0 {
		pe.Edges.namedPetroglyphs[name] = []*Petroglyph{}
	} else {
		pe.Edges.namedPetroglyphs[name] = append(pe.Edges.namedPetroglyphs[name], edges...)
	}
}

// NamedBooks returns the Books named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pe *Personal) NamedBooks(name string) ([]*Book, error) {
	if pe.Edges.namedBooks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pe.Edges.namedBooks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pe *Personal) appendNamedBooks(name string, edges ...*Book) {
	if pe.Edges.namedBooks == nil {
		pe.Edges.namedBooks = make(map[string][]*Book)
	}
	if len(edges) == 0 {
		pe.Edges.namedBooks[name] = []*Book{}
	} else {
		pe.Edges.namedBooks[name] = append(pe.Edges.namedBooks[name], edges...)
	}
}

// NamedProtectedAreaPictures returns the ProtectedAreaPictures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pe *Personal) NamedProtectedAreaPictures(name string) ([]*ProtectedAreaPicture, error) {
	if pe.Edges.namedProtectedAreaPictures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pe.Edges.namedProtectedAreaPictures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pe *Personal) appendNamedProtectedAreaPictures(name string, edges ...*ProtectedAreaPicture) {
	if pe.Edges.namedProtectedAreaPictures == nil {
		pe.Edges.namedProtectedAreaPictures = make(map[string][]*ProtectedAreaPicture)
	}
	if len(edges) == 0 {
		pe.Edges.namedProtectedAreaPictures[name] = []*ProtectedAreaPicture{}
	} else {
		pe.Edges.namedProtectedAreaPictures[name] = append(pe.Edges.namedProtectedAreaPictures[name], edges...)
	}
}

// Personals is a parsable slice of Personal.
type Personals []*Personal
