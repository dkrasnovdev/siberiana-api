// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/petroglyph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
)

// RegionUpdate is the builder for updating Region entities.
type RegionUpdate struct {
	config
	hooks    []Hook
	mutation *RegionMutation
}

// Where appends a list predicates to the RegionUpdate builder.
func (ru *RegionUpdate) Where(ps ...predicate.Region) *RegionUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetCreatedBy sets the "created_by" field.
func (ru *RegionUpdate) SetCreatedBy(s string) *RegionUpdate {
	ru.mutation.SetCreatedBy(s)
	return ru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableCreatedBy(s *string) *RegionUpdate {
	if s != nil {
		ru.SetCreatedBy(*s)
	}
	return ru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ru *RegionUpdate) ClearCreatedBy() *RegionUpdate {
	ru.mutation.ClearCreatedBy()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RegionUpdate) SetUpdatedAt(t time.Time) *RegionUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetUpdatedBy sets the "updated_by" field.
func (ru *RegionUpdate) SetUpdatedBy(s string) *RegionUpdate {
	ru.mutation.SetUpdatedBy(s)
	return ru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableUpdatedBy(s *string) *RegionUpdate {
	if s != nil {
		ru.SetUpdatedBy(*s)
	}
	return ru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ru *RegionUpdate) ClearUpdatedBy() *RegionUpdate {
	ru.mutation.ClearUpdatedBy()
	return ru
}

// SetDisplayName sets the "display_name" field.
func (ru *RegionUpdate) SetDisplayName(s string) *RegionUpdate {
	ru.mutation.SetDisplayName(s)
	return ru
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableDisplayName(s *string) *RegionUpdate {
	if s != nil {
		ru.SetDisplayName(*s)
	}
	return ru
}

// ClearDisplayName clears the value of the "display_name" field.
func (ru *RegionUpdate) ClearDisplayName() *RegionUpdate {
	ru.mutation.ClearDisplayName()
	return ru
}

// SetAbbreviation sets the "abbreviation" field.
func (ru *RegionUpdate) SetAbbreviation(s string) *RegionUpdate {
	ru.mutation.SetAbbreviation(s)
	return ru
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableAbbreviation(s *string) *RegionUpdate {
	if s != nil {
		ru.SetAbbreviation(*s)
	}
	return ru
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (ru *RegionUpdate) ClearAbbreviation() *RegionUpdate {
	ru.mutation.ClearAbbreviation()
	return ru
}

// SetDescription sets the "description" field.
func (ru *RegionUpdate) SetDescription(s string) *RegionUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableDescription(s *string) *RegionUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RegionUpdate) ClearDescription() *RegionUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetExternalLink sets the "external_link" field.
func (ru *RegionUpdate) SetExternalLink(s string) *RegionUpdate {
	ru.mutation.SetExternalLink(s)
	return ru
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableExternalLink(s *string) *RegionUpdate {
	if s != nil {
		ru.SetExternalLink(*s)
	}
	return ru
}

// ClearExternalLink clears the value of the "external_link" field.
func (ru *RegionUpdate) ClearExternalLink() *RegionUpdate {
	ru.mutation.ClearExternalLink()
	return ru
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (ru *RegionUpdate) AddArtIDs(ids ...int) *RegionUpdate {
	ru.mutation.AddArtIDs(ids...)
	return ru
}

// AddArt adds the "art" edges to the Art entity.
func (ru *RegionUpdate) AddArt(a ...*Art) *RegionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (ru *RegionUpdate) AddArtifactIDs(ids ...int) *RegionUpdate {
	ru.mutation.AddArtifactIDs(ids...)
	return ru
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (ru *RegionUpdate) AddArtifacts(a ...*Artifact) *RegionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (ru *RegionUpdate) AddBookIDs(ids ...int) *RegionUpdate {
	ru.mutation.AddBookIDs(ids...)
	return ru
}

// AddBooks adds the "books" edges to the Book entity.
func (ru *RegionUpdate) AddBooks(b ...*Book) *RegionUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.AddBookIDs(ids...)
}

// AddPetroglyphIDs adds the "petroglyphs" edge to the Petroglyph entity by IDs.
func (ru *RegionUpdate) AddPetroglyphIDs(ids ...int) *RegionUpdate {
	ru.mutation.AddPetroglyphIDs(ids...)
	return ru
}

// AddPetroglyphs adds the "petroglyphs" edges to the Petroglyph entity.
func (ru *RegionUpdate) AddPetroglyphs(p ...*Petroglyph) *RegionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddPetroglyphIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (ru *RegionUpdate) AddProtectedAreaPictureIDs(ids ...int) *RegionUpdate {
	ru.mutation.AddProtectedAreaPictureIDs(ids...)
	return ru
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (ru *RegionUpdate) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *RegionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddProtectedAreaPictureIDs(ids...)
}

// AddDistrictIDs adds the "districts" edge to the District entity by IDs.
func (ru *RegionUpdate) AddDistrictIDs(ids ...int) *RegionUpdate {
	ru.mutation.AddDistrictIDs(ids...)
	return ru
}

// AddDistricts adds the "districts" edges to the District entity.
func (ru *RegionUpdate) AddDistricts(d ...*District) *RegionUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ru.AddDistrictIDs(ids...)
}

// AddSettlementIDs adds the "settlements" edge to the Settlement entity by IDs.
func (ru *RegionUpdate) AddSettlementIDs(ids ...int) *RegionUpdate {
	ru.mutation.AddSettlementIDs(ids...)
	return ru
}

// AddSettlements adds the "settlements" edges to the Settlement entity.
func (ru *RegionUpdate) AddSettlements(s ...*Settlement) *RegionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddSettlementIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (ru *RegionUpdate) AddLocationIDs(ids ...int) *RegionUpdate {
	ru.mutation.AddLocationIDs(ids...)
	return ru
}

// AddLocations adds the "locations" edges to the Location entity.
func (ru *RegionUpdate) AddLocations(l ...*Location) *RegionUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ru.AddLocationIDs(ids...)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (ru *RegionUpdate) SetCountryID(id int) *RegionUpdate {
	ru.mutation.SetCountryID(id)
	return ru
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (ru *RegionUpdate) SetNillableCountryID(id *int) *RegionUpdate {
	if id != nil {
		ru = ru.SetCountryID(*id)
	}
	return ru
}

// SetCountry sets the "country" edge to the Country entity.
func (ru *RegionUpdate) SetCountry(c *Country) *RegionUpdate {
	return ru.SetCountryID(c.ID)
}

// Mutation returns the RegionMutation object of the builder.
func (ru *RegionUpdate) Mutation() *RegionMutation {
	return ru.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (ru *RegionUpdate) ClearArt() *RegionUpdate {
	ru.mutation.ClearArt()
	return ru
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (ru *RegionUpdate) RemoveArtIDs(ids ...int) *RegionUpdate {
	ru.mutation.RemoveArtIDs(ids...)
	return ru
}

// RemoveArt removes "art" edges to Art entities.
func (ru *RegionUpdate) RemoveArt(a ...*Art) *RegionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (ru *RegionUpdate) ClearArtifacts() *RegionUpdate {
	ru.mutation.ClearArtifacts()
	return ru
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (ru *RegionUpdate) RemoveArtifactIDs(ids ...int) *RegionUpdate {
	ru.mutation.RemoveArtifactIDs(ids...)
	return ru
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (ru *RegionUpdate) RemoveArtifacts(a ...*Artifact) *RegionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveArtifactIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (ru *RegionUpdate) ClearBooks() *RegionUpdate {
	ru.mutation.ClearBooks()
	return ru
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (ru *RegionUpdate) RemoveBookIDs(ids ...int) *RegionUpdate {
	ru.mutation.RemoveBookIDs(ids...)
	return ru
}

// RemoveBooks removes "books" edges to Book entities.
func (ru *RegionUpdate) RemoveBooks(b ...*Book) *RegionUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.RemoveBookIDs(ids...)
}

// ClearPetroglyphs clears all "petroglyphs" edges to the Petroglyph entity.
func (ru *RegionUpdate) ClearPetroglyphs() *RegionUpdate {
	ru.mutation.ClearPetroglyphs()
	return ru
}

// RemovePetroglyphIDs removes the "petroglyphs" edge to Petroglyph entities by IDs.
func (ru *RegionUpdate) RemovePetroglyphIDs(ids ...int) *RegionUpdate {
	ru.mutation.RemovePetroglyphIDs(ids...)
	return ru
}

// RemovePetroglyphs removes "petroglyphs" edges to Petroglyph entities.
func (ru *RegionUpdate) RemovePetroglyphs(p ...*Petroglyph) *RegionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemovePetroglyphIDs(ids...)
}

// ClearProtectedAreaPictures clears all "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (ru *RegionUpdate) ClearProtectedAreaPictures() *RegionUpdate {
	ru.mutation.ClearProtectedAreaPictures()
	return ru
}

// RemoveProtectedAreaPictureIDs removes the "protected_area_pictures" edge to ProtectedAreaPicture entities by IDs.
func (ru *RegionUpdate) RemoveProtectedAreaPictureIDs(ids ...int) *RegionUpdate {
	ru.mutation.RemoveProtectedAreaPictureIDs(ids...)
	return ru
}

// RemoveProtectedAreaPictures removes "protected_area_pictures" edges to ProtectedAreaPicture entities.
func (ru *RegionUpdate) RemoveProtectedAreaPictures(p ...*ProtectedAreaPicture) *RegionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemoveProtectedAreaPictureIDs(ids...)
}

// ClearDistricts clears all "districts" edges to the District entity.
func (ru *RegionUpdate) ClearDistricts() *RegionUpdate {
	ru.mutation.ClearDistricts()
	return ru
}

// RemoveDistrictIDs removes the "districts" edge to District entities by IDs.
func (ru *RegionUpdate) RemoveDistrictIDs(ids ...int) *RegionUpdate {
	ru.mutation.RemoveDistrictIDs(ids...)
	return ru
}

// RemoveDistricts removes "districts" edges to District entities.
func (ru *RegionUpdate) RemoveDistricts(d ...*District) *RegionUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ru.RemoveDistrictIDs(ids...)
}

// ClearSettlements clears all "settlements" edges to the Settlement entity.
func (ru *RegionUpdate) ClearSettlements() *RegionUpdate {
	ru.mutation.ClearSettlements()
	return ru
}

// RemoveSettlementIDs removes the "settlements" edge to Settlement entities by IDs.
func (ru *RegionUpdate) RemoveSettlementIDs(ids ...int) *RegionUpdate {
	ru.mutation.RemoveSettlementIDs(ids...)
	return ru
}

// RemoveSettlements removes "settlements" edges to Settlement entities.
func (ru *RegionUpdate) RemoveSettlements(s ...*Settlement) *RegionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveSettlementIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Location entity.
func (ru *RegionUpdate) ClearLocations() *RegionUpdate {
	ru.mutation.ClearLocations()
	return ru
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (ru *RegionUpdate) RemoveLocationIDs(ids ...int) *RegionUpdate {
	ru.mutation.RemoveLocationIDs(ids...)
	return ru
}

// RemoveLocations removes "locations" edges to Location entities.
func (ru *RegionUpdate) RemoveLocations(l ...*Location) *RegionUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ru.RemoveLocationIDs(ids...)
}

// ClearCountry clears the "country" edge to the Country entity.
func (ru *RegionUpdate) ClearCountry() *RegionUpdate {
	ru.mutation.ClearCountry()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RegionUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RegionUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RegionUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RegionUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RegionUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if region.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized region.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := region.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ru *RegionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(region.Table, region.Columns, sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.CreatedBy(); ok {
		_spec.SetField(region.FieldCreatedBy, field.TypeString, value)
	}
	if ru.mutation.CreatedByCleared() {
		_spec.ClearField(region.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(region.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedBy(); ok {
		_spec.SetField(region.FieldUpdatedBy, field.TypeString, value)
	}
	if ru.mutation.UpdatedByCleared() {
		_spec.ClearField(region.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.DisplayName(); ok {
		_spec.SetField(region.FieldDisplayName, field.TypeString, value)
	}
	if ru.mutation.DisplayNameCleared() {
		_spec.ClearField(region.FieldDisplayName, field.TypeString)
	}
	if value, ok := ru.mutation.Abbreviation(); ok {
		_spec.SetField(region.FieldAbbreviation, field.TypeString, value)
	}
	if ru.mutation.AbbreviationCleared() {
		_spec.ClearField(region.FieldAbbreviation, field.TypeString)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(region.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(region.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.ExternalLink(); ok {
		_spec.SetField(region.FieldExternalLink, field.TypeString, value)
	}
	if ru.mutation.ExternalLinkCleared() {
		_spec.ClearField(region.FieldExternalLink, field.TypeString)
	}
	if ru.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtTable,
			Columns: []string{region.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedArtIDs(); len(nodes) > 0 && !ru.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtTable,
			Columns: []string{region.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtTable,
			Columns: []string{region.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtifactsTable,
			Columns: []string{region.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !ru.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtifactsTable,
			Columns: []string{region.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtifactsTable,
			Columns: []string{region.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.BooksTable,
			Columns: []string{region.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedBooksIDs(); len(nodes) > 0 && !ru.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.BooksTable,
			Columns: []string{region.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.BooksTable,
			Columns: []string{region.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.PetroglyphsTable,
			Columns: []string{region.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedPetroglyphsIDs(); len(nodes) > 0 && !ru.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.PetroglyphsTable,
			Columns: []string{region.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PetroglyphsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.PetroglyphsTable,
			Columns: []string{region.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ProtectedAreaPicturesTable,
			Columns: []string{region.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedProtectedAreaPicturesIDs(); len(nodes) > 0 && !ru.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ProtectedAreaPicturesTable,
			Columns: []string{region.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ProtectedAreaPicturesTable,
			Columns: []string{region.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.DistrictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.DistrictsTable,
			Columns: []string{region.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedDistrictsIDs(); len(nodes) > 0 && !ru.mutation.DistrictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.DistrictsTable,
			Columns: []string{region.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.DistrictsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.DistrictsTable,
			Columns: []string{region.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SettlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.SettlementsTable,
			Columns: []string{region.SettlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedSettlementsIDs(); len(nodes) > 0 && !ru.mutation.SettlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.SettlementsTable,
			Columns: []string{region.SettlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SettlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.SettlementsTable,
			Columns: []string{region.SettlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   region.LocationsTable,
			Columns: []string{region.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !ru.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   region.LocationsTable,
			Columns: []string{region.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   region.LocationsTable,
			Columns: []string{region.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{region.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RegionUpdateOne is the builder for updating a single Region entity.
type RegionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RegionMutation
}

// SetCreatedBy sets the "created_by" field.
func (ruo *RegionUpdateOne) SetCreatedBy(s string) *RegionUpdateOne {
	ruo.mutation.SetCreatedBy(s)
	return ruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableCreatedBy(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetCreatedBy(*s)
	}
	return ruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ruo *RegionUpdateOne) ClearCreatedBy() *RegionUpdateOne {
	ruo.mutation.ClearCreatedBy()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RegionUpdateOne) SetUpdatedAt(t time.Time) *RegionUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetUpdatedBy sets the "updated_by" field.
func (ruo *RegionUpdateOne) SetUpdatedBy(s string) *RegionUpdateOne {
	ruo.mutation.SetUpdatedBy(s)
	return ruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableUpdatedBy(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetUpdatedBy(*s)
	}
	return ruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ruo *RegionUpdateOne) ClearUpdatedBy() *RegionUpdateOne {
	ruo.mutation.ClearUpdatedBy()
	return ruo
}

// SetDisplayName sets the "display_name" field.
func (ruo *RegionUpdateOne) SetDisplayName(s string) *RegionUpdateOne {
	ruo.mutation.SetDisplayName(s)
	return ruo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableDisplayName(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetDisplayName(*s)
	}
	return ruo
}

// ClearDisplayName clears the value of the "display_name" field.
func (ruo *RegionUpdateOne) ClearDisplayName() *RegionUpdateOne {
	ruo.mutation.ClearDisplayName()
	return ruo
}

// SetAbbreviation sets the "abbreviation" field.
func (ruo *RegionUpdateOne) SetAbbreviation(s string) *RegionUpdateOne {
	ruo.mutation.SetAbbreviation(s)
	return ruo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableAbbreviation(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetAbbreviation(*s)
	}
	return ruo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (ruo *RegionUpdateOne) ClearAbbreviation() *RegionUpdateOne {
	ruo.mutation.ClearAbbreviation()
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RegionUpdateOne) SetDescription(s string) *RegionUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableDescription(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RegionUpdateOne) ClearDescription() *RegionUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetExternalLink sets the "external_link" field.
func (ruo *RegionUpdateOne) SetExternalLink(s string) *RegionUpdateOne {
	ruo.mutation.SetExternalLink(s)
	return ruo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableExternalLink(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetExternalLink(*s)
	}
	return ruo
}

// ClearExternalLink clears the value of the "external_link" field.
func (ruo *RegionUpdateOne) ClearExternalLink() *RegionUpdateOne {
	ruo.mutation.ClearExternalLink()
	return ruo
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (ruo *RegionUpdateOne) AddArtIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.AddArtIDs(ids...)
	return ruo
}

// AddArt adds the "art" edges to the Art entity.
func (ruo *RegionUpdateOne) AddArt(a ...*Art) *RegionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (ruo *RegionUpdateOne) AddArtifactIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.AddArtifactIDs(ids...)
	return ruo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (ruo *RegionUpdateOne) AddArtifacts(a ...*Artifact) *RegionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (ruo *RegionUpdateOne) AddBookIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.AddBookIDs(ids...)
	return ruo
}

// AddBooks adds the "books" edges to the Book entity.
func (ruo *RegionUpdateOne) AddBooks(b ...*Book) *RegionUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.AddBookIDs(ids...)
}

// AddPetroglyphIDs adds the "petroglyphs" edge to the Petroglyph entity by IDs.
func (ruo *RegionUpdateOne) AddPetroglyphIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.AddPetroglyphIDs(ids...)
	return ruo
}

// AddPetroglyphs adds the "petroglyphs" edges to the Petroglyph entity.
func (ruo *RegionUpdateOne) AddPetroglyphs(p ...*Petroglyph) *RegionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddPetroglyphIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (ruo *RegionUpdateOne) AddProtectedAreaPictureIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.AddProtectedAreaPictureIDs(ids...)
	return ruo
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (ruo *RegionUpdateOne) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *RegionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddProtectedAreaPictureIDs(ids...)
}

// AddDistrictIDs adds the "districts" edge to the District entity by IDs.
func (ruo *RegionUpdateOne) AddDistrictIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.AddDistrictIDs(ids...)
	return ruo
}

// AddDistricts adds the "districts" edges to the District entity.
func (ruo *RegionUpdateOne) AddDistricts(d ...*District) *RegionUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ruo.AddDistrictIDs(ids...)
}

// AddSettlementIDs adds the "settlements" edge to the Settlement entity by IDs.
func (ruo *RegionUpdateOne) AddSettlementIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.AddSettlementIDs(ids...)
	return ruo
}

// AddSettlements adds the "settlements" edges to the Settlement entity.
func (ruo *RegionUpdateOne) AddSettlements(s ...*Settlement) *RegionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddSettlementIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (ruo *RegionUpdateOne) AddLocationIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.AddLocationIDs(ids...)
	return ruo
}

// AddLocations adds the "locations" edges to the Location entity.
func (ruo *RegionUpdateOne) AddLocations(l ...*Location) *RegionUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ruo.AddLocationIDs(ids...)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (ruo *RegionUpdateOne) SetCountryID(id int) *RegionUpdateOne {
	ruo.mutation.SetCountryID(id)
	return ruo
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableCountryID(id *int) *RegionUpdateOne {
	if id != nil {
		ruo = ruo.SetCountryID(*id)
	}
	return ruo
}

// SetCountry sets the "country" edge to the Country entity.
func (ruo *RegionUpdateOne) SetCountry(c *Country) *RegionUpdateOne {
	return ruo.SetCountryID(c.ID)
}

// Mutation returns the RegionMutation object of the builder.
func (ruo *RegionUpdateOne) Mutation() *RegionMutation {
	return ruo.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (ruo *RegionUpdateOne) ClearArt() *RegionUpdateOne {
	ruo.mutation.ClearArt()
	return ruo
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (ruo *RegionUpdateOne) RemoveArtIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.RemoveArtIDs(ids...)
	return ruo
}

// RemoveArt removes "art" edges to Art entities.
func (ruo *RegionUpdateOne) RemoveArt(a ...*Art) *RegionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (ruo *RegionUpdateOne) ClearArtifacts() *RegionUpdateOne {
	ruo.mutation.ClearArtifacts()
	return ruo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (ruo *RegionUpdateOne) RemoveArtifactIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.RemoveArtifactIDs(ids...)
	return ruo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (ruo *RegionUpdateOne) RemoveArtifacts(a ...*Artifact) *RegionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveArtifactIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (ruo *RegionUpdateOne) ClearBooks() *RegionUpdateOne {
	ruo.mutation.ClearBooks()
	return ruo
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (ruo *RegionUpdateOne) RemoveBookIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.RemoveBookIDs(ids...)
	return ruo
}

// RemoveBooks removes "books" edges to Book entities.
func (ruo *RegionUpdateOne) RemoveBooks(b ...*Book) *RegionUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.RemoveBookIDs(ids...)
}

// ClearPetroglyphs clears all "petroglyphs" edges to the Petroglyph entity.
func (ruo *RegionUpdateOne) ClearPetroglyphs() *RegionUpdateOne {
	ruo.mutation.ClearPetroglyphs()
	return ruo
}

// RemovePetroglyphIDs removes the "petroglyphs" edge to Petroglyph entities by IDs.
func (ruo *RegionUpdateOne) RemovePetroglyphIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.RemovePetroglyphIDs(ids...)
	return ruo
}

// RemovePetroglyphs removes "petroglyphs" edges to Petroglyph entities.
func (ruo *RegionUpdateOne) RemovePetroglyphs(p ...*Petroglyph) *RegionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemovePetroglyphIDs(ids...)
}

// ClearProtectedAreaPictures clears all "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (ruo *RegionUpdateOne) ClearProtectedAreaPictures() *RegionUpdateOne {
	ruo.mutation.ClearProtectedAreaPictures()
	return ruo
}

// RemoveProtectedAreaPictureIDs removes the "protected_area_pictures" edge to ProtectedAreaPicture entities by IDs.
func (ruo *RegionUpdateOne) RemoveProtectedAreaPictureIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.RemoveProtectedAreaPictureIDs(ids...)
	return ruo
}

// RemoveProtectedAreaPictures removes "protected_area_pictures" edges to ProtectedAreaPicture entities.
func (ruo *RegionUpdateOne) RemoveProtectedAreaPictures(p ...*ProtectedAreaPicture) *RegionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemoveProtectedAreaPictureIDs(ids...)
}

// ClearDistricts clears all "districts" edges to the District entity.
func (ruo *RegionUpdateOne) ClearDistricts() *RegionUpdateOne {
	ruo.mutation.ClearDistricts()
	return ruo
}

// RemoveDistrictIDs removes the "districts" edge to District entities by IDs.
func (ruo *RegionUpdateOne) RemoveDistrictIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.RemoveDistrictIDs(ids...)
	return ruo
}

// RemoveDistricts removes "districts" edges to District entities.
func (ruo *RegionUpdateOne) RemoveDistricts(d ...*District) *RegionUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ruo.RemoveDistrictIDs(ids...)
}

// ClearSettlements clears all "settlements" edges to the Settlement entity.
func (ruo *RegionUpdateOne) ClearSettlements() *RegionUpdateOne {
	ruo.mutation.ClearSettlements()
	return ruo
}

// RemoveSettlementIDs removes the "settlements" edge to Settlement entities by IDs.
func (ruo *RegionUpdateOne) RemoveSettlementIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.RemoveSettlementIDs(ids...)
	return ruo
}

// RemoveSettlements removes "settlements" edges to Settlement entities.
func (ruo *RegionUpdateOne) RemoveSettlements(s ...*Settlement) *RegionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveSettlementIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Location entity.
func (ruo *RegionUpdateOne) ClearLocations() *RegionUpdateOne {
	ruo.mutation.ClearLocations()
	return ruo
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (ruo *RegionUpdateOne) RemoveLocationIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.RemoveLocationIDs(ids...)
	return ruo
}

// RemoveLocations removes "locations" edges to Location entities.
func (ruo *RegionUpdateOne) RemoveLocations(l ...*Location) *RegionUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ruo.RemoveLocationIDs(ids...)
}

// ClearCountry clears the "country" edge to the Country entity.
func (ruo *RegionUpdateOne) ClearCountry() *RegionUpdateOne {
	ruo.mutation.ClearCountry()
	return ruo
}

// Where appends a list predicates to the RegionUpdate builder.
func (ruo *RegionUpdateOne) Where(ps ...predicate.Region) *RegionUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RegionUpdateOne) Select(field string, fields ...string) *RegionUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Region entity.
func (ruo *RegionUpdateOne) Save(ctx context.Context) (*Region, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RegionUpdateOne) SaveX(ctx context.Context) *Region {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RegionUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RegionUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RegionUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if region.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized region.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := region.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ruo *RegionUpdateOne) sqlSave(ctx context.Context) (_node *Region, err error) {
	_spec := sqlgraph.NewUpdateSpec(region.Table, region.Columns, sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Region.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, region.FieldID)
		for _, f := range fields {
			if !region.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != region.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.CreatedBy(); ok {
		_spec.SetField(region.FieldCreatedBy, field.TypeString, value)
	}
	if ruo.mutation.CreatedByCleared() {
		_spec.ClearField(region.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(region.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedBy(); ok {
		_spec.SetField(region.FieldUpdatedBy, field.TypeString, value)
	}
	if ruo.mutation.UpdatedByCleared() {
		_spec.ClearField(region.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.DisplayName(); ok {
		_spec.SetField(region.FieldDisplayName, field.TypeString, value)
	}
	if ruo.mutation.DisplayNameCleared() {
		_spec.ClearField(region.FieldDisplayName, field.TypeString)
	}
	if value, ok := ruo.mutation.Abbreviation(); ok {
		_spec.SetField(region.FieldAbbreviation, field.TypeString, value)
	}
	if ruo.mutation.AbbreviationCleared() {
		_spec.ClearField(region.FieldAbbreviation, field.TypeString)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(region.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(region.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.ExternalLink(); ok {
		_spec.SetField(region.FieldExternalLink, field.TypeString, value)
	}
	if ruo.mutation.ExternalLinkCleared() {
		_spec.ClearField(region.FieldExternalLink, field.TypeString)
	}
	if ruo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtTable,
			Columns: []string{region.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedArtIDs(); len(nodes) > 0 && !ruo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtTable,
			Columns: []string{region.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtTable,
			Columns: []string{region.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtifactsTable,
			Columns: []string{region.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !ruo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtifactsTable,
			Columns: []string{region.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtifactsTable,
			Columns: []string{region.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.BooksTable,
			Columns: []string{region.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedBooksIDs(); len(nodes) > 0 && !ruo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.BooksTable,
			Columns: []string{region.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.BooksTable,
			Columns: []string{region.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.PetroglyphsTable,
			Columns: []string{region.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedPetroglyphsIDs(); len(nodes) > 0 && !ruo.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.PetroglyphsTable,
			Columns: []string{region.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PetroglyphsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.PetroglyphsTable,
			Columns: []string{region.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ProtectedAreaPicturesTable,
			Columns: []string{region.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedProtectedAreaPicturesIDs(); len(nodes) > 0 && !ruo.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ProtectedAreaPicturesTable,
			Columns: []string{region.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ProtectedAreaPicturesTable,
			Columns: []string{region.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.DistrictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.DistrictsTable,
			Columns: []string{region.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedDistrictsIDs(); len(nodes) > 0 && !ruo.mutation.DistrictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.DistrictsTable,
			Columns: []string{region.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.DistrictsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.DistrictsTable,
			Columns: []string{region.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SettlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.SettlementsTable,
			Columns: []string{region.SettlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedSettlementsIDs(); len(nodes) > 0 && !ruo.mutation.SettlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.SettlementsTable,
			Columns: []string{region.SettlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SettlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.SettlementsTable,
			Columns: []string{region.SettlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   region.LocationsTable,
			Columns: []string{region.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !ruo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   region.LocationsTable,
			Columns: []string{region.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   region.LocationsTable,
			Columns: []string{region.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Region{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{region.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
