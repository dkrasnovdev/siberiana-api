// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/petroglyph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
)

// RegionQuery is the builder for querying Region entities.
type RegionQuery struct {
	config
	ctx                            *QueryContext
	order                          []region.OrderOption
	inters                         []Interceptor
	predicates                     []predicate.Region
	withArt                        *ArtQuery
	withArtifacts                  *ArtifactQuery
	withBooks                      *BookQuery
	withPetroglyphs                *PetroglyphQuery
	withProtectedAreaPictures      *ProtectedAreaPictureQuery
	withDistricts                  *DistrictQuery
	withSettlements                *SettlementQuery
	withLocations                  *LocationQuery
	withCountry                    *CountryQuery
	withKnownAsAfter               *RegionQuery
	withKnownAsBefore              *RegionQuery
	withFKs                        bool
	modifiers                      []func(*sql.Selector)
	loadTotal                      []func(context.Context, []*Region) error
	withNamedArt                   map[string]*ArtQuery
	withNamedArtifacts             map[string]*ArtifactQuery
	withNamedBooks                 map[string]*BookQuery
	withNamedPetroglyphs           map[string]*PetroglyphQuery
	withNamedProtectedAreaPictures map[string]*ProtectedAreaPictureQuery
	withNamedDistricts             map[string]*DistrictQuery
	withNamedSettlements           map[string]*SettlementQuery
	withNamedLocations             map[string]*LocationQuery
	withNamedKnownAsAfter          map[string]*RegionQuery
	withNamedKnownAsBefore         map[string]*RegionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RegionQuery builder.
func (rq *RegionQuery) Where(ps ...predicate.Region) *RegionQuery {
	rq.predicates = append(rq.predicates, ps...)
	return rq
}

// Limit the number of records to be returned by this query.
func (rq *RegionQuery) Limit(limit int) *RegionQuery {
	rq.ctx.Limit = &limit
	return rq
}

// Offset to start from.
func (rq *RegionQuery) Offset(offset int) *RegionQuery {
	rq.ctx.Offset = &offset
	return rq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rq *RegionQuery) Unique(unique bool) *RegionQuery {
	rq.ctx.Unique = &unique
	return rq
}

// Order specifies how the records should be ordered.
func (rq *RegionQuery) Order(o ...region.OrderOption) *RegionQuery {
	rq.order = append(rq.order, o...)
	return rq
}

// QueryArt chains the current query on the "art" edge.
func (rq *RegionQuery) QueryArt() *ArtQuery {
	query := (&ArtClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(region.Table, region.FieldID, selector),
			sqlgraph.To(art.Table, art.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, region.ArtTable, region.ArtColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArtifacts chains the current query on the "artifacts" edge.
func (rq *RegionQuery) QueryArtifacts() *ArtifactQuery {
	query := (&ArtifactClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(region.Table, region.FieldID, selector),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, region.ArtifactsTable, region.ArtifactsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBooks chains the current query on the "books" edge.
func (rq *RegionQuery) QueryBooks() *BookQuery {
	query := (&BookClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(region.Table, region.FieldID, selector),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, region.BooksTable, region.BooksColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPetroglyphs chains the current query on the "petroglyphs" edge.
func (rq *RegionQuery) QueryPetroglyphs() *PetroglyphQuery {
	query := (&PetroglyphClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(region.Table, region.FieldID, selector),
			sqlgraph.To(petroglyph.Table, petroglyph.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, region.PetroglyphsTable, region.PetroglyphsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProtectedAreaPictures chains the current query on the "protected_area_pictures" edge.
func (rq *RegionQuery) QueryProtectedAreaPictures() *ProtectedAreaPictureQuery {
	query := (&ProtectedAreaPictureClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(region.Table, region.FieldID, selector),
			sqlgraph.To(protectedareapicture.Table, protectedareapicture.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, region.ProtectedAreaPicturesTable, region.ProtectedAreaPicturesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDistricts chains the current query on the "districts" edge.
func (rq *RegionQuery) QueryDistricts() *DistrictQuery {
	query := (&DistrictClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(region.Table, region.FieldID, selector),
			sqlgraph.To(district.Table, district.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, region.DistrictsTable, region.DistrictsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySettlements chains the current query on the "settlements" edge.
func (rq *RegionQuery) QuerySettlements() *SettlementQuery {
	query := (&SettlementClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(region.Table, region.FieldID, selector),
			sqlgraph.To(settlement.Table, settlement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, region.SettlementsTable, region.SettlementsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocations chains the current query on the "locations" edge.
func (rq *RegionQuery) QueryLocations() *LocationQuery {
	query := (&LocationClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(region.Table, region.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, region.LocationsTable, region.LocationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountry chains the current query on the "country" edge.
func (rq *RegionQuery) QueryCountry() *CountryQuery {
	query := (&CountryClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(region.Table, region.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, region.CountryTable, region.CountryColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKnownAsAfter chains the current query on the "known_as_after" edge.
func (rq *RegionQuery) QueryKnownAsAfter() *RegionQuery {
	query := (&RegionClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(region.Table, region.FieldID, selector),
			sqlgraph.To(region.Table, region.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, region.KnownAsAfterTable, region.KnownAsAfterPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKnownAsBefore chains the current query on the "known_as_before" edge.
func (rq *RegionQuery) QueryKnownAsBefore() *RegionQuery {
	query := (&RegionClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(region.Table, region.FieldID, selector),
			sqlgraph.To(region.Table, region.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, region.KnownAsBeforeTable, region.KnownAsBeforePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Region entity from the query.
// Returns a *NotFoundError when no Region was found.
func (rq *RegionQuery) First(ctx context.Context) (*Region, error) {
	nodes, err := rq.Limit(1).All(setContextOp(ctx, rq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{region.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rq *RegionQuery) FirstX(ctx context.Context) *Region {
	node, err := rq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Region ID from the query.
// Returns a *NotFoundError when no Region ID was found.
func (rq *RegionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(1).IDs(setContextOp(ctx, rq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{region.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rq *RegionQuery) FirstIDX(ctx context.Context) int {
	id, err := rq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Region entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Region entity is found.
// Returns a *NotFoundError when no Region entities are found.
func (rq *RegionQuery) Only(ctx context.Context) (*Region, error) {
	nodes, err := rq.Limit(2).All(setContextOp(ctx, rq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{region.Label}
	default:
		return nil, &NotSingularError{region.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rq *RegionQuery) OnlyX(ctx context.Context) *Region {
	node, err := rq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Region ID in the query.
// Returns a *NotSingularError when more than one Region ID is found.
// Returns a *NotFoundError when no entities are found.
func (rq *RegionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(2).IDs(setContextOp(ctx, rq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{region.Label}
	default:
		err = &NotSingularError{region.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rq *RegionQuery) OnlyIDX(ctx context.Context) int {
	id, err := rq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Regions.
func (rq *RegionQuery) All(ctx context.Context) ([]*Region, error) {
	ctx = setContextOp(ctx, rq.ctx, "All")
	if err := rq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Region, *RegionQuery]()
	return withInterceptors[[]*Region](ctx, rq, qr, rq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rq *RegionQuery) AllX(ctx context.Context) []*Region {
	nodes, err := rq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Region IDs.
func (rq *RegionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if rq.ctx.Unique == nil && rq.path != nil {
		rq.Unique(true)
	}
	ctx = setContextOp(ctx, rq.ctx, "IDs")
	if err = rq.Select(region.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rq *RegionQuery) IDsX(ctx context.Context) []int {
	ids, err := rq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rq *RegionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rq.ctx, "Count")
	if err := rq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rq, querierCount[*RegionQuery](), rq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rq *RegionQuery) CountX(ctx context.Context) int {
	count, err := rq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rq *RegionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rq.ctx, "Exist")
	switch _, err := rq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rq *RegionQuery) ExistX(ctx context.Context) bool {
	exist, err := rq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RegionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rq *RegionQuery) Clone() *RegionQuery {
	if rq == nil {
		return nil
	}
	return &RegionQuery{
		config:                    rq.config,
		ctx:                       rq.ctx.Clone(),
		order:                     append([]region.OrderOption{}, rq.order...),
		inters:                    append([]Interceptor{}, rq.inters...),
		predicates:                append([]predicate.Region{}, rq.predicates...),
		withArt:                   rq.withArt.Clone(),
		withArtifacts:             rq.withArtifacts.Clone(),
		withBooks:                 rq.withBooks.Clone(),
		withPetroglyphs:           rq.withPetroglyphs.Clone(),
		withProtectedAreaPictures: rq.withProtectedAreaPictures.Clone(),
		withDistricts:             rq.withDistricts.Clone(),
		withSettlements:           rq.withSettlements.Clone(),
		withLocations:             rq.withLocations.Clone(),
		withCountry:               rq.withCountry.Clone(),
		withKnownAsAfter:          rq.withKnownAsAfter.Clone(),
		withKnownAsBefore:         rq.withKnownAsBefore.Clone(),
		// clone intermediate query.
		sql:  rq.sql.Clone(),
		path: rq.path,
	}
}

// WithArt tells the query-builder to eager-load the nodes that are connected to
// the "art" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithArt(opts ...func(*ArtQuery)) *RegionQuery {
	query := (&ArtClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withArt = query
	return rq
}

// WithArtifacts tells the query-builder to eager-load the nodes that are connected to
// the "artifacts" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithArtifacts(opts ...func(*ArtifactQuery)) *RegionQuery {
	query := (&ArtifactClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withArtifacts = query
	return rq
}

// WithBooks tells the query-builder to eager-load the nodes that are connected to
// the "books" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithBooks(opts ...func(*BookQuery)) *RegionQuery {
	query := (&BookClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withBooks = query
	return rq
}

// WithPetroglyphs tells the query-builder to eager-load the nodes that are connected to
// the "petroglyphs" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithPetroglyphs(opts ...func(*PetroglyphQuery)) *RegionQuery {
	query := (&PetroglyphClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withPetroglyphs = query
	return rq
}

// WithProtectedAreaPictures tells the query-builder to eager-load the nodes that are connected to
// the "protected_area_pictures" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithProtectedAreaPictures(opts ...func(*ProtectedAreaPictureQuery)) *RegionQuery {
	query := (&ProtectedAreaPictureClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withProtectedAreaPictures = query
	return rq
}

// WithDistricts tells the query-builder to eager-load the nodes that are connected to
// the "districts" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithDistricts(opts ...func(*DistrictQuery)) *RegionQuery {
	query := (&DistrictClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withDistricts = query
	return rq
}

// WithSettlements tells the query-builder to eager-load the nodes that are connected to
// the "settlements" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithSettlements(opts ...func(*SettlementQuery)) *RegionQuery {
	query := (&SettlementClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withSettlements = query
	return rq
}

// WithLocations tells the query-builder to eager-load the nodes that are connected to
// the "locations" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithLocations(opts ...func(*LocationQuery)) *RegionQuery {
	query := (&LocationClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withLocations = query
	return rq
}

// WithCountry tells the query-builder to eager-load the nodes that are connected to
// the "country" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithCountry(opts ...func(*CountryQuery)) *RegionQuery {
	query := (&CountryClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withCountry = query
	return rq
}

// WithKnownAsAfter tells the query-builder to eager-load the nodes that are connected to
// the "known_as_after" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithKnownAsAfter(opts ...func(*RegionQuery)) *RegionQuery {
	query := (&RegionClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withKnownAsAfter = query
	return rq
}

// WithKnownAsBefore tells the query-builder to eager-load the nodes that are connected to
// the "known_as_before" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithKnownAsBefore(opts ...func(*RegionQuery)) *RegionQuery {
	query := (&RegionClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withKnownAsBefore = query
	return rq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Region.Query().
//		GroupBy(region.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rq *RegionQuery) GroupBy(field string, fields ...string) *RegionGroupBy {
	rq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RegionGroupBy{build: rq}
	grbuild.flds = &rq.ctx.Fields
	grbuild.label = region.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Region.Query().
//		Select(region.FieldCreatedAt).
//		Scan(ctx, &v)
func (rq *RegionQuery) Select(fields ...string) *RegionSelect {
	rq.ctx.Fields = append(rq.ctx.Fields, fields...)
	sbuild := &RegionSelect{RegionQuery: rq}
	sbuild.label = region.Label
	sbuild.flds, sbuild.scan = &rq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RegionSelect configured with the given aggregations.
func (rq *RegionQuery) Aggregate(fns ...AggregateFunc) *RegionSelect {
	return rq.Select().Aggregate(fns...)
}

func (rq *RegionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rq); err != nil {
				return err
			}
		}
	}
	for _, f := range rq.ctx.Fields {
		if !region.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rq.path != nil {
		prev, err := rq.path(ctx)
		if err != nil {
			return err
		}
		rq.sql = prev
	}
	if region.Policy == nil {
		return errors.New("ent: uninitialized region.Policy (forgotten import ent/runtime?)")
	}
	if err := region.Policy.EvalQuery(ctx, rq); err != nil {
		return err
	}
	return nil
}

func (rq *RegionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Region, error) {
	var (
		nodes       = []*Region{}
		withFKs     = rq.withFKs
		_spec       = rq.querySpec()
		loadedTypes = [11]bool{
			rq.withArt != nil,
			rq.withArtifacts != nil,
			rq.withBooks != nil,
			rq.withPetroglyphs != nil,
			rq.withProtectedAreaPictures != nil,
			rq.withDistricts != nil,
			rq.withSettlements != nil,
			rq.withLocations != nil,
			rq.withCountry != nil,
			rq.withKnownAsAfter != nil,
			rq.withKnownAsBefore != nil,
		}
	)
	if rq.withCountry != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, region.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Region).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Region{config: rq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rq.modifiers) > 0 {
		_spec.Modifiers = rq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rq.withArt; query != nil {
		if err := rq.loadArt(ctx, query, nodes,
			func(n *Region) { n.Edges.Art = []*Art{} },
			func(n *Region, e *Art) { n.Edges.Art = append(n.Edges.Art, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withArtifacts; query != nil {
		if err := rq.loadArtifacts(ctx, query, nodes,
			func(n *Region) { n.Edges.Artifacts = []*Artifact{} },
			func(n *Region, e *Artifact) { n.Edges.Artifacts = append(n.Edges.Artifacts, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withBooks; query != nil {
		if err := rq.loadBooks(ctx, query, nodes,
			func(n *Region) { n.Edges.Books = []*Book{} },
			func(n *Region, e *Book) { n.Edges.Books = append(n.Edges.Books, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withPetroglyphs; query != nil {
		if err := rq.loadPetroglyphs(ctx, query, nodes,
			func(n *Region) { n.Edges.Petroglyphs = []*Petroglyph{} },
			func(n *Region, e *Petroglyph) { n.Edges.Petroglyphs = append(n.Edges.Petroglyphs, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withProtectedAreaPictures; query != nil {
		if err := rq.loadProtectedAreaPictures(ctx, query, nodes,
			func(n *Region) { n.Edges.ProtectedAreaPictures = []*ProtectedAreaPicture{} },
			func(n *Region, e *ProtectedAreaPicture) {
				n.Edges.ProtectedAreaPictures = append(n.Edges.ProtectedAreaPictures, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := rq.withDistricts; query != nil {
		if err := rq.loadDistricts(ctx, query, nodes,
			func(n *Region) { n.Edges.Districts = []*District{} },
			func(n *Region, e *District) { n.Edges.Districts = append(n.Edges.Districts, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withSettlements; query != nil {
		if err := rq.loadSettlements(ctx, query, nodes,
			func(n *Region) { n.Edges.Settlements = []*Settlement{} },
			func(n *Region, e *Settlement) { n.Edges.Settlements = append(n.Edges.Settlements, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withLocations; query != nil {
		if err := rq.loadLocations(ctx, query, nodes,
			func(n *Region) { n.Edges.Locations = []*Location{} },
			func(n *Region, e *Location) { n.Edges.Locations = append(n.Edges.Locations, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withCountry; query != nil {
		if err := rq.loadCountry(ctx, query, nodes, nil,
			func(n *Region, e *Country) { n.Edges.Country = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withKnownAsAfter; query != nil {
		if err := rq.loadKnownAsAfter(ctx, query, nodes,
			func(n *Region) { n.Edges.KnownAsAfter = []*Region{} },
			func(n *Region, e *Region) { n.Edges.KnownAsAfter = append(n.Edges.KnownAsAfter, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withKnownAsBefore; query != nil {
		if err := rq.loadKnownAsBefore(ctx, query, nodes,
			func(n *Region) { n.Edges.KnownAsBefore = []*Region{} },
			func(n *Region, e *Region) { n.Edges.KnownAsBefore = append(n.Edges.KnownAsBefore, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedArt {
		if err := rq.loadArt(ctx, query, nodes,
			func(n *Region) { n.appendNamedArt(name) },
			func(n *Region, e *Art) { n.appendNamedArt(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedArtifacts {
		if err := rq.loadArtifacts(ctx, query, nodes,
			func(n *Region) { n.appendNamedArtifacts(name) },
			func(n *Region, e *Artifact) { n.appendNamedArtifacts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedBooks {
		if err := rq.loadBooks(ctx, query, nodes,
			func(n *Region) { n.appendNamedBooks(name) },
			func(n *Region, e *Book) { n.appendNamedBooks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedPetroglyphs {
		if err := rq.loadPetroglyphs(ctx, query, nodes,
			func(n *Region) { n.appendNamedPetroglyphs(name) },
			func(n *Region, e *Petroglyph) { n.appendNamedPetroglyphs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedProtectedAreaPictures {
		if err := rq.loadProtectedAreaPictures(ctx, query, nodes,
			func(n *Region) { n.appendNamedProtectedAreaPictures(name) },
			func(n *Region, e *ProtectedAreaPicture) { n.appendNamedProtectedAreaPictures(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedDistricts {
		if err := rq.loadDistricts(ctx, query, nodes,
			func(n *Region) { n.appendNamedDistricts(name) },
			func(n *Region, e *District) { n.appendNamedDistricts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedSettlements {
		if err := rq.loadSettlements(ctx, query, nodes,
			func(n *Region) { n.appendNamedSettlements(name) },
			func(n *Region, e *Settlement) { n.appendNamedSettlements(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedLocations {
		if err := rq.loadLocations(ctx, query, nodes,
			func(n *Region) { n.appendNamedLocations(name) },
			func(n *Region, e *Location) { n.appendNamedLocations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedKnownAsAfter {
		if err := rq.loadKnownAsAfter(ctx, query, nodes,
			func(n *Region) { n.appendNamedKnownAsAfter(name) },
			func(n *Region, e *Region) { n.appendNamedKnownAsAfter(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rq.withNamedKnownAsBefore {
		if err := rq.loadKnownAsBefore(ctx, query, nodes,
			func(n *Region) { n.appendNamedKnownAsBefore(name) },
			func(n *Region, e *Region) { n.appendNamedKnownAsBefore(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range rq.loadTotal {
		if err := rq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rq *RegionQuery) loadArt(ctx context.Context, query *ArtQuery, nodes []*Region, init func(*Region), assign func(*Region, *Art)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Region)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Art(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(region.ArtColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.region_art
		if fk == nil {
			return fmt.Errorf(`foreign-key "region_art" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "region_art" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RegionQuery) loadArtifacts(ctx context.Context, query *ArtifactQuery, nodes []*Region, init func(*Region), assign func(*Region, *Artifact)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Region)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Artifact(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(region.ArtifactsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.region_artifacts
		if fk == nil {
			return fmt.Errorf(`foreign-key "region_artifacts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "region_artifacts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RegionQuery) loadBooks(ctx context.Context, query *BookQuery, nodes []*Region, init func(*Region), assign func(*Region, *Book)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Region)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Book(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(region.BooksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.region_books
		if fk == nil {
			return fmt.Errorf(`foreign-key "region_books" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "region_books" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RegionQuery) loadPetroglyphs(ctx context.Context, query *PetroglyphQuery, nodes []*Region, init func(*Region), assign func(*Region, *Petroglyph)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Region)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Petroglyph(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(region.PetroglyphsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.region_petroglyphs
		if fk == nil {
			return fmt.Errorf(`foreign-key "region_petroglyphs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "region_petroglyphs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RegionQuery) loadProtectedAreaPictures(ctx context.Context, query *ProtectedAreaPictureQuery, nodes []*Region, init func(*Region), assign func(*Region, *ProtectedAreaPicture)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Region)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProtectedAreaPicture(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(region.ProtectedAreaPicturesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.region_protected_area_pictures
		if fk == nil {
			return fmt.Errorf(`foreign-key "region_protected_area_pictures" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "region_protected_area_pictures" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RegionQuery) loadDistricts(ctx context.Context, query *DistrictQuery, nodes []*Region, init func(*Region), assign func(*Region, *District)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Region)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.District(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(region.DistrictsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.region_districts
		if fk == nil {
			return fmt.Errorf(`foreign-key "region_districts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "region_districts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RegionQuery) loadSettlements(ctx context.Context, query *SettlementQuery, nodes []*Region, init func(*Region), assign func(*Region, *Settlement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Region)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Settlement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(region.SettlementsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.region_settlements
		if fk == nil {
			return fmt.Errorf(`foreign-key "region_settlements" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "region_settlements" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RegionQuery) loadLocations(ctx context.Context, query *LocationQuery, nodes []*Region, init func(*Region), assign func(*Region, *Location)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Region)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Location(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(region.LocationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.location_region
		if fk == nil {
			return fmt.Errorf(`foreign-key "location_region" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "location_region" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RegionQuery) loadCountry(ctx context.Context, query *CountryQuery, nodes []*Region, init func(*Region), assign func(*Region, *Country)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Region)
	for i := range nodes {
		if nodes[i].country_regions == nil {
			continue
		}
		fk := *nodes[i].country_regions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(country.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "country_regions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RegionQuery) loadKnownAsAfter(ctx context.Context, query *RegionQuery, nodes []*Region, init func(*Region), assign func(*Region, *Region)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Region)
	nids := make(map[int]map[*Region]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(region.KnownAsAfterTable)
		s.Join(joinT).On(s.C(region.FieldID), joinT.C(region.KnownAsAfterPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(region.KnownAsAfterPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(region.KnownAsAfterPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Region]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Region](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "known_as_after" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RegionQuery) loadKnownAsBefore(ctx context.Context, query *RegionQuery, nodes []*Region, init func(*Region), assign func(*Region, *Region)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Region)
	nids := make(map[int]map[*Region]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(region.KnownAsBeforeTable)
		s.Join(joinT).On(s.C(region.FieldID), joinT.C(region.KnownAsBeforePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(region.KnownAsBeforePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(region.KnownAsBeforePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Region]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Region](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "known_as_before" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (rq *RegionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rq.querySpec()
	if len(rq.modifiers) > 0 {
		_spec.Modifiers = rq.modifiers
	}
	_spec.Node.Columns = rq.ctx.Fields
	if len(rq.ctx.Fields) > 0 {
		_spec.Unique = rq.ctx.Unique != nil && *rq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rq.driver, _spec)
}

func (rq *RegionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(region.Table, region.Columns, sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt))
	_spec.From = rq.sql
	if unique := rq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rq.path != nil {
		_spec.Unique = true
	}
	if fields := rq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, region.FieldID)
		for i := range fields {
			if fields[i] != region.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rq *RegionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rq.driver.Dialect())
	t1 := builder.Table(region.Table)
	columns := rq.ctx.Fields
	if len(columns) == 0 {
		columns = region.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rq.sql != nil {
		selector = rq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rq.ctx.Unique != nil && *rq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rq.predicates {
		p(selector)
	}
	for _, p := range rq.order {
		p(selector)
	}
	if offset := rq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedArt tells the query-builder to eager-load the nodes that are connected to the "art"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithNamedArt(name string, opts ...func(*ArtQuery)) *RegionQuery {
	query := (&ArtClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedArt == nil {
		rq.withNamedArt = make(map[string]*ArtQuery)
	}
	rq.withNamedArt[name] = query
	return rq
}

// WithNamedArtifacts tells the query-builder to eager-load the nodes that are connected to the "artifacts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithNamedArtifacts(name string, opts ...func(*ArtifactQuery)) *RegionQuery {
	query := (&ArtifactClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedArtifacts == nil {
		rq.withNamedArtifacts = make(map[string]*ArtifactQuery)
	}
	rq.withNamedArtifacts[name] = query
	return rq
}

// WithNamedBooks tells the query-builder to eager-load the nodes that are connected to the "books"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithNamedBooks(name string, opts ...func(*BookQuery)) *RegionQuery {
	query := (&BookClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedBooks == nil {
		rq.withNamedBooks = make(map[string]*BookQuery)
	}
	rq.withNamedBooks[name] = query
	return rq
}

// WithNamedPetroglyphs tells the query-builder to eager-load the nodes that are connected to the "petroglyphs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithNamedPetroglyphs(name string, opts ...func(*PetroglyphQuery)) *RegionQuery {
	query := (&PetroglyphClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedPetroglyphs == nil {
		rq.withNamedPetroglyphs = make(map[string]*PetroglyphQuery)
	}
	rq.withNamedPetroglyphs[name] = query
	return rq
}

// WithNamedProtectedAreaPictures tells the query-builder to eager-load the nodes that are connected to the "protected_area_pictures"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithNamedProtectedAreaPictures(name string, opts ...func(*ProtectedAreaPictureQuery)) *RegionQuery {
	query := (&ProtectedAreaPictureClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedProtectedAreaPictures == nil {
		rq.withNamedProtectedAreaPictures = make(map[string]*ProtectedAreaPictureQuery)
	}
	rq.withNamedProtectedAreaPictures[name] = query
	return rq
}

// WithNamedDistricts tells the query-builder to eager-load the nodes that are connected to the "districts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithNamedDistricts(name string, opts ...func(*DistrictQuery)) *RegionQuery {
	query := (&DistrictClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedDistricts == nil {
		rq.withNamedDistricts = make(map[string]*DistrictQuery)
	}
	rq.withNamedDistricts[name] = query
	return rq
}

// WithNamedSettlements tells the query-builder to eager-load the nodes that are connected to the "settlements"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithNamedSettlements(name string, opts ...func(*SettlementQuery)) *RegionQuery {
	query := (&SettlementClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedSettlements == nil {
		rq.withNamedSettlements = make(map[string]*SettlementQuery)
	}
	rq.withNamedSettlements[name] = query
	return rq
}

// WithNamedLocations tells the query-builder to eager-load the nodes that are connected to the "locations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithNamedLocations(name string, opts ...func(*LocationQuery)) *RegionQuery {
	query := (&LocationClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedLocations == nil {
		rq.withNamedLocations = make(map[string]*LocationQuery)
	}
	rq.withNamedLocations[name] = query
	return rq
}

// WithNamedKnownAsAfter tells the query-builder to eager-load the nodes that are connected to the "known_as_after"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithNamedKnownAsAfter(name string, opts ...func(*RegionQuery)) *RegionQuery {
	query := (&RegionClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedKnownAsAfter == nil {
		rq.withNamedKnownAsAfter = make(map[string]*RegionQuery)
	}
	rq.withNamedKnownAsAfter[name] = query
	return rq
}

// WithNamedKnownAsBefore tells the query-builder to eager-load the nodes that are connected to the "known_as_before"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rq *RegionQuery) WithNamedKnownAsBefore(name string, opts ...func(*RegionQuery)) *RegionQuery {
	query := (&RegionClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rq.withNamedKnownAsBefore == nil {
		rq.withNamedKnownAsBefore = make(map[string]*RegionQuery)
	}
	rq.withNamedKnownAsBefore[name] = query
	return rq
}

// RegionGroupBy is the group-by builder for Region entities.
type RegionGroupBy struct {
	selector
	build *RegionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgb *RegionGroupBy) Aggregate(fns ...AggregateFunc) *RegionGroupBy {
	rgb.fns = append(rgb.fns, fns...)
	return rgb
}

// Scan applies the selector query and scans the result into the given value.
func (rgb *RegionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rgb.build.ctx, "GroupBy")
	if err := rgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RegionQuery, *RegionGroupBy](ctx, rgb.build, rgb, rgb.build.inters, v)
}

func (rgb *RegionGroupBy) sqlScan(ctx context.Context, root *RegionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rgb.fns))
	for _, fn := range rgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rgb.flds)+len(rgb.fns))
		for _, f := range *rgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RegionSelect is the builder for selecting fields of Region entities.
type RegionSelect struct {
	*RegionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rs *RegionSelect) Aggregate(fns ...AggregateFunc) *RegionSelect {
	rs.fns = append(rs.fns, fns...)
	return rs
}

// Scan applies the selector query and scans the result into the given value.
func (rs *RegionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rs.ctx, "Select")
	if err := rs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RegionQuery, *RegionSelect](ctx, rs.RegionQuery, rs, rs.inters, v)
}

func (rs *RegionSelect) sqlScan(ctx context.Context, root *RegionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rs.fns))
	for _, fn := range rs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
