// Code generated by ent, DO NOT EDIT.

package dendrochronologicalanalysis

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldUpdatedBy, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldDisplayName, v))
}

// StartYear applies equality check predicate on the "start_year" field. It's identical to StartYearEQ.
func StartYear(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldStartYear, v))
}

// EndYear applies equality check predicate on the "end_year" field. It's identical to EndYearEQ.
func EndYear(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldEndYear, v))
}

// NumberOfRings applies equality check predicate on the "number_of_rings" field. It's identical to NumberOfRingsEQ.
func NumberOfRings(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldNumberOfRings, v))
}

// CoefficientCorrelation applies equality check predicate on the "coefficient_correlation" field. It's identical to CoefficientCorrelationEQ.
func CoefficientCorrelation(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldCoefficientCorrelation, v))
}

// StandardDeviation applies equality check predicate on the "standard_deviation" field. It's identical to StandardDeviationEQ.
func StandardDeviation(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldStandardDeviation, v))
}

// Sensitivity applies equality check predicate on the "sensitivity" field. It's identical to SensitivityEQ.
func Sensitivity(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldSensitivity, v))
}

// SamplingLocation applies equality check predicate on the "sampling_location" field. It's identical to SamplingLocationEQ.
func SamplingLocation(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldSamplingLocation, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldContainsFold(FieldDisplayName, v))
}

// StartYearEQ applies the EQ predicate on the "start_year" field.
func StartYearEQ(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldStartYear, v))
}

// StartYearNEQ applies the NEQ predicate on the "start_year" field.
func StartYearNEQ(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldStartYear, v))
}

// StartYearIn applies the In predicate on the "start_year" field.
func StartYearIn(vs ...int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldStartYear, vs...))
}

// StartYearNotIn applies the NotIn predicate on the "start_year" field.
func StartYearNotIn(vs ...int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldStartYear, vs...))
}

// StartYearGT applies the GT predicate on the "start_year" field.
func StartYearGT(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldStartYear, v))
}

// StartYearGTE applies the GTE predicate on the "start_year" field.
func StartYearGTE(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldStartYear, v))
}

// StartYearLT applies the LT predicate on the "start_year" field.
func StartYearLT(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldStartYear, v))
}

// StartYearLTE applies the LTE predicate on the "start_year" field.
func StartYearLTE(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldStartYear, v))
}

// EndYearEQ applies the EQ predicate on the "end_year" field.
func EndYearEQ(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldEndYear, v))
}

// EndYearNEQ applies the NEQ predicate on the "end_year" field.
func EndYearNEQ(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldEndYear, v))
}

// EndYearIn applies the In predicate on the "end_year" field.
func EndYearIn(vs ...int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldEndYear, vs...))
}

// EndYearNotIn applies the NotIn predicate on the "end_year" field.
func EndYearNotIn(vs ...int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldEndYear, vs...))
}

// EndYearGT applies the GT predicate on the "end_year" field.
func EndYearGT(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldEndYear, v))
}

// EndYearGTE applies the GTE predicate on the "end_year" field.
func EndYearGTE(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldEndYear, v))
}

// EndYearLT applies the LT predicate on the "end_year" field.
func EndYearLT(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldEndYear, v))
}

// EndYearLTE applies the LTE predicate on the "end_year" field.
func EndYearLTE(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldEndYear, v))
}

// NumberOfRingsEQ applies the EQ predicate on the "number_of_rings" field.
func NumberOfRingsEQ(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldNumberOfRings, v))
}

// NumberOfRingsNEQ applies the NEQ predicate on the "number_of_rings" field.
func NumberOfRingsNEQ(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldNumberOfRings, v))
}

// NumberOfRingsIn applies the In predicate on the "number_of_rings" field.
func NumberOfRingsIn(vs ...int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldNumberOfRings, vs...))
}

// NumberOfRingsNotIn applies the NotIn predicate on the "number_of_rings" field.
func NumberOfRingsNotIn(vs ...int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldNumberOfRings, vs...))
}

// NumberOfRingsGT applies the GT predicate on the "number_of_rings" field.
func NumberOfRingsGT(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldNumberOfRings, v))
}

// NumberOfRingsGTE applies the GTE predicate on the "number_of_rings" field.
func NumberOfRingsGTE(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldNumberOfRings, v))
}

// NumberOfRingsLT applies the LT predicate on the "number_of_rings" field.
func NumberOfRingsLT(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldNumberOfRings, v))
}

// NumberOfRingsLTE applies the LTE predicate on the "number_of_rings" field.
func NumberOfRingsLTE(v int) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldNumberOfRings, v))
}

// CoefficientCorrelationEQ applies the EQ predicate on the "coefficient_correlation" field.
func CoefficientCorrelationEQ(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldCoefficientCorrelation, v))
}

// CoefficientCorrelationNEQ applies the NEQ predicate on the "coefficient_correlation" field.
func CoefficientCorrelationNEQ(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldCoefficientCorrelation, v))
}

// CoefficientCorrelationIn applies the In predicate on the "coefficient_correlation" field.
func CoefficientCorrelationIn(vs ...float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldCoefficientCorrelation, vs...))
}

// CoefficientCorrelationNotIn applies the NotIn predicate on the "coefficient_correlation" field.
func CoefficientCorrelationNotIn(vs ...float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldCoefficientCorrelation, vs...))
}

// CoefficientCorrelationGT applies the GT predicate on the "coefficient_correlation" field.
func CoefficientCorrelationGT(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldCoefficientCorrelation, v))
}

// CoefficientCorrelationGTE applies the GTE predicate on the "coefficient_correlation" field.
func CoefficientCorrelationGTE(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldCoefficientCorrelation, v))
}

// CoefficientCorrelationLT applies the LT predicate on the "coefficient_correlation" field.
func CoefficientCorrelationLT(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldCoefficientCorrelation, v))
}

// CoefficientCorrelationLTE applies the LTE predicate on the "coefficient_correlation" field.
func CoefficientCorrelationLTE(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldCoefficientCorrelation, v))
}

// StandardDeviationEQ applies the EQ predicate on the "standard_deviation" field.
func StandardDeviationEQ(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldStandardDeviation, v))
}

// StandardDeviationNEQ applies the NEQ predicate on the "standard_deviation" field.
func StandardDeviationNEQ(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldStandardDeviation, v))
}

// StandardDeviationIn applies the In predicate on the "standard_deviation" field.
func StandardDeviationIn(vs ...float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldStandardDeviation, vs...))
}

// StandardDeviationNotIn applies the NotIn predicate on the "standard_deviation" field.
func StandardDeviationNotIn(vs ...float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldStandardDeviation, vs...))
}

// StandardDeviationGT applies the GT predicate on the "standard_deviation" field.
func StandardDeviationGT(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldStandardDeviation, v))
}

// StandardDeviationGTE applies the GTE predicate on the "standard_deviation" field.
func StandardDeviationGTE(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldStandardDeviation, v))
}

// StandardDeviationLT applies the LT predicate on the "standard_deviation" field.
func StandardDeviationLT(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldStandardDeviation, v))
}

// StandardDeviationLTE applies the LTE predicate on the "standard_deviation" field.
func StandardDeviationLTE(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldStandardDeviation, v))
}

// SensitivityEQ applies the EQ predicate on the "sensitivity" field.
func SensitivityEQ(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldSensitivity, v))
}

// SensitivityNEQ applies the NEQ predicate on the "sensitivity" field.
func SensitivityNEQ(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldSensitivity, v))
}

// SensitivityIn applies the In predicate on the "sensitivity" field.
func SensitivityIn(vs ...float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldSensitivity, vs...))
}

// SensitivityNotIn applies the NotIn predicate on the "sensitivity" field.
func SensitivityNotIn(vs ...float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldSensitivity, vs...))
}

// SensitivityGT applies the GT predicate on the "sensitivity" field.
func SensitivityGT(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldSensitivity, v))
}

// SensitivityGTE applies the GTE predicate on the "sensitivity" field.
func SensitivityGTE(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldSensitivity, v))
}

// SensitivityLT applies the LT predicate on the "sensitivity" field.
func SensitivityLT(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldSensitivity, v))
}

// SensitivityLTE applies the LTE predicate on the "sensitivity" field.
func SensitivityLTE(v float64) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldSensitivity, v))
}

// SamplingLocationEQ applies the EQ predicate on the "sampling_location" field.
func SamplingLocationEQ(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEQ(FieldSamplingLocation, v))
}

// SamplingLocationNEQ applies the NEQ predicate on the "sampling_location" field.
func SamplingLocationNEQ(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNEQ(FieldSamplingLocation, v))
}

// SamplingLocationIn applies the In predicate on the "sampling_location" field.
func SamplingLocationIn(vs ...string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldIn(FieldSamplingLocation, vs...))
}

// SamplingLocationNotIn applies the NotIn predicate on the "sampling_location" field.
func SamplingLocationNotIn(vs ...string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldNotIn(FieldSamplingLocation, vs...))
}

// SamplingLocationGT applies the GT predicate on the "sampling_location" field.
func SamplingLocationGT(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGT(FieldSamplingLocation, v))
}

// SamplingLocationGTE applies the GTE predicate on the "sampling_location" field.
func SamplingLocationGTE(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldGTE(FieldSamplingLocation, v))
}

// SamplingLocationLT applies the LT predicate on the "sampling_location" field.
func SamplingLocationLT(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLT(FieldSamplingLocation, v))
}

// SamplingLocationLTE applies the LTE predicate on the "sampling_location" field.
func SamplingLocationLTE(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldLTE(FieldSamplingLocation, v))
}

// SamplingLocationContains applies the Contains predicate on the "sampling_location" field.
func SamplingLocationContains(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldContains(FieldSamplingLocation, v))
}

// SamplingLocationHasPrefix applies the HasPrefix predicate on the "sampling_location" field.
func SamplingLocationHasPrefix(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldHasPrefix(FieldSamplingLocation, v))
}

// SamplingLocationHasSuffix applies the HasSuffix predicate on the "sampling_location" field.
func SamplingLocationHasSuffix(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldHasSuffix(FieldSamplingLocation, v))
}

// SamplingLocationEqualFold applies the EqualFold predicate on the "sampling_location" field.
func SamplingLocationEqualFold(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldEqualFold(FieldSamplingLocation, v))
}

// SamplingLocationContainsFold applies the ContainsFold predicate on the "sampling_location" field.
func SamplingLocationContainsFold(v string) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.FieldContainsFold(FieldSamplingLocation, v))
}

// HasDendrochronology applies the HasEdge predicate on the "dendrochronology" edge.
func HasDendrochronology() predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DendrochronologyTable, DendrochronologyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDendrochronologyWith applies the HasEdge predicate on the "dendrochronology" edge with a given conditions (other predicates).
func HasDendrochronologyWith(preds ...predicate.Dendrochronology) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(func(s *sql.Selector) {
		step := newDendrochronologyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DendrochronologicalAnalysis) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DendrochronologicalAnalysis) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DendrochronologicalAnalysis) predicate.DendrochronologicalAnalysis {
	return predicate.DendrochronologicalAnalysis(sql.NotPredicates(p))
}
