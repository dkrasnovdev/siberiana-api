// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/dkrasnovdev/heritage-api/ent/person"
)

// CreateArtifactInput represents a mutation input for creating artifacts.
type CreateArtifactInput struct {
	CreatedAt             *time.Time
	CreatedBy             *string
	UpdatedAt             *time.Time
	UpdatedBy             *string
	DisplayName           *string
	Description           *string
	ExternalLinks         []string
	PrimaryImageURL       *string
	AdditionalImagesUrls  []string
	DeletedAt             *time.Time
	DeletedBy             *string
	AuthorIDs             []int
	MediumIDs             []int
	TechniqueIDs          []int
	ProjectIDs            []int
	PublicationIDs        []int
	HolderIDs             []int
	CulturalAffiliationID *int
	MonumentID            *int
	ModelID               *int
	SetID                 *int
	LocationID            *int
	CollectionID          *int
	LicenseID             *int
}

// Mutate applies the CreateArtifactInput on the ArtifactMutation builder.
func (i *CreateArtifactInput) Mutate(m *ArtifactMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if v := i.AuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.MediumIDs; len(v) > 0 {
		m.AddMediumIDs(v...)
	}
	if v := i.TechniqueIDs; len(v) > 0 {
		m.AddTechniqueIDs(v...)
	}
	if v := i.ProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.PublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.HolderIDs; len(v) > 0 {
		m.AddHolderIDs(v...)
	}
	if v := i.CulturalAffiliationID; v != nil {
		m.SetCulturalAffiliationID(*v)
	}
	if v := i.MonumentID; v != nil {
		m.SetMonumentID(*v)
	}
	if v := i.ModelID; v != nil {
		m.SetModelID(*v)
	}
	if v := i.SetID; v != nil {
		m.SetSetID(*v)
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	if v := i.CollectionID; v != nil {
		m.SetCollectionID(*v)
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
}

// SetInput applies the change-set in the CreateArtifactInput on the ArtifactCreate builder.
func (c *ArtifactCreate) SetInput(i CreateArtifactInput) *ArtifactCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateArtifactInput represents a mutation input for updating artifacts.
type UpdateArtifactInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearDisplayName           bool
	DisplayName                *string
	ClearDescription           bool
	Description                *string
	ClearExternalLinks         bool
	ExternalLinks              []string
	AppendExternalLinks        []string
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearDeletedAt             bool
	DeletedAt                  *time.Time
	ClearDeletedBy             bool
	DeletedBy                  *string
	ClearAuthors               bool
	AddAuthorIDs               []int
	RemoveAuthorIDs            []int
	ClearMediums               bool
	AddMediumIDs               []int
	RemoveMediumIDs            []int
	ClearTechniques            bool
	AddTechniqueIDs            []int
	RemoveTechniqueIDs         []int
	ClearProjects              bool
	AddProjectIDs              []int
	RemoveProjectIDs           []int
	ClearPublications          bool
	AddPublicationIDs          []int
	RemovePublicationIDs       []int
	ClearHolders               bool
	AddHolderIDs               []int
	RemoveHolderIDs            []int
	ClearCulturalAffiliation   bool
	CulturalAffiliationID      *int
	ClearMonument              bool
	MonumentID                 *int
	ClearModel                 bool
	ModelID                    *int
	ClearSet                   bool
	SetID                      *int
	ClearLocation              bool
	LocationID                 *int
	ClearCollection            bool
	CollectionID               *int
	ClearLicense               bool
	LicenseID                  *int
}

// Mutate applies the UpdateArtifactInput on the ArtifactMutation builder.
func (i *UpdateArtifactInput) Mutate(m *ArtifactMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearDeletedBy {
		m.ClearDeletedBy()
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if i.ClearAuthors {
		m.ClearAuthors()
	}
	if v := i.AddAuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.RemoveAuthorIDs; len(v) > 0 {
		m.RemoveAuthorIDs(v...)
	}
	if i.ClearMediums {
		m.ClearMediums()
	}
	if v := i.AddMediumIDs; len(v) > 0 {
		m.AddMediumIDs(v...)
	}
	if v := i.RemoveMediumIDs; len(v) > 0 {
		m.RemoveMediumIDs(v...)
	}
	if i.ClearTechniques {
		m.ClearTechniques()
	}
	if v := i.AddTechniqueIDs; len(v) > 0 {
		m.AddTechniqueIDs(v...)
	}
	if v := i.RemoveTechniqueIDs; len(v) > 0 {
		m.RemoveTechniqueIDs(v...)
	}
	if i.ClearProjects {
		m.ClearProjects()
	}
	if v := i.AddProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.RemoveProjectIDs; len(v) > 0 {
		m.RemoveProjectIDs(v...)
	}
	if i.ClearPublications {
		m.ClearPublications()
	}
	if v := i.AddPublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.RemovePublicationIDs; len(v) > 0 {
		m.RemovePublicationIDs(v...)
	}
	if i.ClearHolders {
		m.ClearHolders()
	}
	if v := i.AddHolderIDs; len(v) > 0 {
		m.AddHolderIDs(v...)
	}
	if v := i.RemoveHolderIDs; len(v) > 0 {
		m.RemoveHolderIDs(v...)
	}
	if i.ClearCulturalAffiliation {
		m.ClearCulturalAffiliation()
	}
	if v := i.CulturalAffiliationID; v != nil {
		m.SetCulturalAffiliationID(*v)
	}
	if i.ClearMonument {
		m.ClearMonument()
	}
	if v := i.MonumentID; v != nil {
		m.SetMonumentID(*v)
	}
	if i.ClearModel {
		m.ClearModel()
	}
	if v := i.ModelID; v != nil {
		m.SetModelID(*v)
	}
	if i.ClearSet {
		m.ClearSet()
	}
	if v := i.SetID; v != nil {
		m.SetSetID(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	if i.ClearCollection {
		m.ClearCollection()
	}
	if v := i.CollectionID; v != nil {
		m.SetCollectionID(*v)
	}
	if i.ClearLicense {
		m.ClearLicense()
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
}

// SetInput applies the change-set in the UpdateArtifactInput on the ArtifactUpdate builder.
func (c *ArtifactUpdate) SetInput(i UpdateArtifactInput) *ArtifactUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateArtifactInput on the ArtifactUpdateOne builder.
func (c *ArtifactUpdateOne) SetInput(i UpdateArtifactInput) *ArtifactUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCategoryInput represents a mutation input for creating categories.
type CreateCategoryInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	CollectionIDs []int
}

// Mutate applies the CreateCategoryInput on the CategoryMutation builder.
func (i *CreateCategoryInput) Mutate(m *CategoryMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.CollectionIDs; len(v) > 0 {
		m.AddCollectionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCategoryInput on the CategoryCreate builder.
func (c *CategoryCreate) SetInput(i CreateCategoryInput) *CategoryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCategoryInput represents a mutation input for updating categories.
type UpdateCategoryInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearCollections    bool
	AddCollectionIDs    []int
	RemoveCollectionIDs []int
}

// Mutate applies the UpdateCategoryInput on the CategoryMutation builder.
func (i *UpdateCategoryInput) Mutate(m *CategoryMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearCollections {
		m.ClearCollections()
	}
	if v := i.AddCollectionIDs; len(v) > 0 {
		m.AddCollectionIDs(v...)
	}
	if v := i.RemoveCollectionIDs; len(v) > 0 {
		m.RemoveCollectionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCategoryInput on the CategoryUpdate builder.
func (c *CategoryUpdate) SetInput(i UpdateCategoryInput) *CategoryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCategoryInput on the CategoryUpdateOne builder.
func (c *CategoryUpdateOne) SetInput(i UpdateCategoryInput) *CategoryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCollectionInput represents a mutation input for creating collections.
type CreateCollectionInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	ArtifactIDs   []int
	CategoryID    *int
}

// Mutate applies the CreateCollectionInput on the CollectionMutation builder.
func (i *CreateCollectionInput) Mutate(m *CollectionMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.CategoryID; v != nil {
		m.SetCategoryID(*v)
	}
}

// SetInput applies the change-set in the CreateCollectionInput on the CollectionCreate builder.
func (c *CollectionCreate) SetInput(i CreateCollectionInput) *CollectionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCollectionInput represents a mutation input for updating collections.
type UpdateCollectionInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
	ClearCategory       bool
	CategoryID          *int
}

// Mutate applies the UpdateCollectionInput on the CollectionMutation builder.
func (i *UpdateCollectionInput) Mutate(m *CollectionMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearCategory {
		m.ClearCategory()
	}
	if v := i.CategoryID; v != nil {
		m.SetCategoryID(*v)
	}
}

// SetInput applies the change-set in the UpdateCollectionInput on the CollectionUpdate builder.
func (c *CollectionUpdate) SetInput(i UpdateCollectionInput) *CollectionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCollectionInput on the CollectionUpdateOne builder.
func (c *CollectionUpdateOne) SetInput(i UpdateCollectionInput) *CollectionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCultureInput represents a mutation input for creating cultures.
type CreateCultureInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	ArtifactIDs   []int
}

// Mutate applies the CreateCultureInput on the CultureMutation builder.
func (i *CreateCultureInput) Mutate(m *CultureMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCultureInput on the CultureCreate builder.
func (c *CultureCreate) SetInput(i CreateCultureInput) *CultureCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCultureInput represents a mutation input for updating cultures.
type UpdateCultureInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
}

// Mutate applies the UpdateCultureInput on the CultureMutation builder.
func (i *UpdateCultureInput) Mutate(m *CultureMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCultureInput on the CultureUpdate builder.
func (c *CultureUpdate) SetInput(i UpdateCultureInput) *CultureUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCultureInput on the CultureUpdateOne builder.
func (c *CultureUpdateOne) SetInput(i UpdateCultureInput) *CultureUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDistrictInput represents a mutation input for creating districts.
type CreateDistrictInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	LocationID    *int
}

// Mutate applies the CreateDistrictInput on the DistrictMutation builder.
func (i *CreateDistrictInput) Mutate(m *DistrictMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
}

// SetInput applies the change-set in the CreateDistrictInput on the DistrictCreate builder.
func (c *DistrictCreate) SetInput(i CreateDistrictInput) *DistrictCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDistrictInput represents a mutation input for updating districts.
type UpdateDistrictInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearLocation       bool
	LocationID          *int
}

// Mutate applies the UpdateDistrictInput on the DistrictMutation builder.
func (i *UpdateDistrictInput) Mutate(m *DistrictMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
}

// SetInput applies the change-set in the UpdateDistrictInput on the DistrictUpdate builder.
func (c *DistrictUpdate) SetInput(i UpdateDistrictInput) *DistrictUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDistrictInput on the DistrictUpdateOne builder.
func (c *DistrictUpdateOne) SetInput(i UpdateDistrictInput) *DistrictUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateHolderInput represents a mutation input for creating holders.
type CreateHolderInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	BeginDate               time.Time
	EndDate                 *time.Time
	ArtifactIDs             []int
	HolderResponsibilityIDs []int
	PersonID                *int
	OrganizationID          *int
}

// Mutate applies the CreateHolderInput on the HolderMutation builder.
func (i *CreateHolderInput) Mutate(m *HolderMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetBeginDate(i.BeginDate)
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.HolderResponsibilityIDs; len(v) > 0 {
		m.AddHolderResponsibilityIDs(v...)
	}
	if v := i.PersonID; v != nil {
		m.SetPersonID(*v)
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
}

// SetInput applies the change-set in the CreateHolderInput on the HolderCreate builder.
func (c *HolderCreate) SetInput(i CreateHolderInput) *HolderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateHolderInput represents a mutation input for updating holders.
type UpdateHolderInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	BeginDate                     *time.Time
	ClearEndDate                  bool
	EndDate                       *time.Time
	ClearArtifacts                bool
	AddArtifactIDs                []int
	RemoveArtifactIDs             []int
	ClearHolderResponsibilities   bool
	AddHolderResponsibilityIDs    []int
	RemoveHolderResponsibilityIDs []int
	ClearPerson                   bool
	PersonID                      *int
	ClearOrganization             bool
	OrganizationID                *int
}

// Mutate applies the UpdateHolderInput on the HolderMutation builder.
func (i *UpdateHolderInput) Mutate(m *HolderMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.BeginDate; v != nil {
		m.SetBeginDate(*v)
	}
	if i.ClearEndDate {
		m.ClearEndDate()
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearHolderResponsibilities {
		m.ClearHolderResponsibilities()
	}
	if v := i.AddHolderResponsibilityIDs; len(v) > 0 {
		m.AddHolderResponsibilityIDs(v...)
	}
	if v := i.RemoveHolderResponsibilityIDs; len(v) > 0 {
		m.RemoveHolderResponsibilityIDs(v...)
	}
	if i.ClearPerson {
		m.ClearPerson()
	}
	if v := i.PersonID; v != nil {
		m.SetPersonID(*v)
	}
	if i.ClearOrganization {
		m.ClearOrganization()
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
}

// SetInput applies the change-set in the UpdateHolderInput on the HolderUpdate builder.
func (c *HolderUpdate) SetInput(i UpdateHolderInput) *HolderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateHolderInput on the HolderUpdateOne builder.
func (c *HolderUpdateOne) SetInput(i UpdateHolderInput) *HolderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLicenseInput represents a mutation input for creating licenses.
type CreateLicenseInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	ArtifactIDs   []int
}

// Mutate applies the CreateLicenseInput on the LicenseMutation builder.
func (i *CreateLicenseInput) Mutate(m *LicenseMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateLicenseInput on the LicenseCreate builder.
func (c *LicenseCreate) SetInput(i CreateLicenseInput) *LicenseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLicenseInput represents a mutation input for updating licenses.
type UpdateLicenseInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
}

// Mutate applies the UpdateLicenseInput on the LicenseMutation builder.
func (i *UpdateLicenseInput) Mutate(m *LicenseMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateLicenseInput on the LicenseUpdate builder.
func (c *LicenseUpdate) SetInput(i UpdateLicenseInput) *LicenseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLicenseInput on the LicenseUpdateOne builder.
func (c *LicenseUpdateOne) SetInput(i UpdateLicenseInput) *LicenseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLocationInput represents a mutation input for creating locations.
type CreateLocationInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	ArtifactIDs   []int
	SettlementID  *int
	RegionID      *int
	DistrictID    *int
}

// Mutate applies the CreateLocationInput on the LocationMutation builder.
func (i *CreateLocationInput) Mutate(m *LocationMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
}

// SetInput applies the change-set in the CreateLocationInput on the LocationCreate builder.
func (c *LocationCreate) SetInput(i CreateLocationInput) *LocationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLocationInput represents a mutation input for updating locations.
type UpdateLocationInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
	ClearSettlement     bool
	SettlementID        *int
	ClearRegion         bool
	RegionID            *int
	ClearDistrict       bool
	DistrictID          *int
}

// Mutate applies the UpdateLocationInput on the LocationMutation builder.
func (i *UpdateLocationInput) Mutate(m *LocationMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearSettlement {
		m.ClearSettlement()
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if i.ClearRegion {
		m.ClearRegion()
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if i.ClearDistrict {
		m.ClearDistrict()
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
}

// SetInput applies the change-set in the UpdateLocationInput on the LocationUpdate builder.
func (c *LocationUpdate) SetInput(i UpdateLocationInput) *LocationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLocationInput on the LocationUpdateOne builder.
func (c *LocationUpdateOne) SetInput(i UpdateLocationInput) *LocationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMediumInput represents a mutation input for creating media.
type CreateMediumInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	ArtifactIDs   []int
}

// Mutate applies the CreateMediumInput on the MediumMutation builder.
func (i *CreateMediumInput) Mutate(m *MediumMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMediumInput on the MediumCreate builder.
func (c *MediumCreate) SetInput(i CreateMediumInput) *MediumCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMediumInput represents a mutation input for updating media.
type UpdateMediumInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
}

// Mutate applies the UpdateMediumInput on the MediumMutation builder.
func (i *UpdateMediumInput) Mutate(m *MediumMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateMediumInput on the MediumUpdate builder.
func (c *MediumUpdate) SetInput(i UpdateMediumInput) *MediumUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMediumInput on the MediumUpdateOne builder.
func (c *MediumUpdateOne) SetInput(i UpdateMediumInput) *MediumUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateModelInput represents a mutation input for creating models.
type CreateModelInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	ArtifactIDs   []int
}

// Mutate applies the CreateModelInput on the ModelMutation builder.
func (i *CreateModelInput) Mutate(m *ModelMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateModelInput on the ModelCreate builder.
func (c *ModelCreate) SetInput(i CreateModelInput) *ModelCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateModelInput represents a mutation input for updating models.
type UpdateModelInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
}

// Mutate applies the UpdateModelInput on the ModelMutation builder.
func (i *UpdateModelInput) Mutate(m *ModelMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateModelInput on the ModelUpdate builder.
func (c *ModelUpdate) SetInput(i UpdateModelInput) *ModelUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateModelInput on the ModelUpdateOne builder.
func (c *ModelUpdateOne) SetInput(i UpdateModelInput) *ModelUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMonumentInput represents a mutation input for creating monuments.
type CreateMonumentInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	ArtifactIDs   []int
}

// Mutate applies the CreateMonumentInput on the MonumentMutation builder.
func (i *CreateMonumentInput) Mutate(m *MonumentMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMonumentInput on the MonumentCreate builder.
func (c *MonumentCreate) SetInput(i CreateMonumentInput) *MonumentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMonumentInput represents a mutation input for updating monuments.
type UpdateMonumentInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
}

// Mutate applies the UpdateMonumentInput on the MonumentMutation builder.
func (i *UpdateMonumentInput) Mutate(m *MonumentMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateMonumentInput on the MonumentUpdate builder.
func (c *MonumentUpdate) SetInput(i UpdateMonumentInput) *MonumentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMonumentInput on the MonumentUpdateOne builder.
func (c *MonumentUpdateOne) SetInput(i UpdateMonumentInput) *MonumentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrganizationInput represents a mutation input for creating organizations.
type CreateOrganizationInput struct {
	CreatedAt            *time.Time
	CreatedBy            *string
	UpdatedAt            *time.Time
	UpdatedBy            *string
	Address              *string
	PhoneNumbers         []string
	Emails               []string
	DisplayName          *string
	Description          *string
	ExternalLinks        []string
	PrimaryImageURL      *string
	AdditionalImagesUrls []string
	HolderID             *int
	PersonIDs            []int
}

// Mutate applies the CreateOrganizationInput on the OrganizationMutation builder.
func (i *CreateOrganizationInput) Mutate(m *OrganizationMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.PhoneNumbers; v != nil {
		m.SetPhoneNumbers(v)
	}
	if v := i.Emails; v != nil {
		m.SetEmails(v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.HolderID; v != nil {
		m.SetHolderID(*v)
	}
	if v := i.PersonIDs; len(v) > 0 {
		m.AddPersonIDs(v...)
	}
}

// SetInput applies the change-set in the CreateOrganizationInput on the OrganizationCreate builder.
func (c *OrganizationCreate) SetInput(i CreateOrganizationInput) *OrganizationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrganizationInput represents a mutation input for updating organizations.
type UpdateOrganizationInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearAddress               bool
	Address                    *string
	ClearPhoneNumbers          bool
	PhoneNumbers               []string
	AppendPhoneNumbers         []string
	ClearEmails                bool
	Emails                     []string
	AppendEmails               []string
	ClearDisplayName           bool
	DisplayName                *string
	ClearDescription           bool
	Description                *string
	ClearExternalLinks         bool
	ExternalLinks              []string
	AppendExternalLinks        []string
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearHolder                bool
	HolderID                   *int
	ClearPeople                bool
	AddPersonIDs               []int
	RemovePersonIDs            []int
}

// Mutate applies the UpdateOrganizationInput on the OrganizationMutation builder.
func (i *UpdateOrganizationInput) Mutate(m *OrganizationMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if i.ClearPhoneNumbers {
		m.ClearPhoneNumbers()
	}
	if v := i.PhoneNumbers; v != nil {
		m.SetPhoneNumbers(v)
	}
	if i.AppendPhoneNumbers != nil {
		m.AppendPhoneNumbers(i.PhoneNumbers)
	}
	if i.ClearEmails {
		m.ClearEmails()
	}
	if v := i.Emails; v != nil {
		m.SetEmails(v)
	}
	if i.AppendEmails != nil {
		m.AppendEmails(i.Emails)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearHolder {
		m.ClearHolder()
	}
	if v := i.HolderID; v != nil {
		m.SetHolderID(*v)
	}
	if i.ClearPeople {
		m.ClearPeople()
	}
	if v := i.AddPersonIDs; len(v) > 0 {
		m.AddPersonIDs(v...)
	}
	if v := i.RemovePersonIDs; len(v) > 0 {
		m.RemovePersonIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdate builder.
func (c *OrganizationUpdate) SetInput(i UpdateOrganizationInput) *OrganizationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdateOne builder.
func (c *OrganizationUpdateOne) SetInput(i UpdateOrganizationInput) *OrganizationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePersonInput represents a mutation input for creating persons.
type CreatePersonInput struct {
	CreatedAt            *time.Time
	CreatedBy            *string
	UpdatedAt            *time.Time
	UpdatedBy            *string
	Address              *string
	PhoneNumbers         []string
	Emails               []string
	DisplayName          *string
	Description          *string
	ExternalLinks        []string
	PrimaryImageURL      *string
	AdditionalImagesUrls []string
	GivenName            *string
	FamilyName           *string
	PatronymicName       *string
	BeginData            *time.Time
	EndDate              *time.Time
	Gender               person.Gender
	ArtifactIDs          []int
	ProjectIDs           []int
	PublicationIDs       []int
	PersonRoleIDs        []int
	HolderID             *int
	AffiliationID        *int
}

// Mutate applies the CreatePersonInput on the PersonMutation builder.
func (i *CreatePersonInput) Mutate(m *PersonMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.PhoneNumbers; v != nil {
		m.SetPhoneNumbers(v)
	}
	if v := i.Emails; v != nil {
		m.SetEmails(v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.GivenName; v != nil {
		m.SetGivenName(*v)
	}
	if v := i.FamilyName; v != nil {
		m.SetFamilyName(*v)
	}
	if v := i.PatronymicName; v != nil {
		m.SetPatronymicName(*v)
	}
	if v := i.BeginData; v != nil {
		m.SetBeginData(*v)
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	m.SetGender(i.Gender)
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.ProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.PublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.PersonRoleIDs; len(v) > 0 {
		m.AddPersonRoleIDs(v...)
	}
	if v := i.HolderID; v != nil {
		m.SetHolderID(*v)
	}
	if v := i.AffiliationID; v != nil {
		m.SetAffiliationID(*v)
	}
}

// SetInput applies the change-set in the CreatePersonInput on the PersonCreate builder.
func (c *PersonCreate) SetInput(i CreatePersonInput) *PersonCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePersonInput represents a mutation input for updating persons.
type UpdatePersonInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearAddress               bool
	Address                    *string
	ClearPhoneNumbers          bool
	PhoneNumbers               []string
	AppendPhoneNumbers         []string
	ClearEmails                bool
	Emails                     []string
	AppendEmails               []string
	ClearDisplayName           bool
	DisplayName                *string
	ClearDescription           bool
	Description                *string
	ClearExternalLinks         bool
	ExternalLinks              []string
	AppendExternalLinks        []string
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearGivenName             bool
	GivenName                  *string
	ClearFamilyName            bool
	FamilyName                 *string
	ClearPatronymicName        bool
	PatronymicName             *string
	ClearBeginData             bool
	BeginData                  *time.Time
	ClearEndDate               bool
	EndDate                    *time.Time
	Gender                     *person.Gender
	ClearArtifacts             bool
	AddArtifactIDs             []int
	RemoveArtifactIDs          []int
	ClearProjects              bool
	AddProjectIDs              []int
	RemoveProjectIDs           []int
	ClearPublications          bool
	AddPublicationIDs          []int
	RemovePublicationIDs       []int
	ClearPersonRoles           bool
	AddPersonRoleIDs           []int
	RemovePersonRoleIDs        []int
	ClearHolder                bool
	HolderID                   *int
	ClearAffiliation           bool
	AffiliationID              *int
}

// Mutate applies the UpdatePersonInput on the PersonMutation builder.
func (i *UpdatePersonInput) Mutate(m *PersonMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if i.ClearPhoneNumbers {
		m.ClearPhoneNumbers()
	}
	if v := i.PhoneNumbers; v != nil {
		m.SetPhoneNumbers(v)
	}
	if i.AppendPhoneNumbers != nil {
		m.AppendPhoneNumbers(i.PhoneNumbers)
	}
	if i.ClearEmails {
		m.ClearEmails()
	}
	if v := i.Emails; v != nil {
		m.SetEmails(v)
	}
	if i.AppendEmails != nil {
		m.AppendEmails(i.Emails)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearGivenName {
		m.ClearGivenName()
	}
	if v := i.GivenName; v != nil {
		m.SetGivenName(*v)
	}
	if i.ClearFamilyName {
		m.ClearFamilyName()
	}
	if v := i.FamilyName; v != nil {
		m.SetFamilyName(*v)
	}
	if i.ClearPatronymicName {
		m.ClearPatronymicName()
	}
	if v := i.PatronymicName; v != nil {
		m.SetPatronymicName(*v)
	}
	if i.ClearBeginData {
		m.ClearBeginData()
	}
	if v := i.BeginData; v != nil {
		m.SetBeginData(*v)
	}
	if i.ClearEndDate {
		m.ClearEndDate()
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearProjects {
		m.ClearProjects()
	}
	if v := i.AddProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.RemoveProjectIDs; len(v) > 0 {
		m.RemoveProjectIDs(v...)
	}
	if i.ClearPublications {
		m.ClearPublications()
	}
	if v := i.AddPublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.RemovePublicationIDs; len(v) > 0 {
		m.RemovePublicationIDs(v...)
	}
	if i.ClearPersonRoles {
		m.ClearPersonRoles()
	}
	if v := i.AddPersonRoleIDs; len(v) > 0 {
		m.AddPersonRoleIDs(v...)
	}
	if v := i.RemovePersonRoleIDs; len(v) > 0 {
		m.RemovePersonRoleIDs(v...)
	}
	if i.ClearHolder {
		m.ClearHolder()
	}
	if v := i.HolderID; v != nil {
		m.SetHolderID(*v)
	}
	if i.ClearAffiliation {
		m.ClearAffiliation()
	}
	if v := i.AffiliationID; v != nil {
		m.SetAffiliationID(*v)
	}
}

// SetInput applies the change-set in the UpdatePersonInput on the PersonUpdate builder.
func (c *PersonUpdate) SetInput(i UpdatePersonInput) *PersonUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePersonInput on the PersonUpdateOne builder.
func (c *PersonUpdateOne) SetInput(i UpdatePersonInput) *PersonUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProjectInput represents a mutation input for creating projects.
type CreateProjectInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	ArtifactIDs   []int
	TeamIDs       []int
}

// Mutate applies the CreateProjectInput on the ProjectMutation builder.
func (i *CreateProjectInput) Mutate(m *ProjectMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.TeamIDs; len(v) > 0 {
		m.AddTeamIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProjectInput on the ProjectCreate builder.
func (c *ProjectCreate) SetInput(i CreateProjectInput) *ProjectCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProjectInput represents a mutation input for updating projects.
type UpdateProjectInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
	ClearTeam           bool
	AddTeamIDs          []int
	RemoveTeamIDs       []int
}

// Mutate applies the UpdateProjectInput on the ProjectMutation builder.
func (i *UpdateProjectInput) Mutate(m *ProjectMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearTeam {
		m.ClearTeam()
	}
	if v := i.AddTeamIDs; len(v) > 0 {
		m.AddTeamIDs(v...)
	}
	if v := i.RemoveTeamIDs; len(v) > 0 {
		m.RemoveTeamIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProjectInput on the ProjectUpdate builder.
func (c *ProjectUpdate) SetInput(i UpdateProjectInput) *ProjectUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProjectInput on the ProjectUpdateOne builder.
func (c *ProjectUpdateOne) SetInput(i UpdateProjectInput) *ProjectUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePublicationInput represents a mutation input for creating publications.
type CreatePublicationInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	ArtifactIDs   []int
	AuthorIDs     []int
}

// Mutate applies the CreatePublicationInput on the PublicationMutation builder.
func (i *CreatePublicationInput) Mutate(m *PublicationMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.AuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePublicationInput on the PublicationCreate builder.
func (c *PublicationCreate) SetInput(i CreatePublicationInput) *PublicationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePublicationInput represents a mutation input for updating publications.
type UpdatePublicationInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
	ClearAuthors        bool
	AddAuthorIDs        []int
	RemoveAuthorIDs     []int
}

// Mutate applies the UpdatePublicationInput on the PublicationMutation builder.
func (i *UpdatePublicationInput) Mutate(m *PublicationMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearAuthors {
		m.ClearAuthors()
	}
	if v := i.AddAuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.RemoveAuthorIDs; len(v) > 0 {
		m.RemoveAuthorIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePublicationInput on the PublicationUpdate builder.
func (c *PublicationUpdate) SetInput(i UpdatePublicationInput) *PublicationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePublicationInput on the PublicationUpdateOne builder.
func (c *PublicationUpdateOne) SetInput(i UpdatePublicationInput) *PublicationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRegionInput represents a mutation input for creating regions.
type CreateRegionInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	LocationID    *int
}

// Mutate applies the CreateRegionInput on the RegionMutation builder.
func (i *CreateRegionInput) Mutate(m *RegionMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
}

// SetInput applies the change-set in the CreateRegionInput on the RegionCreate builder.
func (c *RegionCreate) SetInput(i CreateRegionInput) *RegionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRegionInput represents a mutation input for updating regions.
type UpdateRegionInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearLocation       bool
	LocationID          *int
}

// Mutate applies the UpdateRegionInput on the RegionMutation builder.
func (i *UpdateRegionInput) Mutate(m *RegionMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
}

// SetInput applies the change-set in the UpdateRegionInput on the RegionUpdate builder.
func (c *RegionUpdate) SetInput(i UpdateRegionInput) *RegionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRegionInput on the RegionUpdateOne builder.
func (c *RegionUpdateOne) SetInput(i UpdateRegionInput) *RegionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSetInput represents a mutation input for creating sets.
type CreateSetInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	ArtifactIDs   []int
}

// Mutate applies the CreateSetInput on the SetMutation builder.
func (i *CreateSetInput) Mutate(m *SetMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateSetInput on the SetCreate builder.
func (c *SetCreate) SetInput(i CreateSetInput) *SetCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSetInput represents a mutation input for updating sets.
type UpdateSetInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
}

// Mutate applies the UpdateSetInput on the SetMutation builder.
func (i *UpdateSetInput) Mutate(m *SetMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSetInput on the SetUpdate builder.
func (c *SetUpdate) SetInput(i UpdateSetInput) *SetUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSetInput on the SetUpdateOne builder.
func (c *SetUpdateOne) SetInput(i UpdateSetInput) *SetUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSettlementInput represents a mutation input for creating settlements.
type CreateSettlementInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	LocationID    *int
}

// Mutate applies the CreateSettlementInput on the SettlementMutation builder.
func (i *CreateSettlementInput) Mutate(m *SettlementMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
}

// SetInput applies the change-set in the CreateSettlementInput on the SettlementCreate builder.
func (c *SettlementCreate) SetInput(i CreateSettlementInput) *SettlementCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSettlementInput represents a mutation input for updating settlements.
type UpdateSettlementInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearLocation       bool
	LocationID          *int
}

// Mutate applies the UpdateSettlementInput on the SettlementMutation builder.
func (i *UpdateSettlementInput) Mutate(m *SettlementMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
}

// SetInput applies the change-set in the UpdateSettlementInput on the SettlementUpdate builder.
func (c *SettlementUpdate) SetInput(i UpdateSettlementInput) *SettlementUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSettlementInput on the SettlementUpdateOne builder.
func (c *SettlementUpdateOne) SetInput(i UpdateSettlementInput) *SettlementUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTechniqueInput represents a mutation input for creating techniques.
type CreateTechniqueInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Description   *string
	ExternalLinks []string
	ArtifactIDs   []int
}

// Mutate applies the CreateTechniqueInput on the TechniqueMutation builder.
func (i *CreateTechniqueInput) Mutate(m *TechniqueMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTechniqueInput on the TechniqueCreate builder.
func (c *TechniqueCreate) SetInput(i CreateTechniqueInput) *TechniqueCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTechniqueInput represents a mutation input for updating techniques.
type UpdateTechniqueInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearDescription    bool
	Description         *string
	ClearExternalLinks  bool
	ExternalLinks       []string
	AppendExternalLinks []string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
}

// Mutate applies the UpdateTechniqueInput on the TechniqueMutation builder.
func (i *UpdateTechniqueInput) Mutate(m *TechniqueMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLinks {
		m.ClearExternalLinks()
	}
	if v := i.ExternalLinks; v != nil {
		m.SetExternalLinks(v)
	}
	if i.AppendExternalLinks != nil {
		m.AppendExternalLinks(i.ExternalLinks)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTechniqueInput on the TechniqueUpdate builder.
func (c *TechniqueUpdate) SetInput(i UpdateTechniqueInput) *TechniqueUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTechniqueInput on the TechniqueUpdateOne builder.
func (c *TechniqueUpdateOne) SetInput(i UpdateTechniqueInput) *TechniqueUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
