// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronology"
	"github.com/dkrasnovdev/siberiana-api/ent/model"
	"github.com/dkrasnovdev/siberiana-api/ent/organization"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/petroglyph"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
	"github.com/dkrasnovdev/siberiana-api/internal/ent/types"
)

// CreateArtInput represents a mutation input for creating arts.
type CreateArtInput struct {
	CreatedAt            *time.Time
	CreatedBy            *string
	UpdatedAt            *time.Time
	UpdatedBy            *string
	Dating               *string
	DatingStart          *int
	DatingEnd            *int
	DisplayName          *string
	Abbreviation         *string
	Description          *string
	ExternalLink         *string
	Status               *art.Status
	PrimaryImageURL      *string
	AdditionalImagesUrls []string
	Height               *float64
	Width                *float64
	Length               *float64
	Depth                *float64
	Diameter             *float64
	Weight               *string
	Dimensions           *string
	Number               *string
	AuthorID             *int
	ArtGenreIDs          []int
	ArtStyleIDs          []int
	TechniqueIDs         []int
	CollectionID         int
	CountryID            *int
	SettlementID         *int
	DistrictID           *int
	RegionID             *int
}

// Mutate applies the CreateArtInput on the ArtMutation builder.
func (i *CreateArtInput) Mutate(m *ArtMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Dating; v != nil {
		m.SetDating(*v)
	}
	if v := i.DatingStart; v != nil {
		m.SetDatingStart(*v)
	}
	if v := i.DatingEnd; v != nil {
		m.SetDatingEnd(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.Height; v != nil {
		m.SetHeight(*v)
	}
	if v := i.Width; v != nil {
		m.SetWidth(*v)
	}
	if v := i.Length; v != nil {
		m.SetLength(*v)
	}
	if v := i.Depth; v != nil {
		m.SetDepth(*v)
	}
	if v := i.Diameter; v != nil {
		m.SetDiameter(*v)
	}
	if v := i.Weight; v != nil {
		m.SetWeight(*v)
	}
	if v := i.Dimensions; v != nil {
		m.SetDimensions(*v)
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
	if v := i.ArtGenreIDs; len(v) > 0 {
		m.AddArtGenreIDs(v...)
	}
	if v := i.ArtStyleIDs; len(v) > 0 {
		m.AddArtStyleIDs(v...)
	}
	if v := i.TechniqueIDs; len(v) > 0 {
		m.AddTechniqueIDs(v...)
	}
	m.SetCollectionID(i.CollectionID)
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
}

// SetInput applies the change-set in the CreateArtInput on the ArtCreate builder.
func (c *ArtCreate) SetInput(i CreateArtInput) *ArtCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateArtInput represents a mutation input for updating arts.
type UpdateArtInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearDating                bool
	Dating                     *string
	ClearDatingStart           bool
	DatingStart                *int
	ClearDatingEnd             bool
	DatingEnd                  *int
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearStatus                bool
	Status                     *art.Status
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearHeight                bool
	Height                     *float64
	ClearWidth                 bool
	Width                      *float64
	ClearLength                bool
	Length                     *float64
	ClearDepth                 bool
	Depth                      *float64
	ClearDiameter              bool
	Diameter                   *float64
	ClearWeight                bool
	Weight                     *string
	ClearDimensions            bool
	Dimensions                 *string
	ClearNumber                bool
	Number                     *string
	ClearAuthor                bool
	AuthorID                   *int
	ClearArtGenre              bool
	AddArtGenreIDs             []int
	RemoveArtGenreIDs          []int
	ClearArtStyle              bool
	AddArtStyleIDs             []int
	RemoveArtStyleIDs          []int
	ClearTechniques            bool
	AddTechniqueIDs            []int
	RemoveTechniqueIDs         []int
	CollectionID               *int
	ClearCountry               bool
	CountryID                  *int
	ClearSettlement            bool
	SettlementID               *int
	ClearDistrict              bool
	DistrictID                 *int
	ClearRegion                bool
	RegionID                   *int
}

// Mutate applies the UpdateArtInput on the ArtMutation builder.
func (i *UpdateArtInput) Mutate(m *ArtMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDating {
		m.ClearDating()
	}
	if v := i.Dating; v != nil {
		m.SetDating(*v)
	}
	if i.ClearDatingStart {
		m.ClearDatingStart()
	}
	if v := i.DatingStart; v != nil {
		m.SetDatingStart(*v)
	}
	if i.ClearDatingEnd {
		m.ClearDatingEnd()
	}
	if v := i.DatingEnd; v != nil {
		m.SetDatingEnd(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearHeight {
		m.ClearHeight()
	}
	if v := i.Height; v != nil {
		m.SetHeight(*v)
	}
	if i.ClearWidth {
		m.ClearWidth()
	}
	if v := i.Width; v != nil {
		m.SetWidth(*v)
	}
	if i.ClearLength {
		m.ClearLength()
	}
	if v := i.Length; v != nil {
		m.SetLength(*v)
	}
	if i.ClearDepth {
		m.ClearDepth()
	}
	if v := i.Depth; v != nil {
		m.SetDepth(*v)
	}
	if i.ClearDiameter {
		m.ClearDiameter()
	}
	if v := i.Diameter; v != nil {
		m.SetDiameter(*v)
	}
	if i.ClearWeight {
		m.ClearWeight()
	}
	if v := i.Weight; v != nil {
		m.SetWeight(*v)
	}
	if i.ClearDimensions {
		m.ClearDimensions()
	}
	if v := i.Dimensions; v != nil {
		m.SetDimensions(*v)
	}
	if i.ClearNumber {
		m.ClearNumber()
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if i.ClearAuthor {
		m.ClearAuthor()
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
	if i.ClearArtGenre {
		m.ClearArtGenre()
	}
	if v := i.AddArtGenreIDs; len(v) > 0 {
		m.AddArtGenreIDs(v...)
	}
	if v := i.RemoveArtGenreIDs; len(v) > 0 {
		m.RemoveArtGenreIDs(v...)
	}
	if i.ClearArtStyle {
		m.ClearArtStyle()
	}
	if v := i.AddArtStyleIDs; len(v) > 0 {
		m.AddArtStyleIDs(v...)
	}
	if v := i.RemoveArtStyleIDs; len(v) > 0 {
		m.RemoveArtStyleIDs(v...)
	}
	if i.ClearTechniques {
		m.ClearTechniques()
	}
	if v := i.AddTechniqueIDs; len(v) > 0 {
		m.AddTechniqueIDs(v...)
	}
	if v := i.RemoveTechniqueIDs; len(v) > 0 {
		m.RemoveTechniqueIDs(v...)
	}
	if v := i.CollectionID; v != nil {
		m.SetCollectionID(*v)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if i.ClearSettlement {
		m.ClearSettlement()
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if i.ClearDistrict {
		m.ClearDistrict()
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if i.ClearRegion {
		m.ClearRegion()
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
}

// SetInput applies the change-set in the UpdateArtInput on the ArtUpdate builder.
func (c *ArtUpdate) SetInput(i UpdateArtInput) *ArtUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateArtInput on the ArtUpdateOne builder.
func (c *ArtUpdateOne) SetInput(i UpdateArtInput) *ArtUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateArtGenreInput represents a mutation input for creating artgenres.
type CreateArtGenreInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtIDs       []int
}

// Mutate applies the CreateArtGenreInput on the ArtGenreMutation builder.
func (i *CreateArtGenreInput) Mutate(m *ArtGenreMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
}

// SetInput applies the change-set in the CreateArtGenreInput on the ArtGenreCreate builder.
func (c *ArtGenreCreate) SetInput(i CreateArtGenreInput) *ArtGenreCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateArtGenreInput represents a mutation input for updating artgenres.
type UpdateArtGenreInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArt          bool
	AddArtIDs         []int
	RemoveArtIDs      []int
}

// Mutate applies the UpdateArtGenreInput on the ArtGenreMutation builder.
func (i *UpdateArtGenreInput) Mutate(m *ArtGenreMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArt {
		m.ClearArt()
	}
	if v := i.AddArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.RemoveArtIDs; len(v) > 0 {
		m.RemoveArtIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateArtGenreInput on the ArtGenreUpdate builder.
func (c *ArtGenreUpdate) SetInput(i UpdateArtGenreInput) *ArtGenreUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateArtGenreInput on the ArtGenreUpdateOne builder.
func (c *ArtGenreUpdateOne) SetInput(i UpdateArtGenreInput) *ArtGenreUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateArtStyleInput represents a mutation input for creating artstyles.
type CreateArtStyleInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtIDs       []int
}

// Mutate applies the CreateArtStyleInput on the ArtStyleMutation builder.
func (i *CreateArtStyleInput) Mutate(m *ArtStyleMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
}

// SetInput applies the change-set in the CreateArtStyleInput on the ArtStyleCreate builder.
func (c *ArtStyleCreate) SetInput(i CreateArtStyleInput) *ArtStyleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateArtStyleInput represents a mutation input for updating artstyles.
type UpdateArtStyleInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArt          bool
	AddArtIDs         []int
	RemoveArtIDs      []int
}

// Mutate applies the UpdateArtStyleInput on the ArtStyleMutation builder.
func (i *UpdateArtStyleInput) Mutate(m *ArtStyleMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArt {
		m.ClearArt()
	}
	if v := i.AddArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.RemoveArtIDs; len(v) > 0 {
		m.RemoveArtIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateArtStyleInput on the ArtStyleUpdate builder.
func (c *ArtStyleUpdate) SetInput(i UpdateArtStyleInput) *ArtStyleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateArtStyleInput on the ArtStyleUpdateOne builder.
func (c *ArtStyleUpdateOne) SetInput(i UpdateArtStyleInput) *ArtStyleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateArtifactInput represents a mutation input for creating artifacts.
type CreateArtifactInput struct {
	CreatedAt             *time.Time
	CreatedBy             *string
	UpdatedAt             *time.Time
	UpdatedBy             *string
	Dating                *string
	DatingStart           *int
	DatingEnd             *int
	DisplayName           *string
	Abbreviation          *string
	Description           *string
	ExternalLink          *string
	Status                *artifact.Status
	PrimaryImageURL       *string
	AdditionalImagesUrls  []string
	Height                *float64
	Width                 *float64
	Length                *float64
	Depth                 *float64
	Diameter              *float64
	Weight                *string
	Dimensions            *string
	DeletedAt             *time.Time
	DeletedBy             *string
	ChemicalComposition   *string
	KpNumber              *string
	GoskatalogNumber      *string
	InventoryNumber       *string
	Typology              *string
	AdmissionDate         *time.Time
	AuthorIDs             []int
	DonorID               *int
	MediumIDs             []int
	TechniqueIDs          []int
	ProjectIDs            []int
	PublicationIDs        []int
	CulturalAffiliationID *int
	EthnosID              *int
	OrganizationID        *int
	MonumentID            *int
	ModelID               *int
	SetID                 *int
	LocationID            *int
	CollectionID          int
	LicenseID             *int
	CountryID             *int
	SettlementID          *int
	DistrictID            *int
	RegionID              *int
	PersonalIDs           []int
}

// Mutate applies the CreateArtifactInput on the ArtifactMutation builder.
func (i *CreateArtifactInput) Mutate(m *ArtifactMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Dating; v != nil {
		m.SetDating(*v)
	}
	if v := i.DatingStart; v != nil {
		m.SetDatingStart(*v)
	}
	if v := i.DatingEnd; v != nil {
		m.SetDatingEnd(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.Height; v != nil {
		m.SetHeight(*v)
	}
	if v := i.Width; v != nil {
		m.SetWidth(*v)
	}
	if v := i.Length; v != nil {
		m.SetLength(*v)
	}
	if v := i.Depth; v != nil {
		m.SetDepth(*v)
	}
	if v := i.Diameter; v != nil {
		m.SetDiameter(*v)
	}
	if v := i.Weight; v != nil {
		m.SetWeight(*v)
	}
	if v := i.Dimensions; v != nil {
		m.SetDimensions(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if v := i.ChemicalComposition; v != nil {
		m.SetChemicalComposition(*v)
	}
	if v := i.KpNumber; v != nil {
		m.SetKpNumber(*v)
	}
	if v := i.GoskatalogNumber; v != nil {
		m.SetGoskatalogNumber(*v)
	}
	if v := i.InventoryNumber; v != nil {
		m.SetInventoryNumber(*v)
	}
	if v := i.Typology; v != nil {
		m.SetTypology(*v)
	}
	if v := i.AdmissionDate; v != nil {
		m.SetAdmissionDate(*v)
	}
	if v := i.AuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.DonorID; v != nil {
		m.SetDonorID(*v)
	}
	if v := i.MediumIDs; len(v) > 0 {
		m.AddMediumIDs(v...)
	}
	if v := i.TechniqueIDs; len(v) > 0 {
		m.AddTechniqueIDs(v...)
	}
	if v := i.ProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.PublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.CulturalAffiliationID; v != nil {
		m.SetCulturalAffiliationID(*v)
	}
	if v := i.EthnosID; v != nil {
		m.SetEthnosID(*v)
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
	if v := i.MonumentID; v != nil {
		m.SetMonumentID(*v)
	}
	if v := i.ModelID; v != nil {
		m.SetModelID(*v)
	}
	if v := i.SetID; v != nil {
		m.SetSetID(*v)
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	m.SetCollectionID(i.CollectionID)
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if v := i.PersonalIDs; len(v) > 0 {
		m.AddPersonalIDs(v...)
	}
}

// SetInput applies the change-set in the CreateArtifactInput on the ArtifactCreate builder.
func (c *ArtifactCreate) SetInput(i CreateArtifactInput) *ArtifactCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateArtifactInput represents a mutation input for updating artifacts.
type UpdateArtifactInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearDating                bool
	Dating                     *string
	ClearDatingStart           bool
	DatingStart                *int
	ClearDatingEnd             bool
	DatingEnd                  *int
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearStatus                bool
	Status                     *artifact.Status
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearHeight                bool
	Height                     *float64
	ClearWidth                 bool
	Width                      *float64
	ClearLength                bool
	Length                     *float64
	ClearDepth                 bool
	Depth                      *float64
	ClearDiameter              bool
	Diameter                   *float64
	ClearWeight                bool
	Weight                     *string
	ClearDimensions            bool
	Dimensions                 *string
	ClearDeletedAt             bool
	DeletedAt                  *time.Time
	ClearDeletedBy             bool
	DeletedBy                  *string
	ClearChemicalComposition   bool
	ChemicalComposition        *string
	ClearKpNumber              bool
	KpNumber                   *string
	ClearGoskatalogNumber      bool
	GoskatalogNumber           *string
	ClearInventoryNumber       bool
	InventoryNumber            *string
	ClearTypology              bool
	Typology                   *string
	ClearAdmissionDate         bool
	AdmissionDate              *time.Time
	ClearAuthors               bool
	AddAuthorIDs               []int
	RemoveAuthorIDs            []int
	ClearDonor                 bool
	DonorID                    *int
	ClearMediums               bool
	AddMediumIDs               []int
	RemoveMediumIDs            []int
	ClearTechniques            bool
	AddTechniqueIDs            []int
	RemoveTechniqueIDs         []int
	ClearProjects              bool
	AddProjectIDs              []int
	RemoveProjectIDs           []int
	ClearPublications          bool
	AddPublicationIDs          []int
	RemovePublicationIDs       []int
	ClearCulturalAffiliation   bool
	CulturalAffiliationID      *int
	ClearEthnos                bool
	EthnosID                   *int
	ClearOrganization          bool
	OrganizationID             *int
	ClearMonument              bool
	MonumentID                 *int
	ClearModel                 bool
	ModelID                    *int
	ClearSet                   bool
	SetID                      *int
	ClearLocation              bool
	LocationID                 *int
	CollectionID               *int
	ClearLicense               bool
	LicenseID                  *int
	ClearCountry               bool
	CountryID                  *int
	ClearSettlement            bool
	SettlementID               *int
	ClearDistrict              bool
	DistrictID                 *int
	ClearRegion                bool
	RegionID                   *int
	ClearPersonal              bool
	AddPersonalIDs             []int
	RemovePersonalIDs          []int
}

// Mutate applies the UpdateArtifactInput on the ArtifactMutation builder.
func (i *UpdateArtifactInput) Mutate(m *ArtifactMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDating {
		m.ClearDating()
	}
	if v := i.Dating; v != nil {
		m.SetDating(*v)
	}
	if i.ClearDatingStart {
		m.ClearDatingStart()
	}
	if v := i.DatingStart; v != nil {
		m.SetDatingStart(*v)
	}
	if i.ClearDatingEnd {
		m.ClearDatingEnd()
	}
	if v := i.DatingEnd; v != nil {
		m.SetDatingEnd(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearHeight {
		m.ClearHeight()
	}
	if v := i.Height; v != nil {
		m.SetHeight(*v)
	}
	if i.ClearWidth {
		m.ClearWidth()
	}
	if v := i.Width; v != nil {
		m.SetWidth(*v)
	}
	if i.ClearLength {
		m.ClearLength()
	}
	if v := i.Length; v != nil {
		m.SetLength(*v)
	}
	if i.ClearDepth {
		m.ClearDepth()
	}
	if v := i.Depth; v != nil {
		m.SetDepth(*v)
	}
	if i.ClearDiameter {
		m.ClearDiameter()
	}
	if v := i.Diameter; v != nil {
		m.SetDiameter(*v)
	}
	if i.ClearWeight {
		m.ClearWeight()
	}
	if v := i.Weight; v != nil {
		m.SetWeight(*v)
	}
	if i.ClearDimensions {
		m.ClearDimensions()
	}
	if v := i.Dimensions; v != nil {
		m.SetDimensions(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearDeletedBy {
		m.ClearDeletedBy()
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if i.ClearChemicalComposition {
		m.ClearChemicalComposition()
	}
	if v := i.ChemicalComposition; v != nil {
		m.SetChemicalComposition(*v)
	}
	if i.ClearKpNumber {
		m.ClearKpNumber()
	}
	if v := i.KpNumber; v != nil {
		m.SetKpNumber(*v)
	}
	if i.ClearGoskatalogNumber {
		m.ClearGoskatalogNumber()
	}
	if v := i.GoskatalogNumber; v != nil {
		m.SetGoskatalogNumber(*v)
	}
	if i.ClearInventoryNumber {
		m.ClearInventoryNumber()
	}
	if v := i.InventoryNumber; v != nil {
		m.SetInventoryNumber(*v)
	}
	if i.ClearTypology {
		m.ClearTypology()
	}
	if v := i.Typology; v != nil {
		m.SetTypology(*v)
	}
	if i.ClearAdmissionDate {
		m.ClearAdmissionDate()
	}
	if v := i.AdmissionDate; v != nil {
		m.SetAdmissionDate(*v)
	}
	if i.ClearAuthors {
		m.ClearAuthors()
	}
	if v := i.AddAuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.RemoveAuthorIDs; len(v) > 0 {
		m.RemoveAuthorIDs(v...)
	}
	if i.ClearDonor {
		m.ClearDonor()
	}
	if v := i.DonorID; v != nil {
		m.SetDonorID(*v)
	}
	if i.ClearMediums {
		m.ClearMediums()
	}
	if v := i.AddMediumIDs; len(v) > 0 {
		m.AddMediumIDs(v...)
	}
	if v := i.RemoveMediumIDs; len(v) > 0 {
		m.RemoveMediumIDs(v...)
	}
	if i.ClearTechniques {
		m.ClearTechniques()
	}
	if v := i.AddTechniqueIDs; len(v) > 0 {
		m.AddTechniqueIDs(v...)
	}
	if v := i.RemoveTechniqueIDs; len(v) > 0 {
		m.RemoveTechniqueIDs(v...)
	}
	if i.ClearProjects {
		m.ClearProjects()
	}
	if v := i.AddProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.RemoveProjectIDs; len(v) > 0 {
		m.RemoveProjectIDs(v...)
	}
	if i.ClearPublications {
		m.ClearPublications()
	}
	if v := i.AddPublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.RemovePublicationIDs; len(v) > 0 {
		m.RemovePublicationIDs(v...)
	}
	if i.ClearCulturalAffiliation {
		m.ClearCulturalAffiliation()
	}
	if v := i.CulturalAffiliationID; v != nil {
		m.SetCulturalAffiliationID(*v)
	}
	if i.ClearEthnos {
		m.ClearEthnos()
	}
	if v := i.EthnosID; v != nil {
		m.SetEthnosID(*v)
	}
	if i.ClearOrganization {
		m.ClearOrganization()
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
	if i.ClearMonument {
		m.ClearMonument()
	}
	if v := i.MonumentID; v != nil {
		m.SetMonumentID(*v)
	}
	if i.ClearModel {
		m.ClearModel()
	}
	if v := i.ModelID; v != nil {
		m.SetModelID(*v)
	}
	if i.ClearSet {
		m.ClearSet()
	}
	if v := i.SetID; v != nil {
		m.SetSetID(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	if v := i.CollectionID; v != nil {
		m.SetCollectionID(*v)
	}
	if i.ClearLicense {
		m.ClearLicense()
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if i.ClearSettlement {
		m.ClearSettlement()
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if i.ClearDistrict {
		m.ClearDistrict()
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if i.ClearRegion {
		m.ClearRegion()
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if i.ClearPersonal {
		m.ClearPersonal()
	}
	if v := i.AddPersonalIDs; len(v) > 0 {
		m.AddPersonalIDs(v...)
	}
	if v := i.RemovePersonalIDs; len(v) > 0 {
		m.RemovePersonalIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateArtifactInput on the ArtifactUpdate builder.
func (c *ArtifactUpdate) SetInput(i UpdateArtifactInput) *ArtifactUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateArtifactInput on the ArtifactUpdateOne builder.
func (c *ArtifactUpdateOne) SetInput(i UpdateArtifactInput) *ArtifactUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateBookInput represents a mutation input for creating books.
type CreateBookInput struct {
	CreatedAt            *time.Time
	CreatedBy            *string
	UpdatedAt            *time.Time
	UpdatedBy            *string
	DisplayName          *string
	Abbreviation         *string
	Description          *string
	ExternalLink         *string
	Status               *book.Status
	PrimaryImageURL      *string
	AdditionalImagesUrls []string
	Files                []string
	Year                 *int
	AuthorIDs            []int
	BookGenreIDs         []int
	CollectionID         int
	PeriodicalID         *int
	PublisherID          *int
	LicenseID            *int
	LocationID           *int
	LibraryID            *int
	CountryID            *int
	SettlementID         *int
	DistrictID           *int
	RegionID             *int
	PersonalIDs          []int
}

// Mutate applies the CreateBookInput on the BookMutation builder.
func (i *CreateBookInput) Mutate(m *BookMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.Files; v != nil {
		m.SetFiles(v)
	}
	if v := i.Year; v != nil {
		m.SetYear(*v)
	}
	if v := i.AuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.BookGenreIDs; len(v) > 0 {
		m.AddBookGenreIDs(v...)
	}
	m.SetCollectionID(i.CollectionID)
	if v := i.PeriodicalID; v != nil {
		m.SetPeriodicalID(*v)
	}
	if v := i.PublisherID; v != nil {
		m.SetPublisherID(*v)
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	if v := i.LibraryID; v != nil {
		m.SetLibraryID(*v)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if v := i.PersonalIDs; len(v) > 0 {
		m.AddPersonalIDs(v...)
	}
}

// SetInput applies the change-set in the CreateBookInput on the BookCreate builder.
func (c *BookCreate) SetInput(i CreateBookInput) *BookCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateBookInput represents a mutation input for updating books.
type UpdateBookInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearStatus                bool
	Status                     *book.Status
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearFiles                 bool
	Files                      []string
	AppendFiles                []string
	ClearYear                  bool
	Year                       *int
	ClearAuthors               bool
	AddAuthorIDs               []int
	RemoveAuthorIDs            []int
	ClearBookGenres            bool
	AddBookGenreIDs            []int
	RemoveBookGenreIDs         []int
	CollectionID               *int
	ClearPeriodical            bool
	PeriodicalID               *int
	ClearPublisher             bool
	PublisherID                *int
	ClearLicense               bool
	LicenseID                  *int
	ClearLocation              bool
	LocationID                 *int
	ClearLibrary               bool
	LibraryID                  *int
	ClearCountry               bool
	CountryID                  *int
	ClearSettlement            bool
	SettlementID               *int
	ClearDistrict              bool
	DistrictID                 *int
	ClearRegion                bool
	RegionID                   *int
	ClearPersonal              bool
	AddPersonalIDs             []int
	RemovePersonalIDs          []int
}

// Mutate applies the UpdateBookInput on the BookMutation builder.
func (i *UpdateBookInput) Mutate(m *BookMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.Files; v != nil {
		m.SetFiles(v)
	}
	if i.AppendFiles != nil {
		m.AppendFiles(i.Files)
	}
	if i.ClearYear {
		m.ClearYear()
	}
	if v := i.Year; v != nil {
		m.SetYear(*v)
	}
	if i.ClearAuthors {
		m.ClearAuthors()
	}
	if v := i.AddAuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.RemoveAuthorIDs; len(v) > 0 {
		m.RemoveAuthorIDs(v...)
	}
	if i.ClearBookGenres {
		m.ClearBookGenres()
	}
	if v := i.AddBookGenreIDs; len(v) > 0 {
		m.AddBookGenreIDs(v...)
	}
	if v := i.RemoveBookGenreIDs; len(v) > 0 {
		m.RemoveBookGenreIDs(v...)
	}
	if v := i.CollectionID; v != nil {
		m.SetCollectionID(*v)
	}
	if i.ClearPeriodical {
		m.ClearPeriodical()
	}
	if v := i.PeriodicalID; v != nil {
		m.SetPeriodicalID(*v)
	}
	if i.ClearPublisher {
		m.ClearPublisher()
	}
	if v := i.PublisherID; v != nil {
		m.SetPublisherID(*v)
	}
	if i.ClearLicense {
		m.ClearLicense()
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	if i.ClearLibrary {
		m.ClearLibrary()
	}
	if v := i.LibraryID; v != nil {
		m.SetLibraryID(*v)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if i.ClearSettlement {
		m.ClearSettlement()
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if i.ClearDistrict {
		m.ClearDistrict()
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if i.ClearRegion {
		m.ClearRegion()
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if i.ClearPersonal {
		m.ClearPersonal()
	}
	if v := i.AddPersonalIDs; len(v) > 0 {
		m.AddPersonalIDs(v...)
	}
	if v := i.RemovePersonalIDs; len(v) > 0 {
		m.RemovePersonalIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateBookInput on the BookUpdate builder.
func (c *BookUpdate) SetInput(i UpdateBookInput) *BookUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBookInput on the BookUpdateOne builder.
func (c *BookUpdateOne) SetInput(i UpdateBookInput) *BookUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateBookGenreInput represents a mutation input for creating bookgenres.
type CreateBookGenreInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	BookIDs      []int
}

// Mutate applies the CreateBookGenreInput on the BookGenreMutation builder.
func (i *CreateBookGenreInput) Mutate(m *BookGenreMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
}

// SetInput applies the change-set in the CreateBookGenreInput on the BookGenreCreate builder.
func (c *BookGenreCreate) SetInput(i CreateBookGenreInput) *BookGenreCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateBookGenreInput represents a mutation input for updating bookgenres.
type UpdateBookGenreInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearBooks        bool
	AddBookIDs        []int
	RemoveBookIDs     []int
}

// Mutate applies the UpdateBookGenreInput on the BookGenreMutation builder.
func (i *UpdateBookGenreInput) Mutate(m *BookGenreMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateBookGenreInput on the BookGenreUpdate builder.
func (c *BookGenreUpdate) SetInput(i UpdateBookGenreInput) *BookGenreUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBookGenreInput on the BookGenreUpdateOne builder.
func (c *BookGenreUpdateOne) SetInput(i UpdateBookGenreInput) *BookGenreUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCategoryInput represents a mutation input for creating categories.
type CreateCategoryInput struct {
	CreatedAt            *time.Time
	CreatedBy            *string
	UpdatedAt            *time.Time
	UpdatedBy            *string
	DisplayName          *string
	Abbreviation         *string
	Description          *string
	ExternalLink         *string
	PrimaryImageURL      *string
	AdditionalImagesUrls []string
	DeletedAt            *time.Time
	DeletedBy            *string
	Slug                 string
	CollectionIDs        []int
}

// Mutate applies the CreateCategoryInput on the CategoryMutation builder.
func (i *CreateCategoryInput) Mutate(m *CategoryMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	m.SetSlug(i.Slug)
	if v := i.CollectionIDs; len(v) > 0 {
		m.AddCollectionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCategoryInput on the CategoryCreate builder.
func (c *CategoryCreate) SetInput(i CreateCategoryInput) *CategoryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCategoryInput represents a mutation input for updating categories.
type UpdateCategoryInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearDeletedAt             bool
	DeletedAt                  *time.Time
	ClearDeletedBy             bool
	DeletedBy                  *string
	Slug                       *string
	ClearCollections           bool
	AddCollectionIDs           []int
	RemoveCollectionIDs        []int
}

// Mutate applies the UpdateCategoryInput on the CategoryMutation builder.
func (i *UpdateCategoryInput) Mutate(m *CategoryMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearDeletedBy {
		m.ClearDeletedBy()
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if i.ClearCollections {
		m.ClearCollections()
	}
	if v := i.AddCollectionIDs; len(v) > 0 {
		m.AddCollectionIDs(v...)
	}
	if v := i.RemoveCollectionIDs; len(v) > 0 {
		m.RemoveCollectionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCategoryInput on the CategoryUpdate builder.
func (c *CategoryUpdate) SetInput(i UpdateCategoryInput) *CategoryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCategoryInput on the CategoryUpdateOne builder.
func (c *CategoryUpdateOne) SetInput(i UpdateCategoryInput) *CategoryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCollectionInput represents a mutation input for creating collections.
type CreateCollectionInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	DisplayName             *string
	Abbreviation            *string
	Description             *string
	ExternalLink            *string
	PrimaryImageURL         *string
	AdditionalImagesUrls    []string
	DeletedAt               *time.Time
	DeletedBy               *string
	Slug                    string
	Type                    *collection.Type
	ArtIDs                  []int
	ArtifactIDs             []int
	PetroglyphIDs           []int
	BookIDs                 []int
	ProtectedAreaPictureIDs []int
	CategoryID              int
	AuthorIDs               []int
}

// Mutate applies the CreateCollectionInput on the CollectionMutation builder.
func (i *CreateCollectionInput) Mutate(m *CollectionMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	m.SetSlug(i.Slug)
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.ArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.PetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	m.SetCategoryID(i.CategoryID)
	if v := i.AuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCollectionInput on the CollectionCreate builder.
func (c *CollectionCreate) SetInput(i CreateCollectionInput) *CollectionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCollectionInput represents a mutation input for updating collections.
type UpdateCollectionInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	ClearDisplayName              bool
	DisplayName                   *string
	ClearAbbreviation             bool
	Abbreviation                  *string
	ClearDescription              bool
	Description                   *string
	ClearExternalLink             bool
	ExternalLink                  *string
	ClearPrimaryImageURL          bool
	PrimaryImageURL               *string
	ClearAdditionalImagesUrls     bool
	AdditionalImagesUrls          []string
	AppendAdditionalImagesUrls    []string
	ClearDeletedAt                bool
	DeletedAt                     *time.Time
	ClearDeletedBy                bool
	DeletedBy                     *string
	Slug                          *string
	ClearArt                      bool
	AddArtIDs                     []int
	RemoveArtIDs                  []int
	ClearArtifacts                bool
	AddArtifactIDs                []int
	RemoveArtifactIDs             []int
	ClearPetroglyphs              bool
	AddPetroglyphIDs              []int
	RemovePetroglyphIDs           []int
	ClearBooks                    bool
	AddBookIDs                    []int
	RemoveBookIDs                 []int
	ClearProtectedAreaPictures    bool
	AddProtectedAreaPictureIDs    []int
	RemoveProtectedAreaPictureIDs []int
	CategoryID                    *int
	ClearAuthors                  bool
	AddAuthorIDs                  []int
	RemoveAuthorIDs               []int
}

// Mutate applies the UpdateCollectionInput on the CollectionMutation builder.
func (i *UpdateCollectionInput) Mutate(m *CollectionMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearDeletedBy {
		m.ClearDeletedBy()
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if i.ClearArt {
		m.ClearArt()
	}
	if v := i.AddArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.RemoveArtIDs; len(v) > 0 {
		m.RemoveArtIDs(v...)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearPetroglyphs {
		m.ClearPetroglyphs()
	}
	if v := i.AddPetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.RemovePetroglyphIDs; len(v) > 0 {
		m.RemovePetroglyphIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
	if v := i.CategoryID; v != nil {
		m.SetCategoryID(*v)
	}
	if i.ClearAuthors {
		m.ClearAuthors()
	}
	if v := i.AddAuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.RemoveAuthorIDs; len(v) > 0 {
		m.RemoveAuthorIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCollectionInput on the CollectionUpdate builder.
func (c *CollectionUpdate) SetInput(i UpdateCollectionInput) *CollectionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCollectionInput on the CollectionUpdateOne builder.
func (c *CollectionUpdateOne) SetInput(i UpdateCollectionInput) *CollectionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCountryInput represents a mutation input for creating countries.
type CreateCountryInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	DisplayName             *string
	Abbreviation            *string
	Description             *string
	ExternalLink            *string
	ArtIDs                  []int
	ArtifactIDs             []int
	BookIDs                 []int
	ProtectedAreaPictureIDs []int
	RegionIDs               []int
	LocationIDs             []int
	KnownAsAfterIDs         []int
	KnownAsBeforeIDs        []int
}

// Mutate applies the CreateCountryInput on the CountryMutation builder.
func (i *CreateCountryInput) Mutate(m *CountryMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RegionIDs; len(v) > 0 {
		m.AddRegionIDs(v...)
	}
	if v := i.LocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.KnownAsAfterIDs; len(v) > 0 {
		m.AddKnownAsAfterIDs(v...)
	}
	if v := i.KnownAsBeforeIDs; len(v) > 0 {
		m.AddKnownAsBeforeIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCountryInput on the CountryCreate builder.
func (c *CountryCreate) SetInput(i CreateCountryInput) *CountryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCountryInput represents a mutation input for updating countries.
type UpdateCountryInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	ClearDisplayName              bool
	DisplayName                   *string
	ClearAbbreviation             bool
	Abbreviation                  *string
	ClearDescription              bool
	Description                   *string
	ClearExternalLink             bool
	ExternalLink                  *string
	ClearArt                      bool
	AddArtIDs                     []int
	RemoveArtIDs                  []int
	ClearArtifacts                bool
	AddArtifactIDs                []int
	RemoveArtifactIDs             []int
	ClearBooks                    bool
	AddBookIDs                    []int
	RemoveBookIDs                 []int
	ClearProtectedAreaPictures    bool
	AddProtectedAreaPictureIDs    []int
	RemoveProtectedAreaPictureIDs []int
	ClearRegions                  bool
	AddRegionIDs                  []int
	RemoveRegionIDs               []int
	ClearLocations                bool
	AddLocationIDs                []int
	RemoveLocationIDs             []int
	ClearKnownAsAfter             bool
	AddKnownAsAfterIDs            []int
	RemoveKnownAsAfterIDs         []int
	ClearKnownAsBefore            bool
	AddKnownAsBeforeIDs           []int
	RemoveKnownAsBeforeIDs        []int
}

// Mutate applies the UpdateCountryInput on the CountryMutation builder.
func (i *UpdateCountryInput) Mutate(m *CountryMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArt {
		m.ClearArt()
	}
	if v := i.AddArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.RemoveArtIDs; len(v) > 0 {
		m.RemoveArtIDs(v...)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
	if i.ClearRegions {
		m.ClearRegions()
	}
	if v := i.AddRegionIDs; len(v) > 0 {
		m.AddRegionIDs(v...)
	}
	if v := i.RemoveRegionIDs; len(v) > 0 {
		m.RemoveRegionIDs(v...)
	}
	if i.ClearLocations {
		m.ClearLocations()
	}
	if v := i.AddLocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RemoveLocationIDs; len(v) > 0 {
		m.RemoveLocationIDs(v...)
	}
	if i.ClearKnownAsAfter {
		m.ClearKnownAsAfter()
	}
	if v := i.AddKnownAsAfterIDs; len(v) > 0 {
		m.AddKnownAsAfterIDs(v...)
	}
	if v := i.RemoveKnownAsAfterIDs; len(v) > 0 {
		m.RemoveKnownAsAfterIDs(v...)
	}
	if i.ClearKnownAsBefore {
		m.ClearKnownAsBefore()
	}
	if v := i.AddKnownAsBeforeIDs; len(v) > 0 {
		m.AddKnownAsBeforeIDs(v...)
	}
	if v := i.RemoveKnownAsBeforeIDs; len(v) > 0 {
		m.RemoveKnownAsBeforeIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCountryInput on the CountryUpdate builder.
func (c *CountryUpdate) SetInput(i UpdateCountryInput) *CountryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCountryInput on the CountryUpdateOne builder.
func (c *CountryUpdateOne) SetInput(i UpdateCountryInput) *CountryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCultureInput represents a mutation input for creating cultures.
type CreateCultureInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Abbreviation  *string
	Description   *string
	ExternalLink  *string
	ArtifactIDs   []int
	PetroglyphIDs []int
}

// Mutate applies the CreateCultureInput on the CultureMutation builder.
func (i *CreateCultureInput) Mutate(m *CultureMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.PetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCultureInput on the CultureCreate builder.
func (c *CultureCreate) SetInput(i CreateCultureInput) *CultureCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCultureInput represents a mutation input for updating cultures.
type UpdateCultureInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearAbbreviation   bool
	Abbreviation        *string
	ClearDescription    bool
	Description         *string
	ClearExternalLink   bool
	ExternalLink        *string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
	ClearPetroglyphs    bool
	AddPetroglyphIDs    []int
	RemovePetroglyphIDs []int
}

// Mutate applies the UpdateCultureInput on the CultureMutation builder.
func (i *UpdateCultureInput) Mutate(m *CultureMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearPetroglyphs {
		m.ClearPetroglyphs()
	}
	if v := i.AddPetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.RemovePetroglyphIDs; len(v) > 0 {
		m.RemovePetroglyphIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCultureInput on the CultureUpdate builder.
func (c *CultureUpdate) SetInput(i UpdateCultureInput) *CultureUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCultureInput on the CultureUpdateOne builder.
func (c *CultureUpdateOne) SetInput(i UpdateCultureInput) *CultureUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDendrochronologicalAnalysisInput represents a mutation input for creating dendrochronologicalanalyses.
type CreateDendrochronologicalAnalysisInput struct {
	CreatedAt              *time.Time
	CreatedBy              *string
	UpdatedAt              *time.Time
	UpdatedBy              *string
	DisplayName            string
	StartYear              int
	EndYear                int
	NumberOfRings          int
	CoefficientCorrelation float64
	StandardDeviation      float64
	Sensitivity            float64
	SamplingLocation       string
	DendrochronologyID     int
}

// Mutate applies the CreateDendrochronologicalAnalysisInput on the DendrochronologicalAnalysisMutation builder.
func (i *CreateDendrochronologicalAnalysisInput) Mutate(m *DendrochronologicalAnalysisMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetDisplayName(i.DisplayName)
	m.SetStartYear(i.StartYear)
	m.SetEndYear(i.EndYear)
	m.SetNumberOfRings(i.NumberOfRings)
	m.SetCoefficientCorrelation(i.CoefficientCorrelation)
	m.SetStandardDeviation(i.StandardDeviation)
	m.SetSensitivity(i.Sensitivity)
	m.SetSamplingLocation(i.SamplingLocation)
	m.SetDendrochronologyID(i.DendrochronologyID)
}

// SetInput applies the change-set in the CreateDendrochronologicalAnalysisInput on the DendrochronologicalAnalysisCreate builder.
func (c *DendrochronologicalAnalysisCreate) SetInput(i CreateDendrochronologicalAnalysisInput) *DendrochronologicalAnalysisCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDendrochronologicalAnalysisInput represents a mutation input for updating dendrochronologicalanalyses.
type UpdateDendrochronologicalAnalysisInput struct {
	ClearCreatedBy         bool
	CreatedBy              *string
	UpdatedAt              *time.Time
	ClearUpdatedBy         bool
	UpdatedBy              *string
	DisplayName            *string
	StartYear              *int
	EndYear                *int
	NumberOfRings          *int
	CoefficientCorrelation *float64
	StandardDeviation      *float64
	Sensitivity            *float64
	SamplingLocation       *string
	DendrochronologyID     *int
}

// Mutate applies the UpdateDendrochronologicalAnalysisInput on the DendrochronologicalAnalysisMutation builder.
func (i *UpdateDendrochronologicalAnalysisInput) Mutate(m *DendrochronologicalAnalysisMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.StartYear; v != nil {
		m.SetStartYear(*v)
	}
	if v := i.EndYear; v != nil {
		m.SetEndYear(*v)
	}
	if v := i.NumberOfRings; v != nil {
		m.SetNumberOfRings(*v)
	}
	if v := i.CoefficientCorrelation; v != nil {
		m.SetCoefficientCorrelation(*v)
	}
	if v := i.StandardDeviation; v != nil {
		m.SetStandardDeviation(*v)
	}
	if v := i.Sensitivity; v != nil {
		m.SetSensitivity(*v)
	}
	if v := i.SamplingLocation; v != nil {
		m.SetSamplingLocation(*v)
	}
	if v := i.DendrochronologyID; v != nil {
		m.SetDendrochronologyID(*v)
	}
}

// SetInput applies the change-set in the UpdateDendrochronologicalAnalysisInput on the DendrochronologicalAnalysisUpdate builder.
func (c *DendrochronologicalAnalysisUpdate) SetInput(i UpdateDendrochronologicalAnalysisInput) *DendrochronologicalAnalysisUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDendrochronologicalAnalysisInput on the DendrochronologicalAnalysisUpdateOne builder.
func (c *DendrochronologicalAnalysisUpdateOne) SetInput(i UpdateDendrochronologicalAnalysisInput) *DendrochronologicalAnalysisUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDendrochronologyInput represents a mutation input for creating dendrochronologies.
type CreateDendrochronologyInput struct {
	CreatedAt            *time.Time
	CreatedBy            *string
	UpdatedAt            *time.Time
	UpdatedBy            *string
	Dating               *string
	DatingStart          *int
	DatingEnd            *int
	DisplayName          *string
	Abbreviation         *string
	Description          *string
	ExternalLink         *string
	Status               *dendrochronology.Status
	PrimaryImageURL      *string
	AdditionalImagesUrls []string
	DeletedAt            *time.Time
	DeletedBy            *string
	AnalysisData         *string
	AnalysisURL          *string
	DataURL              *string
	ChartURL             *string
	AnalysiIDs           []int
}

// Mutate applies the CreateDendrochronologyInput on the DendrochronologyMutation builder.
func (i *CreateDendrochronologyInput) Mutate(m *DendrochronologyMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Dating; v != nil {
		m.SetDating(*v)
	}
	if v := i.DatingStart; v != nil {
		m.SetDatingStart(*v)
	}
	if v := i.DatingEnd; v != nil {
		m.SetDatingEnd(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if v := i.AnalysisData; v != nil {
		m.SetAnalysisData(*v)
	}
	if v := i.AnalysisURL; v != nil {
		m.SetAnalysisURL(*v)
	}
	if v := i.DataURL; v != nil {
		m.SetDataURL(*v)
	}
	if v := i.ChartURL; v != nil {
		m.SetChartURL(*v)
	}
	if v := i.AnalysiIDs; len(v) > 0 {
		m.AddAnalysiIDs(v...)
	}
}

// SetInput applies the change-set in the CreateDendrochronologyInput on the DendrochronologyCreate builder.
func (c *DendrochronologyCreate) SetInput(i CreateDendrochronologyInput) *DendrochronologyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDendrochronologyInput represents a mutation input for updating dendrochronologies.
type UpdateDendrochronologyInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearDating                bool
	Dating                     *string
	ClearDatingStart           bool
	DatingStart                *int
	ClearDatingEnd             bool
	DatingEnd                  *int
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearStatus                bool
	Status                     *dendrochronology.Status
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearDeletedAt             bool
	DeletedAt                  *time.Time
	ClearDeletedBy             bool
	DeletedBy                  *string
	ClearAnalysisData          bool
	AnalysisData               *string
	ClearAnalysisURL           bool
	AnalysisURL                *string
	ClearDataURL               bool
	DataURL                    *string
	ClearChartURL              bool
	ChartURL                   *string
	ClearAnalysis              bool
	AddAnalysiIDs              []int
	RemoveAnalysiIDs           []int
}

// Mutate applies the UpdateDendrochronologyInput on the DendrochronologyMutation builder.
func (i *UpdateDendrochronologyInput) Mutate(m *DendrochronologyMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDating {
		m.ClearDating()
	}
	if v := i.Dating; v != nil {
		m.SetDating(*v)
	}
	if i.ClearDatingStart {
		m.ClearDatingStart()
	}
	if v := i.DatingStart; v != nil {
		m.SetDatingStart(*v)
	}
	if i.ClearDatingEnd {
		m.ClearDatingEnd()
	}
	if v := i.DatingEnd; v != nil {
		m.SetDatingEnd(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearDeletedBy {
		m.ClearDeletedBy()
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if i.ClearAnalysisData {
		m.ClearAnalysisData()
	}
	if v := i.AnalysisData; v != nil {
		m.SetAnalysisData(*v)
	}
	if i.ClearAnalysisURL {
		m.ClearAnalysisURL()
	}
	if v := i.AnalysisURL; v != nil {
		m.SetAnalysisURL(*v)
	}
	if i.ClearDataURL {
		m.ClearDataURL()
	}
	if v := i.DataURL; v != nil {
		m.SetDataURL(*v)
	}
	if i.ClearChartURL {
		m.ClearChartURL()
	}
	if v := i.ChartURL; v != nil {
		m.SetChartURL(*v)
	}
	if i.ClearAnalysis {
		m.ClearAnalysis()
	}
	if v := i.AddAnalysiIDs; len(v) > 0 {
		m.AddAnalysiIDs(v...)
	}
	if v := i.RemoveAnalysiIDs; len(v) > 0 {
		m.RemoveAnalysiIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateDendrochronologyInput on the DendrochronologyUpdate builder.
func (c *DendrochronologyUpdate) SetInput(i UpdateDendrochronologyInput) *DendrochronologyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDendrochronologyInput on the DendrochronologyUpdateOne builder.
func (c *DendrochronologyUpdateOne) SetInput(i UpdateDendrochronologyInput) *DendrochronologyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDistrictInput represents a mutation input for creating districts.
type CreateDistrictInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	DisplayName             *string
	Abbreviation            *string
	Description             *string
	ExternalLink            *string
	ArtIDs                  []int
	ArtifactIDs             []int
	BookIDs                 []int
	ProtectedAreaPictureIDs []int
	SettlementIDs           []int
	LocationIDs             []int
	RegionID                *int
	KnownAsAfterIDs         []int
	KnownAsBeforeIDs        []int
}

// Mutate applies the CreateDistrictInput on the DistrictMutation builder.
func (i *CreateDistrictInput) Mutate(m *DistrictMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.SettlementIDs; len(v) > 0 {
		m.AddSettlementIDs(v...)
	}
	if v := i.LocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if v := i.KnownAsAfterIDs; len(v) > 0 {
		m.AddKnownAsAfterIDs(v...)
	}
	if v := i.KnownAsBeforeIDs; len(v) > 0 {
		m.AddKnownAsBeforeIDs(v...)
	}
}

// SetInput applies the change-set in the CreateDistrictInput on the DistrictCreate builder.
func (c *DistrictCreate) SetInput(i CreateDistrictInput) *DistrictCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDistrictInput represents a mutation input for updating districts.
type UpdateDistrictInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	ClearDisplayName              bool
	DisplayName                   *string
	ClearAbbreviation             bool
	Abbreviation                  *string
	ClearDescription              bool
	Description                   *string
	ClearExternalLink             bool
	ExternalLink                  *string
	ClearArt                      bool
	AddArtIDs                     []int
	RemoveArtIDs                  []int
	ClearArtifacts                bool
	AddArtifactIDs                []int
	RemoveArtifactIDs             []int
	ClearBooks                    bool
	AddBookIDs                    []int
	RemoveBookIDs                 []int
	ClearProtectedAreaPictures    bool
	AddProtectedAreaPictureIDs    []int
	RemoveProtectedAreaPictureIDs []int
	ClearSettlements              bool
	AddSettlementIDs              []int
	RemoveSettlementIDs           []int
	ClearLocations                bool
	AddLocationIDs                []int
	RemoveLocationIDs             []int
	ClearRegion                   bool
	RegionID                      *int
	ClearKnownAsAfter             bool
	AddKnownAsAfterIDs            []int
	RemoveKnownAsAfterIDs         []int
	ClearKnownAsBefore            bool
	AddKnownAsBeforeIDs           []int
	RemoveKnownAsBeforeIDs        []int
}

// Mutate applies the UpdateDistrictInput on the DistrictMutation builder.
func (i *UpdateDistrictInput) Mutate(m *DistrictMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArt {
		m.ClearArt()
	}
	if v := i.AddArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.RemoveArtIDs; len(v) > 0 {
		m.RemoveArtIDs(v...)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
	if i.ClearSettlements {
		m.ClearSettlements()
	}
	if v := i.AddSettlementIDs; len(v) > 0 {
		m.AddSettlementIDs(v...)
	}
	if v := i.RemoveSettlementIDs; len(v) > 0 {
		m.RemoveSettlementIDs(v...)
	}
	if i.ClearLocations {
		m.ClearLocations()
	}
	if v := i.AddLocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RemoveLocationIDs; len(v) > 0 {
		m.RemoveLocationIDs(v...)
	}
	if i.ClearRegion {
		m.ClearRegion()
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if i.ClearKnownAsAfter {
		m.ClearKnownAsAfter()
	}
	if v := i.AddKnownAsAfterIDs; len(v) > 0 {
		m.AddKnownAsAfterIDs(v...)
	}
	if v := i.RemoveKnownAsAfterIDs; len(v) > 0 {
		m.RemoveKnownAsAfterIDs(v...)
	}
	if i.ClearKnownAsBefore {
		m.ClearKnownAsBefore()
	}
	if v := i.AddKnownAsBeforeIDs; len(v) > 0 {
		m.AddKnownAsBeforeIDs(v...)
	}
	if v := i.RemoveKnownAsBeforeIDs; len(v) > 0 {
		m.RemoveKnownAsBeforeIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateDistrictInput on the DistrictUpdate builder.
func (c *DistrictUpdate) SetInput(i UpdateDistrictInput) *DistrictUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDistrictInput on the DistrictUpdateOne builder.
func (c *DistrictUpdateOne) SetInput(i UpdateDistrictInput) *DistrictUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateEthnosInput represents a mutation input for creating ethnosslice.
type CreateEthnosInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtifactIDs  []int
}

// Mutate applies the CreateEthnosInput on the EthnosMutation builder.
func (i *CreateEthnosInput) Mutate(m *EthnosMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateEthnosInput on the EthnosCreate builder.
func (c *EthnosCreate) SetInput(i CreateEthnosInput) *EthnosCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEthnosInput represents a mutation input for updating ethnosslice.
type UpdateEthnosInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
}

// Mutate applies the UpdateEthnosInput on the EthnosMutation builder.
func (i *UpdateEthnosInput) Mutate(m *EthnosMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateEthnosInput on the EthnosUpdate builder.
func (c *EthnosUpdate) SetInput(i UpdateEthnosInput) *EthnosUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEthnosInput on the EthnosUpdateOne builder.
func (c *EthnosUpdateOne) SetInput(i UpdateEthnosInput) *EthnosUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateFavouriteInput represents a mutation input for creating favourites.
type CreateFavouriteInput struct {
	CreatedAt *time.Time
	CreatedBy *string
	UpdatedAt *time.Time
	UpdatedBy *string
	OwnerID   string
}

// Mutate applies the CreateFavouriteInput on the FavouriteMutation builder.
func (i *CreateFavouriteInput) Mutate(m *FavouriteMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetOwnerID(i.OwnerID)
}

// SetInput applies the change-set in the CreateFavouriteInput on the FavouriteCreate builder.
func (c *FavouriteCreate) SetInput(i CreateFavouriteInput) *FavouriteCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFavouriteInput represents a mutation input for updating favourites.
type UpdateFavouriteInput struct {
	ClearCreatedBy bool
	CreatedBy      *string
	UpdatedAt      *time.Time
	ClearUpdatedBy bool
	UpdatedBy      *string
}

// Mutate applies the UpdateFavouriteInput on the FavouriteMutation builder.
func (i *UpdateFavouriteInput) Mutate(m *FavouriteMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
}

// SetInput applies the change-set in the UpdateFavouriteInput on the FavouriteUpdate builder.
func (c *FavouriteUpdate) SetInput(i UpdateFavouriteInput) *FavouriteUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFavouriteInput on the FavouriteUpdateOne builder.
func (c *FavouriteUpdateOne) SetInput(i UpdateFavouriteInput) *FavouriteUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateInterviewInput represents a mutation input for creating interviews.
type CreateInterviewInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	Date         *time.Time
}

// Mutate applies the CreateInterviewInput on the InterviewMutation builder.
func (i *CreateInterviewInput) Mutate(m *InterviewMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
}

// SetInput applies the change-set in the CreateInterviewInput on the InterviewCreate builder.
func (c *InterviewCreate) SetInput(i CreateInterviewInput) *InterviewCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateInterviewInput represents a mutation input for updating interviews.
type UpdateInterviewInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearDate         bool
	Date              *time.Time
}

// Mutate applies the UpdateInterviewInput on the InterviewMutation builder.
func (i *UpdateInterviewInput) Mutate(m *InterviewMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearDate {
		m.ClearDate()
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
}

// SetInput applies the change-set in the UpdateInterviewInput on the InterviewUpdate builder.
func (c *InterviewUpdate) SetInput(i UpdateInterviewInput) *InterviewUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateInterviewInput on the InterviewUpdateOne builder.
func (c *InterviewUpdateOne) SetInput(i UpdateInterviewInput) *InterviewUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLicenseInput represents a mutation input for creating licenses.
type CreateLicenseInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	DisplayName             *string
	Abbreviation            *string
	Description             *string
	ExternalLink            *string
	ArtifactIDs             []int
	BookIDs                 []int
	ProtectedAreaPictureIDs []int
}

// Mutate applies the CreateLicenseInput on the LicenseMutation builder.
func (i *CreateLicenseInput) Mutate(m *LicenseMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
}

// SetInput applies the change-set in the CreateLicenseInput on the LicenseCreate builder.
func (c *LicenseCreate) SetInput(i CreateLicenseInput) *LicenseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLicenseInput represents a mutation input for updating licenses.
type UpdateLicenseInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	ClearDisplayName              bool
	DisplayName                   *string
	ClearAbbreviation             bool
	Abbreviation                  *string
	ClearDescription              bool
	Description                   *string
	ClearExternalLink             bool
	ExternalLink                  *string
	ClearArtifacts                bool
	AddArtifactIDs                []int
	RemoveArtifactIDs             []int
	ClearBooks                    bool
	AddBookIDs                    []int
	RemoveBookIDs                 []int
	ClearProtectedAreaPictures    bool
	AddProtectedAreaPictureIDs    []int
	RemoveProtectedAreaPictureIDs []int
}

// Mutate applies the UpdateLicenseInput on the LicenseMutation builder.
func (i *UpdateLicenseInput) Mutate(m *LicenseMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateLicenseInput on the LicenseUpdate builder.
func (c *LicenseUpdate) SetInput(i UpdateLicenseInput) *LicenseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLicenseInput on the LicenseUpdateOne builder.
func (c *LicenseUpdateOne) SetInput(i UpdateLicenseInput) *LicenseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLocationInput represents a mutation input for creating locations.
type CreateLocationInput struct {
	CreatedAt                             *time.Time
	CreatedBy                             *string
	UpdatedAt                             *time.Time
	UpdatedBy                             *string
	DisplayName                           *string
	Abbreviation                          *string
	Description                           *string
	ExternalLink                          *string
	Geometry                              *types.Geometry
	ArtifactIDs                           []int
	BookIDs                               []int
	ProtectedAreaPictureIDs               []int
	PetroglyphsAccountingDocumentationIDs []int
	CountryID                             *int
	DistrictID                            *int
	SettlementID                          *int
	RegionID                              *int
}

// Mutate applies the CreateLocationInput on the LocationMutation builder.
func (i *CreateLocationInput) Mutate(m *LocationMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Geometry; v != nil {
		m.SetGeometry(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.PetroglyphsAccountingDocumentationIDs; len(v) > 0 {
		m.AddPetroglyphsAccountingDocumentationIDs(v...)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
}

// SetInput applies the change-set in the CreateLocationInput on the LocationCreate builder.
func (c *LocationCreate) SetInput(i CreateLocationInput) *LocationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLocationInput represents a mutation input for updating locations.
type UpdateLocationInput struct {
	ClearCreatedBy                              bool
	CreatedBy                                   *string
	UpdatedAt                                   *time.Time
	ClearUpdatedBy                              bool
	UpdatedBy                                   *string
	ClearDisplayName                            bool
	DisplayName                                 *string
	ClearAbbreviation                           bool
	Abbreviation                                *string
	ClearDescription                            bool
	Description                                 *string
	ClearExternalLink                           bool
	ExternalLink                                *string
	ClearGeometry                               bool
	Geometry                                    *types.Geometry
	ClearArtifacts                              bool
	AddArtifactIDs                              []int
	RemoveArtifactIDs                           []int
	ClearBooks                                  bool
	AddBookIDs                                  []int
	RemoveBookIDs                               []int
	ClearProtectedAreaPictures                  bool
	AddProtectedAreaPictureIDs                  []int
	RemoveProtectedAreaPictureIDs               []int
	ClearPetroglyphsAccountingDocumentation     bool
	AddPetroglyphsAccountingDocumentationIDs    []int
	RemovePetroglyphsAccountingDocumentationIDs []int
	ClearCountry                                bool
	CountryID                                   *int
	ClearDistrict                               bool
	DistrictID                                  *int
	ClearSettlement                             bool
	SettlementID                                *int
	ClearRegion                                 bool
	RegionID                                    *int
}

// Mutate applies the UpdateLocationInput on the LocationMutation builder.
func (i *UpdateLocationInput) Mutate(m *LocationMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearGeometry {
		m.ClearGeometry()
	}
	if v := i.Geometry; v != nil {
		m.SetGeometry(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
	if i.ClearPetroglyphsAccountingDocumentation {
		m.ClearPetroglyphsAccountingDocumentation()
	}
	if v := i.AddPetroglyphsAccountingDocumentationIDs; len(v) > 0 {
		m.AddPetroglyphsAccountingDocumentationIDs(v...)
	}
	if v := i.RemovePetroglyphsAccountingDocumentationIDs; len(v) > 0 {
		m.RemovePetroglyphsAccountingDocumentationIDs(v...)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if i.ClearDistrict {
		m.ClearDistrict()
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if i.ClearSettlement {
		m.ClearSettlement()
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if i.ClearRegion {
		m.ClearRegion()
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
}

// SetInput applies the change-set in the UpdateLocationInput on the LocationUpdate builder.
func (c *LocationUpdate) SetInput(i UpdateLocationInput) *LocationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLocationInput on the LocationUpdateOne builder.
func (c *LocationUpdateOne) SetInput(i UpdateLocationInput) *LocationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMediumInput represents a mutation input for creating media.
type CreateMediumInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtifactIDs  []int
}

// Mutate applies the CreateMediumInput on the MediumMutation builder.
func (i *CreateMediumInput) Mutate(m *MediumMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMediumInput on the MediumCreate builder.
func (c *MediumCreate) SetInput(i CreateMediumInput) *MediumCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMediumInput represents a mutation input for updating media.
type UpdateMediumInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
}

// Mutate applies the UpdateMediumInput on the MediumMutation builder.
func (i *UpdateMediumInput) Mutate(m *MediumMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateMediumInput on the MediumUpdate builder.
func (c *MediumUpdate) SetInput(i UpdateMediumInput) *MediumUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMediumInput on the MediumUpdateOne builder.
func (c *MediumUpdateOne) SetInput(i UpdateMediumInput) *MediumUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateModelInput represents a mutation input for creating models.
type CreateModelInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Abbreviation  *string
	Description   *string
	ExternalLink  *string
	Status        *model.Status
	FileURL       string
	ArtifactIDs   []int
	PetroglyphIDs []int
}

// Mutate applies the CreateModelInput on the ModelMutation builder.
func (i *CreateModelInput) Mutate(m *ModelMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	m.SetFileURL(i.FileURL)
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.PetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
}

// SetInput applies the change-set in the CreateModelInput on the ModelCreate builder.
func (c *ModelCreate) SetInput(i CreateModelInput) *ModelCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateModelInput represents a mutation input for updating models.
type UpdateModelInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearAbbreviation   bool
	Abbreviation        *string
	ClearDescription    bool
	Description         *string
	ClearExternalLink   bool
	ExternalLink        *string
	ClearStatus         bool
	Status              *model.Status
	FileURL             *string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
	ClearPetroglyphs    bool
	AddPetroglyphIDs    []int
	RemovePetroglyphIDs []int
}

// Mutate applies the UpdateModelInput on the ModelMutation builder.
func (i *UpdateModelInput) Mutate(m *ModelMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.FileURL; v != nil {
		m.SetFileURL(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearPetroglyphs {
		m.ClearPetroglyphs()
	}
	if v := i.AddPetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.RemovePetroglyphIDs; len(v) > 0 {
		m.RemovePetroglyphIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateModelInput on the ModelUpdate builder.
func (c *ModelUpdate) SetInput(i UpdateModelInput) *ModelUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateModelInput on the ModelUpdateOne builder.
func (c *ModelUpdateOne) SetInput(i UpdateModelInput) *ModelUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMonumentInput represents a mutation input for creating monuments.
type CreateMonumentInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtifactIDs  []int
	SetIDs       []int
}

// Mutate applies the CreateMonumentInput on the MonumentMutation builder.
func (i *CreateMonumentInput) Mutate(m *MonumentMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.SetIDs; len(v) > 0 {
		m.AddSetIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMonumentInput on the MonumentCreate builder.
func (c *MonumentCreate) SetInput(i CreateMonumentInput) *MonumentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMonumentInput represents a mutation input for updating monuments.
type UpdateMonumentInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
	ClearSets         bool
	AddSetIDs         []int
	RemoveSetIDs      []int
}

// Mutate applies the UpdateMonumentInput on the MonumentMutation builder.
func (i *UpdateMonumentInput) Mutate(m *MonumentMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearSets {
		m.ClearSets()
	}
	if v := i.AddSetIDs; len(v) > 0 {
		m.AddSetIDs(v...)
	}
	if v := i.RemoveSetIDs; len(v) > 0 {
		m.RemoveSetIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateMonumentInput on the MonumentUpdate builder.
func (c *MonumentUpdate) SetInput(i UpdateMonumentInput) *MonumentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMonumentInput on the MonumentUpdateOne builder.
func (c *MonumentUpdateOne) SetInput(i UpdateMonumentInput) *MonumentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMoundInput represents a mutation input for creating mounds.
type CreateMoundInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Abbreviation  *string
	Description   *string
	ExternalLink  *string
	Number        *string
	PetroglyphIDs []int
	VisitIDs      []int
}

// Mutate applies the CreateMoundInput on the MoundMutation builder.
func (i *CreateMoundInput) Mutate(m *MoundMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if v := i.PetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.VisitIDs; len(v) > 0 {
		m.AddVisitIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMoundInput on the MoundCreate builder.
func (c *MoundCreate) SetInput(i CreateMoundInput) *MoundCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMoundInput represents a mutation input for updating mounds.
type UpdateMoundInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearAbbreviation   bool
	Abbreviation        *string
	ClearDescription    bool
	Description         *string
	ClearExternalLink   bool
	ExternalLink        *string
	ClearNumber         bool
	Number              *string
	ClearPetroglyphs    bool
	AddPetroglyphIDs    []int
	RemovePetroglyphIDs []int
	ClearVisits         bool
	AddVisitIDs         []int
	RemoveVisitIDs      []int
}

// Mutate applies the UpdateMoundInput on the MoundMutation builder.
func (i *UpdateMoundInput) Mutate(m *MoundMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearNumber {
		m.ClearNumber()
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if i.ClearPetroglyphs {
		m.ClearPetroglyphs()
	}
	if v := i.AddPetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.RemovePetroglyphIDs; len(v) > 0 {
		m.RemovePetroglyphIDs(v...)
	}
	if i.ClearVisits {
		m.ClearVisits()
	}
	if v := i.AddVisitIDs; len(v) > 0 {
		m.AddVisitIDs(v...)
	}
	if v := i.RemoveVisitIDs; len(v) > 0 {
		m.RemoveVisitIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateMoundInput on the MoundUpdate builder.
func (c *MoundUpdate) SetInput(i UpdateMoundInput) *MoundUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMoundInput on the MoundUpdateOne builder.
func (c *MoundUpdateOne) SetInput(i UpdateMoundInput) *MoundUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrganizationInput represents a mutation input for creating organizations.
type CreateOrganizationInput struct {
	CreatedAt             *time.Time
	CreatedBy             *string
	UpdatedAt             *time.Time
	UpdatedBy             *string
	Address               *string
	PhoneNumbers          []string
	Emails                []string
	DisplayName           *string
	Abbreviation          *string
	Description           *string
	ExternalLink          *string
	PrimaryImageURL       *string
	AdditionalImagesUrls  []string
	PreviousNames         []string
	IsInAConsortium       *bool
	ConsortiumDocumentURL *string
	Type                  *organization.Type
	ArtifactIDs           []int
	BookIDs               []int
	PersonIDs             []int
}

// Mutate applies the CreateOrganizationInput on the OrganizationMutation builder.
func (i *CreateOrganizationInput) Mutate(m *OrganizationMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.PhoneNumbers; v != nil {
		m.SetPhoneNumbers(v)
	}
	if v := i.Emails; v != nil {
		m.SetEmails(v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.PreviousNames; v != nil {
		m.SetPreviousNames(v)
	}
	if v := i.IsInAConsortium; v != nil {
		m.SetIsInAConsortium(*v)
	}
	if v := i.ConsortiumDocumentURL; v != nil {
		m.SetConsortiumDocumentURL(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.PersonIDs; len(v) > 0 {
		m.AddPersonIDs(v...)
	}
}

// SetInput applies the change-set in the CreateOrganizationInput on the OrganizationCreate builder.
func (c *OrganizationCreate) SetInput(i CreateOrganizationInput) *OrganizationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrganizationInput represents a mutation input for updating organizations.
type UpdateOrganizationInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearAddress               bool
	Address                    *string
	ClearPhoneNumbers          bool
	PhoneNumbers               []string
	AppendPhoneNumbers         []string
	ClearEmails                bool
	Emails                     []string
	AppendEmails               []string
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearPreviousNames         bool
	PreviousNames              []string
	AppendPreviousNames        []string
	ClearIsInAConsortium       bool
	IsInAConsortium            *bool
	ClearConsortiumDocumentURL bool
	ConsortiumDocumentURL      *string
	ClearType                  bool
	Type                       *organization.Type
	ClearArtifacts             bool
	AddArtifactIDs             []int
	RemoveArtifactIDs          []int
	ClearBooks                 bool
	AddBookIDs                 []int
	RemoveBookIDs              []int
	ClearPeople                bool
	AddPersonIDs               []int
	RemovePersonIDs            []int
}

// Mutate applies the UpdateOrganizationInput on the OrganizationMutation builder.
func (i *UpdateOrganizationInput) Mutate(m *OrganizationMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if i.ClearPhoneNumbers {
		m.ClearPhoneNumbers()
	}
	if v := i.PhoneNumbers; v != nil {
		m.SetPhoneNumbers(v)
	}
	if i.AppendPhoneNumbers != nil {
		m.AppendPhoneNumbers(i.PhoneNumbers)
	}
	if i.ClearEmails {
		m.ClearEmails()
	}
	if v := i.Emails; v != nil {
		m.SetEmails(v)
	}
	if i.AppendEmails != nil {
		m.AppendEmails(i.Emails)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearPreviousNames {
		m.ClearPreviousNames()
	}
	if v := i.PreviousNames; v != nil {
		m.SetPreviousNames(v)
	}
	if i.AppendPreviousNames != nil {
		m.AppendPreviousNames(i.PreviousNames)
	}
	if i.ClearIsInAConsortium {
		m.ClearIsInAConsortium()
	}
	if v := i.IsInAConsortium; v != nil {
		m.SetIsInAConsortium(*v)
	}
	if i.ClearConsortiumDocumentURL {
		m.ClearConsortiumDocumentURL()
	}
	if v := i.ConsortiumDocumentURL; v != nil {
		m.SetConsortiumDocumentURL(*v)
	}
	if i.ClearType {
		m.ClearType()
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearPeople {
		m.ClearPeople()
	}
	if v := i.AddPersonIDs; len(v) > 0 {
		m.AddPersonIDs(v...)
	}
	if v := i.RemovePersonIDs; len(v) > 0 {
		m.RemovePersonIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdate builder.
func (c *OrganizationUpdate) SetInput(i UpdateOrganizationInput) *OrganizationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdateOne builder.
func (c *OrganizationUpdateOne) SetInput(i UpdateOrganizationInput) *OrganizationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePeriodicalInput represents a mutation input for creating periodicals.
type CreatePeriodicalInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	BookIDs      []int
}

// Mutate applies the CreatePeriodicalInput on the PeriodicalMutation builder.
func (i *CreatePeriodicalInput) Mutate(m *PeriodicalMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePeriodicalInput on the PeriodicalCreate builder.
func (c *PeriodicalCreate) SetInput(i CreatePeriodicalInput) *PeriodicalCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePeriodicalInput represents a mutation input for updating periodicals.
type UpdatePeriodicalInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearBooks        bool
	AddBookIDs        []int
	RemoveBookIDs     []int
}

// Mutate applies the UpdatePeriodicalInput on the PeriodicalMutation builder.
func (i *UpdatePeriodicalInput) Mutate(m *PeriodicalMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePeriodicalInput on the PeriodicalUpdate builder.
func (c *PeriodicalUpdate) SetInput(i UpdatePeriodicalInput) *PeriodicalUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePeriodicalInput on the PeriodicalUpdateOne builder.
func (c *PeriodicalUpdateOne) SetInput(i UpdatePeriodicalInput) *PeriodicalUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePersonInput represents a mutation input for creating persons.
type CreatePersonInput struct {
	CreatedAt                             *time.Time
	CreatedBy                             *string
	UpdatedAt                             *time.Time
	UpdatedBy                             *string
	Address                               *string
	PhoneNumbers                          []string
	Emails                                []string
	DisplayName                           *string
	Abbreviation                          *string
	Description                           *string
	ExternalLink                          *string
	PrimaryImageURL                       *string
	AdditionalImagesUrls                  []string
	GivenName                             *string
	FamilyName                            *string
	PatronymicName                        *string
	BeginData                             *time.Time
	EndDate                               *time.Time
	Gender                                *person.Gender
	Occupation                            *string
	CollectionIDs                         []int
	ArtIDs                                []int
	ArtifactIDs                           []int
	ProtectedAreaPictureIDs               []int
	DonatedArtifactIDs                    []int
	PetroglyphsAccountingDocumentationIDs []int
	BookIDs                               []int
	VisitIDs                              []int
	ProjectIDs                            []int
	PublicationIDs                        []int
	AffiliationID                         *int
}

// Mutate applies the CreatePersonInput on the PersonMutation builder.
func (i *CreatePersonInput) Mutate(m *PersonMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.PhoneNumbers; v != nil {
		m.SetPhoneNumbers(v)
	}
	if v := i.Emails; v != nil {
		m.SetEmails(v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.GivenName; v != nil {
		m.SetGivenName(*v)
	}
	if v := i.FamilyName; v != nil {
		m.SetFamilyName(*v)
	}
	if v := i.PatronymicName; v != nil {
		m.SetPatronymicName(*v)
	}
	if v := i.BeginData; v != nil {
		m.SetBeginData(*v)
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if v := i.Occupation; v != nil {
		m.SetOccupation(*v)
	}
	if v := i.CollectionIDs; len(v) > 0 {
		m.AddCollectionIDs(v...)
	}
	if v := i.ArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.DonatedArtifactIDs; len(v) > 0 {
		m.AddDonatedArtifactIDs(v...)
	}
	if v := i.PetroglyphsAccountingDocumentationIDs; len(v) > 0 {
		m.AddPetroglyphsAccountingDocumentationIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.VisitIDs; len(v) > 0 {
		m.AddVisitIDs(v...)
	}
	if v := i.ProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.PublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.AffiliationID; v != nil {
		m.SetAffiliationID(*v)
	}
}

// SetInput applies the change-set in the CreatePersonInput on the PersonCreate builder.
func (c *PersonCreate) SetInput(i CreatePersonInput) *PersonCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePersonInput represents a mutation input for updating persons.
type UpdatePersonInput struct {
	ClearCreatedBy                              bool
	CreatedBy                                   *string
	UpdatedAt                                   *time.Time
	ClearUpdatedBy                              bool
	UpdatedBy                                   *string
	ClearAddress                                bool
	Address                                     *string
	ClearPhoneNumbers                           bool
	PhoneNumbers                                []string
	AppendPhoneNumbers                          []string
	ClearEmails                                 bool
	Emails                                      []string
	AppendEmails                                []string
	ClearDisplayName                            bool
	DisplayName                                 *string
	ClearAbbreviation                           bool
	Abbreviation                                *string
	ClearDescription                            bool
	Description                                 *string
	ClearExternalLink                           bool
	ExternalLink                                *string
	ClearPrimaryImageURL                        bool
	PrimaryImageURL                             *string
	ClearAdditionalImagesUrls                   bool
	AdditionalImagesUrls                        []string
	AppendAdditionalImagesUrls                  []string
	ClearGivenName                              bool
	GivenName                                   *string
	ClearFamilyName                             bool
	FamilyName                                  *string
	ClearPatronymicName                         bool
	PatronymicName                              *string
	ClearBeginData                              bool
	BeginData                                   *time.Time
	ClearEndDate                                bool
	EndDate                                     *time.Time
	ClearGender                                 bool
	Gender                                      *person.Gender
	ClearOccupation                             bool
	Occupation                                  *string
	ClearCollections                            bool
	AddCollectionIDs                            []int
	RemoveCollectionIDs                         []int
	ClearArt                                    bool
	AddArtIDs                                   []int
	RemoveArtIDs                                []int
	ClearArtifacts                              bool
	AddArtifactIDs                              []int
	RemoveArtifactIDs                           []int
	ClearProtectedAreaPictures                  bool
	AddProtectedAreaPictureIDs                  []int
	RemoveProtectedAreaPictureIDs               []int
	ClearDonatedArtifacts                       bool
	AddDonatedArtifactIDs                       []int
	RemoveDonatedArtifactIDs                    []int
	ClearPetroglyphsAccountingDocumentation     bool
	AddPetroglyphsAccountingDocumentationIDs    []int
	RemovePetroglyphsAccountingDocumentationIDs []int
	ClearBooks                                  bool
	AddBookIDs                                  []int
	RemoveBookIDs                               []int
	ClearVisits                                 bool
	AddVisitIDs                                 []int
	RemoveVisitIDs                              []int
	ClearProjects                               bool
	AddProjectIDs                               []int
	RemoveProjectIDs                            []int
	ClearPublications                           bool
	AddPublicationIDs                           []int
	RemovePublicationIDs                        []int
	ClearAffiliation                            bool
	AffiliationID                               *int
}

// Mutate applies the UpdatePersonInput on the PersonMutation builder.
func (i *UpdatePersonInput) Mutate(m *PersonMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if i.ClearPhoneNumbers {
		m.ClearPhoneNumbers()
	}
	if v := i.PhoneNumbers; v != nil {
		m.SetPhoneNumbers(v)
	}
	if i.AppendPhoneNumbers != nil {
		m.AppendPhoneNumbers(i.PhoneNumbers)
	}
	if i.ClearEmails {
		m.ClearEmails()
	}
	if v := i.Emails; v != nil {
		m.SetEmails(v)
	}
	if i.AppendEmails != nil {
		m.AppendEmails(i.Emails)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearGivenName {
		m.ClearGivenName()
	}
	if v := i.GivenName; v != nil {
		m.SetGivenName(*v)
	}
	if i.ClearFamilyName {
		m.ClearFamilyName()
	}
	if v := i.FamilyName; v != nil {
		m.SetFamilyName(*v)
	}
	if i.ClearPatronymicName {
		m.ClearPatronymicName()
	}
	if v := i.PatronymicName; v != nil {
		m.SetPatronymicName(*v)
	}
	if i.ClearBeginData {
		m.ClearBeginData()
	}
	if v := i.BeginData; v != nil {
		m.SetBeginData(*v)
	}
	if i.ClearEndDate {
		m.ClearEndDate()
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if i.ClearGender {
		m.ClearGender()
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if i.ClearOccupation {
		m.ClearOccupation()
	}
	if v := i.Occupation; v != nil {
		m.SetOccupation(*v)
	}
	if i.ClearCollections {
		m.ClearCollections()
	}
	if v := i.AddCollectionIDs; len(v) > 0 {
		m.AddCollectionIDs(v...)
	}
	if v := i.RemoveCollectionIDs; len(v) > 0 {
		m.RemoveCollectionIDs(v...)
	}
	if i.ClearArt {
		m.ClearArt()
	}
	if v := i.AddArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.RemoveArtIDs; len(v) > 0 {
		m.RemoveArtIDs(v...)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
	if i.ClearDonatedArtifacts {
		m.ClearDonatedArtifacts()
	}
	if v := i.AddDonatedArtifactIDs; len(v) > 0 {
		m.AddDonatedArtifactIDs(v...)
	}
	if v := i.RemoveDonatedArtifactIDs; len(v) > 0 {
		m.RemoveDonatedArtifactIDs(v...)
	}
	if i.ClearPetroglyphsAccountingDocumentation {
		m.ClearPetroglyphsAccountingDocumentation()
	}
	if v := i.AddPetroglyphsAccountingDocumentationIDs; len(v) > 0 {
		m.AddPetroglyphsAccountingDocumentationIDs(v...)
	}
	if v := i.RemovePetroglyphsAccountingDocumentationIDs; len(v) > 0 {
		m.RemovePetroglyphsAccountingDocumentationIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearVisits {
		m.ClearVisits()
	}
	if v := i.AddVisitIDs; len(v) > 0 {
		m.AddVisitIDs(v...)
	}
	if v := i.RemoveVisitIDs; len(v) > 0 {
		m.RemoveVisitIDs(v...)
	}
	if i.ClearProjects {
		m.ClearProjects()
	}
	if v := i.AddProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.RemoveProjectIDs; len(v) > 0 {
		m.RemoveProjectIDs(v...)
	}
	if i.ClearPublications {
		m.ClearPublications()
	}
	if v := i.AddPublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.RemovePublicationIDs; len(v) > 0 {
		m.RemovePublicationIDs(v...)
	}
	if i.ClearAffiliation {
		m.ClearAffiliation()
	}
	if v := i.AffiliationID; v != nil {
		m.SetAffiliationID(*v)
	}
}

// SetInput applies the change-set in the UpdatePersonInput on the PersonUpdate builder.
func (c *PersonUpdate) SetInput(i UpdatePersonInput) *PersonUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePersonInput on the PersonUpdateOne builder.
func (c *PersonUpdateOne) SetInput(i UpdatePersonInput) *PersonUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePersonalInput represents a mutation input for creating personals.
type CreatePersonalInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	OwnerID                 string
	DisplayName             string
	IsPublic                *bool
	ArtifactIDs             []int
	PetroglyphIDs           []int
	BookIDs                 []int
	ProtectedAreaPictureIDs []int
}

// Mutate applies the CreatePersonalInput on the PersonalMutation builder.
func (i *CreatePersonalInput) Mutate(m *PersonalMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetOwnerID(i.OwnerID)
	m.SetDisplayName(i.DisplayName)
	if v := i.IsPublic; v != nil {
		m.SetIsPublic(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.PetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePersonalInput on the PersonalCreate builder.
func (c *PersonalCreate) SetInput(i CreatePersonalInput) *PersonalCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePersonalInput represents a mutation input for updating personals.
type UpdatePersonalInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	DisplayName                   *string
	IsPublic                      *bool
	ClearArtifacts                bool
	AddArtifactIDs                []int
	RemoveArtifactIDs             []int
	ClearPetroglyphs              bool
	AddPetroglyphIDs              []int
	RemovePetroglyphIDs           []int
	ClearBooks                    bool
	AddBookIDs                    []int
	RemoveBookIDs                 []int
	ClearProtectedAreaPictures    bool
	AddProtectedAreaPictureIDs    []int
	RemoveProtectedAreaPictureIDs []int
}

// Mutate applies the UpdatePersonalInput on the PersonalMutation builder.
func (i *UpdatePersonalInput) Mutate(m *PersonalMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.IsPublic; v != nil {
		m.SetIsPublic(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearPetroglyphs {
		m.ClearPetroglyphs()
	}
	if v := i.AddPetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.RemovePetroglyphIDs; len(v) > 0 {
		m.RemovePetroglyphIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePersonalInput on the PersonalUpdate builder.
func (c *PersonalUpdate) SetInput(i UpdatePersonalInput) *PersonalUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePersonalInput on the PersonalUpdateOne builder.
func (c *PersonalUpdateOne) SetInput(i UpdatePersonalInput) *PersonalUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePetroglyphInput represents a mutation input for creating petroglyphs.
type CreatePetroglyphInput struct {
	CreatedAt                          *time.Time
	CreatedBy                          *string
	UpdatedAt                          *time.Time
	UpdatedBy                          *string
	Dating                             *string
	DatingStart                        *int
	DatingEnd                          *int
	DisplayName                        *string
	Abbreviation                       *string
	Description                        *string
	ExternalLink                       *string
	Status                             *petroglyph.Status
	PrimaryImageURL                    *string
	AdditionalImagesUrls               []string
	Height                             *float64
	Width                              *float64
	Length                             *float64
	Depth                              *float64
	Diameter                           *float64
	Weight                             *string
	Dimensions                         *string
	DeletedAt                          *time.Time
	DeletedBy                          *string
	Number                             *string
	Orientation                        *string
	Position                           *string
	GeometricShape                     *string
	PlanePreservation                  *string
	PhotoCode                          *string
	AccountingDocumentationInformation *string
	AccountingDocumentationDate        *time.Time
	Geometry                           *types.Geometry
	CulturalAffiliationID              *int
	ModelID                            *int
	MoundID                            *int
	PublicationIDs                     []int
	TechniqueIDs                       []int
	RegionID                           *int
	AccountingDocumentationAddressID   *int
	AccountingDocumentationAuthorID    *int
	CollectionID                       int
	PersonalIDs                        []int
}

// Mutate applies the CreatePetroglyphInput on the PetroglyphMutation builder.
func (i *CreatePetroglyphInput) Mutate(m *PetroglyphMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Dating; v != nil {
		m.SetDating(*v)
	}
	if v := i.DatingStart; v != nil {
		m.SetDatingStart(*v)
	}
	if v := i.DatingEnd; v != nil {
		m.SetDatingEnd(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.Height; v != nil {
		m.SetHeight(*v)
	}
	if v := i.Width; v != nil {
		m.SetWidth(*v)
	}
	if v := i.Length; v != nil {
		m.SetLength(*v)
	}
	if v := i.Depth; v != nil {
		m.SetDepth(*v)
	}
	if v := i.Diameter; v != nil {
		m.SetDiameter(*v)
	}
	if v := i.Weight; v != nil {
		m.SetWeight(*v)
	}
	if v := i.Dimensions; v != nil {
		m.SetDimensions(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if v := i.Orientation; v != nil {
		m.SetOrientation(*v)
	}
	if v := i.Position; v != nil {
		m.SetPosition(*v)
	}
	if v := i.GeometricShape; v != nil {
		m.SetGeometricShape(*v)
	}
	if v := i.PlanePreservation; v != nil {
		m.SetPlanePreservation(*v)
	}
	if v := i.PhotoCode; v != nil {
		m.SetPhotoCode(*v)
	}
	if v := i.AccountingDocumentationInformation; v != nil {
		m.SetAccountingDocumentationInformation(*v)
	}
	if v := i.AccountingDocumentationDate; v != nil {
		m.SetAccountingDocumentationDate(*v)
	}
	if v := i.Geometry; v != nil {
		m.SetGeometry(*v)
	}
	if v := i.CulturalAffiliationID; v != nil {
		m.SetCulturalAffiliationID(*v)
	}
	if v := i.ModelID; v != nil {
		m.SetModelID(*v)
	}
	if v := i.MoundID; v != nil {
		m.SetMoundID(*v)
	}
	if v := i.PublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.TechniqueIDs; len(v) > 0 {
		m.AddTechniqueIDs(v...)
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if v := i.AccountingDocumentationAddressID; v != nil {
		m.SetAccountingDocumentationAddressID(*v)
	}
	if v := i.AccountingDocumentationAuthorID; v != nil {
		m.SetAccountingDocumentationAuthorID(*v)
	}
	m.SetCollectionID(i.CollectionID)
	if v := i.PersonalIDs; len(v) > 0 {
		m.AddPersonalIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePetroglyphInput on the PetroglyphCreate builder.
func (c *PetroglyphCreate) SetInput(i CreatePetroglyphInput) *PetroglyphCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePetroglyphInput represents a mutation input for updating petroglyphs.
type UpdatePetroglyphInput struct {
	ClearCreatedBy                          bool
	CreatedBy                               *string
	UpdatedAt                               *time.Time
	ClearUpdatedBy                          bool
	UpdatedBy                               *string
	ClearDating                             bool
	Dating                                  *string
	ClearDatingStart                        bool
	DatingStart                             *int
	ClearDatingEnd                          bool
	DatingEnd                               *int
	ClearDisplayName                        bool
	DisplayName                             *string
	ClearAbbreviation                       bool
	Abbreviation                            *string
	ClearDescription                        bool
	Description                             *string
	ClearExternalLink                       bool
	ExternalLink                            *string
	ClearStatus                             bool
	Status                                  *petroglyph.Status
	ClearPrimaryImageURL                    bool
	PrimaryImageURL                         *string
	ClearAdditionalImagesUrls               bool
	AdditionalImagesUrls                    []string
	AppendAdditionalImagesUrls              []string
	ClearHeight                             bool
	Height                                  *float64
	ClearWidth                              bool
	Width                                   *float64
	ClearLength                             bool
	Length                                  *float64
	ClearDepth                              bool
	Depth                                   *float64
	ClearDiameter                           bool
	Diameter                                *float64
	ClearWeight                             bool
	Weight                                  *string
	ClearDimensions                         bool
	Dimensions                              *string
	ClearDeletedAt                          bool
	DeletedAt                               *time.Time
	ClearDeletedBy                          bool
	DeletedBy                               *string
	ClearNumber                             bool
	Number                                  *string
	ClearOrientation                        bool
	Orientation                             *string
	ClearPosition                           bool
	Position                                *string
	ClearGeometricShape                     bool
	GeometricShape                          *string
	ClearPlanePreservation                  bool
	PlanePreservation                       *string
	ClearPhotoCode                          bool
	PhotoCode                               *string
	ClearAccountingDocumentationInformation bool
	AccountingDocumentationInformation      *string
	ClearAccountingDocumentationDate        bool
	AccountingDocumentationDate             *time.Time
	ClearGeometry                           bool
	Geometry                                *types.Geometry
	ClearCulturalAffiliation                bool
	CulturalAffiliationID                   *int
	ClearModel                              bool
	ModelID                                 *int
	ClearMound                              bool
	MoundID                                 *int
	ClearPublications                       bool
	AddPublicationIDs                       []int
	RemovePublicationIDs                    []int
	ClearTechniques                         bool
	AddTechniqueIDs                         []int
	RemoveTechniqueIDs                      []int
	ClearRegion                             bool
	RegionID                                *int
	ClearAccountingDocumentationAddress     bool
	AccountingDocumentationAddressID        *int
	ClearAccountingDocumentationAuthor      bool
	AccountingDocumentationAuthorID         *int
	CollectionID                            *int
	ClearPersonal                           bool
	AddPersonalIDs                          []int
	RemovePersonalIDs                       []int
}

// Mutate applies the UpdatePetroglyphInput on the PetroglyphMutation builder.
func (i *UpdatePetroglyphInput) Mutate(m *PetroglyphMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDating {
		m.ClearDating()
	}
	if v := i.Dating; v != nil {
		m.SetDating(*v)
	}
	if i.ClearDatingStart {
		m.ClearDatingStart()
	}
	if v := i.DatingStart; v != nil {
		m.SetDatingStart(*v)
	}
	if i.ClearDatingEnd {
		m.ClearDatingEnd()
	}
	if v := i.DatingEnd; v != nil {
		m.SetDatingEnd(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearHeight {
		m.ClearHeight()
	}
	if v := i.Height; v != nil {
		m.SetHeight(*v)
	}
	if i.ClearWidth {
		m.ClearWidth()
	}
	if v := i.Width; v != nil {
		m.SetWidth(*v)
	}
	if i.ClearLength {
		m.ClearLength()
	}
	if v := i.Length; v != nil {
		m.SetLength(*v)
	}
	if i.ClearDepth {
		m.ClearDepth()
	}
	if v := i.Depth; v != nil {
		m.SetDepth(*v)
	}
	if i.ClearDiameter {
		m.ClearDiameter()
	}
	if v := i.Diameter; v != nil {
		m.SetDiameter(*v)
	}
	if i.ClearWeight {
		m.ClearWeight()
	}
	if v := i.Weight; v != nil {
		m.SetWeight(*v)
	}
	if i.ClearDimensions {
		m.ClearDimensions()
	}
	if v := i.Dimensions; v != nil {
		m.SetDimensions(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearDeletedBy {
		m.ClearDeletedBy()
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if i.ClearNumber {
		m.ClearNumber()
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if i.ClearOrientation {
		m.ClearOrientation()
	}
	if v := i.Orientation; v != nil {
		m.SetOrientation(*v)
	}
	if i.ClearPosition {
		m.ClearPosition()
	}
	if v := i.Position; v != nil {
		m.SetPosition(*v)
	}
	if i.ClearGeometricShape {
		m.ClearGeometricShape()
	}
	if v := i.GeometricShape; v != nil {
		m.SetGeometricShape(*v)
	}
	if i.ClearPlanePreservation {
		m.ClearPlanePreservation()
	}
	if v := i.PlanePreservation; v != nil {
		m.SetPlanePreservation(*v)
	}
	if i.ClearPhotoCode {
		m.ClearPhotoCode()
	}
	if v := i.PhotoCode; v != nil {
		m.SetPhotoCode(*v)
	}
	if i.ClearAccountingDocumentationInformation {
		m.ClearAccountingDocumentationInformation()
	}
	if v := i.AccountingDocumentationInformation; v != nil {
		m.SetAccountingDocumentationInformation(*v)
	}
	if i.ClearAccountingDocumentationDate {
		m.ClearAccountingDocumentationDate()
	}
	if v := i.AccountingDocumentationDate; v != nil {
		m.SetAccountingDocumentationDate(*v)
	}
	if i.ClearGeometry {
		m.ClearGeometry()
	}
	if v := i.Geometry; v != nil {
		m.SetGeometry(*v)
	}
	if i.ClearCulturalAffiliation {
		m.ClearCulturalAffiliation()
	}
	if v := i.CulturalAffiliationID; v != nil {
		m.SetCulturalAffiliationID(*v)
	}
	if i.ClearModel {
		m.ClearModel()
	}
	if v := i.ModelID; v != nil {
		m.SetModelID(*v)
	}
	if i.ClearMound {
		m.ClearMound()
	}
	if v := i.MoundID; v != nil {
		m.SetMoundID(*v)
	}
	if i.ClearPublications {
		m.ClearPublications()
	}
	if v := i.AddPublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.RemovePublicationIDs; len(v) > 0 {
		m.RemovePublicationIDs(v...)
	}
	if i.ClearTechniques {
		m.ClearTechniques()
	}
	if v := i.AddTechniqueIDs; len(v) > 0 {
		m.AddTechniqueIDs(v...)
	}
	if v := i.RemoveTechniqueIDs; len(v) > 0 {
		m.RemoveTechniqueIDs(v...)
	}
	if i.ClearRegion {
		m.ClearRegion()
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if i.ClearAccountingDocumentationAddress {
		m.ClearAccountingDocumentationAddress()
	}
	if v := i.AccountingDocumentationAddressID; v != nil {
		m.SetAccountingDocumentationAddressID(*v)
	}
	if i.ClearAccountingDocumentationAuthor {
		m.ClearAccountingDocumentationAuthor()
	}
	if v := i.AccountingDocumentationAuthorID; v != nil {
		m.SetAccountingDocumentationAuthorID(*v)
	}
	if v := i.CollectionID; v != nil {
		m.SetCollectionID(*v)
	}
	if i.ClearPersonal {
		m.ClearPersonal()
	}
	if v := i.AddPersonalIDs; len(v) > 0 {
		m.AddPersonalIDs(v...)
	}
	if v := i.RemovePersonalIDs; len(v) > 0 {
		m.RemovePersonalIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePetroglyphInput on the PetroglyphUpdate builder.
func (c *PetroglyphUpdate) SetInput(i UpdatePetroglyphInput) *PetroglyphUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePetroglyphInput on the PetroglyphUpdateOne builder.
func (c *PetroglyphUpdateOne) SetInput(i UpdatePetroglyphInput) *PetroglyphUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProjectInput represents a mutation input for creating projects.
type CreateProjectInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	BeginDate    *time.Time
	EndDate      *time.Time
	Year         *int
	BeginYear    *int
	EndYear      *int
	ArtifactIDs  []int
	TeamIDs      []int
}

// Mutate applies the CreateProjectInput on the ProjectMutation builder.
func (i *CreateProjectInput) Mutate(m *ProjectMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.BeginDate; v != nil {
		m.SetBeginDate(*v)
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if v := i.Year; v != nil {
		m.SetYear(*v)
	}
	if v := i.BeginYear; v != nil {
		m.SetBeginYear(*v)
	}
	if v := i.EndYear; v != nil {
		m.SetEndYear(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.TeamIDs; len(v) > 0 {
		m.AddTeamIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProjectInput on the ProjectCreate builder.
func (c *ProjectCreate) SetInput(i CreateProjectInput) *ProjectCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProjectInput represents a mutation input for updating projects.
type UpdateProjectInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearBeginDate    bool
	BeginDate         *time.Time
	ClearEndDate      bool
	EndDate           *time.Time
	ClearYear         bool
	Year              *int
	ClearBeginYear    bool
	BeginYear         *int
	ClearEndYear      bool
	EndYear           *int
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
	ClearTeam         bool
	AddTeamIDs        []int
	RemoveTeamIDs     []int
}

// Mutate applies the UpdateProjectInput on the ProjectMutation builder.
func (i *UpdateProjectInput) Mutate(m *ProjectMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearBeginDate {
		m.ClearBeginDate()
	}
	if v := i.BeginDate; v != nil {
		m.SetBeginDate(*v)
	}
	if i.ClearEndDate {
		m.ClearEndDate()
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if i.ClearYear {
		m.ClearYear()
	}
	if v := i.Year; v != nil {
		m.SetYear(*v)
	}
	if i.ClearBeginYear {
		m.ClearBeginYear()
	}
	if v := i.BeginYear; v != nil {
		m.SetBeginYear(*v)
	}
	if i.ClearEndYear {
		m.ClearEndYear()
	}
	if v := i.EndYear; v != nil {
		m.SetEndYear(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearTeam {
		m.ClearTeam()
	}
	if v := i.AddTeamIDs; len(v) > 0 {
		m.AddTeamIDs(v...)
	}
	if v := i.RemoveTeamIDs; len(v) > 0 {
		m.RemoveTeamIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProjectInput on the ProjectUpdate builder.
func (c *ProjectUpdate) SetInput(i UpdateProjectInput) *ProjectUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProjectInput on the ProjectUpdateOne builder.
func (c *ProjectUpdateOne) SetInput(i UpdateProjectInput) *ProjectUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProtectedAreaInput represents a mutation input for creating protectedareas.
type CreateProtectedAreaInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	DisplayName             *string
	Abbreviation            *string
	Description             *string
	ExternalLink            *string
	Area                    *string
	EstablishmentDate       *time.Time
	ProtectedAreaPictureIDs []int
	ProtectedAreaCategoryID *int
}

// Mutate applies the CreateProtectedAreaInput on the ProtectedAreaMutation builder.
func (i *CreateProtectedAreaInput) Mutate(m *ProtectedAreaMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Area; v != nil {
		m.SetArea(*v)
	}
	if v := i.EstablishmentDate; v != nil {
		m.SetEstablishmentDate(*v)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.ProtectedAreaCategoryID; v != nil {
		m.SetProtectedAreaCategoryID(*v)
	}
}

// SetInput applies the change-set in the CreateProtectedAreaInput on the ProtectedAreaCreate builder.
func (c *ProtectedAreaCreate) SetInput(i CreateProtectedAreaInput) *ProtectedAreaCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProtectedAreaInput represents a mutation input for updating protectedareas.
type UpdateProtectedAreaInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	ClearDisplayName              bool
	DisplayName                   *string
	ClearAbbreviation             bool
	Abbreviation                  *string
	ClearDescription              bool
	Description                   *string
	ClearExternalLink             bool
	ExternalLink                  *string
	ClearArea                     bool
	Area                          *string
	ClearEstablishmentDate        bool
	EstablishmentDate             *time.Time
	ClearProtectedAreaPictures    bool
	AddProtectedAreaPictureIDs    []int
	RemoveProtectedAreaPictureIDs []int
	ClearProtectedAreaCategory    bool
	ProtectedAreaCategoryID       *int
}

// Mutate applies the UpdateProtectedAreaInput on the ProtectedAreaMutation builder.
func (i *UpdateProtectedAreaInput) Mutate(m *ProtectedAreaMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArea {
		m.ClearArea()
	}
	if v := i.Area; v != nil {
		m.SetArea(*v)
	}
	if i.ClearEstablishmentDate {
		m.ClearEstablishmentDate()
	}
	if v := i.EstablishmentDate; v != nil {
		m.SetEstablishmentDate(*v)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
	if i.ClearProtectedAreaCategory {
		m.ClearProtectedAreaCategory()
	}
	if v := i.ProtectedAreaCategoryID; v != nil {
		m.SetProtectedAreaCategoryID(*v)
	}
}

// SetInput applies the change-set in the UpdateProtectedAreaInput on the ProtectedAreaUpdate builder.
func (c *ProtectedAreaUpdate) SetInput(i UpdateProtectedAreaInput) *ProtectedAreaUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProtectedAreaInput on the ProtectedAreaUpdateOne builder.
func (c *ProtectedAreaUpdateOne) SetInput(i UpdateProtectedAreaInput) *ProtectedAreaUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProtectedAreaCategoryInput represents a mutation input for creating protectedareacategories.
type CreateProtectedAreaCategoryInput struct {
	CreatedAt        *time.Time
	CreatedBy        *string
	UpdatedAt        *time.Time
	UpdatedBy        *string
	DisplayName      *string
	Abbreviation     *string
	Description      *string
	ExternalLink     *string
	ProtectedAreaIDs []int
}

// Mutate applies the CreateProtectedAreaCategoryInput on the ProtectedAreaCategoryMutation builder.
func (i *CreateProtectedAreaCategoryInput) Mutate(m *ProtectedAreaCategoryMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ProtectedAreaIDs; len(v) > 0 {
		m.AddProtectedAreaIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProtectedAreaCategoryInput on the ProtectedAreaCategoryCreate builder.
func (c *ProtectedAreaCategoryCreate) SetInput(i CreateProtectedAreaCategoryInput) *ProtectedAreaCategoryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProtectedAreaCategoryInput represents a mutation input for updating protectedareacategories.
type UpdateProtectedAreaCategoryInput struct {
	ClearCreatedBy         bool
	CreatedBy              *string
	UpdatedAt              *time.Time
	ClearUpdatedBy         bool
	UpdatedBy              *string
	ClearDisplayName       bool
	DisplayName            *string
	ClearAbbreviation      bool
	Abbreviation           *string
	ClearDescription       bool
	Description            *string
	ClearExternalLink      bool
	ExternalLink           *string
	ClearProtectedAreas    bool
	AddProtectedAreaIDs    []int
	RemoveProtectedAreaIDs []int
}

// Mutate applies the UpdateProtectedAreaCategoryInput on the ProtectedAreaCategoryMutation builder.
func (i *UpdateProtectedAreaCategoryInput) Mutate(m *ProtectedAreaCategoryMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearProtectedAreas {
		m.ClearProtectedAreas()
	}
	if v := i.AddProtectedAreaIDs; len(v) > 0 {
		m.AddProtectedAreaIDs(v...)
	}
	if v := i.RemoveProtectedAreaIDs; len(v) > 0 {
		m.RemoveProtectedAreaIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProtectedAreaCategoryInput on the ProtectedAreaCategoryUpdate builder.
func (c *ProtectedAreaCategoryUpdate) SetInput(i UpdateProtectedAreaCategoryInput) *ProtectedAreaCategoryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProtectedAreaCategoryInput on the ProtectedAreaCategoryUpdateOne builder.
func (c *ProtectedAreaCategoryUpdateOne) SetInput(i UpdateProtectedAreaCategoryInput) *ProtectedAreaCategoryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProtectedAreaPictureInput represents a mutation input for creating protectedareapictures.
type CreateProtectedAreaPictureInput struct {
	CreatedAt            *time.Time
	CreatedBy            *string
	UpdatedAt            *time.Time
	UpdatedBy            *string
	DisplayName          *string
	Abbreviation         *string
	Description          *string
	ExternalLink         *string
	Status               *protectedareapicture.Status
	PrimaryImageURL      *string
	AdditionalImagesUrls []string
	ShootingDate         *time.Time
	Geometry             *types.Geometry
	AuthorID             *int
	CollectionID         int
	ProtectedAreaID      *int
	LocationID           *int
	LicenseID            *int
	CountryID            *int
	SettlementID         *int
	DistrictID           *int
	RegionID             *int
	PersonalIDs          []int
}

// Mutate applies the CreateProtectedAreaPictureInput on the ProtectedAreaPictureMutation builder.
func (i *CreateProtectedAreaPictureInput) Mutate(m *ProtectedAreaPictureMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.ShootingDate; v != nil {
		m.SetShootingDate(*v)
	}
	if v := i.Geometry; v != nil {
		m.SetGeometry(*v)
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
	m.SetCollectionID(i.CollectionID)
	if v := i.ProtectedAreaID; v != nil {
		m.SetProtectedAreaID(*v)
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if v := i.PersonalIDs; len(v) > 0 {
		m.AddPersonalIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProtectedAreaPictureInput on the ProtectedAreaPictureCreate builder.
func (c *ProtectedAreaPictureCreate) SetInput(i CreateProtectedAreaPictureInput) *ProtectedAreaPictureCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProtectedAreaPictureInput represents a mutation input for updating protectedareapictures.
type UpdateProtectedAreaPictureInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearStatus                bool
	Status                     *protectedareapicture.Status
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearShootingDate          bool
	ShootingDate               *time.Time
	ClearGeometry              bool
	Geometry                   *types.Geometry
	ClearAuthor                bool
	AuthorID                   *int
	CollectionID               *int
	ClearProtectedArea         bool
	ProtectedAreaID            *int
	ClearLocation              bool
	LocationID                 *int
	ClearLicense               bool
	LicenseID                  *int
	ClearCountry               bool
	CountryID                  *int
	ClearSettlement            bool
	SettlementID               *int
	ClearDistrict              bool
	DistrictID                 *int
	ClearRegion                bool
	RegionID                   *int
	ClearPersonal              bool
	AddPersonalIDs             []int
	RemovePersonalIDs          []int
}

// Mutate applies the UpdateProtectedAreaPictureInput on the ProtectedAreaPictureMutation builder.
func (i *UpdateProtectedAreaPictureInput) Mutate(m *ProtectedAreaPictureMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearShootingDate {
		m.ClearShootingDate()
	}
	if v := i.ShootingDate; v != nil {
		m.SetShootingDate(*v)
	}
	if i.ClearGeometry {
		m.ClearGeometry()
	}
	if v := i.Geometry; v != nil {
		m.SetGeometry(*v)
	}
	if i.ClearAuthor {
		m.ClearAuthor()
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
	if v := i.CollectionID; v != nil {
		m.SetCollectionID(*v)
	}
	if i.ClearProtectedArea {
		m.ClearProtectedArea()
	}
	if v := i.ProtectedAreaID; v != nil {
		m.SetProtectedAreaID(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	if i.ClearLicense {
		m.ClearLicense()
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if i.ClearSettlement {
		m.ClearSettlement()
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if i.ClearDistrict {
		m.ClearDistrict()
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if i.ClearRegion {
		m.ClearRegion()
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if i.ClearPersonal {
		m.ClearPersonal()
	}
	if v := i.AddPersonalIDs; len(v) > 0 {
		m.AddPersonalIDs(v...)
	}
	if v := i.RemovePersonalIDs; len(v) > 0 {
		m.RemovePersonalIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProtectedAreaPictureInput on the ProtectedAreaPictureUpdate builder.
func (c *ProtectedAreaPictureUpdate) SetInput(i UpdateProtectedAreaPictureInput) *ProtectedAreaPictureUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProtectedAreaPictureInput on the ProtectedAreaPictureUpdateOne builder.
func (c *ProtectedAreaPictureUpdateOne) SetInput(i UpdateProtectedAreaPictureInput) *ProtectedAreaPictureUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePublicationInput represents a mutation input for creating publications.
type CreatePublicationInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Abbreviation  *string
	Description   *string
	ExternalLink  *string
	ArtifactIDs   []int
	PetroglyphIDs []int
	AuthorIDs     []int
}

// Mutate applies the CreatePublicationInput on the PublicationMutation builder.
func (i *CreatePublicationInput) Mutate(m *PublicationMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.PetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.AuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePublicationInput on the PublicationCreate builder.
func (c *PublicationCreate) SetInput(i CreatePublicationInput) *PublicationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePublicationInput represents a mutation input for updating publications.
type UpdatePublicationInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearAbbreviation   bool
	Abbreviation        *string
	ClearDescription    bool
	Description         *string
	ClearExternalLink   bool
	ExternalLink        *string
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
	ClearPetroglyphs    bool
	AddPetroglyphIDs    []int
	RemovePetroglyphIDs []int
	ClearAuthors        bool
	AddAuthorIDs        []int
	RemoveAuthorIDs     []int
}

// Mutate applies the UpdatePublicationInput on the PublicationMutation builder.
func (i *UpdatePublicationInput) Mutate(m *PublicationMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearPetroglyphs {
		m.ClearPetroglyphs()
	}
	if v := i.AddPetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.RemovePetroglyphIDs; len(v) > 0 {
		m.RemovePetroglyphIDs(v...)
	}
	if i.ClearAuthors {
		m.ClearAuthors()
	}
	if v := i.AddAuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.RemoveAuthorIDs; len(v) > 0 {
		m.RemoveAuthorIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePublicationInput on the PublicationUpdate builder.
func (c *PublicationUpdate) SetInput(i UpdatePublicationInput) *PublicationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePublicationInput on the PublicationUpdateOne builder.
func (c *PublicationUpdateOne) SetInput(i UpdatePublicationInput) *PublicationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePublisherInput represents a mutation input for creating publishers.
type CreatePublisherInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	BookIDs      []int
}

// Mutate applies the CreatePublisherInput on the PublisherMutation builder.
func (i *CreatePublisherInput) Mutate(m *PublisherMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePublisherInput on the PublisherCreate builder.
func (c *PublisherCreate) SetInput(i CreatePublisherInput) *PublisherCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePublisherInput represents a mutation input for updating publishers.
type UpdatePublisherInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearBooks        bool
	AddBookIDs        []int
	RemoveBookIDs     []int
}

// Mutate applies the UpdatePublisherInput on the PublisherMutation builder.
func (i *UpdatePublisherInput) Mutate(m *PublisherMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePublisherInput on the PublisherUpdate builder.
func (c *PublisherUpdate) SetInput(i UpdatePublisherInput) *PublisherUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePublisherInput on the PublisherUpdateOne builder.
func (c *PublisherUpdateOne) SetInput(i UpdatePublisherInput) *PublisherUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRegionInput represents a mutation input for creating regions.
type CreateRegionInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	DisplayName             *string
	Abbreviation            *string
	Description             *string
	ExternalLink            *string
	ArtIDs                  []int
	ArtifactIDs             []int
	BookIDs                 []int
	PetroglyphIDs           []int
	ProtectedAreaPictureIDs []int
	DistrictIDs             []int
	SettlementIDs           []int
	LocationIDs             []int
	CountryID               *int
	KnownAsAfterIDs         []int
	KnownAsBeforeIDs        []int
}

// Mutate applies the CreateRegionInput on the RegionMutation builder.
func (i *CreateRegionInput) Mutate(m *RegionMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.PetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.DistrictIDs; len(v) > 0 {
		m.AddDistrictIDs(v...)
	}
	if v := i.SettlementIDs; len(v) > 0 {
		m.AddSettlementIDs(v...)
	}
	if v := i.LocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if v := i.KnownAsAfterIDs; len(v) > 0 {
		m.AddKnownAsAfterIDs(v...)
	}
	if v := i.KnownAsBeforeIDs; len(v) > 0 {
		m.AddKnownAsBeforeIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRegionInput on the RegionCreate builder.
func (c *RegionCreate) SetInput(i CreateRegionInput) *RegionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRegionInput represents a mutation input for updating regions.
type UpdateRegionInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	ClearDisplayName              bool
	DisplayName                   *string
	ClearAbbreviation             bool
	Abbreviation                  *string
	ClearDescription              bool
	Description                   *string
	ClearExternalLink             bool
	ExternalLink                  *string
	ClearArt                      bool
	AddArtIDs                     []int
	RemoveArtIDs                  []int
	ClearArtifacts                bool
	AddArtifactIDs                []int
	RemoveArtifactIDs             []int
	ClearBooks                    bool
	AddBookIDs                    []int
	RemoveBookIDs                 []int
	ClearPetroglyphs              bool
	AddPetroglyphIDs              []int
	RemovePetroglyphIDs           []int
	ClearProtectedAreaPictures    bool
	AddProtectedAreaPictureIDs    []int
	RemoveProtectedAreaPictureIDs []int
	ClearDistricts                bool
	AddDistrictIDs                []int
	RemoveDistrictIDs             []int
	ClearSettlements              bool
	AddSettlementIDs              []int
	RemoveSettlementIDs           []int
	ClearLocations                bool
	AddLocationIDs                []int
	RemoveLocationIDs             []int
	ClearCountry                  bool
	CountryID                     *int
	ClearKnownAsAfter             bool
	AddKnownAsAfterIDs            []int
	RemoveKnownAsAfterIDs         []int
	ClearKnownAsBefore            bool
	AddKnownAsBeforeIDs           []int
	RemoveKnownAsBeforeIDs        []int
}

// Mutate applies the UpdateRegionInput on the RegionMutation builder.
func (i *UpdateRegionInput) Mutate(m *RegionMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArt {
		m.ClearArt()
	}
	if v := i.AddArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.RemoveArtIDs; len(v) > 0 {
		m.RemoveArtIDs(v...)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearPetroglyphs {
		m.ClearPetroglyphs()
	}
	if v := i.AddPetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.RemovePetroglyphIDs; len(v) > 0 {
		m.RemovePetroglyphIDs(v...)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
	if i.ClearDistricts {
		m.ClearDistricts()
	}
	if v := i.AddDistrictIDs; len(v) > 0 {
		m.AddDistrictIDs(v...)
	}
	if v := i.RemoveDistrictIDs; len(v) > 0 {
		m.RemoveDistrictIDs(v...)
	}
	if i.ClearSettlements {
		m.ClearSettlements()
	}
	if v := i.AddSettlementIDs; len(v) > 0 {
		m.AddSettlementIDs(v...)
	}
	if v := i.RemoveSettlementIDs; len(v) > 0 {
		m.RemoveSettlementIDs(v...)
	}
	if i.ClearLocations {
		m.ClearLocations()
	}
	if v := i.AddLocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RemoveLocationIDs; len(v) > 0 {
		m.RemoveLocationIDs(v...)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if i.ClearKnownAsAfter {
		m.ClearKnownAsAfter()
	}
	if v := i.AddKnownAsAfterIDs; len(v) > 0 {
		m.AddKnownAsAfterIDs(v...)
	}
	if v := i.RemoveKnownAsAfterIDs; len(v) > 0 {
		m.RemoveKnownAsAfterIDs(v...)
	}
	if i.ClearKnownAsBefore {
		m.ClearKnownAsBefore()
	}
	if v := i.AddKnownAsBeforeIDs; len(v) > 0 {
		m.AddKnownAsBeforeIDs(v...)
	}
	if v := i.RemoveKnownAsBeforeIDs; len(v) > 0 {
		m.RemoveKnownAsBeforeIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateRegionInput on the RegionUpdate builder.
func (c *RegionUpdate) SetInput(i UpdateRegionInput) *RegionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRegionInput on the RegionUpdateOne builder.
func (c *RegionUpdateOne) SetInput(i UpdateRegionInput) *RegionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSetInput represents a mutation input for creating sets.
type CreateSetInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtifactIDs  []int
	MonumentIDs  []int
}

// Mutate applies the CreateSetInput on the SetMutation builder.
func (i *CreateSetInput) Mutate(m *SetMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.MonumentIDs; len(v) > 0 {
		m.AddMonumentIDs(v...)
	}
}

// SetInput applies the change-set in the CreateSetInput on the SetCreate builder.
func (c *SetCreate) SetInput(i CreateSetInput) *SetCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSetInput represents a mutation input for updating sets.
type UpdateSetInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
	ClearMonuments    bool
	AddMonumentIDs    []int
	RemoveMonumentIDs []int
}

// Mutate applies the UpdateSetInput on the SetMutation builder.
func (i *UpdateSetInput) Mutate(m *SetMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearMonuments {
		m.ClearMonuments()
	}
	if v := i.AddMonumentIDs; len(v) > 0 {
		m.AddMonumentIDs(v...)
	}
	if v := i.RemoveMonumentIDs; len(v) > 0 {
		m.RemoveMonumentIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSetInput on the SetUpdate builder.
func (c *SetUpdate) SetInput(i UpdateSetInput) *SetUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSetInput on the SetUpdateOne builder.
func (c *SetUpdateOne) SetInput(i UpdateSetInput) *SetUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSettlementInput represents a mutation input for creating settlements.
type CreateSettlementInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	DisplayName             *string
	Abbreviation            *string
	Description             *string
	ExternalLink            *string
	ArtIDs                  []int
	ArtifactIDs             []int
	BookIDs                 []int
	ProtectedAreaPictureIDs []int
	LocationIDs             []int
	RegionID                *int
	DistrictID              *int
	KnownAsAfterIDs         []int
	KnownAsBeforeIDs        []int
}

// Mutate applies the CreateSettlementInput on the SettlementMutation builder.
func (i *CreateSettlementInput) Mutate(m *SettlementMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.LocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if v := i.KnownAsAfterIDs; len(v) > 0 {
		m.AddKnownAsAfterIDs(v...)
	}
	if v := i.KnownAsBeforeIDs; len(v) > 0 {
		m.AddKnownAsBeforeIDs(v...)
	}
}

// SetInput applies the change-set in the CreateSettlementInput on the SettlementCreate builder.
func (c *SettlementCreate) SetInput(i CreateSettlementInput) *SettlementCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSettlementInput represents a mutation input for updating settlements.
type UpdateSettlementInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	ClearDisplayName              bool
	DisplayName                   *string
	ClearAbbreviation             bool
	Abbreviation                  *string
	ClearDescription              bool
	Description                   *string
	ClearExternalLink             bool
	ExternalLink                  *string
	ClearArt                      bool
	AddArtIDs                     []int
	RemoveArtIDs                  []int
	ClearArtifacts                bool
	AddArtifactIDs                []int
	RemoveArtifactIDs             []int
	ClearBooks                    bool
	AddBookIDs                    []int
	RemoveBookIDs                 []int
	ClearProtectedAreaPictures    bool
	AddProtectedAreaPictureIDs    []int
	RemoveProtectedAreaPictureIDs []int
	ClearLocations                bool
	AddLocationIDs                []int
	RemoveLocationIDs             []int
	ClearRegion                   bool
	RegionID                      *int
	ClearDistrict                 bool
	DistrictID                    *int
	ClearKnownAsAfter             bool
	AddKnownAsAfterIDs            []int
	RemoveKnownAsAfterIDs         []int
	ClearKnownAsBefore            bool
	AddKnownAsBeforeIDs           []int
	RemoveKnownAsBeforeIDs        []int
}

// Mutate applies the UpdateSettlementInput on the SettlementMutation builder.
func (i *UpdateSettlementInput) Mutate(m *SettlementMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArt {
		m.ClearArt()
	}
	if v := i.AddArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.RemoveArtIDs; len(v) > 0 {
		m.RemoveArtIDs(v...)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
	if i.ClearLocations {
		m.ClearLocations()
	}
	if v := i.AddLocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RemoveLocationIDs; len(v) > 0 {
		m.RemoveLocationIDs(v...)
	}
	if i.ClearRegion {
		m.ClearRegion()
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
	if i.ClearDistrict {
		m.ClearDistrict()
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if i.ClearKnownAsAfter {
		m.ClearKnownAsAfter()
	}
	if v := i.AddKnownAsAfterIDs; len(v) > 0 {
		m.AddKnownAsAfterIDs(v...)
	}
	if v := i.RemoveKnownAsAfterIDs; len(v) > 0 {
		m.RemoveKnownAsAfterIDs(v...)
	}
	if i.ClearKnownAsBefore {
		m.ClearKnownAsBefore()
	}
	if v := i.AddKnownAsBeforeIDs; len(v) > 0 {
		m.AddKnownAsBeforeIDs(v...)
	}
	if v := i.RemoveKnownAsBeforeIDs; len(v) > 0 {
		m.RemoveKnownAsBeforeIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSettlementInput on the SettlementUpdate builder.
func (c *SettlementUpdate) SetInput(i UpdateSettlementInput) *SettlementUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSettlementInput on the SettlementUpdateOne builder.
func (c *SettlementUpdateOne) SetInput(i UpdateSettlementInput) *SettlementUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTechniqueInput represents a mutation input for creating techniques.
type CreateTechniqueInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Abbreviation  *string
	Description   *string
	ExternalLink  *string
	ArtIDs        []int
	ArtifactIDs   []int
	PetroglyphIDs []int
}

// Mutate applies the CreateTechniqueInput on the TechniqueMutation builder.
func (i *CreateTechniqueInput) Mutate(m *TechniqueMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.PetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTechniqueInput on the TechniqueCreate builder.
func (c *TechniqueCreate) SetInput(i CreateTechniqueInput) *TechniqueCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTechniqueInput represents a mutation input for updating techniques.
type UpdateTechniqueInput struct {
	ClearCreatedBy      bool
	CreatedBy           *string
	UpdatedAt           *time.Time
	ClearUpdatedBy      bool
	UpdatedBy           *string
	ClearDisplayName    bool
	DisplayName         *string
	ClearAbbreviation   bool
	Abbreviation        *string
	ClearDescription    bool
	Description         *string
	ClearExternalLink   bool
	ExternalLink        *string
	ClearArt            bool
	AddArtIDs           []int
	RemoveArtIDs        []int
	ClearArtifacts      bool
	AddArtifactIDs      []int
	RemoveArtifactIDs   []int
	ClearPetroglyphs    bool
	AddPetroglyphIDs    []int
	RemovePetroglyphIDs []int
}

// Mutate applies the UpdateTechniqueInput on the TechniqueMutation builder.
func (i *UpdateTechniqueInput) Mutate(m *TechniqueMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArt {
		m.ClearArt()
	}
	if v := i.AddArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.RemoveArtIDs; len(v) > 0 {
		m.RemoveArtIDs(v...)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearPetroglyphs {
		m.ClearPetroglyphs()
	}
	if v := i.AddPetroglyphIDs; len(v) > 0 {
		m.AddPetroglyphIDs(v...)
	}
	if v := i.RemovePetroglyphIDs; len(v) > 0 {
		m.RemovePetroglyphIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTechniqueInput on the TechniqueUpdate builder.
func (c *TechniqueUpdate) SetInput(i UpdateTechniqueInput) *TechniqueUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTechniqueInput on the TechniqueUpdateOne builder.
func (c *TechniqueUpdateOne) SetInput(i UpdateTechniqueInput) *TechniqueUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateVisitInput represents a mutation input for creating visits.
type CreateVisitInput struct {
	CreatedAt  *time.Time
	CreatedBy  *string
	UpdatedAt  *time.Time
	UpdatedBy  *string
	Year       *int
	MoundIDs   []int
	VisitorIDs []int
}

// Mutate applies the CreateVisitInput on the VisitMutation builder.
func (i *CreateVisitInput) Mutate(m *VisitMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Year; v != nil {
		m.SetYear(*v)
	}
	if v := i.MoundIDs; len(v) > 0 {
		m.AddMoundIDs(v...)
	}
	if v := i.VisitorIDs; len(v) > 0 {
		m.AddVisitorIDs(v...)
	}
}

// SetInput applies the change-set in the CreateVisitInput on the VisitCreate builder.
func (c *VisitCreate) SetInput(i CreateVisitInput) *VisitCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateVisitInput represents a mutation input for updating visits.
type UpdateVisitInput struct {
	ClearCreatedBy   bool
	CreatedBy        *string
	UpdatedAt        *time.Time
	ClearUpdatedBy   bool
	UpdatedBy        *string
	ClearYear        bool
	Year             *int
	ClearMounds      bool
	AddMoundIDs      []int
	RemoveMoundIDs   []int
	ClearVisitors    bool
	AddVisitorIDs    []int
	RemoveVisitorIDs []int
}

// Mutate applies the UpdateVisitInput on the VisitMutation builder.
func (i *UpdateVisitInput) Mutate(m *VisitMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearYear {
		m.ClearYear()
	}
	if v := i.Year; v != nil {
		m.SetYear(*v)
	}
	if i.ClearMounds {
		m.ClearMounds()
	}
	if v := i.AddMoundIDs; len(v) > 0 {
		m.AddMoundIDs(v...)
	}
	if v := i.RemoveMoundIDs; len(v) > 0 {
		m.RemoveMoundIDs(v...)
	}
	if i.ClearVisitors {
		m.ClearVisitors()
	}
	if v := i.AddVisitorIDs; len(v) > 0 {
		m.AddVisitorIDs(v...)
	}
	if v := i.RemoveVisitorIDs; len(v) > 0 {
		m.RemoveVisitorIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateVisitInput on the VisitUpdate builder.
func (c *VisitUpdate) SetInput(i UpdateVisitInput) *VisitUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateVisitInput on the VisitUpdateOne builder.
func (c *VisitUpdateOne) SetInput(i UpdateVisitInput) *VisitUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
