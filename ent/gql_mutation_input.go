// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/internal/ent/types"
)

// CreateArtInput represents a mutation input for creating arts.
type CreateArtInput struct {
	CreatedAt            *time.Time
	CreatedBy            *string
	UpdatedAt            *time.Time
	UpdatedBy            *string
	DisplayName          *string
	Abbreviation         *string
	Description          *string
	ExternalLink         *string
	PrimaryImageURL      *string
	AdditionalImagesUrls []string
	ArtGenreIDs          []int
	ArtStyleIDs          []int
}

// Mutate applies the CreateArtInput on the ArtMutation builder.
func (i *CreateArtInput) Mutate(m *ArtMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.ArtGenreIDs; len(v) > 0 {
		m.AddArtGenreIDs(v...)
	}
	if v := i.ArtStyleIDs; len(v) > 0 {
		m.AddArtStyleIDs(v...)
	}
}

// SetInput applies the change-set in the CreateArtInput on the ArtCreate builder.
func (c *ArtCreate) SetInput(i CreateArtInput) *ArtCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateArtInput represents a mutation input for updating arts.
type UpdateArtInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearArtGenre              bool
	AddArtGenreIDs             []int
	RemoveArtGenreIDs          []int
	ClearArtStyle              bool
	AddArtStyleIDs             []int
	RemoveArtStyleIDs          []int
}

// Mutate applies the UpdateArtInput on the ArtMutation builder.
func (i *UpdateArtInput) Mutate(m *ArtMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearArtGenre {
		m.ClearArtGenre()
	}
	if v := i.AddArtGenreIDs; len(v) > 0 {
		m.AddArtGenreIDs(v...)
	}
	if v := i.RemoveArtGenreIDs; len(v) > 0 {
		m.RemoveArtGenreIDs(v...)
	}
	if i.ClearArtStyle {
		m.ClearArtStyle()
	}
	if v := i.AddArtStyleIDs; len(v) > 0 {
		m.AddArtStyleIDs(v...)
	}
	if v := i.RemoveArtStyleIDs; len(v) > 0 {
		m.RemoveArtStyleIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateArtInput on the ArtUpdate builder.
func (c *ArtUpdate) SetInput(i UpdateArtInput) *ArtUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateArtInput on the ArtUpdateOne builder.
func (c *ArtUpdateOne) SetInput(i UpdateArtInput) *ArtUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateArtGenreInput represents a mutation input for creating artgenres.
type CreateArtGenreInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtIDs       []int
}

// Mutate applies the CreateArtGenreInput on the ArtGenreMutation builder.
func (i *CreateArtGenreInput) Mutate(m *ArtGenreMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
}

// SetInput applies the change-set in the CreateArtGenreInput on the ArtGenreCreate builder.
func (c *ArtGenreCreate) SetInput(i CreateArtGenreInput) *ArtGenreCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateArtGenreInput represents a mutation input for updating artgenres.
type UpdateArtGenreInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArt          bool
	AddArtIDs         []int
	RemoveArtIDs      []int
}

// Mutate applies the UpdateArtGenreInput on the ArtGenreMutation builder.
func (i *UpdateArtGenreInput) Mutate(m *ArtGenreMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArt {
		m.ClearArt()
	}
	if v := i.AddArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.RemoveArtIDs; len(v) > 0 {
		m.RemoveArtIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateArtGenreInput on the ArtGenreUpdate builder.
func (c *ArtGenreUpdate) SetInput(i UpdateArtGenreInput) *ArtGenreUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateArtGenreInput on the ArtGenreUpdateOne builder.
func (c *ArtGenreUpdateOne) SetInput(i UpdateArtGenreInput) *ArtGenreUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateArtStyleInput represents a mutation input for creating artstyles.
type CreateArtStyleInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtIDs       []int
}

// Mutate applies the CreateArtStyleInput on the ArtStyleMutation builder.
func (i *CreateArtStyleInput) Mutate(m *ArtStyleMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
}

// SetInput applies the change-set in the CreateArtStyleInput on the ArtStyleCreate builder.
func (c *ArtStyleCreate) SetInput(i CreateArtStyleInput) *ArtStyleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateArtStyleInput represents a mutation input for updating artstyles.
type UpdateArtStyleInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArt          bool
	AddArtIDs         []int
	RemoveArtIDs      []int
}

// Mutate applies the UpdateArtStyleInput on the ArtStyleMutation builder.
func (i *UpdateArtStyleInput) Mutate(m *ArtStyleMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArt {
		m.ClearArt()
	}
	if v := i.AddArtIDs; len(v) > 0 {
		m.AddArtIDs(v...)
	}
	if v := i.RemoveArtIDs; len(v) > 0 {
		m.RemoveArtIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateArtStyleInput on the ArtStyleUpdate builder.
func (c *ArtStyleUpdate) SetInput(i UpdateArtStyleInput) *ArtStyleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateArtStyleInput on the ArtStyleUpdateOne builder.
func (c *ArtStyleUpdateOne) SetInput(i UpdateArtStyleInput) *ArtStyleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateArtifactInput represents a mutation input for creating artifacts.
type CreateArtifactInput struct {
	CreatedAt             *time.Time
	CreatedBy             *string
	UpdatedAt             *time.Time
	UpdatedBy             *string
	DisplayName           *string
	Abbreviation          *string
	Description           *string
	ExternalLink          *string
	PrimaryImageURL       *string
	AdditionalImagesUrls  []string
	DeletedAt             *time.Time
	DeletedBy             *string
	Dating                *string
	Dimensions            *string
	ChemicalComposition   *string
	Number                *string
	Typology              *string
	Weight                *string
	AdmissionDate         *time.Time
	AuthorIDs             []int
	MediumIDs             []int
	TechniqueIDs          []int
	PeriodID              *int
	ProjectIDs            []int
	PublicationIDs        []int
	HolderIDs             []int
	CulturalAffiliationID *int
	MonumentID            *int
	ModelID               *int
	SetID                 *int
	LocationID            *int
	CollectionID          int
	LicenseID             *int
}

// Mutate applies the CreateArtifactInput on the ArtifactMutation builder.
func (i *CreateArtifactInput) Mutate(m *ArtifactMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if v := i.Dating; v != nil {
		m.SetDating(*v)
	}
	if v := i.Dimensions; v != nil {
		m.SetDimensions(*v)
	}
	if v := i.ChemicalComposition; v != nil {
		m.SetChemicalComposition(*v)
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if v := i.Typology; v != nil {
		m.SetTypology(*v)
	}
	if v := i.Weight; v != nil {
		m.SetWeight(*v)
	}
	if v := i.AdmissionDate; v != nil {
		m.SetAdmissionDate(*v)
	}
	if v := i.AuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.MediumIDs; len(v) > 0 {
		m.AddMediumIDs(v...)
	}
	if v := i.TechniqueIDs; len(v) > 0 {
		m.AddTechniqueIDs(v...)
	}
	if v := i.PeriodID; v != nil {
		m.SetPeriodID(*v)
	}
	if v := i.ProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.PublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.HolderIDs; len(v) > 0 {
		m.AddHolderIDs(v...)
	}
	if v := i.CulturalAffiliationID; v != nil {
		m.SetCulturalAffiliationID(*v)
	}
	if v := i.MonumentID; v != nil {
		m.SetMonumentID(*v)
	}
	if v := i.ModelID; v != nil {
		m.SetModelID(*v)
	}
	if v := i.SetID; v != nil {
		m.SetSetID(*v)
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	m.SetCollectionID(i.CollectionID)
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
}

// SetInput applies the change-set in the CreateArtifactInput on the ArtifactCreate builder.
func (c *ArtifactCreate) SetInput(i CreateArtifactInput) *ArtifactCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateArtifactInput represents a mutation input for updating artifacts.
type UpdateArtifactInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearDeletedAt             bool
	DeletedAt                  *time.Time
	ClearDeletedBy             bool
	DeletedBy                  *string
	ClearDating                bool
	Dating                     *string
	ClearDimensions            bool
	Dimensions                 *string
	ClearChemicalComposition   bool
	ChemicalComposition        *string
	ClearNumber                bool
	Number                     *string
	ClearTypology              bool
	Typology                   *string
	ClearWeight                bool
	Weight                     *string
	ClearAdmissionDate         bool
	AdmissionDate              *time.Time
	ClearAuthors               bool
	AddAuthorIDs               []int
	RemoveAuthorIDs            []int
	ClearMediums               bool
	AddMediumIDs               []int
	RemoveMediumIDs            []int
	ClearTechniques            bool
	AddTechniqueIDs            []int
	RemoveTechniqueIDs         []int
	ClearPeriod                bool
	PeriodID                   *int
	ClearProjects              bool
	AddProjectIDs              []int
	RemoveProjectIDs           []int
	ClearPublications          bool
	AddPublicationIDs          []int
	RemovePublicationIDs       []int
	ClearHolders               bool
	AddHolderIDs               []int
	RemoveHolderIDs            []int
	ClearCulturalAffiliation   bool
	CulturalAffiliationID      *int
	ClearMonument              bool
	MonumentID                 *int
	ClearModel                 bool
	ModelID                    *int
	ClearSet                   bool
	SetID                      *int
	ClearLocation              bool
	LocationID                 *int
	CollectionID               *int
	ClearLicense               bool
	LicenseID                  *int
}

// Mutate applies the UpdateArtifactInput on the ArtifactMutation builder.
func (i *UpdateArtifactInput) Mutate(m *ArtifactMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearDeletedBy {
		m.ClearDeletedBy()
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if i.ClearDating {
		m.ClearDating()
	}
	if v := i.Dating; v != nil {
		m.SetDating(*v)
	}
	if i.ClearDimensions {
		m.ClearDimensions()
	}
	if v := i.Dimensions; v != nil {
		m.SetDimensions(*v)
	}
	if i.ClearChemicalComposition {
		m.ClearChemicalComposition()
	}
	if v := i.ChemicalComposition; v != nil {
		m.SetChemicalComposition(*v)
	}
	if i.ClearNumber {
		m.ClearNumber()
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if i.ClearTypology {
		m.ClearTypology()
	}
	if v := i.Typology; v != nil {
		m.SetTypology(*v)
	}
	if i.ClearWeight {
		m.ClearWeight()
	}
	if v := i.Weight; v != nil {
		m.SetWeight(*v)
	}
	if i.ClearAdmissionDate {
		m.ClearAdmissionDate()
	}
	if v := i.AdmissionDate; v != nil {
		m.SetAdmissionDate(*v)
	}
	if i.ClearAuthors {
		m.ClearAuthors()
	}
	if v := i.AddAuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.RemoveAuthorIDs; len(v) > 0 {
		m.RemoveAuthorIDs(v...)
	}
	if i.ClearMediums {
		m.ClearMediums()
	}
	if v := i.AddMediumIDs; len(v) > 0 {
		m.AddMediumIDs(v...)
	}
	if v := i.RemoveMediumIDs; len(v) > 0 {
		m.RemoveMediumIDs(v...)
	}
	if i.ClearTechniques {
		m.ClearTechniques()
	}
	if v := i.AddTechniqueIDs; len(v) > 0 {
		m.AddTechniqueIDs(v...)
	}
	if v := i.RemoveTechniqueIDs; len(v) > 0 {
		m.RemoveTechniqueIDs(v...)
	}
	if i.ClearPeriod {
		m.ClearPeriod()
	}
	if v := i.PeriodID; v != nil {
		m.SetPeriodID(*v)
	}
	if i.ClearProjects {
		m.ClearProjects()
	}
	if v := i.AddProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.RemoveProjectIDs; len(v) > 0 {
		m.RemoveProjectIDs(v...)
	}
	if i.ClearPublications {
		m.ClearPublications()
	}
	if v := i.AddPublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.RemovePublicationIDs; len(v) > 0 {
		m.RemovePublicationIDs(v...)
	}
	if i.ClearHolders {
		m.ClearHolders()
	}
	if v := i.AddHolderIDs; len(v) > 0 {
		m.AddHolderIDs(v...)
	}
	if v := i.RemoveHolderIDs; len(v) > 0 {
		m.RemoveHolderIDs(v...)
	}
	if i.ClearCulturalAffiliation {
		m.ClearCulturalAffiliation()
	}
	if v := i.CulturalAffiliationID; v != nil {
		m.SetCulturalAffiliationID(*v)
	}
	if i.ClearMonument {
		m.ClearMonument()
	}
	if v := i.MonumentID; v != nil {
		m.SetMonumentID(*v)
	}
	if i.ClearModel {
		m.ClearModel()
	}
	if v := i.ModelID; v != nil {
		m.SetModelID(*v)
	}
	if i.ClearSet {
		m.ClearSet()
	}
	if v := i.SetID; v != nil {
		m.SetSetID(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	if v := i.CollectionID; v != nil {
		m.SetCollectionID(*v)
	}
	if i.ClearLicense {
		m.ClearLicense()
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
}

// SetInput applies the change-set in the UpdateArtifactInput on the ArtifactUpdate builder.
func (c *ArtifactUpdate) SetInput(i UpdateArtifactInput) *ArtifactUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateArtifactInput on the ArtifactUpdateOne builder.
func (c *ArtifactUpdateOne) SetInput(i UpdateArtifactInput) *ArtifactUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateBookInput represents a mutation input for creating books.
type CreateBookInput struct {
	CreatedAt            *time.Time
	CreatedBy            *string
	UpdatedAt            *time.Time
	UpdatedBy            *string
	DisplayName          *string
	Abbreviation         *string
	Description          *string
	ExternalLink         *string
	PrimaryImageURL      *string
	AdditionalImagesUrls []string
	Files                []string
	Year                 *int
	AuthorIDs            []int
	BookGenreIDs         []int
	CollectionID         int
	HolderIDs            []int
	PublisherID          *int
	LicenseID            *int
	LocationID           *int
}

// Mutate applies the CreateBookInput on the BookMutation builder.
func (i *CreateBookInput) Mutate(m *BookMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.Files; v != nil {
		m.SetFiles(v)
	}
	if v := i.Year; v != nil {
		m.SetYear(*v)
	}
	if v := i.AuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.BookGenreIDs; len(v) > 0 {
		m.AddBookGenreIDs(v...)
	}
	m.SetCollectionID(i.CollectionID)
	if v := i.HolderIDs; len(v) > 0 {
		m.AddHolderIDs(v...)
	}
	if v := i.PublisherID; v != nil {
		m.SetPublisherID(*v)
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
}

// SetInput applies the change-set in the CreateBookInput on the BookCreate builder.
func (c *BookCreate) SetInput(i CreateBookInput) *BookCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateBookInput represents a mutation input for updating books.
type UpdateBookInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearFiles                 bool
	Files                      []string
	AppendFiles                []string
	ClearYear                  bool
	Year                       *int
	ClearAuthors               bool
	AddAuthorIDs               []int
	RemoveAuthorIDs            []int
	ClearBookGenres            bool
	AddBookGenreIDs            []int
	RemoveBookGenreIDs         []int
	CollectionID               *int
	ClearHolders               bool
	AddHolderIDs               []int
	RemoveHolderIDs            []int
	ClearPublisher             bool
	PublisherID                *int
	ClearLicense               bool
	LicenseID                  *int
	ClearLocation              bool
	LocationID                 *int
}

// Mutate applies the UpdateBookInput on the BookMutation builder.
func (i *UpdateBookInput) Mutate(m *BookMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.Files; v != nil {
		m.SetFiles(v)
	}
	if i.AppendFiles != nil {
		m.AppendFiles(i.Files)
	}
	if i.ClearYear {
		m.ClearYear()
	}
	if v := i.Year; v != nil {
		m.SetYear(*v)
	}
	if i.ClearAuthors {
		m.ClearAuthors()
	}
	if v := i.AddAuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.RemoveAuthorIDs; len(v) > 0 {
		m.RemoveAuthorIDs(v...)
	}
	if i.ClearBookGenres {
		m.ClearBookGenres()
	}
	if v := i.AddBookGenreIDs; len(v) > 0 {
		m.AddBookGenreIDs(v...)
	}
	if v := i.RemoveBookGenreIDs; len(v) > 0 {
		m.RemoveBookGenreIDs(v...)
	}
	if v := i.CollectionID; v != nil {
		m.SetCollectionID(*v)
	}
	if i.ClearHolders {
		m.ClearHolders()
	}
	if v := i.AddHolderIDs; len(v) > 0 {
		m.AddHolderIDs(v...)
	}
	if v := i.RemoveHolderIDs; len(v) > 0 {
		m.RemoveHolderIDs(v...)
	}
	if i.ClearPublisher {
		m.ClearPublisher()
	}
	if v := i.PublisherID; v != nil {
		m.SetPublisherID(*v)
	}
	if i.ClearLicense {
		m.ClearLicense()
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
}

// SetInput applies the change-set in the UpdateBookInput on the BookUpdate builder.
func (c *BookUpdate) SetInput(i UpdateBookInput) *BookUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBookInput on the BookUpdateOne builder.
func (c *BookUpdateOne) SetInput(i UpdateBookInput) *BookUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateBookGenreInput represents a mutation input for creating bookgenres.
type CreateBookGenreInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	BookIDs      []int
}

// Mutate applies the CreateBookGenreInput on the BookGenreMutation builder.
func (i *CreateBookGenreInput) Mutate(m *BookGenreMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
}

// SetInput applies the change-set in the CreateBookGenreInput on the BookGenreCreate builder.
func (c *BookGenreCreate) SetInput(i CreateBookGenreInput) *BookGenreCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateBookGenreInput represents a mutation input for updating bookgenres.
type UpdateBookGenreInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearBooks        bool
	AddBookIDs        []int
	RemoveBookIDs     []int
}

// Mutate applies the UpdateBookGenreInput on the BookGenreMutation builder.
func (i *UpdateBookGenreInput) Mutate(m *BookGenreMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateBookGenreInput on the BookGenreUpdate builder.
func (c *BookGenreUpdate) SetInput(i UpdateBookGenreInput) *BookGenreUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBookGenreInput on the BookGenreUpdateOne builder.
func (c *BookGenreUpdateOne) SetInput(i UpdateBookGenreInput) *BookGenreUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCategoryInput represents a mutation input for creating categories.
type CreateCategoryInput struct {
	CreatedAt            *time.Time
	CreatedBy            *string
	UpdatedAt            *time.Time
	UpdatedBy            *string
	DisplayName          *string
	Abbreviation         *string
	Description          *string
	ExternalLink         *string
	PrimaryImageURL      *string
	AdditionalImagesUrls []string
	Slug                 string
	CollectionIDs        []int
}

// Mutate applies the CreateCategoryInput on the CategoryMutation builder.
func (i *CreateCategoryInput) Mutate(m *CategoryMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	m.SetSlug(i.Slug)
	if v := i.CollectionIDs; len(v) > 0 {
		m.AddCollectionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCategoryInput on the CategoryCreate builder.
func (c *CategoryCreate) SetInput(i CreateCategoryInput) *CategoryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCategoryInput represents a mutation input for updating categories.
type UpdateCategoryInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	Slug                       *string
	ClearCollections           bool
	AddCollectionIDs           []int
	RemoveCollectionIDs        []int
}

// Mutate applies the UpdateCategoryInput on the CategoryMutation builder.
func (i *UpdateCategoryInput) Mutate(m *CategoryMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if i.ClearCollections {
		m.ClearCollections()
	}
	if v := i.AddCollectionIDs; len(v) > 0 {
		m.AddCollectionIDs(v...)
	}
	if v := i.RemoveCollectionIDs; len(v) > 0 {
		m.RemoveCollectionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCategoryInput on the CategoryUpdate builder.
func (c *CategoryUpdate) SetInput(i UpdateCategoryInput) *CategoryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCategoryInput on the CategoryUpdateOne builder.
func (c *CategoryUpdateOne) SetInput(i UpdateCategoryInput) *CategoryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCollectionInput represents a mutation input for creating collections.
type CreateCollectionInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	DisplayName             *string
	Abbreviation            *string
	Description             *string
	ExternalLink            *string
	PrimaryImageURL         *string
	AdditionalImagesUrls    []string
	Slug                    string
	ArtifactIDs             []int
	BookIDs                 []int
	PersonIDs               []int
	ProtectedAreaPictureIDs []int
	CategoryID              int
}

// Mutate applies the CreateCollectionInput on the CollectionMutation builder.
func (i *CreateCollectionInput) Mutate(m *CollectionMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	m.SetSlug(i.Slug)
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.PersonIDs; len(v) > 0 {
		m.AddPersonIDs(v...)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	m.SetCategoryID(i.CategoryID)
}

// SetInput applies the change-set in the CreateCollectionInput on the CollectionCreate builder.
func (c *CollectionCreate) SetInput(i CreateCollectionInput) *CollectionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCollectionInput represents a mutation input for updating collections.
type UpdateCollectionInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	ClearDisplayName              bool
	DisplayName                   *string
	ClearAbbreviation             bool
	Abbreviation                  *string
	ClearDescription              bool
	Description                   *string
	ClearExternalLink             bool
	ExternalLink                  *string
	ClearPrimaryImageURL          bool
	PrimaryImageURL               *string
	ClearAdditionalImagesUrls     bool
	AdditionalImagesUrls          []string
	AppendAdditionalImagesUrls    []string
	Slug                          *string
	ClearArtifacts                bool
	AddArtifactIDs                []int
	RemoveArtifactIDs             []int
	ClearBooks                    bool
	AddBookIDs                    []int
	RemoveBookIDs                 []int
	ClearPeople                   bool
	AddPersonIDs                  []int
	RemovePersonIDs               []int
	ClearProtectedAreaPictures    bool
	AddProtectedAreaPictureIDs    []int
	RemoveProtectedAreaPictureIDs []int
	CategoryID                    *int
}

// Mutate applies the UpdateCollectionInput on the CollectionMutation builder.
func (i *UpdateCollectionInput) Mutate(m *CollectionMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearPeople {
		m.ClearPeople()
	}
	if v := i.AddPersonIDs; len(v) > 0 {
		m.AddPersonIDs(v...)
	}
	if v := i.RemovePersonIDs; len(v) > 0 {
		m.RemovePersonIDs(v...)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
	if v := i.CategoryID; v != nil {
		m.SetCategoryID(*v)
	}
}

// SetInput applies the change-set in the UpdateCollectionInput on the CollectionUpdate builder.
func (c *CollectionUpdate) SetInput(i UpdateCollectionInput) *CollectionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCollectionInput on the CollectionUpdateOne builder.
func (c *CollectionUpdateOne) SetInput(i UpdateCollectionInput) *CollectionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCountryInput represents a mutation input for creating countries.
type CreateCountryInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	LocationIDs  []int
}

// Mutate applies the CreateCountryInput on the CountryMutation builder.
func (i *CreateCountryInput) Mutate(m *CountryMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.LocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCountryInput on the CountryCreate builder.
func (c *CountryCreate) SetInput(i CreateCountryInput) *CountryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCountryInput represents a mutation input for updating countries.
type UpdateCountryInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearLocation     bool
	AddLocationIDs    []int
	RemoveLocationIDs []int
}

// Mutate applies the UpdateCountryInput on the CountryMutation builder.
func (i *UpdateCountryInput) Mutate(m *CountryMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.AddLocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RemoveLocationIDs; len(v) > 0 {
		m.RemoveLocationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCountryInput on the CountryUpdate builder.
func (c *CountryUpdate) SetInput(i UpdateCountryInput) *CountryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCountryInput on the CountryUpdateOne builder.
func (c *CountryUpdateOne) SetInput(i UpdateCountryInput) *CountryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCultureInput represents a mutation input for creating cultures.
type CreateCultureInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtifactIDs  []int
}

// Mutate applies the CreateCultureInput on the CultureMutation builder.
func (i *CreateCultureInput) Mutate(m *CultureMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCultureInput on the CultureCreate builder.
func (c *CultureCreate) SetInput(i CreateCultureInput) *CultureCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCultureInput represents a mutation input for updating cultures.
type UpdateCultureInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
}

// Mutate applies the UpdateCultureInput on the CultureMutation builder.
func (i *UpdateCultureInput) Mutate(m *CultureMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCultureInput on the CultureUpdate builder.
func (c *CultureUpdate) SetInput(i UpdateCultureInput) *CultureUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCultureInput on the CultureUpdateOne builder.
func (c *CultureUpdateOne) SetInput(i UpdateCultureInput) *CultureUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDistrictInput represents a mutation input for creating districts.
type CreateDistrictInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	LocationIDs  []int
}

// Mutate applies the CreateDistrictInput on the DistrictMutation builder.
func (i *CreateDistrictInput) Mutate(m *DistrictMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.LocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateDistrictInput on the DistrictCreate builder.
func (c *DistrictCreate) SetInput(i CreateDistrictInput) *DistrictCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDistrictInput represents a mutation input for updating districts.
type UpdateDistrictInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearLocation     bool
	AddLocationIDs    []int
	RemoveLocationIDs []int
}

// Mutate applies the UpdateDistrictInput on the DistrictMutation builder.
func (i *UpdateDistrictInput) Mutate(m *DistrictMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.AddLocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RemoveLocationIDs; len(v) > 0 {
		m.RemoveLocationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateDistrictInput on the DistrictUpdate builder.
func (c *DistrictUpdate) SetInput(i UpdateDistrictInput) *DistrictUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDistrictInput on the DistrictUpdateOne builder.
func (c *DistrictUpdateOne) SetInput(i UpdateDistrictInput) *DistrictUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateHolderInput represents a mutation input for creating holders.
type CreateHolderInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	BeginData               time.Time
	EndDate                 *time.Time
	ArtifactIDs             []int
	BookIDs                 []int
	HolderResponsibilityIDs []int
	PersonID                *int
	OrganizationID          *int
}

// Mutate applies the CreateHolderInput on the HolderMutation builder.
func (i *CreateHolderInput) Mutate(m *HolderMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetBeginData(i.BeginData)
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.HolderResponsibilityIDs; len(v) > 0 {
		m.AddHolderResponsibilityIDs(v...)
	}
	if v := i.PersonID; v != nil {
		m.SetPersonID(*v)
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
}

// SetInput applies the change-set in the CreateHolderInput on the HolderCreate builder.
func (c *HolderCreate) SetInput(i CreateHolderInput) *HolderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateHolderInput represents a mutation input for updating holders.
type UpdateHolderInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	BeginData                     *time.Time
	ClearEndDate                  bool
	EndDate                       *time.Time
	ClearArtifacts                bool
	AddArtifactIDs                []int
	RemoveArtifactIDs             []int
	ClearBooks                    bool
	AddBookIDs                    []int
	RemoveBookIDs                 []int
	ClearHolderResponsibilities   bool
	AddHolderResponsibilityIDs    []int
	RemoveHolderResponsibilityIDs []int
	ClearPerson                   bool
	PersonID                      *int
	ClearOrganization             bool
	OrganizationID                *int
}

// Mutate applies the UpdateHolderInput on the HolderMutation builder.
func (i *UpdateHolderInput) Mutate(m *HolderMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.BeginData; v != nil {
		m.SetBeginData(*v)
	}
	if i.ClearEndDate {
		m.ClearEndDate()
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearHolderResponsibilities {
		m.ClearHolderResponsibilities()
	}
	if v := i.AddHolderResponsibilityIDs; len(v) > 0 {
		m.AddHolderResponsibilityIDs(v...)
	}
	if v := i.RemoveHolderResponsibilityIDs; len(v) > 0 {
		m.RemoveHolderResponsibilityIDs(v...)
	}
	if i.ClearPerson {
		m.ClearPerson()
	}
	if v := i.PersonID; v != nil {
		m.SetPersonID(*v)
	}
	if i.ClearOrganization {
		m.ClearOrganization()
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
}

// SetInput applies the change-set in the UpdateHolderInput on the HolderUpdate builder.
func (c *HolderUpdate) SetInput(i UpdateHolderInput) *HolderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateHolderInput on the HolderUpdateOne builder.
func (c *HolderUpdateOne) SetInput(i UpdateHolderInput) *HolderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateHolderResponsibilityInput represents a mutation input for creating holderresponsibilities.
type CreateHolderResponsibilityInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	HolderIDs    []int
}

// Mutate applies the CreateHolderResponsibilityInput on the HolderResponsibilityMutation builder.
func (i *CreateHolderResponsibilityInput) Mutate(m *HolderResponsibilityMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.HolderIDs; len(v) > 0 {
		m.AddHolderIDs(v...)
	}
}

// SetInput applies the change-set in the CreateHolderResponsibilityInput on the HolderResponsibilityCreate builder.
func (c *HolderResponsibilityCreate) SetInput(i CreateHolderResponsibilityInput) *HolderResponsibilityCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateHolderResponsibilityInput represents a mutation input for updating holderresponsibilities.
type UpdateHolderResponsibilityInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearHolder       bool
	AddHolderIDs      []int
	RemoveHolderIDs   []int
}

// Mutate applies the UpdateHolderResponsibilityInput on the HolderResponsibilityMutation builder.
func (i *UpdateHolderResponsibilityInput) Mutate(m *HolderResponsibilityMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearHolder {
		m.ClearHolder()
	}
	if v := i.AddHolderIDs; len(v) > 0 {
		m.AddHolderIDs(v...)
	}
	if v := i.RemoveHolderIDs; len(v) > 0 {
		m.RemoveHolderIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateHolderResponsibilityInput on the HolderResponsibilityUpdate builder.
func (c *HolderResponsibilityUpdate) SetInput(i UpdateHolderResponsibilityInput) *HolderResponsibilityUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateHolderResponsibilityInput on the HolderResponsibilityUpdateOne builder.
func (c *HolderResponsibilityUpdateOne) SetInput(i UpdateHolderResponsibilityInput) *HolderResponsibilityUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLicenseInput represents a mutation input for creating licenses.
type CreateLicenseInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	DisplayName             *string
	Abbreviation            *string
	Description             *string
	ExternalLink            *string
	ArtifactIDs             []int
	BookIDs                 []int
	ProtectedAreaPictureIDs []int
}

// Mutate applies the CreateLicenseInput on the LicenseMutation builder.
func (i *CreateLicenseInput) Mutate(m *LicenseMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
}

// SetInput applies the change-set in the CreateLicenseInput on the LicenseCreate builder.
func (c *LicenseCreate) SetInput(i CreateLicenseInput) *LicenseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLicenseInput represents a mutation input for updating licenses.
type UpdateLicenseInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	ClearDisplayName              bool
	DisplayName                   *string
	ClearAbbreviation             bool
	Abbreviation                  *string
	ClearDescription              bool
	Description                   *string
	ClearExternalLink             bool
	ExternalLink                  *string
	ClearArtifacts                bool
	AddArtifactIDs                []int
	RemoveArtifactIDs             []int
	ClearBooks                    bool
	AddBookIDs                    []int
	RemoveBookIDs                 []int
	ClearProtectedAreaPictures    bool
	AddProtectedAreaPictureIDs    []int
	RemoveProtectedAreaPictureIDs []int
}

// Mutate applies the UpdateLicenseInput on the LicenseMutation builder.
func (i *UpdateLicenseInput) Mutate(m *LicenseMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateLicenseInput on the LicenseUpdate builder.
func (c *LicenseUpdate) SetInput(i UpdateLicenseInput) *LicenseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLicenseInput on the LicenseUpdateOne builder.
func (c *LicenseUpdateOne) SetInput(i UpdateLicenseInput) *LicenseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLocationInput represents a mutation input for creating locations.
type CreateLocationInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	DisplayName             *string
	Abbreviation            *string
	Description             *string
	ExternalLink            *string
	Geometry                *types.Geometry
	ArtifactIDs             []int
	BookIDs                 []int
	ProtectedAreaPictureIDs []int
	CountryID               *int
	DistrictID              *int
	SettlementID            *int
	RegionID                *int
}

// Mutate applies the CreateLocationInput on the LocationMutation builder.
func (i *CreateLocationInput) Mutate(m *LocationMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Geometry; v != nil {
		m.SetGeometry(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
}

// SetInput applies the change-set in the CreateLocationInput on the LocationCreate builder.
func (c *LocationCreate) SetInput(i CreateLocationInput) *LocationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLocationInput represents a mutation input for updating locations.
type UpdateLocationInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	ClearDisplayName              bool
	DisplayName                   *string
	ClearAbbreviation             bool
	Abbreviation                  *string
	ClearDescription              bool
	Description                   *string
	ClearExternalLink             bool
	ExternalLink                  *string
	ClearGeometry                 bool
	Geometry                      *types.Geometry
	ClearArtifacts                bool
	AddArtifactIDs                []int
	RemoveArtifactIDs             []int
	ClearBooks                    bool
	AddBookIDs                    []int
	RemoveBookIDs                 []int
	ClearProtectedAreaPictures    bool
	AddProtectedAreaPictureIDs    []int
	RemoveProtectedAreaPictureIDs []int
	ClearCountry                  bool
	CountryID                     *int
	ClearDistrict                 bool
	DistrictID                    *int
	ClearSettlement               bool
	SettlementID                  *int
	ClearRegion                   bool
	RegionID                      *int
}

// Mutate applies the UpdateLocationInput on the LocationMutation builder.
func (i *UpdateLocationInput) Mutate(m *LocationMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearGeometry {
		m.ClearGeometry()
	}
	if v := i.Geometry; v != nil {
		m.SetGeometry(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if i.ClearDistrict {
		m.ClearDistrict()
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if i.ClearSettlement {
		m.ClearSettlement()
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
	if i.ClearRegion {
		m.ClearRegion()
	}
	if v := i.RegionID; v != nil {
		m.SetRegionID(*v)
	}
}

// SetInput applies the change-set in the UpdateLocationInput on the LocationUpdate builder.
func (c *LocationUpdate) SetInput(i UpdateLocationInput) *LocationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLocationInput on the LocationUpdateOne builder.
func (c *LocationUpdateOne) SetInput(i UpdateLocationInput) *LocationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMediumInput represents a mutation input for creating media.
type CreateMediumInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtifactIDs  []int
}

// Mutate applies the CreateMediumInput on the MediumMutation builder.
func (i *CreateMediumInput) Mutate(m *MediumMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMediumInput on the MediumCreate builder.
func (c *MediumCreate) SetInput(i CreateMediumInput) *MediumCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMediumInput represents a mutation input for updating media.
type UpdateMediumInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
}

// Mutate applies the UpdateMediumInput on the MediumMutation builder.
func (i *UpdateMediumInput) Mutate(m *MediumMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateMediumInput on the MediumUpdate builder.
func (c *MediumUpdate) SetInput(i UpdateMediumInput) *MediumUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMediumInput on the MediumUpdateOne builder.
func (c *MediumUpdateOne) SetInput(i UpdateMediumInput) *MediumUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateModelInput represents a mutation input for creating models.
type CreateModelInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtifactIDs  []int
}

// Mutate applies the CreateModelInput on the ModelMutation builder.
func (i *CreateModelInput) Mutate(m *ModelMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateModelInput on the ModelCreate builder.
func (c *ModelCreate) SetInput(i CreateModelInput) *ModelCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateModelInput represents a mutation input for updating models.
type UpdateModelInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
}

// Mutate applies the UpdateModelInput on the ModelMutation builder.
func (i *UpdateModelInput) Mutate(m *ModelMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateModelInput on the ModelUpdate builder.
func (c *ModelUpdate) SetInput(i UpdateModelInput) *ModelUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateModelInput on the ModelUpdateOne builder.
func (c *ModelUpdateOne) SetInput(i UpdateModelInput) *ModelUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMonumentInput represents a mutation input for creating monuments.
type CreateMonumentInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtifactIDs  []int
	SetIDs       []int
}

// Mutate applies the CreateMonumentInput on the MonumentMutation builder.
func (i *CreateMonumentInput) Mutate(m *MonumentMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.SetIDs; len(v) > 0 {
		m.AddSetIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMonumentInput on the MonumentCreate builder.
func (c *MonumentCreate) SetInput(i CreateMonumentInput) *MonumentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMonumentInput represents a mutation input for updating monuments.
type UpdateMonumentInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
	ClearSets         bool
	AddSetIDs         []int
	RemoveSetIDs      []int
}

// Mutate applies the UpdateMonumentInput on the MonumentMutation builder.
func (i *UpdateMonumentInput) Mutate(m *MonumentMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearSets {
		m.ClearSets()
	}
	if v := i.AddSetIDs; len(v) > 0 {
		m.AddSetIDs(v...)
	}
	if v := i.RemoveSetIDs; len(v) > 0 {
		m.RemoveSetIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateMonumentInput on the MonumentUpdate builder.
func (c *MonumentUpdate) SetInput(i UpdateMonumentInput) *MonumentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMonumentInput on the MonumentUpdateOne builder.
func (c *MonumentUpdateOne) SetInput(i UpdateMonumentInput) *MonumentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrganizationInput represents a mutation input for creating organizations.
type CreateOrganizationInput struct {
	CreatedAt             *time.Time
	CreatedBy             *string
	UpdatedAt             *time.Time
	UpdatedBy             *string
	Address               *string
	PhoneNumbers          []string
	Emails                []string
	DisplayName           *string
	Abbreviation          *string
	Description           *string
	ExternalLink          *string
	PrimaryImageURL       *string
	AdditionalImagesUrls  []string
	PreviousNames         []string
	IsInAConsortium       *bool
	ConsortiumDocumentURL *string
	PersonIDs             []int
	HolderID              *int
	OrganizationTypeID    *int
}

// Mutate applies the CreateOrganizationInput on the OrganizationMutation builder.
func (i *CreateOrganizationInput) Mutate(m *OrganizationMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.PhoneNumbers; v != nil {
		m.SetPhoneNumbers(v)
	}
	if v := i.Emails; v != nil {
		m.SetEmails(v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.PreviousNames; v != nil {
		m.SetPreviousNames(v)
	}
	if v := i.IsInAConsortium; v != nil {
		m.SetIsInAConsortium(*v)
	}
	if v := i.ConsortiumDocumentURL; v != nil {
		m.SetConsortiumDocumentURL(*v)
	}
	if v := i.PersonIDs; len(v) > 0 {
		m.AddPersonIDs(v...)
	}
	if v := i.HolderID; v != nil {
		m.SetHolderID(*v)
	}
	if v := i.OrganizationTypeID; v != nil {
		m.SetOrganizationTypeID(*v)
	}
}

// SetInput applies the change-set in the CreateOrganizationInput on the OrganizationCreate builder.
func (c *OrganizationCreate) SetInput(i CreateOrganizationInput) *OrganizationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrganizationInput represents a mutation input for updating organizations.
type UpdateOrganizationInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearAddress               bool
	Address                    *string
	ClearPhoneNumbers          bool
	PhoneNumbers               []string
	AppendPhoneNumbers         []string
	ClearEmails                bool
	Emails                     []string
	AppendEmails               []string
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearPreviousNames         bool
	PreviousNames              []string
	AppendPreviousNames        []string
	ClearIsInAConsortium       bool
	IsInAConsortium            *bool
	ClearConsortiumDocumentURL bool
	ConsortiumDocumentURL      *string
	ClearPeople                bool
	AddPersonIDs               []int
	RemovePersonIDs            []int
	ClearHolder                bool
	HolderID                   *int
	ClearOrganizationType      bool
	OrganizationTypeID         *int
}

// Mutate applies the UpdateOrganizationInput on the OrganizationMutation builder.
func (i *UpdateOrganizationInput) Mutate(m *OrganizationMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if i.ClearPhoneNumbers {
		m.ClearPhoneNumbers()
	}
	if v := i.PhoneNumbers; v != nil {
		m.SetPhoneNumbers(v)
	}
	if i.AppendPhoneNumbers != nil {
		m.AppendPhoneNumbers(i.PhoneNumbers)
	}
	if i.ClearEmails {
		m.ClearEmails()
	}
	if v := i.Emails; v != nil {
		m.SetEmails(v)
	}
	if i.AppendEmails != nil {
		m.AppendEmails(i.Emails)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearPreviousNames {
		m.ClearPreviousNames()
	}
	if v := i.PreviousNames; v != nil {
		m.SetPreviousNames(v)
	}
	if i.AppendPreviousNames != nil {
		m.AppendPreviousNames(i.PreviousNames)
	}
	if i.ClearIsInAConsortium {
		m.ClearIsInAConsortium()
	}
	if v := i.IsInAConsortium; v != nil {
		m.SetIsInAConsortium(*v)
	}
	if i.ClearConsortiumDocumentURL {
		m.ClearConsortiumDocumentURL()
	}
	if v := i.ConsortiumDocumentURL; v != nil {
		m.SetConsortiumDocumentURL(*v)
	}
	if i.ClearPeople {
		m.ClearPeople()
	}
	if v := i.AddPersonIDs; len(v) > 0 {
		m.AddPersonIDs(v...)
	}
	if v := i.RemovePersonIDs; len(v) > 0 {
		m.RemovePersonIDs(v...)
	}
	if i.ClearHolder {
		m.ClearHolder()
	}
	if v := i.HolderID; v != nil {
		m.SetHolderID(*v)
	}
	if i.ClearOrganizationType {
		m.ClearOrganizationType()
	}
	if v := i.OrganizationTypeID; v != nil {
		m.SetOrganizationTypeID(*v)
	}
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdate builder.
func (c *OrganizationUpdate) SetInput(i UpdateOrganizationInput) *OrganizationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdateOne builder.
func (c *OrganizationUpdateOne) SetInput(i UpdateOrganizationInput) *OrganizationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrganizationTypeInput represents a mutation input for creating organizationtypes.
type CreateOrganizationTypeInput struct {
	CreatedAt       *time.Time
	CreatedBy       *string
	UpdatedAt       *time.Time
	UpdatedBy       *string
	DisplayName     *string
	Abbreviation    *string
	Description     *string
	ExternalLink    *string
	OrganizationIDs []int
}

// Mutate applies the CreateOrganizationTypeInput on the OrganizationTypeMutation builder.
func (i *CreateOrganizationTypeInput) Mutate(m *OrganizationTypeMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.OrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateOrganizationTypeInput on the OrganizationTypeCreate builder.
func (c *OrganizationTypeCreate) SetInput(i CreateOrganizationTypeInput) *OrganizationTypeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrganizationTypeInput represents a mutation input for updating organizationtypes.
type UpdateOrganizationTypeInput struct {
	ClearCreatedBy        bool
	CreatedBy             *string
	UpdatedAt             *time.Time
	ClearUpdatedBy        bool
	UpdatedBy             *string
	ClearDisplayName      bool
	DisplayName           *string
	ClearAbbreviation     bool
	Abbreviation          *string
	ClearDescription      bool
	Description           *string
	ClearExternalLink     bool
	ExternalLink          *string
	ClearOrganizations    bool
	AddOrganizationIDs    []int
	RemoveOrganizationIDs []int
}

// Mutate applies the UpdateOrganizationTypeInput on the OrganizationTypeMutation builder.
func (i *UpdateOrganizationTypeInput) Mutate(m *OrganizationTypeMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearOrganizations {
		m.ClearOrganizations()
	}
	if v := i.AddOrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.RemoveOrganizationIDs; len(v) > 0 {
		m.RemoveOrganizationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateOrganizationTypeInput on the OrganizationTypeUpdate builder.
func (c *OrganizationTypeUpdate) SetInput(i UpdateOrganizationTypeInput) *OrganizationTypeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrganizationTypeInput on the OrganizationTypeUpdateOne builder.
func (c *OrganizationTypeUpdateOne) SetInput(i UpdateOrganizationTypeInput) *OrganizationTypeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePeriodInput represents a mutation input for creating periods.
type CreatePeriodInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtifactIDs  []int
}

// Mutate applies the CreatePeriodInput on the PeriodMutation builder.
func (i *CreatePeriodInput) Mutate(m *PeriodMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePeriodInput on the PeriodCreate builder.
func (c *PeriodCreate) SetInput(i CreatePeriodInput) *PeriodCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePeriodInput represents a mutation input for updating periods.
type UpdatePeriodInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
}

// Mutate applies the UpdatePeriodInput on the PeriodMutation builder.
func (i *UpdatePeriodInput) Mutate(m *PeriodMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePeriodInput on the PeriodUpdate builder.
func (c *PeriodUpdate) SetInput(i UpdatePeriodInput) *PeriodUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePeriodInput on the PeriodUpdateOne builder.
func (c *PeriodUpdateOne) SetInput(i UpdatePeriodInput) *PeriodUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePersonInput represents a mutation input for creating persons.
type CreatePersonInput struct {
	CreatedAt            *time.Time
	CreatedBy            *string
	UpdatedAt            *time.Time
	UpdatedBy            *string
	Address              *string
	PhoneNumbers         []string
	Emails               []string
	DisplayName          *string
	Abbreviation         *string
	Description          *string
	ExternalLink         *string
	PrimaryImageURL      *string
	AdditionalImagesUrls []string
	GivenName            *string
	FamilyName           *string
	PatronymicName       *string
	BeginData            *time.Time
	EndDate              *time.Time
	Gender               person.Gender
	ArtifactIDs          []int
	BookIDs              []int
	ProjectIDs           []int
	PublicationIDs       []int
	PersonRoleIDs        []int
	HolderID             *int
	AffiliationID        *int
	CollectionsID        *int
}

// Mutate applies the CreatePersonInput on the PersonMutation builder.
func (i *CreatePersonInput) Mutate(m *PersonMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.PhoneNumbers; v != nil {
		m.SetPhoneNumbers(v)
	}
	if v := i.Emails; v != nil {
		m.SetEmails(v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.GivenName; v != nil {
		m.SetGivenName(*v)
	}
	if v := i.FamilyName; v != nil {
		m.SetFamilyName(*v)
	}
	if v := i.PatronymicName; v != nil {
		m.SetPatronymicName(*v)
	}
	if v := i.BeginData; v != nil {
		m.SetBeginData(*v)
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	m.SetGender(i.Gender)
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.ProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.PublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.PersonRoleIDs; len(v) > 0 {
		m.AddPersonRoleIDs(v...)
	}
	if v := i.HolderID; v != nil {
		m.SetHolderID(*v)
	}
	if v := i.AffiliationID; v != nil {
		m.SetAffiliationID(*v)
	}
	if v := i.CollectionsID; v != nil {
		m.SetCollectionsID(*v)
	}
}

// SetInput applies the change-set in the CreatePersonInput on the PersonCreate builder.
func (c *PersonCreate) SetInput(i CreatePersonInput) *PersonCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePersonInput represents a mutation input for updating persons.
type UpdatePersonInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearAddress               bool
	Address                    *string
	ClearPhoneNumbers          bool
	PhoneNumbers               []string
	AppendPhoneNumbers         []string
	ClearEmails                bool
	Emails                     []string
	AppendEmails               []string
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearGivenName             bool
	GivenName                  *string
	ClearFamilyName            bool
	FamilyName                 *string
	ClearPatronymicName        bool
	PatronymicName             *string
	ClearBeginData             bool
	BeginData                  *time.Time
	ClearEndDate               bool
	EndDate                    *time.Time
	Gender                     *person.Gender
	ClearArtifacts             bool
	AddArtifactIDs             []int
	RemoveArtifactIDs          []int
	ClearBooks                 bool
	AddBookIDs                 []int
	RemoveBookIDs              []int
	ClearProjects              bool
	AddProjectIDs              []int
	RemoveProjectIDs           []int
	ClearPublications          bool
	AddPublicationIDs          []int
	RemovePublicationIDs       []int
	ClearPersonRoles           bool
	AddPersonRoleIDs           []int
	RemovePersonRoleIDs        []int
	ClearHolder                bool
	HolderID                   *int
	ClearAffiliation           bool
	AffiliationID              *int
	ClearCollections           bool
	CollectionsID              *int
}

// Mutate applies the UpdatePersonInput on the PersonMutation builder.
func (i *UpdatePersonInput) Mutate(m *PersonMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if i.ClearPhoneNumbers {
		m.ClearPhoneNumbers()
	}
	if v := i.PhoneNumbers; v != nil {
		m.SetPhoneNumbers(v)
	}
	if i.AppendPhoneNumbers != nil {
		m.AppendPhoneNumbers(i.PhoneNumbers)
	}
	if i.ClearEmails {
		m.ClearEmails()
	}
	if v := i.Emails; v != nil {
		m.SetEmails(v)
	}
	if i.AppendEmails != nil {
		m.AppendEmails(i.Emails)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearGivenName {
		m.ClearGivenName()
	}
	if v := i.GivenName; v != nil {
		m.SetGivenName(*v)
	}
	if i.ClearFamilyName {
		m.ClearFamilyName()
	}
	if v := i.FamilyName; v != nil {
		m.SetFamilyName(*v)
	}
	if i.ClearPatronymicName {
		m.ClearPatronymicName()
	}
	if v := i.PatronymicName; v != nil {
		m.SetPatronymicName(*v)
	}
	if i.ClearBeginData {
		m.ClearBeginData()
	}
	if v := i.BeginData; v != nil {
		m.SetBeginData(*v)
	}
	if i.ClearEndDate {
		m.ClearEndDate()
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
	if i.ClearProjects {
		m.ClearProjects()
	}
	if v := i.AddProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.RemoveProjectIDs; len(v) > 0 {
		m.RemoveProjectIDs(v...)
	}
	if i.ClearPublications {
		m.ClearPublications()
	}
	if v := i.AddPublicationIDs; len(v) > 0 {
		m.AddPublicationIDs(v...)
	}
	if v := i.RemovePublicationIDs; len(v) > 0 {
		m.RemovePublicationIDs(v...)
	}
	if i.ClearPersonRoles {
		m.ClearPersonRoles()
	}
	if v := i.AddPersonRoleIDs; len(v) > 0 {
		m.AddPersonRoleIDs(v...)
	}
	if v := i.RemovePersonRoleIDs; len(v) > 0 {
		m.RemovePersonRoleIDs(v...)
	}
	if i.ClearHolder {
		m.ClearHolder()
	}
	if v := i.HolderID; v != nil {
		m.SetHolderID(*v)
	}
	if i.ClearAffiliation {
		m.ClearAffiliation()
	}
	if v := i.AffiliationID; v != nil {
		m.SetAffiliationID(*v)
	}
	if i.ClearCollections {
		m.ClearCollections()
	}
	if v := i.CollectionsID; v != nil {
		m.SetCollectionsID(*v)
	}
}

// SetInput applies the change-set in the UpdatePersonInput on the PersonUpdate builder.
func (c *PersonUpdate) SetInput(i UpdatePersonInput) *PersonUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePersonInput on the PersonUpdateOne builder.
func (c *PersonUpdateOne) SetInput(i UpdatePersonInput) *PersonUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePersonRoleInput represents a mutation input for creating personroles.
type CreatePersonRoleInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	PersonIDs    []int
}

// Mutate applies the CreatePersonRoleInput on the PersonRoleMutation builder.
func (i *CreatePersonRoleInput) Mutate(m *PersonRoleMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PersonIDs; len(v) > 0 {
		m.AddPersonIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePersonRoleInput on the PersonRoleCreate builder.
func (c *PersonRoleCreate) SetInput(i CreatePersonRoleInput) *PersonRoleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePersonRoleInput represents a mutation input for updating personroles.
type UpdatePersonRoleInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearPerson       bool
	AddPersonIDs      []int
	RemovePersonIDs   []int
}

// Mutate applies the UpdatePersonRoleInput on the PersonRoleMutation builder.
func (i *UpdatePersonRoleInput) Mutate(m *PersonRoleMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPerson {
		m.ClearPerson()
	}
	if v := i.AddPersonIDs; len(v) > 0 {
		m.AddPersonIDs(v...)
	}
	if v := i.RemovePersonIDs; len(v) > 0 {
		m.RemovePersonIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePersonRoleInput on the PersonRoleUpdate builder.
func (c *PersonRoleUpdate) SetInput(i UpdatePersonRoleInput) *PersonRoleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePersonRoleInput on the PersonRoleUpdateOne builder.
func (c *PersonRoleUpdateOne) SetInput(i UpdatePersonRoleInput) *PersonRoleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProjectInput represents a mutation input for creating projects.
type CreateProjectInput struct {
	CreatedAt     *time.Time
	CreatedBy     *string
	UpdatedAt     *time.Time
	UpdatedBy     *string
	DisplayName   *string
	Abbreviation  *string
	Description   *string
	ExternalLink  *string
	BeginData     *time.Time
	EndDate       *time.Time
	ArtifactIDs   []int
	TeamIDs       []int
	ProjectTypeID *int
}

// Mutate applies the CreateProjectInput on the ProjectMutation builder.
func (i *CreateProjectInput) Mutate(m *ProjectMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.BeginData; v != nil {
		m.SetBeginData(*v)
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.TeamIDs; len(v) > 0 {
		m.AddTeamIDs(v...)
	}
	if v := i.ProjectTypeID; v != nil {
		m.SetProjectTypeID(*v)
	}
}

// SetInput applies the change-set in the CreateProjectInput on the ProjectCreate builder.
func (c *ProjectCreate) SetInput(i CreateProjectInput) *ProjectCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProjectInput represents a mutation input for updating projects.
type UpdateProjectInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearBeginData    bool
	BeginData         *time.Time
	ClearEndDate      bool
	EndDate           *time.Time
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
	ClearTeam         bool
	AddTeamIDs        []int
	RemoveTeamIDs     []int
	ClearProjectType  bool
	ProjectTypeID     *int
}

// Mutate applies the UpdateProjectInput on the ProjectMutation builder.
func (i *UpdateProjectInput) Mutate(m *ProjectMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearBeginData {
		m.ClearBeginData()
	}
	if v := i.BeginData; v != nil {
		m.SetBeginData(*v)
	}
	if i.ClearEndDate {
		m.ClearEndDate()
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearTeam {
		m.ClearTeam()
	}
	if v := i.AddTeamIDs; len(v) > 0 {
		m.AddTeamIDs(v...)
	}
	if v := i.RemoveTeamIDs; len(v) > 0 {
		m.RemoveTeamIDs(v...)
	}
	if i.ClearProjectType {
		m.ClearProjectType()
	}
	if v := i.ProjectTypeID; v != nil {
		m.SetProjectTypeID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectInput on the ProjectUpdate builder.
func (c *ProjectUpdate) SetInput(i UpdateProjectInput) *ProjectUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProjectInput on the ProjectUpdateOne builder.
func (c *ProjectUpdateOne) SetInput(i UpdateProjectInput) *ProjectUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProjectTypeInput represents a mutation input for creating projecttypes.
type CreateProjectTypeInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ProjectIDs   []int
}

// Mutate applies the CreateProjectTypeInput on the ProjectTypeMutation builder.
func (i *CreateProjectTypeInput) Mutate(m *ProjectTypeMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProjectTypeInput on the ProjectTypeCreate builder.
func (c *ProjectTypeCreate) SetInput(i CreateProjectTypeInput) *ProjectTypeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProjectTypeInput represents a mutation input for updating projecttypes.
type UpdateProjectTypeInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearProjects     bool
	AddProjectIDs     []int
	RemoveProjectIDs  []int
}

// Mutate applies the UpdateProjectTypeInput on the ProjectTypeMutation builder.
func (i *UpdateProjectTypeInput) Mutate(m *ProjectTypeMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearProjects {
		m.ClearProjects()
	}
	if v := i.AddProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.RemoveProjectIDs; len(v) > 0 {
		m.RemoveProjectIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProjectTypeInput on the ProjectTypeUpdate builder.
func (c *ProjectTypeUpdate) SetInput(i UpdateProjectTypeInput) *ProjectTypeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProjectTypeInput on the ProjectTypeUpdateOne builder.
func (c *ProjectTypeUpdateOne) SetInput(i UpdateProjectTypeInput) *ProjectTypeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProtectedAreaInput represents a mutation input for creating protectedareas.
type CreateProtectedAreaInput struct {
	CreatedAt               *time.Time
	CreatedBy               *string
	UpdatedAt               *time.Time
	UpdatedBy               *string
	DisplayName             *string
	Abbreviation            *string
	Description             *string
	ExternalLink            *string
	Area                    *string
	EstablishmentDate       *time.Time
	ProtectedAreaPictureIDs []int
	ProtectedAreaCategoryID *int
}

// Mutate applies the CreateProtectedAreaInput on the ProtectedAreaMutation builder.
func (i *CreateProtectedAreaInput) Mutate(m *ProtectedAreaMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.Area; v != nil {
		m.SetArea(*v)
	}
	if v := i.EstablishmentDate; v != nil {
		m.SetEstablishmentDate(*v)
	}
	if v := i.ProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.ProtectedAreaCategoryID; v != nil {
		m.SetProtectedAreaCategoryID(*v)
	}
}

// SetInput applies the change-set in the CreateProtectedAreaInput on the ProtectedAreaCreate builder.
func (c *ProtectedAreaCreate) SetInput(i CreateProtectedAreaInput) *ProtectedAreaCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProtectedAreaInput represents a mutation input for updating protectedareas.
type UpdateProtectedAreaInput struct {
	ClearCreatedBy                bool
	CreatedBy                     *string
	UpdatedAt                     *time.Time
	ClearUpdatedBy                bool
	UpdatedBy                     *string
	ClearDisplayName              bool
	DisplayName                   *string
	ClearAbbreviation             bool
	Abbreviation                  *string
	ClearDescription              bool
	Description                   *string
	ClearExternalLink             bool
	ExternalLink                  *string
	ClearArea                     bool
	Area                          *string
	ClearEstablishmentDate        bool
	EstablishmentDate             *time.Time
	ClearProtectedAreaPictures    bool
	AddProtectedAreaPictureIDs    []int
	RemoveProtectedAreaPictureIDs []int
	ClearProtectedAreaCategory    bool
	ProtectedAreaCategoryID       *int
}

// Mutate applies the UpdateProtectedAreaInput on the ProtectedAreaMutation builder.
func (i *UpdateProtectedAreaInput) Mutate(m *ProtectedAreaMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArea {
		m.ClearArea()
	}
	if v := i.Area; v != nil {
		m.SetArea(*v)
	}
	if i.ClearEstablishmentDate {
		m.ClearEstablishmentDate()
	}
	if v := i.EstablishmentDate; v != nil {
		m.SetEstablishmentDate(*v)
	}
	if i.ClearProtectedAreaPictures {
		m.ClearProtectedAreaPictures()
	}
	if v := i.AddProtectedAreaPictureIDs; len(v) > 0 {
		m.AddProtectedAreaPictureIDs(v...)
	}
	if v := i.RemoveProtectedAreaPictureIDs; len(v) > 0 {
		m.RemoveProtectedAreaPictureIDs(v...)
	}
	if i.ClearProtectedAreaCategory {
		m.ClearProtectedAreaCategory()
	}
	if v := i.ProtectedAreaCategoryID; v != nil {
		m.SetProtectedAreaCategoryID(*v)
	}
}

// SetInput applies the change-set in the UpdateProtectedAreaInput on the ProtectedAreaUpdate builder.
func (c *ProtectedAreaUpdate) SetInput(i UpdateProtectedAreaInput) *ProtectedAreaUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProtectedAreaInput on the ProtectedAreaUpdateOne builder.
func (c *ProtectedAreaUpdateOne) SetInput(i UpdateProtectedAreaInput) *ProtectedAreaUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProtectedAreaCategoryInput represents a mutation input for creating protectedareacategories.
type CreateProtectedAreaCategoryInput struct {
	CreatedAt        *time.Time
	CreatedBy        *string
	UpdatedAt        *time.Time
	UpdatedBy        *string
	DisplayName      *string
	Abbreviation     *string
	Description      *string
	ExternalLink     *string
	ProtectedAreaIDs []int
}

// Mutate applies the CreateProtectedAreaCategoryInput on the ProtectedAreaCategoryMutation builder.
func (i *CreateProtectedAreaCategoryInput) Mutate(m *ProtectedAreaCategoryMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ProtectedAreaIDs; len(v) > 0 {
		m.AddProtectedAreaIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProtectedAreaCategoryInput on the ProtectedAreaCategoryCreate builder.
func (c *ProtectedAreaCategoryCreate) SetInput(i CreateProtectedAreaCategoryInput) *ProtectedAreaCategoryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProtectedAreaCategoryInput represents a mutation input for updating protectedareacategories.
type UpdateProtectedAreaCategoryInput struct {
	ClearCreatedBy         bool
	CreatedBy              *string
	UpdatedAt              *time.Time
	ClearUpdatedBy         bool
	UpdatedBy              *string
	ClearDisplayName       bool
	DisplayName            *string
	ClearAbbreviation      bool
	Abbreviation           *string
	ClearDescription       bool
	Description            *string
	ClearExternalLink      bool
	ExternalLink           *string
	ClearProtectedAreas    bool
	AddProtectedAreaIDs    []int
	RemoveProtectedAreaIDs []int
}

// Mutate applies the UpdateProtectedAreaCategoryInput on the ProtectedAreaCategoryMutation builder.
func (i *UpdateProtectedAreaCategoryInput) Mutate(m *ProtectedAreaCategoryMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearProtectedAreas {
		m.ClearProtectedAreas()
	}
	if v := i.AddProtectedAreaIDs; len(v) > 0 {
		m.AddProtectedAreaIDs(v...)
	}
	if v := i.RemoveProtectedAreaIDs; len(v) > 0 {
		m.RemoveProtectedAreaIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProtectedAreaCategoryInput on the ProtectedAreaCategoryUpdate builder.
func (c *ProtectedAreaCategoryUpdate) SetInput(i UpdateProtectedAreaCategoryInput) *ProtectedAreaCategoryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProtectedAreaCategoryInput on the ProtectedAreaCategoryUpdateOne builder.
func (c *ProtectedAreaCategoryUpdateOne) SetInput(i UpdateProtectedAreaCategoryInput) *ProtectedAreaCategoryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProtectedAreaPictureInput represents a mutation input for creating protectedareapictures.
type CreateProtectedAreaPictureInput struct {
	CreatedAt            *time.Time
	CreatedBy            *string
	UpdatedAt            *time.Time
	UpdatedBy            *string
	DisplayName          *string
	Abbreviation         *string
	Description          *string
	ExternalLink         *string
	PrimaryImageURL      *string
	AdditionalImagesUrls []string
	ShootingDate         *time.Time
	Geometry             *types.Geometry
	CollectionID         int
	ProtectedAreaID      *int
	LocationID           *int
	LicenseID            *int
}

// Mutate applies the CreateProtectedAreaPictureInput on the ProtectedAreaPictureMutation builder.
func (i *CreateProtectedAreaPictureInput) Mutate(m *ProtectedAreaPictureMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if v := i.ShootingDate; v != nil {
		m.SetShootingDate(*v)
	}
	if v := i.Geometry; v != nil {
		m.SetGeometry(*v)
	}
	m.SetCollectionID(i.CollectionID)
	if v := i.ProtectedAreaID; v != nil {
		m.SetProtectedAreaID(*v)
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
}

// SetInput applies the change-set in the CreateProtectedAreaPictureInput on the ProtectedAreaPictureCreate builder.
func (c *ProtectedAreaPictureCreate) SetInput(i CreateProtectedAreaPictureInput) *ProtectedAreaPictureCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProtectedAreaPictureInput represents a mutation input for updating protectedareapictures.
type UpdateProtectedAreaPictureInput struct {
	ClearCreatedBy             bool
	CreatedBy                  *string
	UpdatedAt                  *time.Time
	ClearUpdatedBy             bool
	UpdatedBy                  *string
	ClearDisplayName           bool
	DisplayName                *string
	ClearAbbreviation          bool
	Abbreviation               *string
	ClearDescription           bool
	Description                *string
	ClearExternalLink          bool
	ExternalLink               *string
	ClearPrimaryImageURL       bool
	PrimaryImageURL            *string
	ClearAdditionalImagesUrls  bool
	AdditionalImagesUrls       []string
	AppendAdditionalImagesUrls []string
	ClearShootingDate          bool
	ShootingDate               *time.Time
	ClearGeometry              bool
	Geometry                   *types.Geometry
	CollectionID               *int
	ClearProtectedArea         bool
	ProtectedAreaID            *int
	ClearLocation              bool
	LocationID                 *int
	ClearLicense               bool
	LicenseID                  *int
}

// Mutate applies the UpdateProtectedAreaPictureInput on the ProtectedAreaPictureMutation builder.
func (i *UpdateProtectedAreaPictureInput) Mutate(m *ProtectedAreaPictureMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearPrimaryImageURL {
		m.ClearPrimaryImageURL()
	}
	if v := i.PrimaryImageURL; v != nil {
		m.SetPrimaryImageURL(*v)
	}
	if i.ClearAdditionalImagesUrls {
		m.ClearAdditionalImagesUrls()
	}
	if v := i.AdditionalImagesUrls; v != nil {
		m.SetAdditionalImagesUrls(v)
	}
	if i.AppendAdditionalImagesUrls != nil {
		m.AppendAdditionalImagesUrls(i.AdditionalImagesUrls)
	}
	if i.ClearShootingDate {
		m.ClearShootingDate()
	}
	if v := i.ShootingDate; v != nil {
		m.SetShootingDate(*v)
	}
	if i.ClearGeometry {
		m.ClearGeometry()
	}
	if v := i.Geometry; v != nil {
		m.SetGeometry(*v)
	}
	if v := i.CollectionID; v != nil {
		m.SetCollectionID(*v)
	}
	if i.ClearProtectedArea {
		m.ClearProtectedArea()
	}
	if v := i.ProtectedAreaID; v != nil {
		m.SetProtectedAreaID(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	if i.ClearLicense {
		m.ClearLicense()
	}
	if v := i.LicenseID; v != nil {
		m.SetLicenseID(*v)
	}
}

// SetInput applies the change-set in the UpdateProtectedAreaPictureInput on the ProtectedAreaPictureUpdate builder.
func (c *ProtectedAreaPictureUpdate) SetInput(i UpdateProtectedAreaPictureInput) *ProtectedAreaPictureUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProtectedAreaPictureInput on the ProtectedAreaPictureUpdateOne builder.
func (c *ProtectedAreaPictureUpdateOne) SetInput(i UpdateProtectedAreaPictureInput) *ProtectedAreaPictureUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePublicationInput represents a mutation input for creating publications.
type CreatePublicationInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtifactIDs  []int
	AuthorIDs    []int
}

// Mutate applies the CreatePublicationInput on the PublicationMutation builder.
func (i *CreatePublicationInput) Mutate(m *PublicationMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.AuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePublicationInput on the PublicationCreate builder.
func (c *PublicationCreate) SetInput(i CreatePublicationInput) *PublicationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePublicationInput represents a mutation input for updating publications.
type UpdatePublicationInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
	ClearAuthors      bool
	AddAuthorIDs      []int
	RemoveAuthorIDs   []int
}

// Mutate applies the UpdatePublicationInput on the PublicationMutation builder.
func (i *UpdatePublicationInput) Mutate(m *PublicationMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearAuthors {
		m.ClearAuthors()
	}
	if v := i.AddAuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.RemoveAuthorIDs; len(v) > 0 {
		m.RemoveAuthorIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePublicationInput on the PublicationUpdate builder.
func (c *PublicationUpdate) SetInput(i UpdatePublicationInput) *PublicationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePublicationInput on the PublicationUpdateOne builder.
func (c *PublicationUpdateOne) SetInput(i UpdatePublicationInput) *PublicationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePublisherInput represents a mutation input for creating publishers.
type CreatePublisherInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	BookIDs      []int
}

// Mutate applies the CreatePublisherInput on the PublisherMutation builder.
func (i *CreatePublisherInput) Mutate(m *PublisherMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePublisherInput on the PublisherCreate builder.
func (c *PublisherCreate) SetInput(i CreatePublisherInput) *PublisherCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePublisherInput represents a mutation input for updating publishers.
type UpdatePublisherInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearBooks        bool
	AddBookIDs        []int
	RemoveBookIDs     []int
}

// Mutate applies the UpdatePublisherInput on the PublisherMutation builder.
func (i *UpdatePublisherInput) Mutate(m *PublisherMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePublisherInput on the PublisherUpdate builder.
func (c *PublisherUpdate) SetInput(i UpdatePublisherInput) *PublisherUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePublisherInput on the PublisherUpdateOne builder.
func (c *PublisherUpdateOne) SetInput(i UpdatePublisherInput) *PublisherUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRegionInput represents a mutation input for creating regions.
type CreateRegionInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	LocationIDs  []int
}

// Mutate applies the CreateRegionInput on the RegionMutation builder.
func (i *CreateRegionInput) Mutate(m *RegionMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.LocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRegionInput on the RegionCreate builder.
func (c *RegionCreate) SetInput(i CreateRegionInput) *RegionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRegionInput represents a mutation input for updating regions.
type UpdateRegionInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearLocation     bool
	AddLocationIDs    []int
	RemoveLocationIDs []int
}

// Mutate applies the UpdateRegionInput on the RegionMutation builder.
func (i *UpdateRegionInput) Mutate(m *RegionMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.AddLocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RemoveLocationIDs; len(v) > 0 {
		m.RemoveLocationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateRegionInput on the RegionUpdate builder.
func (c *RegionUpdate) SetInput(i UpdateRegionInput) *RegionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRegionInput on the RegionUpdateOne builder.
func (c *RegionUpdateOne) SetInput(i UpdateRegionInput) *RegionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSetInput represents a mutation input for creating sets.
type CreateSetInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtifactIDs  []int
	MonumentIDs  []int
}

// Mutate applies the CreateSetInput on the SetMutation builder.
func (i *CreateSetInput) Mutate(m *SetMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.MonumentIDs; len(v) > 0 {
		m.AddMonumentIDs(v...)
	}
}

// SetInput applies the change-set in the CreateSetInput on the SetCreate builder.
func (c *SetCreate) SetInput(i CreateSetInput) *SetCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSetInput represents a mutation input for updating sets.
type UpdateSetInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
	ClearMonuments    bool
	AddMonumentIDs    []int
	RemoveMonumentIDs []int
}

// Mutate applies the UpdateSetInput on the SetMutation builder.
func (i *UpdateSetInput) Mutate(m *SetMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
	if i.ClearMonuments {
		m.ClearMonuments()
	}
	if v := i.AddMonumentIDs; len(v) > 0 {
		m.AddMonumentIDs(v...)
	}
	if v := i.RemoveMonumentIDs; len(v) > 0 {
		m.RemoveMonumentIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSetInput on the SetUpdate builder.
func (c *SetUpdate) SetInput(i UpdateSetInput) *SetUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSetInput on the SetUpdateOne builder.
func (c *SetUpdateOne) SetInput(i UpdateSetInput) *SetUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSettlementInput represents a mutation input for creating settlements.
type CreateSettlementInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	LocationIDs  []int
}

// Mutate applies the CreateSettlementInput on the SettlementMutation builder.
func (i *CreateSettlementInput) Mutate(m *SettlementMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.LocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateSettlementInput on the SettlementCreate builder.
func (c *SettlementCreate) SetInput(i CreateSettlementInput) *SettlementCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSettlementInput represents a mutation input for updating settlements.
type UpdateSettlementInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearLocation     bool
	AddLocationIDs    []int
	RemoveLocationIDs []int
}

// Mutate applies the UpdateSettlementInput on the SettlementMutation builder.
func (i *UpdateSettlementInput) Mutate(m *SettlementMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.AddLocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RemoveLocationIDs; len(v) > 0 {
		m.RemoveLocationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSettlementInput on the SettlementUpdate builder.
func (c *SettlementUpdate) SetInput(i UpdateSettlementInput) *SettlementUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSettlementInput on the SettlementUpdateOne builder.
func (c *SettlementUpdateOne) SetInput(i UpdateSettlementInput) *SettlementUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTechniqueInput represents a mutation input for creating techniques.
type CreateTechniqueInput struct {
	CreatedAt    *time.Time
	CreatedBy    *string
	UpdatedAt    *time.Time
	UpdatedBy    *string
	DisplayName  *string
	Abbreviation *string
	Description  *string
	ExternalLink *string
	ArtifactIDs  []int
}

// Mutate applies the CreateTechniqueInput on the TechniqueMutation builder.
func (i *CreateTechniqueInput) Mutate(m *TechniqueMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if v := i.ArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTechniqueInput on the TechniqueCreate builder.
func (c *TechniqueCreate) SetInput(i CreateTechniqueInput) *TechniqueCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTechniqueInput represents a mutation input for updating techniques.
type UpdateTechniqueInput struct {
	ClearCreatedBy    bool
	CreatedBy         *string
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearAbbreviation bool
	Abbreviation      *string
	ClearDescription  bool
	Description       *string
	ClearExternalLink bool
	ExternalLink      *string
	ClearArtifacts    bool
	AddArtifactIDs    []int
	RemoveArtifactIDs []int
}

// Mutate applies the UpdateTechniqueInput on the TechniqueMutation builder.
func (i *UpdateTechniqueInput) Mutate(m *TechniqueMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAbbreviation {
		m.ClearAbbreviation()
	}
	if v := i.Abbreviation; v != nil {
		m.SetAbbreviation(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExternalLink {
		m.ClearExternalLink()
	}
	if v := i.ExternalLink; v != nil {
		m.SetExternalLink(*v)
	}
	if i.ClearArtifacts {
		m.ClearArtifacts()
	}
	if v := i.AddArtifactIDs; len(v) > 0 {
		m.AddArtifactIDs(v...)
	}
	if v := i.RemoveArtifactIDs; len(v) > 0 {
		m.RemoveArtifactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTechniqueInput on the TechniqueUpdate builder.
func (c *TechniqueUpdate) SetInput(i UpdateTechniqueInput) *TechniqueUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTechniqueInput on the TechniqueUpdateOne builder.
func (c *TechniqueUpdateOne) SetInput(i UpdateTechniqueInput) *TechniqueUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
