// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"context"
	"time"

	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artgenre"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/artstyle"
	"github.com/dkrasnovdev/siberiana-api/ent/auditlog"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/bookgenre"
	"github.com/dkrasnovdev/siberiana-api/ent/category"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/culture"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/ethnos"
	"github.com/dkrasnovdev/siberiana-api/ent/favourite"
	"github.com/dkrasnovdev/siberiana-api/ent/interview"
	"github.com/dkrasnovdev/siberiana-api/ent/license"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/medium"
	"github.com/dkrasnovdev/siberiana-api/ent/model"
	"github.com/dkrasnovdev/siberiana-api/ent/monument"
	"github.com/dkrasnovdev/siberiana-api/ent/organization"
	"github.com/dkrasnovdev/siberiana-api/ent/periodical"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/personal"
	"github.com/dkrasnovdev/siberiana-api/ent/project"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedarea"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareacategory"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
	"github.com/dkrasnovdev/siberiana-api/ent/proxy"
	"github.com/dkrasnovdev/siberiana-api/ent/publication"
	"github.com/dkrasnovdev/siberiana-api/ent/publisher"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/schema"
	"github.com/dkrasnovdev/siberiana-api/ent/set"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
	"github.com/dkrasnovdev/siberiana-api/ent/technique"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	artMixin := schema.Art{}.Mixin()
	art.Policy = privacy.NewPolicies(schema.Art{})
	art.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := art.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	artMixinHooks0 := artMixin[0].Hooks()

	art.Hooks[1] = artMixinHooks0[0]
	artMixinFields0 := artMixin[0].Fields()
	_ = artMixinFields0
	artFields := schema.Art{}.Fields()
	_ = artFields
	// artDescCreatedAt is the schema descriptor for created_at field.
	artDescCreatedAt := artMixinFields0[0].Descriptor()
	// art.DefaultCreatedAt holds the default value on creation for the created_at field.
	art.DefaultCreatedAt = artDescCreatedAt.Default.(func() time.Time)
	// artDescUpdatedAt is the schema descriptor for updated_at field.
	artDescUpdatedAt := artMixinFields0[2].Descriptor()
	// art.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	art.DefaultUpdatedAt = artDescUpdatedAt.Default.(func() time.Time)
	// art.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	art.UpdateDefaultUpdatedAt = artDescUpdatedAt.UpdateDefault.(func() time.Time)
	artgenreMixin := schema.ArtGenre{}.Mixin()
	artgenre.Policy = privacy.NewPolicies(schema.ArtGenre{})
	artgenre.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := artgenre.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	artgenreMixinHooks0 := artgenreMixin[0].Hooks()

	artgenre.Hooks[1] = artgenreMixinHooks0[0]
	artgenreMixinFields0 := artgenreMixin[0].Fields()
	_ = artgenreMixinFields0
	artgenreFields := schema.ArtGenre{}.Fields()
	_ = artgenreFields
	// artgenreDescCreatedAt is the schema descriptor for created_at field.
	artgenreDescCreatedAt := artgenreMixinFields0[0].Descriptor()
	// artgenre.DefaultCreatedAt holds the default value on creation for the created_at field.
	artgenre.DefaultCreatedAt = artgenreDescCreatedAt.Default.(func() time.Time)
	// artgenreDescUpdatedAt is the schema descriptor for updated_at field.
	artgenreDescUpdatedAt := artgenreMixinFields0[2].Descriptor()
	// artgenre.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	artgenre.DefaultUpdatedAt = artgenreDescUpdatedAt.Default.(func() time.Time)
	// artgenre.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	artgenre.UpdateDefaultUpdatedAt = artgenreDescUpdatedAt.UpdateDefault.(func() time.Time)
	artstyleMixin := schema.ArtStyle{}.Mixin()
	artstyle.Policy = privacy.NewPolicies(schema.ArtStyle{})
	artstyle.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := artstyle.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	artstyleMixinHooks0 := artstyleMixin[0].Hooks()

	artstyle.Hooks[1] = artstyleMixinHooks0[0]
	artstyleMixinFields0 := artstyleMixin[0].Fields()
	_ = artstyleMixinFields0
	artstyleFields := schema.ArtStyle{}.Fields()
	_ = artstyleFields
	// artstyleDescCreatedAt is the schema descriptor for created_at field.
	artstyleDescCreatedAt := artstyleMixinFields0[0].Descriptor()
	// artstyle.DefaultCreatedAt holds the default value on creation for the created_at field.
	artstyle.DefaultCreatedAt = artstyleDescCreatedAt.Default.(func() time.Time)
	// artstyleDescUpdatedAt is the schema descriptor for updated_at field.
	artstyleDescUpdatedAt := artstyleMixinFields0[2].Descriptor()
	// artstyle.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	artstyle.DefaultUpdatedAt = artstyleDescUpdatedAt.Default.(func() time.Time)
	// artstyle.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	artstyle.UpdateDefaultUpdatedAt = artstyleDescUpdatedAt.UpdateDefault.(func() time.Time)
	artifactMixin := schema.Artifact{}.Mixin()
	artifact.Policy = privacy.NewPolicies(schema.Artifact{})
	artifact.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := artifact.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	artifactMixinHooks0 := artifactMixin[0].Hooks()
	artifactMixinHooks4 := artifactMixin[4].Hooks()

	artifact.Hooks[1] = artifactMixinHooks0[0]

	artifact.Hooks[2] = artifactMixinHooks4[0]
	artifactMixinInters4 := artifactMixin[4].Interceptors()
	artifact.Interceptors[0] = artifactMixinInters4[0]
	artifactMixinFields0 := artifactMixin[0].Fields()
	_ = artifactMixinFields0
	artifactMixinFields2 := artifactMixin[2].Fields()
	_ = artifactMixinFields2
	artifactFields := schema.Artifact{}.Fields()
	_ = artifactFields
	// artifactDescCreatedAt is the schema descriptor for created_at field.
	artifactDescCreatedAt := artifactMixinFields0[0].Descriptor()
	// artifact.DefaultCreatedAt holds the default value on creation for the created_at field.
	artifact.DefaultCreatedAt = artifactDescCreatedAt.Default.(func() time.Time)
	// artifactDescUpdatedAt is the schema descriptor for updated_at field.
	artifactDescUpdatedAt := artifactMixinFields0[2].Descriptor()
	// artifact.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	artifact.DefaultUpdatedAt = artifactDescUpdatedAt.Default.(func() time.Time)
	// artifact.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	artifact.UpdateDefaultUpdatedAt = artifactDescUpdatedAt.UpdateDefault.(func() time.Time)
	auditlog.Policy = privacy.NewPolicies(schema.AuditLog{})
	auditlog.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := auditlog.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	auditlogFields := schema.AuditLog{}.Fields()
	_ = auditlogFields
	// auditlogDescCreatedAt is the schema descriptor for created_at field.
	auditlogDescCreatedAt := auditlogFields[8].Descriptor()
	// auditlog.DefaultCreatedAt holds the default value on creation for the created_at field.
	auditlog.DefaultCreatedAt = auditlogDescCreatedAt.Default.(func() time.Time)
	bookMixin := schema.Book{}.Mixin()
	book.Policy = privacy.NewPolicies(schema.Book{})
	book.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := book.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	bookMixinHooks0 := bookMixin[0].Hooks()

	book.Hooks[1] = bookMixinHooks0[0]
	bookMixinFields0 := bookMixin[0].Fields()
	_ = bookMixinFields0
	bookMixinFields2 := bookMixin[2].Fields()
	_ = bookMixinFields2
	bookFields := schema.Book{}.Fields()
	_ = bookFields
	// bookDescCreatedAt is the schema descriptor for created_at field.
	bookDescCreatedAt := bookMixinFields0[0].Descriptor()
	// book.DefaultCreatedAt holds the default value on creation for the created_at field.
	book.DefaultCreatedAt = bookDescCreatedAt.Default.(func() time.Time)
	// bookDescUpdatedAt is the schema descriptor for updated_at field.
	bookDescUpdatedAt := bookMixinFields0[2].Descriptor()
	// book.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	book.DefaultUpdatedAt = bookDescUpdatedAt.Default.(func() time.Time)
	// book.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	book.UpdateDefaultUpdatedAt = bookDescUpdatedAt.UpdateDefault.(func() time.Time)
	// bookDescYear is the schema descriptor for year field.
	bookDescYear := bookFields[1].Descriptor()
	// book.YearValidator is a validator for the "year" field. It is called by the builders before save.
	book.YearValidator = bookDescYear.Validators[0].(func(int) error)
	bookgenreMixin := schema.BookGenre{}.Mixin()
	bookgenre.Policy = privacy.NewPolicies(schema.BookGenre{})
	bookgenre.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := bookgenre.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	bookgenreMixinHooks0 := bookgenreMixin[0].Hooks()

	bookgenre.Hooks[1] = bookgenreMixinHooks0[0]
	bookgenreMixinFields0 := bookgenreMixin[0].Fields()
	_ = bookgenreMixinFields0
	bookgenreFields := schema.BookGenre{}.Fields()
	_ = bookgenreFields
	// bookgenreDescCreatedAt is the schema descriptor for created_at field.
	bookgenreDescCreatedAt := bookgenreMixinFields0[0].Descriptor()
	// bookgenre.DefaultCreatedAt holds the default value on creation for the created_at field.
	bookgenre.DefaultCreatedAt = bookgenreDescCreatedAt.Default.(func() time.Time)
	// bookgenreDescUpdatedAt is the schema descriptor for updated_at field.
	bookgenreDescUpdatedAt := bookgenreMixinFields0[2].Descriptor()
	// bookgenre.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	bookgenre.DefaultUpdatedAt = bookgenreDescUpdatedAt.Default.(func() time.Time)
	// bookgenre.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	bookgenre.UpdateDefaultUpdatedAt = bookgenreDescUpdatedAt.UpdateDefault.(func() time.Time)
	categoryMixin := schema.Category{}.Mixin()
	category.Policy = privacy.NewPolicies(schema.Category{})
	category.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := category.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	categoryMixinHooks0 := categoryMixin[0].Hooks()

	category.Hooks[1] = categoryMixinHooks0[0]
	categoryMixinFields0 := categoryMixin[0].Fields()
	_ = categoryMixinFields0
	categoryFields := schema.Category{}.Fields()
	_ = categoryFields
	// categoryDescCreatedAt is the schema descriptor for created_at field.
	categoryDescCreatedAt := categoryMixinFields0[0].Descriptor()
	// category.DefaultCreatedAt holds the default value on creation for the created_at field.
	category.DefaultCreatedAt = categoryDescCreatedAt.Default.(func() time.Time)
	// categoryDescUpdatedAt is the schema descriptor for updated_at field.
	categoryDescUpdatedAt := categoryMixinFields0[2].Descriptor()
	// category.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	category.DefaultUpdatedAt = categoryDescUpdatedAt.Default.(func() time.Time)
	// category.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	category.UpdateDefaultUpdatedAt = categoryDescUpdatedAt.UpdateDefault.(func() time.Time)
	collectionMixin := schema.Collection{}.Mixin()
	collection.Policy = privacy.NewPolicies(schema.Collection{})
	collection.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := collection.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	collectionMixinHooks0 := collectionMixin[0].Hooks()

	collection.Hooks[1] = collectionMixinHooks0[0]
	collectionMixinFields0 := collectionMixin[0].Fields()
	_ = collectionMixinFields0
	collectionFields := schema.Collection{}.Fields()
	_ = collectionFields
	// collectionDescCreatedAt is the schema descriptor for created_at field.
	collectionDescCreatedAt := collectionMixinFields0[0].Descriptor()
	// collection.DefaultCreatedAt holds the default value on creation for the created_at field.
	collection.DefaultCreatedAt = collectionDescCreatedAt.Default.(func() time.Time)
	// collectionDescUpdatedAt is the schema descriptor for updated_at field.
	collectionDescUpdatedAt := collectionMixinFields0[2].Descriptor()
	// collection.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	collection.DefaultUpdatedAt = collectionDescUpdatedAt.Default.(func() time.Time)
	// collection.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	collection.UpdateDefaultUpdatedAt = collectionDescUpdatedAt.UpdateDefault.(func() time.Time)
	countryMixin := schema.Country{}.Mixin()
	country.Policy = privacy.NewPolicies(schema.Country{})
	country.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := country.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	countryMixinHooks0 := countryMixin[0].Hooks()

	country.Hooks[1] = countryMixinHooks0[0]
	countryMixinFields0 := countryMixin[0].Fields()
	_ = countryMixinFields0
	countryFields := schema.Country{}.Fields()
	_ = countryFields
	// countryDescCreatedAt is the schema descriptor for created_at field.
	countryDescCreatedAt := countryMixinFields0[0].Descriptor()
	// country.DefaultCreatedAt holds the default value on creation for the created_at field.
	country.DefaultCreatedAt = countryDescCreatedAt.Default.(func() time.Time)
	// countryDescUpdatedAt is the schema descriptor for updated_at field.
	countryDescUpdatedAt := countryMixinFields0[2].Descriptor()
	// country.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	country.DefaultUpdatedAt = countryDescUpdatedAt.Default.(func() time.Time)
	// country.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	country.UpdateDefaultUpdatedAt = countryDescUpdatedAt.UpdateDefault.(func() time.Time)
	cultureMixin := schema.Culture{}.Mixin()
	culture.Policy = privacy.NewPolicies(schema.Culture{})
	culture.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := culture.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	cultureMixinHooks0 := cultureMixin[0].Hooks()

	culture.Hooks[1] = cultureMixinHooks0[0]
	cultureMixinFields0 := cultureMixin[0].Fields()
	_ = cultureMixinFields0
	cultureFields := schema.Culture{}.Fields()
	_ = cultureFields
	// cultureDescCreatedAt is the schema descriptor for created_at field.
	cultureDescCreatedAt := cultureMixinFields0[0].Descriptor()
	// culture.DefaultCreatedAt holds the default value on creation for the created_at field.
	culture.DefaultCreatedAt = cultureDescCreatedAt.Default.(func() time.Time)
	// cultureDescUpdatedAt is the schema descriptor for updated_at field.
	cultureDescUpdatedAt := cultureMixinFields0[2].Descriptor()
	// culture.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	culture.DefaultUpdatedAt = cultureDescUpdatedAt.Default.(func() time.Time)
	// culture.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	culture.UpdateDefaultUpdatedAt = cultureDescUpdatedAt.UpdateDefault.(func() time.Time)
	districtMixin := schema.District{}.Mixin()
	district.Policy = privacy.NewPolicies(schema.District{})
	district.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := district.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	districtMixinHooks0 := districtMixin[0].Hooks()

	district.Hooks[1] = districtMixinHooks0[0]
	districtMixinFields0 := districtMixin[0].Fields()
	_ = districtMixinFields0
	districtFields := schema.District{}.Fields()
	_ = districtFields
	// districtDescCreatedAt is the schema descriptor for created_at field.
	districtDescCreatedAt := districtMixinFields0[0].Descriptor()
	// district.DefaultCreatedAt holds the default value on creation for the created_at field.
	district.DefaultCreatedAt = districtDescCreatedAt.Default.(func() time.Time)
	// districtDescUpdatedAt is the schema descriptor for updated_at field.
	districtDescUpdatedAt := districtMixinFields0[2].Descriptor()
	// district.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	district.DefaultUpdatedAt = districtDescUpdatedAt.Default.(func() time.Time)
	// district.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	district.UpdateDefaultUpdatedAt = districtDescUpdatedAt.UpdateDefault.(func() time.Time)
	ethnosMixin := schema.Ethnos{}.Mixin()
	ethnos.Policy = privacy.NewPolicies(schema.Ethnos{})
	ethnos.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := ethnos.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	ethnosMixinHooks0 := ethnosMixin[0].Hooks()

	ethnos.Hooks[1] = ethnosMixinHooks0[0]
	ethnosMixinFields0 := ethnosMixin[0].Fields()
	_ = ethnosMixinFields0
	ethnosFields := schema.Ethnos{}.Fields()
	_ = ethnosFields
	// ethnosDescCreatedAt is the schema descriptor for created_at field.
	ethnosDescCreatedAt := ethnosMixinFields0[0].Descriptor()
	// ethnos.DefaultCreatedAt holds the default value on creation for the created_at field.
	ethnos.DefaultCreatedAt = ethnosDescCreatedAt.Default.(func() time.Time)
	// ethnosDescUpdatedAt is the schema descriptor for updated_at field.
	ethnosDescUpdatedAt := ethnosMixinFields0[2].Descriptor()
	// ethnos.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	ethnos.DefaultUpdatedAt = ethnosDescUpdatedAt.Default.(func() time.Time)
	// ethnos.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	ethnos.UpdateDefaultUpdatedAt = ethnosDescUpdatedAt.UpdateDefault.(func() time.Time)
	favouriteMixin := schema.Favourite{}.Mixin()
	favourite.Policy = privacy.NewPolicies(schema.Favourite{})
	favourite.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := favourite.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	favouriteMixinHooks0 := favouriteMixin[0].Hooks()
	favouriteMixinHooks1 := favouriteMixin[1].Hooks()

	favourite.Hooks[1] = favouriteMixinHooks0[0]

	favourite.Hooks[2] = favouriteMixinHooks1[0]
	favouriteMixinFields0 := favouriteMixin[0].Fields()
	_ = favouriteMixinFields0
	favouriteMixinFields1 := favouriteMixin[1].Fields()
	_ = favouriteMixinFields1
	favouriteFields := schema.Favourite{}.Fields()
	_ = favouriteFields
	// favouriteDescCreatedAt is the schema descriptor for created_at field.
	favouriteDescCreatedAt := favouriteMixinFields0[0].Descriptor()
	// favourite.DefaultCreatedAt holds the default value on creation for the created_at field.
	favourite.DefaultCreatedAt = favouriteDescCreatedAt.Default.(func() time.Time)
	// favouriteDescUpdatedAt is the schema descriptor for updated_at field.
	favouriteDescUpdatedAt := favouriteMixinFields0[2].Descriptor()
	// favourite.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	favourite.DefaultUpdatedAt = favouriteDescUpdatedAt.Default.(func() time.Time)
	// favourite.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	favourite.UpdateDefaultUpdatedAt = favouriteDescUpdatedAt.UpdateDefault.(func() time.Time)
	// favouriteDescOwnerID is the schema descriptor for owner_id field.
	favouriteDescOwnerID := favouriteMixinFields1[0].Descriptor()
	// favourite.OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	favourite.OwnerIDValidator = favouriteDescOwnerID.Validators[0].(func(string) error)
	interviewMixin := schema.Interview{}.Mixin()
	interview.Policy = privacy.NewPolicies(schema.Interview{})
	interview.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := interview.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	interviewMixinHooks0 := interviewMixin[0].Hooks()

	interview.Hooks[1] = interviewMixinHooks0[0]
	interviewMixinFields0 := interviewMixin[0].Fields()
	_ = interviewMixinFields0
	interviewFields := schema.Interview{}.Fields()
	_ = interviewFields
	// interviewDescCreatedAt is the schema descriptor for created_at field.
	interviewDescCreatedAt := interviewMixinFields0[0].Descriptor()
	// interview.DefaultCreatedAt holds the default value on creation for the created_at field.
	interview.DefaultCreatedAt = interviewDescCreatedAt.Default.(func() time.Time)
	// interviewDescUpdatedAt is the schema descriptor for updated_at field.
	interviewDescUpdatedAt := interviewMixinFields0[2].Descriptor()
	// interview.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	interview.DefaultUpdatedAt = interviewDescUpdatedAt.Default.(func() time.Time)
	// interview.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	interview.UpdateDefaultUpdatedAt = interviewDescUpdatedAt.UpdateDefault.(func() time.Time)
	licenseMixin := schema.License{}.Mixin()
	license.Policy = privacy.NewPolicies(schema.License{})
	license.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := license.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	licenseMixinHooks0 := licenseMixin[0].Hooks()

	license.Hooks[1] = licenseMixinHooks0[0]
	licenseMixinFields0 := licenseMixin[0].Fields()
	_ = licenseMixinFields0
	licenseFields := schema.License{}.Fields()
	_ = licenseFields
	// licenseDescCreatedAt is the schema descriptor for created_at field.
	licenseDescCreatedAt := licenseMixinFields0[0].Descriptor()
	// license.DefaultCreatedAt holds the default value on creation for the created_at field.
	license.DefaultCreatedAt = licenseDescCreatedAt.Default.(func() time.Time)
	// licenseDescUpdatedAt is the schema descriptor for updated_at field.
	licenseDescUpdatedAt := licenseMixinFields0[2].Descriptor()
	// license.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	license.DefaultUpdatedAt = licenseDescUpdatedAt.Default.(func() time.Time)
	// license.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	license.UpdateDefaultUpdatedAt = licenseDescUpdatedAt.UpdateDefault.(func() time.Time)
	locationMixin := schema.Location{}.Mixin()
	location.Policy = privacy.NewPolicies(schema.Location{})
	location.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := location.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	locationMixinHooks0 := locationMixin[0].Hooks()

	location.Hooks[1] = locationMixinHooks0[0]
	locationMixinFields0 := locationMixin[0].Fields()
	_ = locationMixinFields0
	locationFields := schema.Location{}.Fields()
	_ = locationFields
	// locationDescCreatedAt is the schema descriptor for created_at field.
	locationDescCreatedAt := locationMixinFields0[0].Descriptor()
	// location.DefaultCreatedAt holds the default value on creation for the created_at field.
	location.DefaultCreatedAt = locationDescCreatedAt.Default.(func() time.Time)
	// locationDescUpdatedAt is the schema descriptor for updated_at field.
	locationDescUpdatedAt := locationMixinFields0[2].Descriptor()
	// location.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	location.DefaultUpdatedAt = locationDescUpdatedAt.Default.(func() time.Time)
	// location.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	location.UpdateDefaultUpdatedAt = locationDescUpdatedAt.UpdateDefault.(func() time.Time)
	mediumMixin := schema.Medium{}.Mixin()
	medium.Policy = privacy.NewPolicies(schema.Medium{})
	medium.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := medium.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	mediumMixinHooks0 := mediumMixin[0].Hooks()

	medium.Hooks[1] = mediumMixinHooks0[0]
	mediumMixinFields0 := mediumMixin[0].Fields()
	_ = mediumMixinFields0
	mediumFields := schema.Medium{}.Fields()
	_ = mediumFields
	// mediumDescCreatedAt is the schema descriptor for created_at field.
	mediumDescCreatedAt := mediumMixinFields0[0].Descriptor()
	// medium.DefaultCreatedAt holds the default value on creation for the created_at field.
	medium.DefaultCreatedAt = mediumDescCreatedAt.Default.(func() time.Time)
	// mediumDescUpdatedAt is the schema descriptor for updated_at field.
	mediumDescUpdatedAt := mediumMixinFields0[2].Descriptor()
	// medium.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	medium.DefaultUpdatedAt = mediumDescUpdatedAt.Default.(func() time.Time)
	// medium.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	medium.UpdateDefaultUpdatedAt = mediumDescUpdatedAt.UpdateDefault.(func() time.Time)
	modelMixin := schema.Model{}.Mixin()
	model.Policy = privacy.NewPolicies(schema.Model{})
	model.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := model.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	modelMixinHooks0 := modelMixin[0].Hooks()

	model.Hooks[1] = modelMixinHooks0[0]
	modelMixinFields0 := modelMixin[0].Fields()
	_ = modelMixinFields0
	modelMixinFields2 := modelMixin[2].Fields()
	_ = modelMixinFields2
	modelFields := schema.Model{}.Fields()
	_ = modelFields
	// modelDescCreatedAt is the schema descriptor for created_at field.
	modelDescCreatedAt := modelMixinFields0[0].Descriptor()
	// model.DefaultCreatedAt holds the default value on creation for the created_at field.
	model.DefaultCreatedAt = modelDescCreatedAt.Default.(func() time.Time)
	// modelDescUpdatedAt is the schema descriptor for updated_at field.
	modelDescUpdatedAt := modelMixinFields0[2].Descriptor()
	// model.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	model.DefaultUpdatedAt = modelDescUpdatedAt.Default.(func() time.Time)
	// model.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	model.UpdateDefaultUpdatedAt = modelDescUpdatedAt.UpdateDefault.(func() time.Time)
	monumentMixin := schema.Monument{}.Mixin()
	monument.Policy = privacy.NewPolicies(schema.Monument{})
	monument.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := monument.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	monumentMixinHooks0 := monumentMixin[0].Hooks()

	monument.Hooks[1] = monumentMixinHooks0[0]
	monumentMixinFields0 := monumentMixin[0].Fields()
	_ = monumentMixinFields0
	monumentFields := schema.Monument{}.Fields()
	_ = monumentFields
	// monumentDescCreatedAt is the schema descriptor for created_at field.
	monumentDescCreatedAt := monumentMixinFields0[0].Descriptor()
	// monument.DefaultCreatedAt holds the default value on creation for the created_at field.
	monument.DefaultCreatedAt = monumentDescCreatedAt.Default.(func() time.Time)
	// monumentDescUpdatedAt is the schema descriptor for updated_at field.
	monumentDescUpdatedAt := monumentMixinFields0[2].Descriptor()
	// monument.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	monument.DefaultUpdatedAt = monumentDescUpdatedAt.Default.(func() time.Time)
	// monument.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	monument.UpdateDefaultUpdatedAt = monumentDescUpdatedAt.UpdateDefault.(func() time.Time)
	organizationMixin := schema.Organization{}.Mixin()
	organization.Policy = privacy.NewPolicies(schema.Organization{})
	organization.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := organization.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	organizationMixinHooks0 := organizationMixin[0].Hooks()

	organization.Hooks[1] = organizationMixinHooks0[0]
	organizationMixinFields0 := organizationMixin[0].Fields()
	_ = organizationMixinFields0
	organizationFields := schema.Organization{}.Fields()
	_ = organizationFields
	// organizationDescCreatedAt is the schema descriptor for created_at field.
	organizationDescCreatedAt := organizationMixinFields0[0].Descriptor()
	// organization.DefaultCreatedAt holds the default value on creation for the created_at field.
	organization.DefaultCreatedAt = organizationDescCreatedAt.Default.(func() time.Time)
	// organizationDescUpdatedAt is the schema descriptor for updated_at field.
	organizationDescUpdatedAt := organizationMixinFields0[2].Descriptor()
	// organization.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	organization.DefaultUpdatedAt = organizationDescUpdatedAt.Default.(func() time.Time)
	// organization.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	organization.UpdateDefaultUpdatedAt = organizationDescUpdatedAt.UpdateDefault.(func() time.Time)
	periodicalMixin := schema.Periodical{}.Mixin()
	periodical.Policy = privacy.NewPolicies(schema.Periodical{})
	periodical.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := periodical.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	periodicalMixinHooks0 := periodicalMixin[0].Hooks()

	periodical.Hooks[1] = periodicalMixinHooks0[0]
	periodicalMixinFields0 := periodicalMixin[0].Fields()
	_ = periodicalMixinFields0
	periodicalFields := schema.Periodical{}.Fields()
	_ = periodicalFields
	// periodicalDescCreatedAt is the schema descriptor for created_at field.
	periodicalDescCreatedAt := periodicalMixinFields0[0].Descriptor()
	// periodical.DefaultCreatedAt holds the default value on creation for the created_at field.
	periodical.DefaultCreatedAt = periodicalDescCreatedAt.Default.(func() time.Time)
	// periodicalDescUpdatedAt is the schema descriptor for updated_at field.
	periodicalDescUpdatedAt := periodicalMixinFields0[2].Descriptor()
	// periodical.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	periodical.DefaultUpdatedAt = periodicalDescUpdatedAt.Default.(func() time.Time)
	// periodical.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	periodical.UpdateDefaultUpdatedAt = periodicalDescUpdatedAt.UpdateDefault.(func() time.Time)
	personMixin := schema.Person{}.Mixin()
	person.Policy = privacy.NewPolicies(schema.Person{})
	person.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := person.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	personMixinHooks0 := personMixin[0].Hooks()

	person.Hooks[1] = personMixinHooks0[0]
	personMixinFields0 := personMixin[0].Fields()
	_ = personMixinFields0
	personFields := schema.Person{}.Fields()
	_ = personFields
	// personDescCreatedAt is the schema descriptor for created_at field.
	personDescCreatedAt := personMixinFields0[0].Descriptor()
	// person.DefaultCreatedAt holds the default value on creation for the created_at field.
	person.DefaultCreatedAt = personDescCreatedAt.Default.(func() time.Time)
	// personDescUpdatedAt is the schema descriptor for updated_at field.
	personDescUpdatedAt := personMixinFields0[2].Descriptor()
	// person.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	person.DefaultUpdatedAt = personDescUpdatedAt.Default.(func() time.Time)
	// person.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	person.UpdateDefaultUpdatedAt = personDescUpdatedAt.UpdateDefault.(func() time.Time)
	personalMixin := schema.Personal{}.Mixin()
	personal.Policy = privacy.NewPolicies(schema.Personal{})
	personal.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := personal.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	personalMixinHooks0 := personalMixin[0].Hooks()
	personalMixinHooks1 := personalMixin[1].Hooks()

	personal.Hooks[1] = personalMixinHooks0[0]

	personal.Hooks[2] = personalMixinHooks1[0]
	personalMixinFields0 := personalMixin[0].Fields()
	_ = personalMixinFields0
	personalMixinFields1 := personalMixin[1].Fields()
	_ = personalMixinFields1
	personalFields := schema.Personal{}.Fields()
	_ = personalFields
	// personalDescCreatedAt is the schema descriptor for created_at field.
	personalDescCreatedAt := personalMixinFields0[0].Descriptor()
	// personal.DefaultCreatedAt holds the default value on creation for the created_at field.
	personal.DefaultCreatedAt = personalDescCreatedAt.Default.(func() time.Time)
	// personalDescUpdatedAt is the schema descriptor for updated_at field.
	personalDescUpdatedAt := personalMixinFields0[2].Descriptor()
	// personal.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	personal.DefaultUpdatedAt = personalDescUpdatedAt.Default.(func() time.Time)
	// personal.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	personal.UpdateDefaultUpdatedAt = personalDescUpdatedAt.UpdateDefault.(func() time.Time)
	// personalDescOwnerID is the schema descriptor for owner_id field.
	personalDescOwnerID := personalMixinFields1[0].Descriptor()
	// personal.OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	personal.OwnerIDValidator = personalDescOwnerID.Validators[0].(func(string) error)
	// personalDescDisplayName is the schema descriptor for display_name field.
	personalDescDisplayName := personalFields[0].Descriptor()
	// personal.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	personal.DisplayNameValidator = personalDescDisplayName.Validators[0].(func(string) error)
	projectMixin := schema.Project{}.Mixin()
	project.Policy = privacy.NewPolicies(schema.Project{})
	project.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := project.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	projectMixinHooks0 := projectMixin[0].Hooks()

	project.Hooks[1] = projectMixinHooks0[0]
	projectMixinFields0 := projectMixin[0].Fields()
	_ = projectMixinFields0
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescCreatedAt is the schema descriptor for created_at field.
	projectDescCreatedAt := projectMixinFields0[0].Descriptor()
	// project.DefaultCreatedAt holds the default value on creation for the created_at field.
	project.DefaultCreatedAt = projectDescCreatedAt.Default.(func() time.Time)
	// projectDescUpdatedAt is the schema descriptor for updated_at field.
	projectDescUpdatedAt := projectMixinFields0[2].Descriptor()
	// project.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	project.DefaultUpdatedAt = projectDescUpdatedAt.Default.(func() time.Time)
	// project.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	project.UpdateDefaultUpdatedAt = projectDescUpdatedAt.UpdateDefault.(func() time.Time)
	// projectDescYear is the schema descriptor for year field.
	projectDescYear := projectFields[2].Descriptor()
	// project.YearValidator is a validator for the "year" field. It is called by the builders before save.
	project.YearValidator = projectDescYear.Validators[0].(func(int) error)
	// projectDescBeginYear is the schema descriptor for begin_year field.
	projectDescBeginYear := projectFields[3].Descriptor()
	// project.BeginYearValidator is a validator for the "begin_year" field. It is called by the builders before save.
	project.BeginYearValidator = projectDescBeginYear.Validators[0].(func(int) error)
	// projectDescEndYear is the schema descriptor for end_year field.
	projectDescEndYear := projectFields[4].Descriptor()
	// project.EndYearValidator is a validator for the "end_year" field. It is called by the builders before save.
	project.EndYearValidator = projectDescEndYear.Validators[0].(func(int) error)
	protectedareaMixin := schema.ProtectedArea{}.Mixin()
	protectedarea.Policy = privacy.NewPolicies(schema.ProtectedArea{})
	protectedarea.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := protectedarea.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	protectedareaMixinHooks0 := protectedareaMixin[0].Hooks()

	protectedarea.Hooks[1] = protectedareaMixinHooks0[0]
	protectedareaMixinFields0 := protectedareaMixin[0].Fields()
	_ = protectedareaMixinFields0
	protectedareaFields := schema.ProtectedArea{}.Fields()
	_ = protectedareaFields
	// protectedareaDescCreatedAt is the schema descriptor for created_at field.
	protectedareaDescCreatedAt := protectedareaMixinFields0[0].Descriptor()
	// protectedarea.DefaultCreatedAt holds the default value on creation for the created_at field.
	protectedarea.DefaultCreatedAt = protectedareaDescCreatedAt.Default.(func() time.Time)
	// protectedareaDescUpdatedAt is the schema descriptor for updated_at field.
	protectedareaDescUpdatedAt := protectedareaMixinFields0[2].Descriptor()
	// protectedarea.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	protectedarea.DefaultUpdatedAt = protectedareaDescUpdatedAt.Default.(func() time.Time)
	// protectedarea.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	protectedarea.UpdateDefaultUpdatedAt = protectedareaDescUpdatedAt.UpdateDefault.(func() time.Time)
	protectedareacategoryMixin := schema.ProtectedAreaCategory{}.Mixin()
	protectedareacategory.Policy = privacy.NewPolicies(schema.ProtectedAreaCategory{})
	protectedareacategory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := protectedareacategory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	protectedareacategoryMixinHooks0 := protectedareacategoryMixin[0].Hooks()

	protectedareacategory.Hooks[1] = protectedareacategoryMixinHooks0[0]
	protectedareacategoryMixinFields0 := protectedareacategoryMixin[0].Fields()
	_ = protectedareacategoryMixinFields0
	protectedareacategoryFields := schema.ProtectedAreaCategory{}.Fields()
	_ = protectedareacategoryFields
	// protectedareacategoryDescCreatedAt is the schema descriptor for created_at field.
	protectedareacategoryDescCreatedAt := protectedareacategoryMixinFields0[0].Descriptor()
	// protectedareacategory.DefaultCreatedAt holds the default value on creation for the created_at field.
	protectedareacategory.DefaultCreatedAt = protectedareacategoryDescCreatedAt.Default.(func() time.Time)
	// protectedareacategoryDescUpdatedAt is the schema descriptor for updated_at field.
	protectedareacategoryDescUpdatedAt := protectedareacategoryMixinFields0[2].Descriptor()
	// protectedareacategory.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	protectedareacategory.DefaultUpdatedAt = protectedareacategoryDescUpdatedAt.Default.(func() time.Time)
	// protectedareacategory.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	protectedareacategory.UpdateDefaultUpdatedAt = protectedareacategoryDescUpdatedAt.UpdateDefault.(func() time.Time)
	protectedareapictureMixin := schema.ProtectedAreaPicture{}.Mixin()
	protectedareapicture.Policy = privacy.NewPolicies(schema.ProtectedAreaPicture{})
	protectedareapicture.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := protectedareapicture.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	protectedareapictureMixinHooks0 := protectedareapictureMixin[0].Hooks()

	protectedareapicture.Hooks[1] = protectedareapictureMixinHooks0[0]
	protectedareapictureMixinFields0 := protectedareapictureMixin[0].Fields()
	_ = protectedareapictureMixinFields0
	protectedareapictureMixinFields2 := protectedareapictureMixin[2].Fields()
	_ = protectedareapictureMixinFields2
	protectedareapictureFields := schema.ProtectedAreaPicture{}.Fields()
	_ = protectedareapictureFields
	// protectedareapictureDescCreatedAt is the schema descriptor for created_at field.
	protectedareapictureDescCreatedAt := protectedareapictureMixinFields0[0].Descriptor()
	// protectedareapicture.DefaultCreatedAt holds the default value on creation for the created_at field.
	protectedareapicture.DefaultCreatedAt = protectedareapictureDescCreatedAt.Default.(func() time.Time)
	// protectedareapictureDescUpdatedAt is the schema descriptor for updated_at field.
	protectedareapictureDescUpdatedAt := protectedareapictureMixinFields0[2].Descriptor()
	// protectedareapicture.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	protectedareapicture.DefaultUpdatedAt = protectedareapictureDescUpdatedAt.Default.(func() time.Time)
	// protectedareapicture.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	protectedareapicture.UpdateDefaultUpdatedAt = protectedareapictureDescUpdatedAt.UpdateDefault.(func() time.Time)
	proxyMixin := schema.Proxy{}.Mixin()
	proxy.Policy = privacy.NewPolicies(schema.Proxy{})
	proxy.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := proxy.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	proxyMixinHooks0 := proxyMixin[0].Hooks()

	proxy.Hooks[1] = proxyMixinHooks0[0]
	proxyMixinFields0 := proxyMixin[0].Fields()
	_ = proxyMixinFields0
	proxyFields := schema.Proxy{}.Fields()
	_ = proxyFields
	// proxyDescCreatedAt is the schema descriptor for created_at field.
	proxyDescCreatedAt := proxyMixinFields0[0].Descriptor()
	// proxy.DefaultCreatedAt holds the default value on creation for the created_at field.
	proxy.DefaultCreatedAt = proxyDescCreatedAt.Default.(func() time.Time)
	// proxyDescUpdatedAt is the schema descriptor for updated_at field.
	proxyDescUpdatedAt := proxyMixinFields0[2].Descriptor()
	// proxy.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	proxy.DefaultUpdatedAt = proxyDescUpdatedAt.Default.(func() time.Time)
	// proxy.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	proxy.UpdateDefaultUpdatedAt = proxyDescUpdatedAt.UpdateDefault.(func() time.Time)
	publicationMixin := schema.Publication{}.Mixin()
	publication.Policy = privacy.NewPolicies(schema.Publication{})
	publication.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := publication.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	publicationMixinHooks0 := publicationMixin[0].Hooks()

	publication.Hooks[1] = publicationMixinHooks0[0]
	publicationMixinFields0 := publicationMixin[0].Fields()
	_ = publicationMixinFields0
	publicationFields := schema.Publication{}.Fields()
	_ = publicationFields
	// publicationDescCreatedAt is the schema descriptor for created_at field.
	publicationDescCreatedAt := publicationMixinFields0[0].Descriptor()
	// publication.DefaultCreatedAt holds the default value on creation for the created_at field.
	publication.DefaultCreatedAt = publicationDescCreatedAt.Default.(func() time.Time)
	// publicationDescUpdatedAt is the schema descriptor for updated_at field.
	publicationDescUpdatedAt := publicationMixinFields0[2].Descriptor()
	// publication.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	publication.DefaultUpdatedAt = publicationDescUpdatedAt.Default.(func() time.Time)
	// publication.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	publication.UpdateDefaultUpdatedAt = publicationDescUpdatedAt.UpdateDefault.(func() time.Time)
	publisherMixin := schema.Publisher{}.Mixin()
	publisher.Policy = privacy.NewPolicies(schema.Publisher{})
	publisher.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := publisher.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	publisherMixinHooks0 := publisherMixin[0].Hooks()

	publisher.Hooks[1] = publisherMixinHooks0[0]
	publisherMixinFields0 := publisherMixin[0].Fields()
	_ = publisherMixinFields0
	publisherFields := schema.Publisher{}.Fields()
	_ = publisherFields
	// publisherDescCreatedAt is the schema descriptor for created_at field.
	publisherDescCreatedAt := publisherMixinFields0[0].Descriptor()
	// publisher.DefaultCreatedAt holds the default value on creation for the created_at field.
	publisher.DefaultCreatedAt = publisherDescCreatedAt.Default.(func() time.Time)
	// publisherDescUpdatedAt is the schema descriptor for updated_at field.
	publisherDescUpdatedAt := publisherMixinFields0[2].Descriptor()
	// publisher.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	publisher.DefaultUpdatedAt = publisherDescUpdatedAt.Default.(func() time.Time)
	// publisher.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	publisher.UpdateDefaultUpdatedAt = publisherDescUpdatedAt.UpdateDefault.(func() time.Time)
	regionMixin := schema.Region{}.Mixin()
	region.Policy = privacy.NewPolicies(schema.Region{})
	region.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := region.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	regionMixinHooks0 := regionMixin[0].Hooks()

	region.Hooks[1] = regionMixinHooks0[0]
	regionMixinFields0 := regionMixin[0].Fields()
	_ = regionMixinFields0
	regionFields := schema.Region{}.Fields()
	_ = regionFields
	// regionDescCreatedAt is the schema descriptor for created_at field.
	regionDescCreatedAt := regionMixinFields0[0].Descriptor()
	// region.DefaultCreatedAt holds the default value on creation for the created_at field.
	region.DefaultCreatedAt = regionDescCreatedAt.Default.(func() time.Time)
	// regionDescUpdatedAt is the schema descriptor for updated_at field.
	regionDescUpdatedAt := regionMixinFields0[2].Descriptor()
	// region.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	region.DefaultUpdatedAt = regionDescUpdatedAt.Default.(func() time.Time)
	// region.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	region.UpdateDefaultUpdatedAt = regionDescUpdatedAt.UpdateDefault.(func() time.Time)
	setMixin := schema.Set{}.Mixin()
	set.Policy = privacy.NewPolicies(schema.Set{})
	set.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := set.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	setMixinHooks0 := setMixin[0].Hooks()

	set.Hooks[1] = setMixinHooks0[0]
	setMixinFields0 := setMixin[0].Fields()
	_ = setMixinFields0
	setFields := schema.Set{}.Fields()
	_ = setFields
	// setDescCreatedAt is the schema descriptor for created_at field.
	setDescCreatedAt := setMixinFields0[0].Descriptor()
	// set.DefaultCreatedAt holds the default value on creation for the created_at field.
	set.DefaultCreatedAt = setDescCreatedAt.Default.(func() time.Time)
	// setDescUpdatedAt is the schema descriptor for updated_at field.
	setDescUpdatedAt := setMixinFields0[2].Descriptor()
	// set.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	set.DefaultUpdatedAt = setDescUpdatedAt.Default.(func() time.Time)
	// set.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	set.UpdateDefaultUpdatedAt = setDescUpdatedAt.UpdateDefault.(func() time.Time)
	settlementMixin := schema.Settlement{}.Mixin()
	settlement.Policy = privacy.NewPolicies(schema.Settlement{})
	settlement.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := settlement.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	settlementMixinHooks0 := settlementMixin[0].Hooks()

	settlement.Hooks[1] = settlementMixinHooks0[0]
	settlementMixinFields0 := settlementMixin[0].Fields()
	_ = settlementMixinFields0
	settlementFields := schema.Settlement{}.Fields()
	_ = settlementFields
	// settlementDescCreatedAt is the schema descriptor for created_at field.
	settlementDescCreatedAt := settlementMixinFields0[0].Descriptor()
	// settlement.DefaultCreatedAt holds the default value on creation for the created_at field.
	settlement.DefaultCreatedAt = settlementDescCreatedAt.Default.(func() time.Time)
	// settlementDescUpdatedAt is the schema descriptor for updated_at field.
	settlementDescUpdatedAt := settlementMixinFields0[2].Descriptor()
	// settlement.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	settlement.DefaultUpdatedAt = settlementDescUpdatedAt.Default.(func() time.Time)
	// settlement.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	settlement.UpdateDefaultUpdatedAt = settlementDescUpdatedAt.UpdateDefault.(func() time.Time)
	techniqueMixin := schema.Technique{}.Mixin()
	technique.Policy = privacy.NewPolicies(schema.Technique{})
	technique.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := technique.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	techniqueMixinHooks0 := techniqueMixin[0].Hooks()

	technique.Hooks[1] = techniqueMixinHooks0[0]
	techniqueMixinFields0 := techniqueMixin[0].Fields()
	_ = techniqueMixinFields0
	techniqueFields := schema.Technique{}.Fields()
	_ = techniqueFields
	// techniqueDescCreatedAt is the schema descriptor for created_at field.
	techniqueDescCreatedAt := techniqueMixinFields0[0].Descriptor()
	// technique.DefaultCreatedAt holds the default value on creation for the created_at field.
	technique.DefaultCreatedAt = techniqueDescCreatedAt.Default.(func() time.Time)
	// techniqueDescUpdatedAt is the schema descriptor for updated_at field.
	techniqueDescUpdatedAt := techniqueMixinFields0[2].Descriptor()
	// technique.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	technique.DefaultUpdatedAt = techniqueDescUpdatedAt.Default.(func() time.Time)
	// technique.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	technique.UpdateDefaultUpdatedAt = techniqueDescUpdatedAt.UpdateDefault.(func() time.Time)
}

const (
	Version = "v0.12.4"                                         // Version of ent codegen.
	Sum     = "h1:LddPnAyxls/O7DTXZvUGDj0NZIdGSu317+aoNLJWbD8=" // Sum of ent codegen.
)
