// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
)

// Region is the model entity for the Region schema.
type Region struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Abbreviation holds the value of the "abbreviation" field.
	Abbreviation string `json:"abbreviation,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ExternalLink holds the value of the "external_link" field.
	ExternalLink string `json:"external_link,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RegionQuery when eager-loading is set.
	Edges           RegionEdges `json:"edges"`
	country_regions *int
	selectValues    sql.SelectValues
}

// RegionEdges holds the relations/edges for other nodes in the graph.
type RegionEdges struct {
	// Art holds the value of the art edge.
	Art []*Art `json:"art,omitempty"`
	// Artifacts holds the value of the artifacts edge.
	Artifacts []*Artifact `json:"artifacts,omitempty"`
	// Books holds the value of the books edge.
	Books []*Book `json:"books,omitempty"`
	// Herbaria holds the value of the herbaria edge.
	Herbaria []*Herbarium `json:"herbaria,omitempty"`
	// Petroglyphs holds the value of the petroglyphs edge.
	Petroglyphs []*Petroglyph `json:"petroglyphs,omitempty"`
	// ProtectedAreaPictures holds the value of the protected_area_pictures edge.
	ProtectedAreaPictures []*ProtectedAreaPicture `json:"protected_area_pictures,omitempty"`
	// Districts holds the value of the districts edge.
	Districts []*District `json:"districts,omitempty"`
	// Settlements holds the value of the settlements edge.
	Settlements []*Settlement `json:"settlements,omitempty"`
	// Locations holds the value of the locations edge.
	Locations []*Location `json:"locations,omitempty"`
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// KnownAsAfter holds the value of the known_as_after edge.
	KnownAsAfter []*Region `json:"known_as_after,omitempty"`
	// KnownAsBefore holds the value of the known_as_before edge.
	KnownAsBefore []*Region `json:"known_as_before,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [12]bool
	// totalCount holds the count of the edges above.
	totalCount [12]map[string]int

	namedArt                   map[string][]*Art
	namedArtifacts             map[string][]*Artifact
	namedBooks                 map[string][]*Book
	namedHerbaria              map[string][]*Herbarium
	namedPetroglyphs           map[string][]*Petroglyph
	namedProtectedAreaPictures map[string][]*ProtectedAreaPicture
	namedDistricts             map[string][]*District
	namedSettlements           map[string][]*Settlement
	namedLocations             map[string][]*Location
	namedKnownAsAfter          map[string][]*Region
	namedKnownAsBefore         map[string][]*Region
}

// ArtOrErr returns the Art value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) ArtOrErr() ([]*Art, error) {
	if e.loadedTypes[0] {
		return e.Art, nil
	}
	return nil, &NotLoadedError{edge: "art"}
}

// ArtifactsOrErr returns the Artifacts value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) ArtifactsOrErr() ([]*Artifact, error) {
	if e.loadedTypes[1] {
		return e.Artifacts, nil
	}
	return nil, &NotLoadedError{edge: "artifacts"}
}

// BooksOrErr returns the Books value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) BooksOrErr() ([]*Book, error) {
	if e.loadedTypes[2] {
		return e.Books, nil
	}
	return nil, &NotLoadedError{edge: "books"}
}

// HerbariaOrErr returns the Herbaria value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) HerbariaOrErr() ([]*Herbarium, error) {
	if e.loadedTypes[3] {
		return e.Herbaria, nil
	}
	return nil, &NotLoadedError{edge: "herbaria"}
}

// PetroglyphsOrErr returns the Petroglyphs value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) PetroglyphsOrErr() ([]*Petroglyph, error) {
	if e.loadedTypes[4] {
		return e.Petroglyphs, nil
	}
	return nil, &NotLoadedError{edge: "petroglyphs"}
}

// ProtectedAreaPicturesOrErr returns the ProtectedAreaPictures value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) ProtectedAreaPicturesOrErr() ([]*ProtectedAreaPicture, error) {
	if e.loadedTypes[5] {
		return e.ProtectedAreaPictures, nil
	}
	return nil, &NotLoadedError{edge: "protected_area_pictures"}
}

// DistrictsOrErr returns the Districts value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) DistrictsOrErr() ([]*District, error) {
	if e.loadedTypes[6] {
		return e.Districts, nil
	}
	return nil, &NotLoadedError{edge: "districts"}
}

// SettlementsOrErr returns the Settlements value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) SettlementsOrErr() ([]*Settlement, error) {
	if e.loadedTypes[7] {
		return e.Settlements, nil
	}
	return nil, &NotLoadedError{edge: "settlements"}
}

// LocationsOrErr returns the Locations value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) LocationsOrErr() ([]*Location, error) {
	if e.loadedTypes[8] {
		return e.Locations, nil
	}
	return nil, &NotLoadedError{edge: "locations"}
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RegionEdges) CountryOrErr() (*Country, error) {
	if e.loadedTypes[9] {
		if e.Country == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: country.Label}
		}
		return e.Country, nil
	}
	return nil, &NotLoadedError{edge: "country"}
}

// KnownAsAfterOrErr returns the KnownAsAfter value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) KnownAsAfterOrErr() ([]*Region, error) {
	if e.loadedTypes[10] {
		return e.KnownAsAfter, nil
	}
	return nil, &NotLoadedError{edge: "known_as_after"}
}

// KnownAsBeforeOrErr returns the KnownAsBefore value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) KnownAsBeforeOrErr() ([]*Region, error) {
	if e.loadedTypes[11] {
		return e.KnownAsBefore, nil
	}
	return nil, &NotLoadedError{edge: "known_as_before"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Region) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case region.FieldID:
			values[i] = new(sql.NullInt64)
		case region.FieldCreatedBy, region.FieldUpdatedBy, region.FieldDisplayName, region.FieldAbbreviation, region.FieldDescription, region.FieldExternalLink:
			values[i] = new(sql.NullString)
		case region.FieldCreatedAt, region.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case region.ForeignKeys[0]: // country_regions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Region fields.
func (r *Region) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case region.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case region.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case region.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				r.CreatedBy = value.String
			}
		case region.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case region.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				r.UpdatedBy = value.String
			}
		case region.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				r.DisplayName = value.String
			}
		case region.FieldAbbreviation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abbreviation", values[i])
			} else if value.Valid {
				r.Abbreviation = value.String
			}
		case region.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case region.FieldExternalLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_link", values[i])
			} else if value.Valid {
				r.ExternalLink = value.String
			}
		case region.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field country_regions", value)
			} else if value.Valid {
				r.country_regions = new(int)
				*r.country_regions = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Region.
// This includes values selected through modifiers, order, etc.
func (r *Region) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryArt queries the "art" edge of the Region entity.
func (r *Region) QueryArt() *ArtQuery {
	return NewRegionClient(r.config).QueryArt(r)
}

// QueryArtifacts queries the "artifacts" edge of the Region entity.
func (r *Region) QueryArtifacts() *ArtifactQuery {
	return NewRegionClient(r.config).QueryArtifacts(r)
}

// QueryBooks queries the "books" edge of the Region entity.
func (r *Region) QueryBooks() *BookQuery {
	return NewRegionClient(r.config).QueryBooks(r)
}

// QueryHerbaria queries the "herbaria" edge of the Region entity.
func (r *Region) QueryHerbaria() *HerbariumQuery {
	return NewRegionClient(r.config).QueryHerbaria(r)
}

// QueryPetroglyphs queries the "petroglyphs" edge of the Region entity.
func (r *Region) QueryPetroglyphs() *PetroglyphQuery {
	return NewRegionClient(r.config).QueryPetroglyphs(r)
}

// QueryProtectedAreaPictures queries the "protected_area_pictures" edge of the Region entity.
func (r *Region) QueryProtectedAreaPictures() *ProtectedAreaPictureQuery {
	return NewRegionClient(r.config).QueryProtectedAreaPictures(r)
}

// QueryDistricts queries the "districts" edge of the Region entity.
func (r *Region) QueryDistricts() *DistrictQuery {
	return NewRegionClient(r.config).QueryDistricts(r)
}

// QuerySettlements queries the "settlements" edge of the Region entity.
func (r *Region) QuerySettlements() *SettlementQuery {
	return NewRegionClient(r.config).QuerySettlements(r)
}

// QueryLocations queries the "locations" edge of the Region entity.
func (r *Region) QueryLocations() *LocationQuery {
	return NewRegionClient(r.config).QueryLocations(r)
}

// QueryCountry queries the "country" edge of the Region entity.
func (r *Region) QueryCountry() *CountryQuery {
	return NewRegionClient(r.config).QueryCountry(r)
}

// QueryKnownAsAfter queries the "known_as_after" edge of the Region entity.
func (r *Region) QueryKnownAsAfter() *RegionQuery {
	return NewRegionClient(r.config).QueryKnownAsAfter(r)
}

// QueryKnownAsBefore queries the "known_as_before" edge of the Region entity.
func (r *Region) QueryKnownAsBefore() *RegionQuery {
	return NewRegionClient(r.config).QueryKnownAsBefore(r)
}

// Update returns a builder for updating this Region.
// Note that you need to call Region.Unwrap() before calling this method if this Region
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Region) Update() *RegionUpdateOne {
	return NewRegionClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Region entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Region) Unwrap() *Region {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Region is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Region) String() string {
	var builder strings.Builder
	builder.WriteString("Region(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(r.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(r.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(r.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("abbreviation=")
	builder.WriteString(r.Abbreviation)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("external_link=")
	builder.WriteString(r.ExternalLink)
	builder.WriteByte(')')
	return builder.String()
}

// NamedArt returns the Art named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedArt(name string) ([]*Art, error) {
	if r.Edges.namedArt == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedArt[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedArt(name string, edges ...*Art) {
	if r.Edges.namedArt == nil {
		r.Edges.namedArt = make(map[string][]*Art)
	}
	if len(edges) == 0 {
		r.Edges.namedArt[name] = []*Art{}
	} else {
		r.Edges.namedArt[name] = append(r.Edges.namedArt[name], edges...)
	}
}

// NamedArtifacts returns the Artifacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedArtifacts(name string) ([]*Artifact, error) {
	if r.Edges.namedArtifacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedArtifacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedArtifacts(name string, edges ...*Artifact) {
	if r.Edges.namedArtifacts == nil {
		r.Edges.namedArtifacts = make(map[string][]*Artifact)
	}
	if len(edges) == 0 {
		r.Edges.namedArtifacts[name] = []*Artifact{}
	} else {
		r.Edges.namedArtifacts[name] = append(r.Edges.namedArtifacts[name], edges...)
	}
}

// NamedBooks returns the Books named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedBooks(name string) ([]*Book, error) {
	if r.Edges.namedBooks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedBooks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedBooks(name string, edges ...*Book) {
	if r.Edges.namedBooks == nil {
		r.Edges.namedBooks = make(map[string][]*Book)
	}
	if len(edges) == 0 {
		r.Edges.namedBooks[name] = []*Book{}
	} else {
		r.Edges.namedBooks[name] = append(r.Edges.namedBooks[name], edges...)
	}
}

// NamedHerbaria returns the Herbaria named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedHerbaria(name string) ([]*Herbarium, error) {
	if r.Edges.namedHerbaria == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedHerbaria[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedHerbaria(name string, edges ...*Herbarium) {
	if r.Edges.namedHerbaria == nil {
		r.Edges.namedHerbaria = make(map[string][]*Herbarium)
	}
	if len(edges) == 0 {
		r.Edges.namedHerbaria[name] = []*Herbarium{}
	} else {
		r.Edges.namedHerbaria[name] = append(r.Edges.namedHerbaria[name], edges...)
	}
}

// NamedPetroglyphs returns the Petroglyphs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedPetroglyphs(name string) ([]*Petroglyph, error) {
	if r.Edges.namedPetroglyphs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedPetroglyphs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedPetroglyphs(name string, edges ...*Petroglyph) {
	if r.Edges.namedPetroglyphs == nil {
		r.Edges.namedPetroglyphs = make(map[string][]*Petroglyph)
	}
	if len(edges) == 0 {
		r.Edges.namedPetroglyphs[name] = []*Petroglyph{}
	} else {
		r.Edges.namedPetroglyphs[name] = append(r.Edges.namedPetroglyphs[name], edges...)
	}
}

// NamedProtectedAreaPictures returns the ProtectedAreaPictures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedProtectedAreaPictures(name string) ([]*ProtectedAreaPicture, error) {
	if r.Edges.namedProtectedAreaPictures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedProtectedAreaPictures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedProtectedAreaPictures(name string, edges ...*ProtectedAreaPicture) {
	if r.Edges.namedProtectedAreaPictures == nil {
		r.Edges.namedProtectedAreaPictures = make(map[string][]*ProtectedAreaPicture)
	}
	if len(edges) == 0 {
		r.Edges.namedProtectedAreaPictures[name] = []*ProtectedAreaPicture{}
	} else {
		r.Edges.namedProtectedAreaPictures[name] = append(r.Edges.namedProtectedAreaPictures[name], edges...)
	}
}

// NamedDistricts returns the Districts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedDistricts(name string) ([]*District, error) {
	if r.Edges.namedDistricts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedDistricts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedDistricts(name string, edges ...*District) {
	if r.Edges.namedDistricts == nil {
		r.Edges.namedDistricts = make(map[string][]*District)
	}
	if len(edges) == 0 {
		r.Edges.namedDistricts[name] = []*District{}
	} else {
		r.Edges.namedDistricts[name] = append(r.Edges.namedDistricts[name], edges...)
	}
}

// NamedSettlements returns the Settlements named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedSettlements(name string) ([]*Settlement, error) {
	if r.Edges.namedSettlements == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedSettlements[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedSettlements(name string, edges ...*Settlement) {
	if r.Edges.namedSettlements == nil {
		r.Edges.namedSettlements = make(map[string][]*Settlement)
	}
	if len(edges) == 0 {
		r.Edges.namedSettlements[name] = []*Settlement{}
	} else {
		r.Edges.namedSettlements[name] = append(r.Edges.namedSettlements[name], edges...)
	}
}

// NamedLocations returns the Locations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedLocations(name string) ([]*Location, error) {
	if r.Edges.namedLocations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedLocations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedLocations(name string, edges ...*Location) {
	if r.Edges.namedLocations == nil {
		r.Edges.namedLocations = make(map[string][]*Location)
	}
	if len(edges) == 0 {
		r.Edges.namedLocations[name] = []*Location{}
	} else {
		r.Edges.namedLocations[name] = append(r.Edges.namedLocations[name], edges...)
	}
}

// NamedKnownAsAfter returns the KnownAsAfter named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedKnownAsAfter(name string) ([]*Region, error) {
	if r.Edges.namedKnownAsAfter == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedKnownAsAfter[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedKnownAsAfter(name string, edges ...*Region) {
	if r.Edges.namedKnownAsAfter == nil {
		r.Edges.namedKnownAsAfter = make(map[string][]*Region)
	}
	if len(edges) == 0 {
		r.Edges.namedKnownAsAfter[name] = []*Region{}
	} else {
		r.Edges.namedKnownAsAfter[name] = append(r.Edges.namedKnownAsAfter[name], edges...)
	}
}

// NamedKnownAsBefore returns the KnownAsBefore named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedKnownAsBefore(name string) ([]*Region, error) {
	if r.Edges.namedKnownAsBefore == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedKnownAsBefore[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedKnownAsBefore(name string, edges ...*Region) {
	if r.Edges.namedKnownAsBefore == nil {
		r.Edges.namedKnownAsBefore = make(map[string][]*Region)
	}
	if len(edges) == 0 {
		r.Edges.namedKnownAsBefore[name] = []*Region{}
	} else {
		r.Edges.namedKnownAsBefore[name] = append(r.Edges.namedKnownAsBefore[name], edges...)
	}
}

// Regions is a parsable slice of Region.
type Regions []*Region
