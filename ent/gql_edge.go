// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Artifact) Authors(ctx context.Context) (result []*Person, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedAuthors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.AuthorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryAuthors().All(ctx)
	}
	return result, err
}

func (a *Artifact) Mediums(ctx context.Context) (result []*Medium, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedMediums(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.MediumsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryMediums().All(ctx)
	}
	return result, err
}

func (a *Artifact) Techniques(ctx context.Context) (result []*Technique, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedTechniques(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.TechniquesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryTechniques().All(ctx)
	}
	return result, err
}

func (a *Artifact) Period(ctx context.Context) (*Period, error) {
	result, err := a.Edges.PeriodOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryPeriod().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Artifact) Projects(ctx context.Context) (result []*Project, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedProjects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.ProjectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryProjects().All(ctx)
	}
	return result, err
}

func (a *Artifact) Publications(ctx context.Context) (result []*Publication, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedPublications(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.PublicationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryPublications().All(ctx)
	}
	return result, err
}

func (a *Artifact) Holders(ctx context.Context) (result []*Holder, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedHolders(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.HoldersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryHolders().All(ctx)
	}
	return result, err
}

func (a *Artifact) CulturalAffiliation(ctx context.Context) (*Culture, error) {
	result, err := a.Edges.CulturalAffiliationOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryCulturalAffiliation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Artifact) Monument(ctx context.Context) (*Monument, error) {
	result, err := a.Edges.MonumentOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryMonument().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Artifact) Model(ctx context.Context) (*Model, error) {
	result, err := a.Edges.ModelOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryModel().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Artifact) Set(ctx context.Context) (*Set, error) {
	result, err := a.Edges.SetOrErr()
	if IsNotLoaded(err) {
		result, err = a.QuerySet().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Artifact) Location(ctx context.Context) (*Location, error) {
	result, err := a.Edges.LocationOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryLocation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Artifact) Collection(ctx context.Context) (*Collection, error) {
	result, err := a.Edges.CollectionOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryCollection().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Artifact) License(ctx context.Context) (*License, error) {
	result, err := a.Edges.LicenseOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryLicense().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Book) Authors(ctx context.Context) (result []*Person, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedAuthors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.AuthorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryAuthors().All(ctx)
	}
	return result, err
}

func (b *Book) BookGenres(ctx context.Context) (result []*BookGenre, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedBookGenres(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.BookGenresOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryBookGenres().All(ctx)
	}
	return result, err
}

func (b *Book) Collection(ctx context.Context) (*Collection, error) {
	result, err := b.Edges.CollectionOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryCollection().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Book) Holders(ctx context.Context) (result []*Holder, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedHolders(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.HoldersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryHolders().All(ctx)
	}
	return result, err
}

func (b *Book) Publisher(ctx context.Context) (*Publisher, error) {
	result, err := b.Edges.PublisherOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryPublisher().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Book) License(ctx context.Context) (*License, error) {
	result, err := b.Edges.LicenseOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryLicense().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (bg *BookGenre) Books(ctx context.Context) (result []*Book, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = bg.NamedBooks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = bg.Edges.BooksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = bg.QueryBooks().All(ctx)
	}
	return result, err
}

func (c *Category) Collections(ctx context.Context) (result []*Collection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCollections(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CollectionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCollections().All(ctx)
	}
	return result, err
}

func (c *Collection) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (c *Collection) Books(ctx context.Context) (result []*Book, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedBooks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.BooksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryBooks().All(ctx)
	}
	return result, err
}

func (c *Collection) People(ctx context.Context) (result []*Person, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedPeople(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.PeopleOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryPeople().All(ctx)
	}
	return result, err
}

func (c *Collection) Category(ctx context.Context) (*Category, error) {
	result, err := c.Edges.CategoryOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCategory().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Country) Location(ctx context.Context) (*Location, error) {
	result, err := c.Edges.LocationOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryLocation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Culture) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (d *District) Location(ctx context.Context) (*Location, error) {
	result, err := d.Edges.LocationOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryLocation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Holder) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (h *Holder) Books(ctx context.Context) (result []*Book, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedBooks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.BooksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryBooks().All(ctx)
	}
	return result, err
}

func (h *Holder) HolderResponsibilities(ctx context.Context) (result []*HolderResponsibility, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedHolderResponsibilities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.HolderResponsibilitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryHolderResponsibilities().All(ctx)
	}
	return result, err
}

func (h *Holder) Person(ctx context.Context) (*Person, error) {
	result, err := h.Edges.PersonOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryPerson().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *Holder) Organization(ctx context.Context) (*Organization, error) {
	result, err := h.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryOrganization().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (hr *HolderResponsibility) Holder(ctx context.Context) (result []*Holder, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = hr.NamedHolder(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = hr.Edges.HolderOrErr()
	}
	if IsNotLoaded(err) {
		result, err = hr.QueryHolder().All(ctx)
	}
	return result, err
}

func (l *License) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (l *License) Books(ctx context.Context) (result []*Book, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedBooks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.BooksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryBooks().All(ctx)
	}
	return result, err
}

func (l *Location) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (l *Location) Country(ctx context.Context) (*Country, error) {
	result, err := l.Edges.CountryOrErr()
	if IsNotLoaded(err) {
		result, err = l.QueryCountry().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (l *Location) District(ctx context.Context) (*District, error) {
	result, err := l.Edges.DistrictOrErr()
	if IsNotLoaded(err) {
		result, err = l.QueryDistrict().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (l *Location) Settlement(ctx context.Context) (*Settlement, error) {
	result, err := l.Edges.SettlementOrErr()
	if IsNotLoaded(err) {
		result, err = l.QuerySettlement().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (l *Location) Region(ctx context.Context) (*Region, error) {
	result, err := l.Edges.RegionOrErr()
	if IsNotLoaded(err) {
		result, err = l.QueryRegion().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Medium) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (m *Model) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (m *Monument) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (m *Monument) Sets(ctx context.Context) (result []*Set, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedSets(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.SetsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QuerySets().All(ctx)
	}
	return result, err
}

func (o *Organization) People(ctx context.Context) (result []*Person, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedPeople(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.PeopleOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryPeople().All(ctx)
	}
	return result, err
}

func (o *Organization) Holder(ctx context.Context) (*Holder, error) {
	result, err := o.Edges.HolderOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryHolder().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Organization) OrganizationType(ctx context.Context) (*OrganizationType, error) {
	result, err := o.Edges.OrganizationTypeOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryOrganizationType().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ot *OrganizationType) Organizations(ctx context.Context) (result []*Organization, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ot.NamedOrganizations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ot.Edges.OrganizationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ot.QueryOrganizations().All(ctx)
	}
	return result, err
}

func (pe *Period) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pe.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pe.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pe.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (pe *Person) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pe.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pe.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pe.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (pe *Person) Books(ctx context.Context) (result []*Book, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pe.NamedBooks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pe.Edges.BooksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pe.QueryBooks().All(ctx)
	}
	return result, err
}

func (pe *Person) Projects(ctx context.Context) (result []*Project, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pe.NamedProjects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pe.Edges.ProjectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pe.QueryProjects().All(ctx)
	}
	return result, err
}

func (pe *Person) Publications(ctx context.Context) (result []*Publication, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pe.NamedPublications(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pe.Edges.PublicationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pe.QueryPublications().All(ctx)
	}
	return result, err
}

func (pe *Person) PersonRoles(ctx context.Context) (result []*PersonRole, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pe.NamedPersonRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pe.Edges.PersonRolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pe.QueryPersonRoles().All(ctx)
	}
	return result, err
}

func (pe *Person) Holder(ctx context.Context) (*Holder, error) {
	result, err := pe.Edges.HolderOrErr()
	if IsNotLoaded(err) {
		result, err = pe.QueryHolder().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pe *Person) Affiliation(ctx context.Context) (*Organization, error) {
	result, err := pe.Edges.AffiliationOrErr()
	if IsNotLoaded(err) {
		result, err = pe.QueryAffiliation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pe *Person) Collections(ctx context.Context) (*Collection, error) {
	result, err := pe.Edges.CollectionsOrErr()
	if IsNotLoaded(err) {
		result, err = pe.QueryCollections().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *PersonRole) Person(ctx context.Context) (result []*Person, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedPerson(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.PersonOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryPerson().All(ctx)
	}
	return result, err
}

func (pr *Project) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (pr *Project) Team(ctx context.Context) (result []*Person, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedTeam(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.TeamOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryTeam().All(ctx)
	}
	return result, err
}

func (pr *Project) ProjectType(ctx context.Context) (*ProjectType, error) {
	result, err := pr.Edges.ProjectTypeOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryProjectType().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pt *ProjectType) Projects(ctx context.Context) (result []*Project, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pt.NamedProjects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pt.Edges.ProjectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pt.QueryProjects().All(ctx)
	}
	return result, err
}

func (pu *Publication) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pu.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pu.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pu.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (pu *Publication) Authors(ctx context.Context) (result []*Person, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pu.NamedAuthors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pu.Edges.AuthorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pu.QueryAuthors().All(ctx)
	}
	return result, err
}

func (pu *Publisher) Books(ctx context.Context) (result []*Book, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pu.NamedBooks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pu.Edges.BooksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pu.QueryBooks().All(ctx)
	}
	return result, err
}

func (r *Region) Location(ctx context.Context) (*Location, error) {
	result, err := r.Edges.LocationOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryLocation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Set) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryArtifacts().All(ctx)
	}
	return result, err
}

func (s *Set) Monuments(ctx context.Context) (result []*Monument, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedMonuments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.MonumentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryMonuments().All(ctx)
	}
	return result, err
}

func (s *Settlement) Location(ctx context.Context) (*Location, error) {
	result, err := s.Edges.LocationOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryLocation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Technique) Artifacts(ctx context.Context) (result []*Artifact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedArtifacts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ArtifactsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryArtifacts().All(ctx)
	}
	return result, err
}
