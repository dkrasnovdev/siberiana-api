// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/favourite"
	"github.com/dkrasnovdev/siberiana-api/ent/personal"
	"github.com/dkrasnovdev/siberiana-api/ent/proxy"
)

// ProxyCreate is the builder for creating a Proxy entity.
type ProxyCreate struct {
	config
	mutation *ProxyMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (pc *ProxyCreate) SetType(pr proxy.Type) *ProxyCreate {
	pc.mutation.SetType(pr)
	return pc
}

// SetRefID sets the "ref_id" field.
func (pc *ProxyCreate) SetRefID(s string) *ProxyCreate {
	pc.mutation.SetRefID(s)
	return pc
}

// SetURL sets the "url" field.
func (pc *ProxyCreate) SetURL(s string) *ProxyCreate {
	pc.mutation.SetURL(s)
	return pc
}

// SetFavouriteID sets the "favourite" edge to the Favourite entity by ID.
func (pc *ProxyCreate) SetFavouriteID(id int) *ProxyCreate {
	pc.mutation.SetFavouriteID(id)
	return pc
}

// SetNillableFavouriteID sets the "favourite" edge to the Favourite entity by ID if the given value is not nil.
func (pc *ProxyCreate) SetNillableFavouriteID(id *int) *ProxyCreate {
	if id != nil {
		pc = pc.SetFavouriteID(*id)
	}
	return pc
}

// SetFavourite sets the "favourite" edge to the Favourite entity.
func (pc *ProxyCreate) SetFavourite(f *Favourite) *ProxyCreate {
	return pc.SetFavouriteID(f.ID)
}

// SetPersonalID sets the "personal" edge to the Personal entity by ID.
func (pc *ProxyCreate) SetPersonalID(id int) *ProxyCreate {
	pc.mutation.SetPersonalID(id)
	return pc
}

// SetNillablePersonalID sets the "personal" edge to the Personal entity by ID if the given value is not nil.
func (pc *ProxyCreate) SetNillablePersonalID(id *int) *ProxyCreate {
	if id != nil {
		pc = pc.SetPersonalID(*id)
	}
	return pc
}

// SetPersonal sets the "personal" edge to the Personal entity.
func (pc *ProxyCreate) SetPersonal(p *Personal) *ProxyCreate {
	return pc.SetPersonalID(p.ID)
}

// Mutation returns the ProxyMutation object of the builder.
func (pc *ProxyCreate) Mutation() *ProxyMutation {
	return pc.mutation
}

// Save creates the Proxy in the database.
func (pc *ProxyCreate) Save(ctx context.Context) (*Proxy, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProxyCreate) SaveX(ctx context.Context) *Proxy {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProxyCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProxyCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProxyCreate) check() error {
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Proxy.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := proxy.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Proxy.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.RefID(); !ok {
		return &ValidationError{Name: "ref_id", err: errors.New(`ent: missing required field "Proxy.ref_id"`)}
	}
	if _, ok := pc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Proxy.url"`)}
	}
	return nil
}

func (pc *ProxyCreate) sqlSave(ctx context.Context) (*Proxy, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProxyCreate) createSpec() (*Proxy, *sqlgraph.CreateSpec) {
	var (
		_node = &Proxy{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(proxy.Table, sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(proxy.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.RefID(); ok {
		_spec.SetField(proxy.FieldRefID, field.TypeString, value)
		_node.RefID = value
	}
	if value, ok := pc.mutation.URL(); ok {
		_spec.SetField(proxy.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := pc.mutation.FavouriteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.FavouriteTable,
			Columns: []string{proxy.FavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.favourite_proxies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PersonalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.PersonalTable,
			Columns: []string{proxy.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.personal_proxies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProxyCreateBulk is the builder for creating many Proxy entities in bulk.
type ProxyCreateBulk struct {
	config
	err      error
	builders []*ProxyCreate
}

// Save creates the Proxy entities in the database.
func (pcb *ProxyCreateBulk) Save(ctx context.Context) ([]*Proxy, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Proxy, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProxyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProxyCreateBulk) SaveX(ctx context.Context) []*Proxy {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProxyCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProxyCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
