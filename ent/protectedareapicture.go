// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/license"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedarea"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
	"github.com/dkrasnovdev/siberiana-api/internal/ent/types"
)

// ProtectedAreaPicture is the model entity for the ProtectedAreaPicture schema.
type ProtectedAreaPicture struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Abbreviation holds the value of the "abbreviation" field.
	Abbreviation string `json:"abbreviation,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ExternalLink holds the value of the "external_link" field.
	ExternalLink string `json:"external_link,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// PrimaryImageURL holds the value of the "primary_image_url" field.
	PrimaryImageURL string `json:"primary_image_url,omitempty"`
	// AdditionalImagesUrls holds the value of the "additional_images_urls" field.
	AdditionalImagesUrls []string `json:"additional_images_urls,omitempty"`
	// ShootingDate holds the value of the "shooting_date" field.
	ShootingDate time.Time `json:"shooting_date,omitempty"`
	// Geometry holds the value of the "geometry" field.
	Geometry *types.Geometry `json:"geometry,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProtectedAreaPictureQuery when eager-loading is set.
	Edges                                  ProtectedAreaPictureEdges `json:"edges"`
	collection_protected_area_pictures     *int
	license_protected_area_pictures        *int
	location_protected_area_pictures       *int
	protected_area_protected_area_pictures *int
	selectValues                           sql.SelectValues
}

// ProtectedAreaPictureEdges holds the relations/edges for other nodes in the graph.
type ProtectedAreaPictureEdges struct {
	// Collection holds the value of the collection edge.
	Collection *Collection `json:"collection,omitempty"`
	// ProtectedArea holds the value of the protected_area edge.
	ProtectedArea *ProtectedArea `json:"protected_area,omitempty"`
	// Location holds the value of the location edge.
	Location *Location `json:"location,omitempty"`
	// License holds the value of the license edge.
	License *License `json:"license,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int
}

// CollectionOrErr returns the Collection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProtectedAreaPictureEdges) CollectionOrErr() (*Collection, error) {
	if e.loadedTypes[0] {
		if e.Collection == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: collection.Label}
		}
		return e.Collection, nil
	}
	return nil, &NotLoadedError{edge: "collection"}
}

// ProtectedAreaOrErr returns the ProtectedArea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProtectedAreaPictureEdges) ProtectedAreaOrErr() (*ProtectedArea, error) {
	if e.loadedTypes[1] {
		if e.ProtectedArea == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: protectedarea.Label}
		}
		return e.ProtectedArea, nil
	}
	return nil, &NotLoadedError{edge: "protected_area"}
}

// LocationOrErr returns the Location value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProtectedAreaPictureEdges) LocationOrErr() (*Location, error) {
	if e.loadedTypes[2] {
		if e.Location == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: location.Label}
		}
		return e.Location, nil
	}
	return nil, &NotLoadedError{edge: "location"}
}

// LicenseOrErr returns the License value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProtectedAreaPictureEdges) LicenseOrErr() (*License, error) {
	if e.loadedTypes[3] {
		if e.License == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: license.Label}
		}
		return e.License, nil
	}
	return nil, &NotLoadedError{edge: "license"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProtectedAreaPicture) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case protectedareapicture.FieldGeometry:
			values[i] = &sql.NullScanner{S: new(types.Geometry)}
		case protectedareapicture.FieldAdditionalImagesUrls:
			values[i] = new([]byte)
		case protectedareapicture.FieldID:
			values[i] = new(sql.NullInt64)
		case protectedareapicture.FieldCreatedBy, protectedareapicture.FieldUpdatedBy, protectedareapicture.FieldDisplayName, protectedareapicture.FieldAbbreviation, protectedareapicture.FieldDescription, protectedareapicture.FieldExternalLink, protectedareapicture.FieldSlug, protectedareapicture.FieldPrimaryImageURL:
			values[i] = new(sql.NullString)
		case protectedareapicture.FieldCreatedAt, protectedareapicture.FieldUpdatedAt, protectedareapicture.FieldShootingDate:
			values[i] = new(sql.NullTime)
		case protectedareapicture.ForeignKeys[0]: // collection_protected_area_pictures
			values[i] = new(sql.NullInt64)
		case protectedareapicture.ForeignKeys[1]: // license_protected_area_pictures
			values[i] = new(sql.NullInt64)
		case protectedareapicture.ForeignKeys[2]: // location_protected_area_pictures
			values[i] = new(sql.NullInt64)
		case protectedareapicture.ForeignKeys[3]: // protected_area_protected_area_pictures
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProtectedAreaPicture fields.
func (pap *ProtectedAreaPicture) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case protectedareapicture.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pap.ID = int(value.Int64)
		case protectedareapicture.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pap.CreatedAt = value.Time
			}
		case protectedareapicture.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pap.CreatedBy = value.String
			}
		case protectedareapicture.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pap.UpdatedAt = value.Time
			}
		case protectedareapicture.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pap.UpdatedBy = value.String
			}
		case protectedareapicture.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				pap.DisplayName = value.String
			}
		case protectedareapicture.FieldAbbreviation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abbreviation", values[i])
			} else if value.Valid {
				pap.Abbreviation = value.String
			}
		case protectedareapicture.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pap.Description = value.String
			}
		case protectedareapicture.FieldExternalLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_link", values[i])
			} else if value.Valid {
				pap.ExternalLink = value.String
			}
		case protectedareapicture.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				pap.Slug = value.String
			}
		case protectedareapicture.FieldPrimaryImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_image_url", values[i])
			} else if value.Valid {
				pap.PrimaryImageURL = value.String
			}
		case protectedareapicture.FieldAdditionalImagesUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field additional_images_urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pap.AdditionalImagesUrls); err != nil {
					return fmt.Errorf("unmarshal field additional_images_urls: %w", err)
				}
			}
		case protectedareapicture.FieldShootingDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field shooting_date", values[i])
			} else if value.Valid {
				pap.ShootingDate = value.Time
			}
		case protectedareapicture.FieldGeometry:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field geometry", values[i])
			} else if value.Valid {
				pap.Geometry = new(types.Geometry)
				*pap.Geometry = *value.S.(*types.Geometry)
			}
		case protectedareapicture.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field collection_protected_area_pictures", value)
			} else if value.Valid {
				pap.collection_protected_area_pictures = new(int)
				*pap.collection_protected_area_pictures = int(value.Int64)
			}
		case protectedareapicture.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field license_protected_area_pictures", value)
			} else if value.Valid {
				pap.license_protected_area_pictures = new(int)
				*pap.license_protected_area_pictures = int(value.Int64)
			}
		case protectedareapicture.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field location_protected_area_pictures", value)
			} else if value.Valid {
				pap.location_protected_area_pictures = new(int)
				*pap.location_protected_area_pictures = int(value.Int64)
			}
		case protectedareapicture.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field protected_area_protected_area_pictures", value)
			} else if value.Valid {
				pap.protected_area_protected_area_pictures = new(int)
				*pap.protected_area_protected_area_pictures = int(value.Int64)
			}
		default:
			pap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProtectedAreaPicture.
// This includes values selected through modifiers, order, etc.
func (pap *ProtectedAreaPicture) Value(name string) (ent.Value, error) {
	return pap.selectValues.Get(name)
}

// QueryCollection queries the "collection" edge of the ProtectedAreaPicture entity.
func (pap *ProtectedAreaPicture) QueryCollection() *CollectionQuery {
	return NewProtectedAreaPictureClient(pap.config).QueryCollection(pap)
}

// QueryProtectedArea queries the "protected_area" edge of the ProtectedAreaPicture entity.
func (pap *ProtectedAreaPicture) QueryProtectedArea() *ProtectedAreaQuery {
	return NewProtectedAreaPictureClient(pap.config).QueryProtectedArea(pap)
}

// QueryLocation queries the "location" edge of the ProtectedAreaPicture entity.
func (pap *ProtectedAreaPicture) QueryLocation() *LocationQuery {
	return NewProtectedAreaPictureClient(pap.config).QueryLocation(pap)
}

// QueryLicense queries the "license" edge of the ProtectedAreaPicture entity.
func (pap *ProtectedAreaPicture) QueryLicense() *LicenseQuery {
	return NewProtectedAreaPictureClient(pap.config).QueryLicense(pap)
}

// Update returns a builder for updating this ProtectedAreaPicture.
// Note that you need to call ProtectedAreaPicture.Unwrap() before calling this method if this ProtectedAreaPicture
// was returned from a transaction, and the transaction was committed or rolled back.
func (pap *ProtectedAreaPicture) Update() *ProtectedAreaPictureUpdateOne {
	return NewProtectedAreaPictureClient(pap.config).UpdateOne(pap)
}

// Unwrap unwraps the ProtectedAreaPicture entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pap *ProtectedAreaPicture) Unwrap() *ProtectedAreaPicture {
	_tx, ok := pap.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProtectedAreaPicture is not a transactional entity")
	}
	pap.config.driver = _tx.drv
	return pap
}

// String implements the fmt.Stringer.
func (pap *ProtectedAreaPicture) String() string {
	var builder strings.Builder
	builder.WriteString("ProtectedAreaPicture(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pap.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pap.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pap.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pap.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(pap.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("abbreviation=")
	builder.WriteString(pap.Abbreviation)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pap.Description)
	builder.WriteString(", ")
	builder.WriteString("external_link=")
	builder.WriteString(pap.ExternalLink)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(pap.Slug)
	builder.WriteString(", ")
	builder.WriteString("primary_image_url=")
	builder.WriteString(pap.PrimaryImageURL)
	builder.WriteString(", ")
	builder.WriteString("additional_images_urls=")
	builder.WriteString(fmt.Sprintf("%v", pap.AdditionalImagesUrls))
	builder.WriteString(", ")
	builder.WriteString("shooting_date=")
	builder.WriteString(pap.ShootingDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pap.Geometry; v != nil {
		builder.WriteString("geometry=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ProtectedAreaPictures is a parsable slice of ProtectedAreaPicture.
type ProtectedAreaPictures []*ProtectedAreaPicture
