// Code generated by ent, DO NOT EDIT.

package art

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldUpdatedBy, v))
}

// Dating applies equality check predicate on the "dating" field. It's identical to DatingEQ.
func Dating(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDating, v))
}

// DatingStart applies equality check predicate on the "dating_start" field. It's identical to DatingStartEQ.
func DatingStart(v int) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDatingStart, v))
}

// DatingEnd applies equality check predicate on the "dating_end" field. It's identical to DatingEndEQ.
func DatingEnd(v int) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDatingEnd, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDisplayName, v))
}

// Abbreviation applies equality check predicate on the "abbreviation" field. It's identical to AbbreviationEQ.
func Abbreviation(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldAbbreviation, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDescription, v))
}

// ExternalLink applies equality check predicate on the "external_link" field. It's identical to ExternalLinkEQ.
func ExternalLink(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldExternalLink, v))
}

// PrimaryImageURL applies equality check predicate on the "primary_image_url" field. It's identical to PrimaryImageURLEQ.
func PrimaryImageURL(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldPrimaryImageURL, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v float64) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldHeight, v))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v float64) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldWidth, v))
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v float64) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldLength, v))
}

// Depth applies equality check predicate on the "depth" field. It's identical to DepthEQ.
func Depth(v float64) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDepth, v))
}

// Diameter applies equality check predicate on the "diameter" field. It's identical to DiameterEQ.
func Diameter(v float64) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDiameter, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldWeight, v))
}

// Dimensions applies equality check predicate on the "dimensions" field. It's identical to DimensionsEQ.
func Dimensions(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDimensions, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldNumber, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Art {
	return predicate.Art(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Art {
	return predicate.Art(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Art {
	return predicate.Art(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Art {
	return predicate.Art(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Art {
	return predicate.Art(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Art {
	return predicate.Art(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DatingEQ applies the EQ predicate on the "dating" field.
func DatingEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDating, v))
}

// DatingNEQ applies the NEQ predicate on the "dating" field.
func DatingNEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldDating, v))
}

// DatingIn applies the In predicate on the "dating" field.
func DatingIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldDating, vs...))
}

// DatingNotIn applies the NotIn predicate on the "dating" field.
func DatingNotIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldDating, vs...))
}

// DatingGT applies the GT predicate on the "dating" field.
func DatingGT(v string) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldDating, v))
}

// DatingGTE applies the GTE predicate on the "dating" field.
func DatingGTE(v string) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldDating, v))
}

// DatingLT applies the LT predicate on the "dating" field.
func DatingLT(v string) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldDating, v))
}

// DatingLTE applies the LTE predicate on the "dating" field.
func DatingLTE(v string) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldDating, v))
}

// DatingContains applies the Contains predicate on the "dating" field.
func DatingContains(v string) predicate.Art {
	return predicate.Art(sql.FieldContains(FieldDating, v))
}

// DatingHasPrefix applies the HasPrefix predicate on the "dating" field.
func DatingHasPrefix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasPrefix(FieldDating, v))
}

// DatingHasSuffix applies the HasSuffix predicate on the "dating" field.
func DatingHasSuffix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasSuffix(FieldDating, v))
}

// DatingIsNil applies the IsNil predicate on the "dating" field.
func DatingIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldDating))
}

// DatingNotNil applies the NotNil predicate on the "dating" field.
func DatingNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldDating))
}

// DatingEqualFold applies the EqualFold predicate on the "dating" field.
func DatingEqualFold(v string) predicate.Art {
	return predicate.Art(sql.FieldEqualFold(FieldDating, v))
}

// DatingContainsFold applies the ContainsFold predicate on the "dating" field.
func DatingContainsFold(v string) predicate.Art {
	return predicate.Art(sql.FieldContainsFold(FieldDating, v))
}

// DatingStartEQ applies the EQ predicate on the "dating_start" field.
func DatingStartEQ(v int) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDatingStart, v))
}

// DatingStartNEQ applies the NEQ predicate on the "dating_start" field.
func DatingStartNEQ(v int) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldDatingStart, v))
}

// DatingStartIn applies the In predicate on the "dating_start" field.
func DatingStartIn(vs ...int) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldDatingStart, vs...))
}

// DatingStartNotIn applies the NotIn predicate on the "dating_start" field.
func DatingStartNotIn(vs ...int) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldDatingStart, vs...))
}

// DatingStartGT applies the GT predicate on the "dating_start" field.
func DatingStartGT(v int) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldDatingStart, v))
}

// DatingStartGTE applies the GTE predicate on the "dating_start" field.
func DatingStartGTE(v int) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldDatingStart, v))
}

// DatingStartLT applies the LT predicate on the "dating_start" field.
func DatingStartLT(v int) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldDatingStart, v))
}

// DatingStartLTE applies the LTE predicate on the "dating_start" field.
func DatingStartLTE(v int) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldDatingStart, v))
}

// DatingStartIsNil applies the IsNil predicate on the "dating_start" field.
func DatingStartIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldDatingStart))
}

// DatingStartNotNil applies the NotNil predicate on the "dating_start" field.
func DatingStartNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldDatingStart))
}

// DatingEndEQ applies the EQ predicate on the "dating_end" field.
func DatingEndEQ(v int) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDatingEnd, v))
}

// DatingEndNEQ applies the NEQ predicate on the "dating_end" field.
func DatingEndNEQ(v int) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldDatingEnd, v))
}

// DatingEndIn applies the In predicate on the "dating_end" field.
func DatingEndIn(vs ...int) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldDatingEnd, vs...))
}

// DatingEndNotIn applies the NotIn predicate on the "dating_end" field.
func DatingEndNotIn(vs ...int) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldDatingEnd, vs...))
}

// DatingEndGT applies the GT predicate on the "dating_end" field.
func DatingEndGT(v int) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldDatingEnd, v))
}

// DatingEndGTE applies the GTE predicate on the "dating_end" field.
func DatingEndGTE(v int) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldDatingEnd, v))
}

// DatingEndLT applies the LT predicate on the "dating_end" field.
func DatingEndLT(v int) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldDatingEnd, v))
}

// DatingEndLTE applies the LTE predicate on the "dating_end" field.
func DatingEndLTE(v int) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldDatingEnd, v))
}

// DatingEndIsNil applies the IsNil predicate on the "dating_end" field.
func DatingEndIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldDatingEnd))
}

// DatingEndNotNil applies the NotNil predicate on the "dating_end" field.
func DatingEndNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldDatingEnd))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Art {
	return predicate.Art(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Art {
	return predicate.Art(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Art {
	return predicate.Art(sql.FieldContainsFold(FieldDisplayName, v))
}

// AbbreviationEQ applies the EQ predicate on the "abbreviation" field.
func AbbreviationEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldAbbreviation, v))
}

// AbbreviationNEQ applies the NEQ predicate on the "abbreviation" field.
func AbbreviationNEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldAbbreviation, v))
}

// AbbreviationIn applies the In predicate on the "abbreviation" field.
func AbbreviationIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldAbbreviation, vs...))
}

// AbbreviationNotIn applies the NotIn predicate on the "abbreviation" field.
func AbbreviationNotIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldAbbreviation, vs...))
}

// AbbreviationGT applies the GT predicate on the "abbreviation" field.
func AbbreviationGT(v string) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldAbbreviation, v))
}

// AbbreviationGTE applies the GTE predicate on the "abbreviation" field.
func AbbreviationGTE(v string) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldAbbreviation, v))
}

// AbbreviationLT applies the LT predicate on the "abbreviation" field.
func AbbreviationLT(v string) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldAbbreviation, v))
}

// AbbreviationLTE applies the LTE predicate on the "abbreviation" field.
func AbbreviationLTE(v string) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldAbbreviation, v))
}

// AbbreviationContains applies the Contains predicate on the "abbreviation" field.
func AbbreviationContains(v string) predicate.Art {
	return predicate.Art(sql.FieldContains(FieldAbbreviation, v))
}

// AbbreviationHasPrefix applies the HasPrefix predicate on the "abbreviation" field.
func AbbreviationHasPrefix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasPrefix(FieldAbbreviation, v))
}

// AbbreviationHasSuffix applies the HasSuffix predicate on the "abbreviation" field.
func AbbreviationHasSuffix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasSuffix(FieldAbbreviation, v))
}

// AbbreviationIsNil applies the IsNil predicate on the "abbreviation" field.
func AbbreviationIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldAbbreviation))
}

// AbbreviationNotNil applies the NotNil predicate on the "abbreviation" field.
func AbbreviationNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldAbbreviation))
}

// AbbreviationEqualFold applies the EqualFold predicate on the "abbreviation" field.
func AbbreviationEqualFold(v string) predicate.Art {
	return predicate.Art(sql.FieldEqualFold(FieldAbbreviation, v))
}

// AbbreviationContainsFold applies the ContainsFold predicate on the "abbreviation" field.
func AbbreviationContainsFold(v string) predicate.Art {
	return predicate.Art(sql.FieldContainsFold(FieldAbbreviation, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Art {
	return predicate.Art(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Art {
	return predicate.Art(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Art {
	return predicate.Art(sql.FieldContainsFold(FieldDescription, v))
}

// ExternalLinkEQ applies the EQ predicate on the "external_link" field.
func ExternalLinkEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldExternalLink, v))
}

// ExternalLinkNEQ applies the NEQ predicate on the "external_link" field.
func ExternalLinkNEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldExternalLink, v))
}

// ExternalLinkIn applies the In predicate on the "external_link" field.
func ExternalLinkIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldExternalLink, vs...))
}

// ExternalLinkNotIn applies the NotIn predicate on the "external_link" field.
func ExternalLinkNotIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldExternalLink, vs...))
}

// ExternalLinkGT applies the GT predicate on the "external_link" field.
func ExternalLinkGT(v string) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldExternalLink, v))
}

// ExternalLinkGTE applies the GTE predicate on the "external_link" field.
func ExternalLinkGTE(v string) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldExternalLink, v))
}

// ExternalLinkLT applies the LT predicate on the "external_link" field.
func ExternalLinkLT(v string) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldExternalLink, v))
}

// ExternalLinkLTE applies the LTE predicate on the "external_link" field.
func ExternalLinkLTE(v string) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldExternalLink, v))
}

// ExternalLinkContains applies the Contains predicate on the "external_link" field.
func ExternalLinkContains(v string) predicate.Art {
	return predicate.Art(sql.FieldContains(FieldExternalLink, v))
}

// ExternalLinkHasPrefix applies the HasPrefix predicate on the "external_link" field.
func ExternalLinkHasPrefix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasPrefix(FieldExternalLink, v))
}

// ExternalLinkHasSuffix applies the HasSuffix predicate on the "external_link" field.
func ExternalLinkHasSuffix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasSuffix(FieldExternalLink, v))
}

// ExternalLinkIsNil applies the IsNil predicate on the "external_link" field.
func ExternalLinkIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldExternalLink))
}

// ExternalLinkNotNil applies the NotNil predicate on the "external_link" field.
func ExternalLinkNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldExternalLink))
}

// ExternalLinkEqualFold applies the EqualFold predicate on the "external_link" field.
func ExternalLinkEqualFold(v string) predicate.Art {
	return predicate.Art(sql.FieldEqualFold(FieldExternalLink, v))
}

// ExternalLinkContainsFold applies the ContainsFold predicate on the "external_link" field.
func ExternalLinkContainsFold(v string) predicate.Art {
	return predicate.Art(sql.FieldContainsFold(FieldExternalLink, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldStatus))
}

// PrimaryImageURLEQ applies the EQ predicate on the "primary_image_url" field.
func PrimaryImageURLEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldPrimaryImageURL, v))
}

// PrimaryImageURLNEQ applies the NEQ predicate on the "primary_image_url" field.
func PrimaryImageURLNEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldPrimaryImageURL, v))
}

// PrimaryImageURLIn applies the In predicate on the "primary_image_url" field.
func PrimaryImageURLIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldPrimaryImageURL, vs...))
}

// PrimaryImageURLNotIn applies the NotIn predicate on the "primary_image_url" field.
func PrimaryImageURLNotIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldPrimaryImageURL, vs...))
}

// PrimaryImageURLGT applies the GT predicate on the "primary_image_url" field.
func PrimaryImageURLGT(v string) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldPrimaryImageURL, v))
}

// PrimaryImageURLGTE applies the GTE predicate on the "primary_image_url" field.
func PrimaryImageURLGTE(v string) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldPrimaryImageURL, v))
}

// PrimaryImageURLLT applies the LT predicate on the "primary_image_url" field.
func PrimaryImageURLLT(v string) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldPrimaryImageURL, v))
}

// PrimaryImageURLLTE applies the LTE predicate on the "primary_image_url" field.
func PrimaryImageURLLTE(v string) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldPrimaryImageURL, v))
}

// PrimaryImageURLContains applies the Contains predicate on the "primary_image_url" field.
func PrimaryImageURLContains(v string) predicate.Art {
	return predicate.Art(sql.FieldContains(FieldPrimaryImageURL, v))
}

// PrimaryImageURLHasPrefix applies the HasPrefix predicate on the "primary_image_url" field.
func PrimaryImageURLHasPrefix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasPrefix(FieldPrimaryImageURL, v))
}

// PrimaryImageURLHasSuffix applies the HasSuffix predicate on the "primary_image_url" field.
func PrimaryImageURLHasSuffix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasSuffix(FieldPrimaryImageURL, v))
}

// PrimaryImageURLIsNil applies the IsNil predicate on the "primary_image_url" field.
func PrimaryImageURLIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldPrimaryImageURL))
}

// PrimaryImageURLNotNil applies the NotNil predicate on the "primary_image_url" field.
func PrimaryImageURLNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldPrimaryImageURL))
}

// PrimaryImageURLEqualFold applies the EqualFold predicate on the "primary_image_url" field.
func PrimaryImageURLEqualFold(v string) predicate.Art {
	return predicate.Art(sql.FieldEqualFold(FieldPrimaryImageURL, v))
}

// PrimaryImageURLContainsFold applies the ContainsFold predicate on the "primary_image_url" field.
func PrimaryImageURLContainsFold(v string) predicate.Art {
	return predicate.Art(sql.FieldContainsFold(FieldPrimaryImageURL, v))
}

// AdditionalImagesUrlsIsNil applies the IsNil predicate on the "additional_images_urls" field.
func AdditionalImagesUrlsIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldAdditionalImagesUrls))
}

// AdditionalImagesUrlsNotNil applies the NotNil predicate on the "additional_images_urls" field.
func AdditionalImagesUrlsNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldAdditionalImagesUrls))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v float64) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v float64) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...float64) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...float64) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v float64) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v float64) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v float64) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v float64) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldHeight, v))
}

// HeightIsNil applies the IsNil predicate on the "height" field.
func HeightIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldHeight))
}

// HeightNotNil applies the NotNil predicate on the "height" field.
func HeightNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldHeight))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v float64) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v float64) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...float64) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...float64) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v float64) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v float64) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v float64) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v float64) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldWidth, v))
}

// WidthIsNil applies the IsNil predicate on the "width" field.
func WidthIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldWidth))
}

// WidthNotNil applies the NotNil predicate on the "width" field.
func WidthNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldWidth))
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v float64) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldLength, v))
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v float64) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldLength, v))
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...float64) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldLength, vs...))
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...float64) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldLength, vs...))
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v float64) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldLength, v))
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v float64) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldLength, v))
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v float64) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldLength, v))
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v float64) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldLength, v))
}

// LengthIsNil applies the IsNil predicate on the "length" field.
func LengthIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldLength))
}

// LengthNotNil applies the NotNil predicate on the "length" field.
func LengthNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldLength))
}

// DepthEQ applies the EQ predicate on the "depth" field.
func DepthEQ(v float64) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDepth, v))
}

// DepthNEQ applies the NEQ predicate on the "depth" field.
func DepthNEQ(v float64) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldDepth, v))
}

// DepthIn applies the In predicate on the "depth" field.
func DepthIn(vs ...float64) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldDepth, vs...))
}

// DepthNotIn applies the NotIn predicate on the "depth" field.
func DepthNotIn(vs ...float64) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldDepth, vs...))
}

// DepthGT applies the GT predicate on the "depth" field.
func DepthGT(v float64) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldDepth, v))
}

// DepthGTE applies the GTE predicate on the "depth" field.
func DepthGTE(v float64) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldDepth, v))
}

// DepthLT applies the LT predicate on the "depth" field.
func DepthLT(v float64) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldDepth, v))
}

// DepthLTE applies the LTE predicate on the "depth" field.
func DepthLTE(v float64) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldDepth, v))
}

// DepthIsNil applies the IsNil predicate on the "depth" field.
func DepthIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldDepth))
}

// DepthNotNil applies the NotNil predicate on the "depth" field.
func DepthNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldDepth))
}

// DiameterEQ applies the EQ predicate on the "diameter" field.
func DiameterEQ(v float64) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDiameter, v))
}

// DiameterNEQ applies the NEQ predicate on the "diameter" field.
func DiameterNEQ(v float64) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldDiameter, v))
}

// DiameterIn applies the In predicate on the "diameter" field.
func DiameterIn(vs ...float64) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldDiameter, vs...))
}

// DiameterNotIn applies the NotIn predicate on the "diameter" field.
func DiameterNotIn(vs ...float64) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldDiameter, vs...))
}

// DiameterGT applies the GT predicate on the "diameter" field.
func DiameterGT(v float64) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldDiameter, v))
}

// DiameterGTE applies the GTE predicate on the "diameter" field.
func DiameterGTE(v float64) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldDiameter, v))
}

// DiameterLT applies the LT predicate on the "diameter" field.
func DiameterLT(v float64) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldDiameter, v))
}

// DiameterLTE applies the LTE predicate on the "diameter" field.
func DiameterLTE(v float64) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldDiameter, v))
}

// DiameterIsNil applies the IsNil predicate on the "diameter" field.
func DiameterIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldDiameter))
}

// DiameterNotNil applies the NotNil predicate on the "diameter" field.
func DiameterNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldDiameter))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v string) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v string) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v string) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v string) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldWeight, v))
}

// WeightContains applies the Contains predicate on the "weight" field.
func WeightContains(v string) predicate.Art {
	return predicate.Art(sql.FieldContains(FieldWeight, v))
}

// WeightHasPrefix applies the HasPrefix predicate on the "weight" field.
func WeightHasPrefix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasPrefix(FieldWeight, v))
}

// WeightHasSuffix applies the HasSuffix predicate on the "weight" field.
func WeightHasSuffix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasSuffix(FieldWeight, v))
}

// WeightIsNil applies the IsNil predicate on the "weight" field.
func WeightIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldWeight))
}

// WeightNotNil applies the NotNil predicate on the "weight" field.
func WeightNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldWeight))
}

// WeightEqualFold applies the EqualFold predicate on the "weight" field.
func WeightEqualFold(v string) predicate.Art {
	return predicate.Art(sql.FieldEqualFold(FieldWeight, v))
}

// WeightContainsFold applies the ContainsFold predicate on the "weight" field.
func WeightContainsFold(v string) predicate.Art {
	return predicate.Art(sql.FieldContainsFold(FieldWeight, v))
}

// DimensionsEQ applies the EQ predicate on the "dimensions" field.
func DimensionsEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldDimensions, v))
}

// DimensionsNEQ applies the NEQ predicate on the "dimensions" field.
func DimensionsNEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldDimensions, v))
}

// DimensionsIn applies the In predicate on the "dimensions" field.
func DimensionsIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldDimensions, vs...))
}

// DimensionsNotIn applies the NotIn predicate on the "dimensions" field.
func DimensionsNotIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldDimensions, vs...))
}

// DimensionsGT applies the GT predicate on the "dimensions" field.
func DimensionsGT(v string) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldDimensions, v))
}

// DimensionsGTE applies the GTE predicate on the "dimensions" field.
func DimensionsGTE(v string) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldDimensions, v))
}

// DimensionsLT applies the LT predicate on the "dimensions" field.
func DimensionsLT(v string) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldDimensions, v))
}

// DimensionsLTE applies the LTE predicate on the "dimensions" field.
func DimensionsLTE(v string) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldDimensions, v))
}

// DimensionsContains applies the Contains predicate on the "dimensions" field.
func DimensionsContains(v string) predicate.Art {
	return predicate.Art(sql.FieldContains(FieldDimensions, v))
}

// DimensionsHasPrefix applies the HasPrefix predicate on the "dimensions" field.
func DimensionsHasPrefix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasPrefix(FieldDimensions, v))
}

// DimensionsHasSuffix applies the HasSuffix predicate on the "dimensions" field.
func DimensionsHasSuffix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasSuffix(FieldDimensions, v))
}

// DimensionsIsNil applies the IsNil predicate on the "dimensions" field.
func DimensionsIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldDimensions))
}

// DimensionsNotNil applies the NotNil predicate on the "dimensions" field.
func DimensionsNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldDimensions))
}

// DimensionsEqualFold applies the EqualFold predicate on the "dimensions" field.
func DimensionsEqualFold(v string) predicate.Art {
	return predicate.Art(sql.FieldEqualFold(FieldDimensions, v))
}

// DimensionsContainsFold applies the ContainsFold predicate on the "dimensions" field.
func DimensionsContainsFold(v string) predicate.Art {
	return predicate.Art(sql.FieldContainsFold(FieldDimensions, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v string) predicate.Art {
	return predicate.Art(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...string) predicate.Art {
	return predicate.Art(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v string) predicate.Art {
	return predicate.Art(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v string) predicate.Art {
	return predicate.Art(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v string) predicate.Art {
	return predicate.Art(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v string) predicate.Art {
	return predicate.Art(sql.FieldLTE(FieldNumber, v))
}

// NumberContains applies the Contains predicate on the "number" field.
func NumberContains(v string) predicate.Art {
	return predicate.Art(sql.FieldContains(FieldNumber, v))
}

// NumberHasPrefix applies the HasPrefix predicate on the "number" field.
func NumberHasPrefix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasPrefix(FieldNumber, v))
}

// NumberHasSuffix applies the HasSuffix predicate on the "number" field.
func NumberHasSuffix(v string) predicate.Art {
	return predicate.Art(sql.FieldHasSuffix(FieldNumber, v))
}

// NumberIsNil applies the IsNil predicate on the "number" field.
func NumberIsNil() predicate.Art {
	return predicate.Art(sql.FieldIsNull(FieldNumber))
}

// NumberNotNil applies the NotNil predicate on the "number" field.
func NumberNotNil() predicate.Art {
	return predicate.Art(sql.FieldNotNull(FieldNumber))
}

// NumberEqualFold applies the EqualFold predicate on the "number" field.
func NumberEqualFold(v string) predicate.Art {
	return predicate.Art(sql.FieldEqualFold(FieldNumber, v))
}

// NumberContainsFold applies the ContainsFold predicate on the "number" field.
func NumberContainsFold(v string) predicate.Art {
	return predicate.Art(sql.FieldContainsFold(FieldNumber, v))
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.Person) predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArtGenre applies the HasEdge predicate on the "art_genre" edge.
func HasArtGenre() predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ArtGenreTable, ArtGenrePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtGenreWith applies the HasEdge predicate on the "art_genre" edge with a given conditions (other predicates).
func HasArtGenreWith(preds ...predicate.ArtGenre) predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := newArtGenreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArtStyle applies the HasEdge predicate on the "art_style" edge.
func HasArtStyle() predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ArtStyleTable, ArtStylePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtStyleWith applies the HasEdge predicate on the "art_style" edge with a given conditions (other predicates).
func HasArtStyleWith(preds ...predicate.ArtStyle) predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := newArtStyleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTechniques applies the HasEdge predicate on the "techniques" edge.
func HasTechniques() predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TechniquesTable, TechniquesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTechniquesWith applies the HasEdge predicate on the "techniques" edge with a given conditions (other predicates).
func HasTechniquesWith(preds ...predicate.Technique) predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := newTechniquesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCollection applies the HasEdge predicate on the "collection" edge.
func HasCollection() predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CollectionTable, CollectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCollectionWith applies the HasEdge predicate on the "collection" edge with a given conditions (other predicates).
func HasCollectionWith(preds ...predicate.Collection) predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := newCollectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCountry applies the HasEdge predicate on the "country" edge.
func HasCountry() predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CountryTable, CountryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryWith applies the HasEdge predicate on the "country" edge with a given conditions (other predicates).
func HasCountryWith(preds ...predicate.Country) predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := newCountryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSettlement applies the HasEdge predicate on the "settlement" edge.
func HasSettlement() predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SettlementTable, SettlementColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSettlementWith applies the HasEdge predicate on the "settlement" edge with a given conditions (other predicates).
func HasSettlementWith(preds ...predicate.Settlement) predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := newSettlementStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDistrict applies the HasEdge predicate on the "district" edge.
func HasDistrict() predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DistrictTable, DistrictColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDistrictWith applies the HasEdge predicate on the "district" edge with a given conditions (other predicates).
func HasDistrictWith(preds ...predicate.District) predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := newDistrictStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRegion applies the HasEdge predicate on the "region" edge.
func HasRegion() predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RegionTable, RegionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegionWith applies the HasEdge predicate on the "region" edge with a given conditions (other predicates).
func HasRegionWith(preds ...predicate.Region) predicate.Art {
	return predicate.Art(func(s *sql.Selector) {
		step := newRegionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Art) predicate.Art {
	return predicate.Art(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Art) predicate.Art {
	return predicate.Art(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Art) predicate.Art {
	return predicate.Art(sql.NotPredicates(p))
}
