// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/heritage-api/ent/auditlog"
)

// AuditLog is the model entity for the AuditLog schema.
type AuditLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Table holds the value of the "table" field.
	Table string `json:"table,omitempty"`
	// RefID holds the value of the "ref_id" field.
	RefID int `json:"ref_id,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation string `json:"operation,omitempty"`
	// Changes holds the value of the "changes" field.
	Changes []string `json:"changes,omitempty"`
	// AddedEdges holds the value of the "added_edges" field.
	AddedEdges []string `json:"added_edges,omitempty"`
	// RemovedEdges holds the value of the "removed_edges" field.
	RemovedEdges []string `json:"removed_edges,omitempty"`
	// ClearedEdges holds the value of the "cleared_edges" field.
	ClearedEdges []string `json:"cleared_edges,omitempty"`
	// Blame holds the value of the "blame" field.
	Blame string `json:"blame,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuditLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldChanges, auditlog.FieldAddedEdges, auditlog.FieldRemovedEdges, auditlog.FieldClearedEdges:
			values[i] = new([]byte)
		case auditlog.FieldID, auditlog.FieldRefID:
			values[i] = new(sql.NullInt64)
		case auditlog.FieldTable, auditlog.FieldOperation, auditlog.FieldBlame:
			values[i] = new(sql.NullString)
		case auditlog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuditLog fields.
func (al *AuditLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int(value.Int64)
		case auditlog.FieldTable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table", values[i])
			} else if value.Valid {
				al.Table = value.String
			}
		case auditlog.FieldRefID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ref_id", values[i])
			} else if value.Valid {
				al.RefID = int(value.Int64)
			}
		case auditlog.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				al.Operation = value.String
			}
		case auditlog.FieldChanges:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field changes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &al.Changes); err != nil {
					return fmt.Errorf("unmarshal field changes: %w", err)
				}
			}
		case auditlog.FieldAddedEdges:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field added_edges", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &al.AddedEdges); err != nil {
					return fmt.Errorf("unmarshal field added_edges: %w", err)
				}
			}
		case auditlog.FieldRemovedEdges:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field removed_edges", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &al.RemovedEdges); err != nil {
					return fmt.Errorf("unmarshal field removed_edges: %w", err)
				}
			}
		case auditlog.FieldClearedEdges:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cleared_edges", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &al.ClearedEdges); err != nil {
					return fmt.Errorf("unmarshal field cleared_edges: %w", err)
				}
			}
		case auditlog.FieldBlame:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blame", values[i])
			} else if value.Valid {
				al.Blame = value.String
			}
		case auditlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				al.CreatedAt = value.Time
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuditLog.
// This includes values selected through modifiers, order, etc.
func (al *AuditLog) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// Update returns a builder for updating this AuditLog.
// Note that you need to call AuditLog.Unwrap() before calling this method if this AuditLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AuditLog) Update() *AuditLogUpdateOne {
	return NewAuditLogClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AuditLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AuditLog) Unwrap() *AuditLog {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuditLog is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AuditLog) String() string {
	var builder strings.Builder
	builder.WriteString("AuditLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("table=")
	builder.WriteString(al.Table)
	builder.WriteString(", ")
	builder.WriteString("ref_id=")
	builder.WriteString(fmt.Sprintf("%v", al.RefID))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(al.Operation)
	builder.WriteString(", ")
	builder.WriteString("changes=")
	builder.WriteString(fmt.Sprintf("%v", al.Changes))
	builder.WriteString(", ")
	builder.WriteString("added_edges=")
	builder.WriteString(fmt.Sprintf("%v", al.AddedEdges))
	builder.WriteString(", ")
	builder.WriteString("removed_edges=")
	builder.WriteString(fmt.Sprintf("%v", al.RemovedEdges))
	builder.WriteString(", ")
	builder.WriteString("cleared_edges=")
	builder.WriteString(fmt.Sprintf("%v", al.ClearedEdges))
	builder.WriteString(", ")
	builder.WriteString("blame=")
	builder.WriteString(al.Blame)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(al.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AuditLogs is a parsable slice of AuditLog.
type AuditLogs []*AuditLog
