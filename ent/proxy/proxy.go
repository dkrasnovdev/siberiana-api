// Code generated by ent, DO NOT EDIT.

package proxy

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the proxy type in the database.
	Label = "proxy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRefID holds the string denoting the ref_id field in the database.
	FieldRefID = "ref_id"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// EdgeFavourite holds the string denoting the favourite edge name in mutations.
	EdgeFavourite = "favourite"
	// EdgePersonal holds the string denoting the personal edge name in mutations.
	EdgePersonal = "personal"
	// Table holds the table name of the proxy in the database.
	Table = "proxies"
	// FavouriteTable is the table that holds the favourite relation/edge.
	FavouriteTable = "proxies"
	// FavouriteInverseTable is the table name for the Favourite entity.
	// It exists in this package in order to avoid circular dependency with the "favourite" package.
	FavouriteInverseTable = "favourites"
	// FavouriteColumn is the table column denoting the favourite relation/edge.
	FavouriteColumn = "favourite_proxies"
	// PersonalTable is the table that holds the personal relation/edge.
	PersonalTable = "proxies"
	// PersonalInverseTable is the table name for the Personal entity.
	// It exists in this package in order to avoid circular dependency with the "personal" package.
	PersonalInverseTable = "personals"
	// PersonalColumn is the table column denoting the personal relation/edge.
	PersonalColumn = "personal_proxies"
)

// Columns holds all SQL columns for proxy fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldRefID,
	FieldURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "proxies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"favourite_proxies",
	"personal_proxies",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeArtifacts             Type = "artifacts"
	TypeBooks                 Type = "books"
	TypeProtectedAreaPictures Type = "protected_area_pictures"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeArtifacts, TypeBooks, TypeProtectedAreaPictures:
		return nil
	default:
		return fmt.Errorf("proxy: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Proxy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByRefID orders the results by the ref_id field.
func ByRefID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefID, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByFavouriteField orders the results by favourite field.
func ByFavouriteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFavouriteStep(), sql.OrderByField(field, opts...))
	}
}

// ByPersonalField orders the results by personal field.
func ByPersonalField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonalStep(), sql.OrderByField(field, opts...))
	}
}
func newFavouriteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FavouriteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FavouriteTable, FavouriteColumn),
	)
}
func newPersonalStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonalInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PersonalTable, PersonalColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
