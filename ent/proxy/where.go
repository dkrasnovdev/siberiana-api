// Code generated by ent, DO NOT EDIT.

package proxy

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Proxy {
	return predicate.Proxy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Proxy {
	return predicate.Proxy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Proxy {
	return predicate.Proxy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Proxy {
	return predicate.Proxy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Proxy {
	return predicate.Proxy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Proxy {
	return predicate.Proxy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Proxy {
	return predicate.Proxy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Proxy {
	return predicate.Proxy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Proxy {
	return predicate.Proxy(sql.FieldLTE(FieldID, id))
}

// RefID applies equality check predicate on the "ref_id" field. It's identical to RefIDEQ.
func RefID(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldEQ(FieldRefID, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldEQ(FieldURL, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Proxy {
	return predicate.Proxy(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Proxy {
	return predicate.Proxy(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Proxy {
	return predicate.Proxy(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Proxy {
	return predicate.Proxy(sql.FieldNotIn(FieldType, vs...))
}

// RefIDEQ applies the EQ predicate on the "ref_id" field.
func RefIDEQ(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldEQ(FieldRefID, v))
}

// RefIDNEQ applies the NEQ predicate on the "ref_id" field.
func RefIDNEQ(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldNEQ(FieldRefID, v))
}

// RefIDIn applies the In predicate on the "ref_id" field.
func RefIDIn(vs ...string) predicate.Proxy {
	return predicate.Proxy(sql.FieldIn(FieldRefID, vs...))
}

// RefIDNotIn applies the NotIn predicate on the "ref_id" field.
func RefIDNotIn(vs ...string) predicate.Proxy {
	return predicate.Proxy(sql.FieldNotIn(FieldRefID, vs...))
}

// RefIDGT applies the GT predicate on the "ref_id" field.
func RefIDGT(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldGT(FieldRefID, v))
}

// RefIDGTE applies the GTE predicate on the "ref_id" field.
func RefIDGTE(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldGTE(FieldRefID, v))
}

// RefIDLT applies the LT predicate on the "ref_id" field.
func RefIDLT(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldLT(FieldRefID, v))
}

// RefIDLTE applies the LTE predicate on the "ref_id" field.
func RefIDLTE(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldLTE(FieldRefID, v))
}

// RefIDContains applies the Contains predicate on the "ref_id" field.
func RefIDContains(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldContains(FieldRefID, v))
}

// RefIDHasPrefix applies the HasPrefix predicate on the "ref_id" field.
func RefIDHasPrefix(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldHasPrefix(FieldRefID, v))
}

// RefIDHasSuffix applies the HasSuffix predicate on the "ref_id" field.
func RefIDHasSuffix(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldHasSuffix(FieldRefID, v))
}

// RefIDEqualFold applies the EqualFold predicate on the "ref_id" field.
func RefIDEqualFold(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldEqualFold(FieldRefID, v))
}

// RefIDContainsFold applies the ContainsFold predicate on the "ref_id" field.
func RefIDContainsFold(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldContainsFold(FieldRefID, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Proxy {
	return predicate.Proxy(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Proxy {
	return predicate.Proxy(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Proxy {
	return predicate.Proxy(sql.FieldContainsFold(FieldURL, v))
}

// HasFavourite applies the HasEdge predicate on the "favourite" edge.
func HasFavourite() predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FavouriteTable, FavouriteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFavouriteWith applies the HasEdge predicate on the "favourite" edge with a given conditions (other predicates).
func HasFavouriteWith(preds ...predicate.Favourite) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		step := newFavouriteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPersonal applies the HasEdge predicate on the "personal" edge.
func HasPersonal() predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonalTable, PersonalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonalWith applies the HasEdge predicate on the "personal" edge with a given conditions (other predicates).
func HasPersonalWith(preds ...predicate.Personal) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		step := newPersonalStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Proxy) predicate.Proxy {
	return predicate.Proxy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Proxy) predicate.Proxy {
	return predicate.Proxy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Proxy) predicate.Proxy {
	return predicate.Proxy(sql.NotPredicates(p))
}
