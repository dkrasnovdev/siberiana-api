// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/familia"
	"github.com/dkrasnovdev/siberiana-api/ent/genus"
	"github.com/dkrasnovdev/siberiana-api/ent/group"
	"github.com/dkrasnovdev/siberiana-api/ent/herbarium"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/personalcollection"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
	"github.com/dkrasnovdev/siberiana-api/ent/species"
)

// HerbariumCreate is the builder for creating a Herbarium entity.
type HerbariumCreate struct {
	config
	mutation *HerbariumMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (hc *HerbariumCreate) SetCreatedAt(t time.Time) *HerbariumCreate {
	hc.mutation.SetCreatedAt(t)
	return hc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hc *HerbariumCreate) SetNillableCreatedAt(t *time.Time) *HerbariumCreate {
	if t != nil {
		hc.SetCreatedAt(*t)
	}
	return hc
}

// SetCreatedBy sets the "created_by" field.
func (hc *HerbariumCreate) SetCreatedBy(s string) *HerbariumCreate {
	hc.mutation.SetCreatedBy(s)
	return hc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hc *HerbariumCreate) SetNillableCreatedBy(s *string) *HerbariumCreate {
	if s != nil {
		hc.SetCreatedBy(*s)
	}
	return hc
}

// SetUpdatedAt sets the "updated_at" field.
func (hc *HerbariumCreate) SetUpdatedAt(t time.Time) *HerbariumCreate {
	hc.mutation.SetUpdatedAt(t)
	return hc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hc *HerbariumCreate) SetNillableUpdatedAt(t *time.Time) *HerbariumCreate {
	if t != nil {
		hc.SetUpdatedAt(*t)
	}
	return hc
}

// SetUpdatedBy sets the "updated_by" field.
func (hc *HerbariumCreate) SetUpdatedBy(s string) *HerbariumCreate {
	hc.mutation.SetUpdatedBy(s)
	return hc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (hc *HerbariumCreate) SetNillableUpdatedBy(s *string) *HerbariumCreate {
	if s != nil {
		hc.SetUpdatedBy(*s)
	}
	return hc
}

// SetDisplayName sets the "display_name" field.
func (hc *HerbariumCreate) SetDisplayName(s string) *HerbariumCreate {
	hc.mutation.SetDisplayName(s)
	return hc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (hc *HerbariumCreate) SetNillableDisplayName(s *string) *HerbariumCreate {
	if s != nil {
		hc.SetDisplayName(*s)
	}
	return hc
}

// SetAbbreviation sets the "abbreviation" field.
func (hc *HerbariumCreate) SetAbbreviation(s string) *HerbariumCreate {
	hc.mutation.SetAbbreviation(s)
	return hc
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (hc *HerbariumCreate) SetNillableAbbreviation(s *string) *HerbariumCreate {
	if s != nil {
		hc.SetAbbreviation(*s)
	}
	return hc
}

// SetDescription sets the "description" field.
func (hc *HerbariumCreate) SetDescription(s string) *HerbariumCreate {
	hc.mutation.SetDescription(s)
	return hc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hc *HerbariumCreate) SetNillableDescription(s *string) *HerbariumCreate {
	if s != nil {
		hc.SetDescription(*s)
	}
	return hc
}

// SetExternalLink sets the "external_link" field.
func (hc *HerbariumCreate) SetExternalLink(s string) *HerbariumCreate {
	hc.mutation.SetExternalLink(s)
	return hc
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (hc *HerbariumCreate) SetNillableExternalLink(s *string) *HerbariumCreate {
	if s != nil {
		hc.SetExternalLink(*s)
	}
	return hc
}

// SetStatus sets the "status" field.
func (hc *HerbariumCreate) SetStatus(h herbarium.Status) *HerbariumCreate {
	hc.mutation.SetStatus(h)
	return hc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hc *HerbariumCreate) SetNillableStatus(h *herbarium.Status) *HerbariumCreate {
	if h != nil {
		hc.SetStatus(*h)
	}
	return hc
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (hc *HerbariumCreate) SetPrimaryImageURL(s string) *HerbariumCreate {
	hc.mutation.SetPrimaryImageURL(s)
	return hc
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (hc *HerbariumCreate) SetNillablePrimaryImageURL(s *string) *HerbariumCreate {
	if s != nil {
		hc.SetPrimaryImageURL(*s)
	}
	return hc
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (hc *HerbariumCreate) SetAdditionalImagesUrls(s []string) *HerbariumCreate {
	hc.mutation.SetAdditionalImagesUrls(s)
	return hc
}

// SetDate sets the "date" field.
func (hc *HerbariumCreate) SetDate(t time.Time) *HerbariumCreate {
	hc.mutation.SetDate(t)
	return hc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (hc *HerbariumCreate) SetNillableDate(t *time.Time) *HerbariumCreate {
	if t != nil {
		hc.SetDate(*t)
	}
	return hc
}

// SetLocation sets the "location" field.
func (hc *HerbariumCreate) SetLocation(s string) *HerbariumCreate {
	hc.mutation.SetLocation(s)
	return hc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (hc *HerbariumCreate) SetNillableLocation(s *string) *HerbariumCreate {
	if s != nil {
		hc.SetLocation(*s)
	}
	return hc
}

// SetAuthorID sets the "author" edge to the Person entity by ID.
func (hc *HerbariumCreate) SetAuthorID(id int) *HerbariumCreate {
	hc.mutation.SetAuthorID(id)
	return hc
}

// SetNillableAuthorID sets the "author" edge to the Person entity by ID if the given value is not nil.
func (hc *HerbariumCreate) SetNillableAuthorID(id *int) *HerbariumCreate {
	if id != nil {
		hc = hc.SetAuthorID(*id)
	}
	return hc
}

// SetAuthor sets the "author" edge to the Person entity.
func (hc *HerbariumCreate) SetAuthor(p *Person) *HerbariumCreate {
	return hc.SetAuthorID(p.ID)
}

// SetFamiliaID sets the "familia" edge to the Familia entity by ID.
func (hc *HerbariumCreate) SetFamiliaID(id int) *HerbariumCreate {
	hc.mutation.SetFamiliaID(id)
	return hc
}

// SetNillableFamiliaID sets the "familia" edge to the Familia entity by ID if the given value is not nil.
func (hc *HerbariumCreate) SetNillableFamiliaID(id *int) *HerbariumCreate {
	if id != nil {
		hc = hc.SetFamiliaID(*id)
	}
	return hc
}

// SetFamilia sets the "familia" edge to the Familia entity.
func (hc *HerbariumCreate) SetFamilia(f *Familia) *HerbariumCreate {
	return hc.SetFamiliaID(f.ID)
}

// SetGenusID sets the "genus" edge to the Genus entity by ID.
func (hc *HerbariumCreate) SetGenusID(id int) *HerbariumCreate {
	hc.mutation.SetGenusID(id)
	return hc
}

// SetNillableGenusID sets the "genus" edge to the Genus entity by ID if the given value is not nil.
func (hc *HerbariumCreate) SetNillableGenusID(id *int) *HerbariumCreate {
	if id != nil {
		hc = hc.SetGenusID(*id)
	}
	return hc
}

// SetGenus sets the "genus" edge to the Genus entity.
func (hc *HerbariumCreate) SetGenus(g *Genus) *HerbariumCreate {
	return hc.SetGenusID(g.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (hc *HerbariumCreate) SetGroupID(id int) *HerbariumCreate {
	hc.mutation.SetGroupID(id)
	return hc
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (hc *HerbariumCreate) SetNillableGroupID(id *int) *HerbariumCreate {
	if id != nil {
		hc = hc.SetGroupID(*id)
	}
	return hc
}

// SetGroup sets the "group" edge to the Group entity.
func (hc *HerbariumCreate) SetGroup(g *Group) *HerbariumCreate {
	return hc.SetGroupID(g.ID)
}

// SetSpeciesID sets the "species" edge to the Species entity by ID.
func (hc *HerbariumCreate) SetSpeciesID(id int) *HerbariumCreate {
	hc.mutation.SetSpeciesID(id)
	return hc
}

// SetNillableSpeciesID sets the "species" edge to the Species entity by ID if the given value is not nil.
func (hc *HerbariumCreate) SetNillableSpeciesID(id *int) *HerbariumCreate {
	if id != nil {
		hc = hc.SetSpeciesID(*id)
	}
	return hc
}

// SetSpecies sets the "species" edge to the Species entity.
func (hc *HerbariumCreate) SetSpecies(s *Species) *HerbariumCreate {
	return hc.SetSpeciesID(s.ID)
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (hc *HerbariumCreate) SetCollectionID(id int) *HerbariumCreate {
	hc.mutation.SetCollectionID(id)
	return hc
}

// SetCollection sets the "collection" edge to the Collection entity.
func (hc *HerbariumCreate) SetCollection(c *Collection) *HerbariumCreate {
	return hc.SetCollectionID(c.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (hc *HerbariumCreate) SetCountryID(id int) *HerbariumCreate {
	hc.mutation.SetCountryID(id)
	return hc
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (hc *HerbariumCreate) SetNillableCountryID(id *int) *HerbariumCreate {
	if id != nil {
		hc = hc.SetCountryID(*id)
	}
	return hc
}

// SetCountry sets the "country" edge to the Country entity.
func (hc *HerbariumCreate) SetCountry(c *Country) *HerbariumCreate {
	return hc.SetCountryID(c.ID)
}

// SetSettlementID sets the "settlement" edge to the Settlement entity by ID.
func (hc *HerbariumCreate) SetSettlementID(id int) *HerbariumCreate {
	hc.mutation.SetSettlementID(id)
	return hc
}

// SetNillableSettlementID sets the "settlement" edge to the Settlement entity by ID if the given value is not nil.
func (hc *HerbariumCreate) SetNillableSettlementID(id *int) *HerbariumCreate {
	if id != nil {
		hc = hc.SetSettlementID(*id)
	}
	return hc
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (hc *HerbariumCreate) SetSettlement(s *Settlement) *HerbariumCreate {
	return hc.SetSettlementID(s.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (hc *HerbariumCreate) SetDistrictID(id int) *HerbariumCreate {
	hc.mutation.SetDistrictID(id)
	return hc
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (hc *HerbariumCreate) SetNillableDistrictID(id *int) *HerbariumCreate {
	if id != nil {
		hc = hc.SetDistrictID(*id)
	}
	return hc
}

// SetDistrict sets the "district" edge to the District entity.
func (hc *HerbariumCreate) SetDistrict(d *District) *HerbariumCreate {
	return hc.SetDistrictID(d.ID)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (hc *HerbariumCreate) SetRegionID(id int) *HerbariumCreate {
	hc.mutation.SetRegionID(id)
	return hc
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (hc *HerbariumCreate) SetNillableRegionID(id *int) *HerbariumCreate {
	if id != nil {
		hc = hc.SetRegionID(*id)
	}
	return hc
}

// SetRegion sets the "region" edge to the Region entity.
func (hc *HerbariumCreate) SetRegion(r *Region) *HerbariumCreate {
	return hc.SetRegionID(r.ID)
}

// AddPersonalCollectionIDs adds the "personal_collection" edge to the PersonalCollection entity by IDs.
func (hc *HerbariumCreate) AddPersonalCollectionIDs(ids ...int) *HerbariumCreate {
	hc.mutation.AddPersonalCollectionIDs(ids...)
	return hc
}

// AddPersonalCollection adds the "personal_collection" edges to the PersonalCollection entity.
func (hc *HerbariumCreate) AddPersonalCollection(p ...*PersonalCollection) *HerbariumCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return hc.AddPersonalCollectionIDs(ids...)
}

// Mutation returns the HerbariumMutation object of the builder.
func (hc *HerbariumCreate) Mutation() *HerbariumMutation {
	return hc.mutation
}

// Save creates the Herbarium in the database.
func (hc *HerbariumCreate) Save(ctx context.Context) (*Herbarium, error) {
	if err := hc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HerbariumCreate) SaveX(ctx context.Context) *Herbarium {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HerbariumCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HerbariumCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HerbariumCreate) defaults() error {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		if herbarium.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized herbarium.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := herbarium.DefaultCreatedAt()
		hc.mutation.SetCreatedAt(v)
	}
	if _, ok := hc.mutation.UpdatedAt(); !ok {
		if herbarium.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized herbarium.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := herbarium.DefaultUpdatedAt()
		hc.mutation.SetUpdatedAt(v)
	}
	if _, ok := hc.mutation.Status(); !ok {
		v := herbarium.DefaultStatus
		hc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hc *HerbariumCreate) check() error {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Herbarium.created_at"`)}
	}
	if _, ok := hc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Herbarium.updated_at"`)}
	}
	if v, ok := hc.mutation.Status(); ok {
		if err := herbarium.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Herbarium.status": %w`, err)}
		}
	}
	if _, ok := hc.mutation.CollectionID(); !ok {
		return &ValidationError{Name: "collection", err: errors.New(`ent: missing required edge "Herbarium.collection"`)}
	}
	return nil
}

func (hc *HerbariumCreate) sqlSave(ctx context.Context) (*Herbarium, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HerbariumCreate) createSpec() (*Herbarium, *sqlgraph.CreateSpec) {
	var (
		_node = &Herbarium{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(herbarium.Table, sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt))
	)
	if value, ok := hc.mutation.CreatedAt(); ok {
		_spec.SetField(herbarium.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hc.mutation.CreatedBy(); ok {
		_spec.SetField(herbarium.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := hc.mutation.UpdatedAt(); ok {
		_spec.SetField(herbarium.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hc.mutation.UpdatedBy(); ok {
		_spec.SetField(herbarium.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := hc.mutation.DisplayName(); ok {
		_spec.SetField(herbarium.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := hc.mutation.Abbreviation(); ok {
		_spec.SetField(herbarium.FieldAbbreviation, field.TypeString, value)
		_node.Abbreviation = value
	}
	if value, ok := hc.mutation.Description(); ok {
		_spec.SetField(herbarium.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := hc.mutation.ExternalLink(); ok {
		_spec.SetField(herbarium.FieldExternalLink, field.TypeString, value)
		_node.ExternalLink = value
	}
	if value, ok := hc.mutation.Status(); ok {
		_spec.SetField(herbarium.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := hc.mutation.PrimaryImageURL(); ok {
		_spec.SetField(herbarium.FieldPrimaryImageURL, field.TypeString, value)
		_node.PrimaryImageURL = value
	}
	if value, ok := hc.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(herbarium.FieldAdditionalImagesUrls, field.TypeJSON, value)
		_node.AdditionalImagesUrls = value
	}
	if value, ok := hc.mutation.Date(); ok {
		_spec.SetField(herbarium.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := hc.mutation.Location(); ok {
		_spec.SetField(herbarium.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if nodes := hc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.AuthorTable,
			Columns: []string{herbarium.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.person_herbaria = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.FamiliaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.FamiliaTable,
			Columns: []string{herbarium.FamiliaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(familia.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.familia_herbaria = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.GenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.GenusTable,
			Columns: []string{herbarium.GenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.genus_herbaria = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.GroupTable,
			Columns: []string{herbarium.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_herbaria = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.SpeciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.SpeciesTable,
			Columns: []string{herbarium.SpeciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(species.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.species_herbaria = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.CollectionTable,
			Columns: []string{herbarium.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.collection_herbaria = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.CountryTable,
			Columns: []string{herbarium.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.country_herbaria = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.SettlementTable,
			Columns: []string{herbarium.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.settlement_herbaria = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.DistrictTable,
			Columns: []string{herbarium.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.district_herbaria = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.RegionTable,
			Columns: []string{herbarium.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.region_herbaria = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.PersonalCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   herbarium.PersonalCollectionTable,
			Columns: herbarium.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HerbariumCreateBulk is the builder for creating many Herbarium entities in bulk.
type HerbariumCreateBulk struct {
	config
	err      error
	builders []*HerbariumCreate
}

// Save creates the Herbarium entities in the database.
func (hcb *HerbariumCreateBulk) Save(ctx context.Context) ([]*Herbarium, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Herbarium, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HerbariumMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HerbariumCreateBulk) SaveX(ctx context.Context) []*Herbarium {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HerbariumCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HerbariumCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
