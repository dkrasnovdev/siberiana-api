// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronologicalanalysis"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronology"
)

// DendrochronologicalAnalysis is the model entity for the DendrochronologicalAnalysis schema.
type DendrochronologicalAnalysis struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// StartYear holds the value of the "start_year" field.
	StartYear int `json:"start_year,omitempty"`
	// EndYear holds the value of the "end_year" field.
	EndYear int `json:"end_year,omitempty"`
	// NumberOfRings holds the value of the "number_of_rings" field.
	NumberOfRings int `json:"number_of_rings,omitempty"`
	// CoefficientCorrelation holds the value of the "coefficient_correlation" field.
	CoefficientCorrelation float64 `json:"coefficient_correlation,omitempty"`
	// StandardDeviation holds the value of the "standard_deviation" field.
	StandardDeviation float64 `json:"standard_deviation,omitempty"`
	// Sensitivity holds the value of the "sensitivity" field.
	Sensitivity float64 `json:"sensitivity,omitempty"`
	// SamplingLocation holds the value of the "sampling_location" field.
	SamplingLocation string `json:"sampling_location,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DendrochronologicalAnalysisQuery when eager-loading is set.
	Edges                                         DendrochronologicalAnalysisEdges `json:"edges"`
	dendrochronological_analysis_dendrochronology *int
	selectValues                                  sql.SelectValues
}

// DendrochronologicalAnalysisEdges holds the relations/edges for other nodes in the graph.
type DendrochronologicalAnalysisEdges struct {
	// Dendrochronology holds the value of the dendrochronology edge.
	Dendrochronology *Dendrochronology `json:"dendrochronology,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// DendrochronologyOrErr returns the Dendrochronology value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DendrochronologicalAnalysisEdges) DendrochronologyOrErr() (*Dendrochronology, error) {
	if e.loadedTypes[0] {
		if e.Dendrochronology == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dendrochronology.Label}
		}
		return e.Dendrochronology, nil
	}
	return nil, &NotLoadedError{edge: "dendrochronology"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DendrochronologicalAnalysis) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dendrochronologicalanalysis.FieldCoefficientCorrelation, dendrochronologicalanalysis.FieldStandardDeviation, dendrochronologicalanalysis.FieldSensitivity:
			values[i] = new(sql.NullFloat64)
		case dendrochronologicalanalysis.FieldID, dendrochronologicalanalysis.FieldStartYear, dendrochronologicalanalysis.FieldEndYear, dendrochronologicalanalysis.FieldNumberOfRings:
			values[i] = new(sql.NullInt64)
		case dendrochronologicalanalysis.FieldCreatedBy, dendrochronologicalanalysis.FieldUpdatedBy, dendrochronologicalanalysis.FieldDisplayName, dendrochronologicalanalysis.FieldSamplingLocation:
			values[i] = new(sql.NullString)
		case dendrochronologicalanalysis.FieldCreatedAt, dendrochronologicalanalysis.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case dendrochronologicalanalysis.ForeignKeys[0]: // dendrochronological_analysis_dendrochronology
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DendrochronologicalAnalysis fields.
func (da *DendrochronologicalAnalysis) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dendrochronologicalanalysis.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			da.ID = int(value.Int64)
		case dendrochronologicalanalysis.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				da.CreatedAt = value.Time
			}
		case dendrochronologicalanalysis.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				da.CreatedBy = value.String
			}
		case dendrochronologicalanalysis.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				da.UpdatedAt = value.Time
			}
		case dendrochronologicalanalysis.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				da.UpdatedBy = value.String
			}
		case dendrochronologicalanalysis.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				da.DisplayName = value.String
			}
		case dendrochronologicalanalysis.FieldStartYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_year", values[i])
			} else if value.Valid {
				da.StartYear = int(value.Int64)
			}
		case dendrochronologicalanalysis.FieldEndYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_year", values[i])
			} else if value.Valid {
				da.EndYear = int(value.Int64)
			}
		case dendrochronologicalanalysis.FieldNumberOfRings:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_of_rings", values[i])
			} else if value.Valid {
				da.NumberOfRings = int(value.Int64)
			}
		case dendrochronologicalanalysis.FieldCoefficientCorrelation:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field coefficient_correlation", values[i])
			} else if value.Valid {
				da.CoefficientCorrelation = value.Float64
			}
		case dendrochronologicalanalysis.FieldStandardDeviation:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field standard_deviation", values[i])
			} else if value.Valid {
				da.StandardDeviation = value.Float64
			}
		case dendrochronologicalanalysis.FieldSensitivity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field sensitivity", values[i])
			} else if value.Valid {
				da.Sensitivity = value.Float64
			}
		case dendrochronologicalanalysis.FieldSamplingLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sampling_location", values[i])
			} else if value.Valid {
				da.SamplingLocation = value.String
			}
		case dendrochronologicalanalysis.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field dendrochronological_analysis_dendrochronology", value)
			} else if value.Valid {
				da.dendrochronological_analysis_dendrochronology = new(int)
				*da.dendrochronological_analysis_dendrochronology = int(value.Int64)
			}
		default:
			da.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DendrochronologicalAnalysis.
// This includes values selected through modifiers, order, etc.
func (da *DendrochronologicalAnalysis) Value(name string) (ent.Value, error) {
	return da.selectValues.Get(name)
}

// QueryDendrochronology queries the "dendrochronology" edge of the DendrochronologicalAnalysis entity.
func (da *DendrochronologicalAnalysis) QueryDendrochronology() *DendrochronologyQuery {
	return NewDendrochronologicalAnalysisClient(da.config).QueryDendrochronology(da)
}

// Update returns a builder for updating this DendrochronologicalAnalysis.
// Note that you need to call DendrochronologicalAnalysis.Unwrap() before calling this method if this DendrochronologicalAnalysis
// was returned from a transaction, and the transaction was committed or rolled back.
func (da *DendrochronologicalAnalysis) Update() *DendrochronologicalAnalysisUpdateOne {
	return NewDendrochronologicalAnalysisClient(da.config).UpdateOne(da)
}

// Unwrap unwraps the DendrochronologicalAnalysis entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (da *DendrochronologicalAnalysis) Unwrap() *DendrochronologicalAnalysis {
	_tx, ok := da.config.driver.(*txDriver)
	if !ok {
		panic("ent: DendrochronologicalAnalysis is not a transactional entity")
	}
	da.config.driver = _tx.drv
	return da
}

// String implements the fmt.Stringer.
func (da *DendrochronologicalAnalysis) String() string {
	var builder strings.Builder
	builder.WriteString("DendrochronologicalAnalysis(")
	builder.WriteString(fmt.Sprintf("id=%v, ", da.ID))
	builder.WriteString("created_at=")
	builder.WriteString(da.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(da.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(da.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(da.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(da.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("start_year=")
	builder.WriteString(fmt.Sprintf("%v", da.StartYear))
	builder.WriteString(", ")
	builder.WriteString("end_year=")
	builder.WriteString(fmt.Sprintf("%v", da.EndYear))
	builder.WriteString(", ")
	builder.WriteString("number_of_rings=")
	builder.WriteString(fmt.Sprintf("%v", da.NumberOfRings))
	builder.WriteString(", ")
	builder.WriteString("coefficient_correlation=")
	builder.WriteString(fmt.Sprintf("%v", da.CoefficientCorrelation))
	builder.WriteString(", ")
	builder.WriteString("standard_deviation=")
	builder.WriteString(fmt.Sprintf("%v", da.StandardDeviation))
	builder.WriteString(", ")
	builder.WriteString("sensitivity=")
	builder.WriteString(fmt.Sprintf("%v", da.Sensitivity))
	builder.WriteString(", ")
	builder.WriteString("sampling_location=")
	builder.WriteString(da.SamplingLocation)
	builder.WriteByte(')')
	return builder.String()
}

// DendrochronologicalAnalyses is a parsable slice of DendrochronologicalAnalysis.
type DendrochronologicalAnalyses []*DendrochronologicalAnalysis
