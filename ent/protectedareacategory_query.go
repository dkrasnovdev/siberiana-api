// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedarea"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareacategory"
)

// ProtectedAreaCategoryQuery is the builder for querying ProtectedAreaCategory entities.
type ProtectedAreaCategoryQuery struct {
	config
	ctx                     *QueryContext
	order                   []protectedareacategory.OrderOption
	inters                  []Interceptor
	predicates              []predicate.ProtectedAreaCategory
	withProtectedAreas      *ProtectedAreaQuery
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*ProtectedAreaCategory) error
	withNamedProtectedAreas map[string]*ProtectedAreaQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProtectedAreaCategoryQuery builder.
func (pacq *ProtectedAreaCategoryQuery) Where(ps ...predicate.ProtectedAreaCategory) *ProtectedAreaCategoryQuery {
	pacq.predicates = append(pacq.predicates, ps...)
	return pacq
}

// Limit the number of records to be returned by this query.
func (pacq *ProtectedAreaCategoryQuery) Limit(limit int) *ProtectedAreaCategoryQuery {
	pacq.ctx.Limit = &limit
	return pacq
}

// Offset to start from.
func (pacq *ProtectedAreaCategoryQuery) Offset(offset int) *ProtectedAreaCategoryQuery {
	pacq.ctx.Offset = &offset
	return pacq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pacq *ProtectedAreaCategoryQuery) Unique(unique bool) *ProtectedAreaCategoryQuery {
	pacq.ctx.Unique = &unique
	return pacq
}

// Order specifies how the records should be ordered.
func (pacq *ProtectedAreaCategoryQuery) Order(o ...protectedareacategory.OrderOption) *ProtectedAreaCategoryQuery {
	pacq.order = append(pacq.order, o...)
	return pacq
}

// QueryProtectedAreas chains the current query on the "protected_areas" edge.
func (pacq *ProtectedAreaCategoryQuery) QueryProtectedAreas() *ProtectedAreaQuery {
	query := (&ProtectedAreaClient{config: pacq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pacq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pacq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(protectedareacategory.Table, protectedareacategory.FieldID, selector),
			sqlgraph.To(protectedarea.Table, protectedarea.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, protectedareacategory.ProtectedAreasTable, protectedareacategory.ProtectedAreasColumn),
		)
		fromU = sqlgraph.SetNeighbors(pacq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProtectedAreaCategory entity from the query.
// Returns a *NotFoundError when no ProtectedAreaCategory was found.
func (pacq *ProtectedAreaCategoryQuery) First(ctx context.Context) (*ProtectedAreaCategory, error) {
	nodes, err := pacq.Limit(1).All(setContextOp(ctx, pacq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{protectedareacategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pacq *ProtectedAreaCategoryQuery) FirstX(ctx context.Context) *ProtectedAreaCategory {
	node, err := pacq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProtectedAreaCategory ID from the query.
// Returns a *NotFoundError when no ProtectedAreaCategory ID was found.
func (pacq *ProtectedAreaCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pacq.Limit(1).IDs(setContextOp(ctx, pacq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{protectedareacategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pacq *ProtectedAreaCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := pacq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProtectedAreaCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProtectedAreaCategory entity is found.
// Returns a *NotFoundError when no ProtectedAreaCategory entities are found.
func (pacq *ProtectedAreaCategoryQuery) Only(ctx context.Context) (*ProtectedAreaCategory, error) {
	nodes, err := pacq.Limit(2).All(setContextOp(ctx, pacq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{protectedareacategory.Label}
	default:
		return nil, &NotSingularError{protectedareacategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pacq *ProtectedAreaCategoryQuery) OnlyX(ctx context.Context) *ProtectedAreaCategory {
	node, err := pacq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProtectedAreaCategory ID in the query.
// Returns a *NotSingularError when more than one ProtectedAreaCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (pacq *ProtectedAreaCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pacq.Limit(2).IDs(setContextOp(ctx, pacq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{protectedareacategory.Label}
	default:
		err = &NotSingularError{protectedareacategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pacq *ProtectedAreaCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := pacq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProtectedAreaCategories.
func (pacq *ProtectedAreaCategoryQuery) All(ctx context.Context) ([]*ProtectedAreaCategory, error) {
	ctx = setContextOp(ctx, pacq.ctx, "All")
	if err := pacq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProtectedAreaCategory, *ProtectedAreaCategoryQuery]()
	return withInterceptors[[]*ProtectedAreaCategory](ctx, pacq, qr, pacq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pacq *ProtectedAreaCategoryQuery) AllX(ctx context.Context) []*ProtectedAreaCategory {
	nodes, err := pacq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProtectedAreaCategory IDs.
func (pacq *ProtectedAreaCategoryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pacq.ctx.Unique == nil && pacq.path != nil {
		pacq.Unique(true)
	}
	ctx = setContextOp(ctx, pacq.ctx, "IDs")
	if err = pacq.Select(protectedareacategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pacq *ProtectedAreaCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := pacq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pacq *ProtectedAreaCategoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pacq.ctx, "Count")
	if err := pacq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pacq, querierCount[*ProtectedAreaCategoryQuery](), pacq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pacq *ProtectedAreaCategoryQuery) CountX(ctx context.Context) int {
	count, err := pacq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pacq *ProtectedAreaCategoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pacq.ctx, "Exist")
	switch _, err := pacq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pacq *ProtectedAreaCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := pacq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProtectedAreaCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pacq *ProtectedAreaCategoryQuery) Clone() *ProtectedAreaCategoryQuery {
	if pacq == nil {
		return nil
	}
	return &ProtectedAreaCategoryQuery{
		config:             pacq.config,
		ctx:                pacq.ctx.Clone(),
		order:              append([]protectedareacategory.OrderOption{}, pacq.order...),
		inters:             append([]Interceptor{}, pacq.inters...),
		predicates:         append([]predicate.ProtectedAreaCategory{}, pacq.predicates...),
		withProtectedAreas: pacq.withProtectedAreas.Clone(),
		// clone intermediate query.
		sql:  pacq.sql.Clone(),
		path: pacq.path,
	}
}

// WithProtectedAreas tells the query-builder to eager-load the nodes that are connected to
// the "protected_areas" edge. The optional arguments are used to configure the query builder of the edge.
func (pacq *ProtectedAreaCategoryQuery) WithProtectedAreas(opts ...func(*ProtectedAreaQuery)) *ProtectedAreaCategoryQuery {
	query := (&ProtectedAreaClient{config: pacq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pacq.withProtectedAreas = query
	return pacq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProtectedAreaCategory.Query().
//		GroupBy(protectedareacategory.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pacq *ProtectedAreaCategoryQuery) GroupBy(field string, fields ...string) *ProtectedAreaCategoryGroupBy {
	pacq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProtectedAreaCategoryGroupBy{build: pacq}
	grbuild.flds = &pacq.ctx.Fields
	grbuild.label = protectedareacategory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ProtectedAreaCategory.Query().
//		Select(protectedareacategory.FieldCreatedAt).
//		Scan(ctx, &v)
func (pacq *ProtectedAreaCategoryQuery) Select(fields ...string) *ProtectedAreaCategorySelect {
	pacq.ctx.Fields = append(pacq.ctx.Fields, fields...)
	sbuild := &ProtectedAreaCategorySelect{ProtectedAreaCategoryQuery: pacq}
	sbuild.label = protectedareacategory.Label
	sbuild.flds, sbuild.scan = &pacq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProtectedAreaCategorySelect configured with the given aggregations.
func (pacq *ProtectedAreaCategoryQuery) Aggregate(fns ...AggregateFunc) *ProtectedAreaCategorySelect {
	return pacq.Select().Aggregate(fns...)
}

func (pacq *ProtectedAreaCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pacq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pacq); err != nil {
				return err
			}
		}
	}
	for _, f := range pacq.ctx.Fields {
		if !protectedareacategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pacq.path != nil {
		prev, err := pacq.path(ctx)
		if err != nil {
			return err
		}
		pacq.sql = prev
	}
	if protectedareacategory.Policy == nil {
		return errors.New("ent: uninitialized protectedareacategory.Policy (forgotten import ent/runtime?)")
	}
	if err := protectedareacategory.Policy.EvalQuery(ctx, pacq); err != nil {
		return err
	}
	return nil
}

func (pacq *ProtectedAreaCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProtectedAreaCategory, error) {
	var (
		nodes       = []*ProtectedAreaCategory{}
		_spec       = pacq.querySpec()
		loadedTypes = [1]bool{
			pacq.withProtectedAreas != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProtectedAreaCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProtectedAreaCategory{config: pacq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pacq.modifiers) > 0 {
		_spec.Modifiers = pacq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pacq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pacq.withProtectedAreas; query != nil {
		if err := pacq.loadProtectedAreas(ctx, query, nodes,
			func(n *ProtectedAreaCategory) { n.Edges.ProtectedAreas = []*ProtectedArea{} },
			func(n *ProtectedAreaCategory, e *ProtectedArea) {
				n.Edges.ProtectedAreas = append(n.Edges.ProtectedAreas, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range pacq.withNamedProtectedAreas {
		if err := pacq.loadProtectedAreas(ctx, query, nodes,
			func(n *ProtectedAreaCategory) { n.appendNamedProtectedAreas(name) },
			func(n *ProtectedAreaCategory, e *ProtectedArea) { n.appendNamedProtectedAreas(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pacq.loadTotal {
		if err := pacq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pacq *ProtectedAreaCategoryQuery) loadProtectedAreas(ctx context.Context, query *ProtectedAreaQuery, nodes []*ProtectedAreaCategory, init func(*ProtectedAreaCategory), assign func(*ProtectedAreaCategory, *ProtectedArea)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ProtectedAreaCategory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProtectedArea(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(protectedareacategory.ProtectedAreasColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.protected_area_category_protected_areas
		if fk == nil {
			return fmt.Errorf(`foreign-key "protected_area_category_protected_areas" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "protected_area_category_protected_areas" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pacq *ProtectedAreaCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pacq.querySpec()
	if len(pacq.modifiers) > 0 {
		_spec.Modifiers = pacq.modifiers
	}
	_spec.Node.Columns = pacq.ctx.Fields
	if len(pacq.ctx.Fields) > 0 {
		_spec.Unique = pacq.ctx.Unique != nil && *pacq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pacq.driver, _spec)
}

func (pacq *ProtectedAreaCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(protectedareacategory.Table, protectedareacategory.Columns, sqlgraph.NewFieldSpec(protectedareacategory.FieldID, field.TypeInt))
	_spec.From = pacq.sql
	if unique := pacq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pacq.path != nil {
		_spec.Unique = true
	}
	if fields := pacq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, protectedareacategory.FieldID)
		for i := range fields {
			if fields[i] != protectedareacategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pacq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pacq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pacq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pacq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pacq *ProtectedAreaCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pacq.driver.Dialect())
	t1 := builder.Table(protectedareacategory.Table)
	columns := pacq.ctx.Fields
	if len(columns) == 0 {
		columns = protectedareacategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pacq.sql != nil {
		selector = pacq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pacq.ctx.Unique != nil && *pacq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pacq.predicates {
		p(selector)
	}
	for _, p := range pacq.order {
		p(selector)
	}
	if offset := pacq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pacq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedProtectedAreas tells the query-builder to eager-load the nodes that are connected to the "protected_areas"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pacq *ProtectedAreaCategoryQuery) WithNamedProtectedAreas(name string, opts ...func(*ProtectedAreaQuery)) *ProtectedAreaCategoryQuery {
	query := (&ProtectedAreaClient{config: pacq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pacq.withNamedProtectedAreas == nil {
		pacq.withNamedProtectedAreas = make(map[string]*ProtectedAreaQuery)
	}
	pacq.withNamedProtectedAreas[name] = query
	return pacq
}

// ProtectedAreaCategoryGroupBy is the group-by builder for ProtectedAreaCategory entities.
type ProtectedAreaCategoryGroupBy struct {
	selector
	build *ProtectedAreaCategoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pacgb *ProtectedAreaCategoryGroupBy) Aggregate(fns ...AggregateFunc) *ProtectedAreaCategoryGroupBy {
	pacgb.fns = append(pacgb.fns, fns...)
	return pacgb
}

// Scan applies the selector query and scans the result into the given value.
func (pacgb *ProtectedAreaCategoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pacgb.build.ctx, "GroupBy")
	if err := pacgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProtectedAreaCategoryQuery, *ProtectedAreaCategoryGroupBy](ctx, pacgb.build, pacgb, pacgb.build.inters, v)
}

func (pacgb *ProtectedAreaCategoryGroupBy) sqlScan(ctx context.Context, root *ProtectedAreaCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pacgb.fns))
	for _, fn := range pacgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pacgb.flds)+len(pacgb.fns))
		for _, f := range *pacgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pacgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pacgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProtectedAreaCategorySelect is the builder for selecting fields of ProtectedAreaCategory entities.
type ProtectedAreaCategorySelect struct {
	*ProtectedAreaCategoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pacs *ProtectedAreaCategorySelect) Aggregate(fns ...AggregateFunc) *ProtectedAreaCategorySelect {
	pacs.fns = append(pacs.fns, fns...)
	return pacs
}

// Scan applies the selector query and scans the result into the given value.
func (pacs *ProtectedAreaCategorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pacs.ctx, "Select")
	if err := pacs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProtectedAreaCategoryQuery, *ProtectedAreaCategorySelect](ctx, pacs.ProtectedAreaCategoryQuery, pacs, pacs.inters, v)
}

func (pacs *ProtectedAreaCategorySelect) sqlScan(ctx context.Context, root *ProtectedAreaCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pacs.fns))
	for _, fn := range pacs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pacs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pacs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
