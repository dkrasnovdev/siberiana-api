// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artgenre"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/artstyle"
	"github.com/dkrasnovdev/siberiana-api/ent/auditlog"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/bookgenre"
	"github.com/dkrasnovdev/siberiana-api/ent/category"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/culture"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/holder"
	"github.com/dkrasnovdev/siberiana-api/ent/holderresponsibility"
	"github.com/dkrasnovdev/siberiana-api/ent/keyword"
	"github.com/dkrasnovdev/siberiana-api/ent/license"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/medium"
	"github.com/dkrasnovdev/siberiana-api/ent/model"
	"github.com/dkrasnovdev/siberiana-api/ent/monument"
	"github.com/dkrasnovdev/siberiana-api/ent/organization"
	"github.com/dkrasnovdev/siberiana-api/ent/organizationtype"
	"github.com/dkrasnovdev/siberiana-api/ent/period"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/personrole"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/project"
	"github.com/dkrasnovdev/siberiana-api/ent/projecttype"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedarea"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareacategory"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
	"github.com/dkrasnovdev/siberiana-api/ent/publication"
	"github.com/dkrasnovdev/siberiana-api/ent/publisher"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/set"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
	"github.com/dkrasnovdev/siberiana-api/ent/technique"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The ArtFunc type is an adapter to allow the use of ordinary function as a Querier.
type ArtFunc func(context.Context, *ent.ArtQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ArtFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ArtQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ArtQuery", q)
}

// The TraverseArt type is an adapter to allow the use of ordinary function as Traverser.
type TraverseArt func(context.Context, *ent.ArtQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseArt) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseArt) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ArtQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ArtQuery", q)
}

// The ArtGenreFunc type is an adapter to allow the use of ordinary function as a Querier.
type ArtGenreFunc func(context.Context, *ent.ArtGenreQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ArtGenreFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ArtGenreQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ArtGenreQuery", q)
}

// The TraverseArtGenre type is an adapter to allow the use of ordinary function as Traverser.
type TraverseArtGenre func(context.Context, *ent.ArtGenreQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseArtGenre) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseArtGenre) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ArtGenreQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ArtGenreQuery", q)
}

// The ArtStyleFunc type is an adapter to allow the use of ordinary function as a Querier.
type ArtStyleFunc func(context.Context, *ent.ArtStyleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ArtStyleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ArtStyleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ArtStyleQuery", q)
}

// The TraverseArtStyle type is an adapter to allow the use of ordinary function as Traverser.
type TraverseArtStyle func(context.Context, *ent.ArtStyleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseArtStyle) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseArtStyle) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ArtStyleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ArtStyleQuery", q)
}

// The ArtifactFunc type is an adapter to allow the use of ordinary function as a Querier.
type ArtifactFunc func(context.Context, *ent.ArtifactQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ArtifactFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ArtifactQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ArtifactQuery", q)
}

// The TraverseArtifact type is an adapter to allow the use of ordinary function as Traverser.
type TraverseArtifact func(context.Context, *ent.ArtifactQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseArtifact) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseArtifact) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ArtifactQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ArtifactQuery", q)
}

// The AuditLogFunc type is an adapter to allow the use of ordinary function as a Querier.
type AuditLogFunc func(context.Context, *ent.AuditLogQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AuditLogFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AuditLogQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AuditLogQuery", q)
}

// The TraverseAuditLog type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAuditLog func(context.Context, *ent.AuditLogQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAuditLog) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAuditLog) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AuditLogQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AuditLogQuery", q)
}

// The BookFunc type is an adapter to allow the use of ordinary function as a Querier.
type BookFunc func(context.Context, *ent.BookQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BookFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BookQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BookQuery", q)
}

// The TraverseBook type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBook func(context.Context, *ent.BookQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBook) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBook) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BookQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BookQuery", q)
}

// The BookGenreFunc type is an adapter to allow the use of ordinary function as a Querier.
type BookGenreFunc func(context.Context, *ent.BookGenreQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BookGenreFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BookGenreQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BookGenreQuery", q)
}

// The TraverseBookGenre type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBookGenre func(context.Context, *ent.BookGenreQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBookGenre) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBookGenre) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BookGenreQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BookGenreQuery", q)
}

// The CategoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type CategoryFunc func(context.Context, *ent.CategoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CategoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CategoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CategoryQuery", q)
}

// The TraverseCategory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCategory func(context.Context, *ent.CategoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCategory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCategory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CategoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CategoryQuery", q)
}

// The CollectionFunc type is an adapter to allow the use of ordinary function as a Querier.
type CollectionFunc func(context.Context, *ent.CollectionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CollectionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CollectionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CollectionQuery", q)
}

// The TraverseCollection type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCollection func(context.Context, *ent.CollectionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCollection) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCollection) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CollectionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CollectionQuery", q)
}

// The CountryFunc type is an adapter to allow the use of ordinary function as a Querier.
type CountryFunc func(context.Context, *ent.CountryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CountryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CountryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CountryQuery", q)
}

// The TraverseCountry type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCountry func(context.Context, *ent.CountryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCountry) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCountry) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CountryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CountryQuery", q)
}

// The CultureFunc type is an adapter to allow the use of ordinary function as a Querier.
type CultureFunc func(context.Context, *ent.CultureQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CultureFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CultureQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CultureQuery", q)
}

// The TraverseCulture type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCulture func(context.Context, *ent.CultureQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCulture) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCulture) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CultureQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CultureQuery", q)
}

// The DistrictFunc type is an adapter to allow the use of ordinary function as a Querier.
type DistrictFunc func(context.Context, *ent.DistrictQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DistrictFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DistrictQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DistrictQuery", q)
}

// The TraverseDistrict type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDistrict func(context.Context, *ent.DistrictQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDistrict) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDistrict) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DistrictQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DistrictQuery", q)
}

// The HolderFunc type is an adapter to allow the use of ordinary function as a Querier.
type HolderFunc func(context.Context, *ent.HolderQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HolderFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HolderQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HolderQuery", q)
}

// The TraverseHolder type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHolder func(context.Context, *ent.HolderQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHolder) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHolder) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HolderQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HolderQuery", q)
}

// The HolderResponsibilityFunc type is an adapter to allow the use of ordinary function as a Querier.
type HolderResponsibilityFunc func(context.Context, *ent.HolderResponsibilityQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HolderResponsibilityFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HolderResponsibilityQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HolderResponsibilityQuery", q)
}

// The TraverseHolderResponsibility type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHolderResponsibility func(context.Context, *ent.HolderResponsibilityQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHolderResponsibility) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHolderResponsibility) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HolderResponsibilityQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HolderResponsibilityQuery", q)
}

// The KeywordFunc type is an adapter to allow the use of ordinary function as a Querier.
type KeywordFunc func(context.Context, *ent.KeywordQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f KeywordFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.KeywordQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.KeywordQuery", q)
}

// The TraverseKeyword type is an adapter to allow the use of ordinary function as Traverser.
type TraverseKeyword func(context.Context, *ent.KeywordQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseKeyword) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseKeyword) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.KeywordQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.KeywordQuery", q)
}

// The LicenseFunc type is an adapter to allow the use of ordinary function as a Querier.
type LicenseFunc func(context.Context, *ent.LicenseQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f LicenseFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.LicenseQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.LicenseQuery", q)
}

// The TraverseLicense type is an adapter to allow the use of ordinary function as Traverser.
type TraverseLicense func(context.Context, *ent.LicenseQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseLicense) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseLicense) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LicenseQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.LicenseQuery", q)
}

// The LocationFunc type is an adapter to allow the use of ordinary function as a Querier.
type LocationFunc func(context.Context, *ent.LocationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f LocationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.LocationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.LocationQuery", q)
}

// The TraverseLocation type is an adapter to allow the use of ordinary function as Traverser.
type TraverseLocation func(context.Context, *ent.LocationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseLocation) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseLocation) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LocationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.LocationQuery", q)
}

// The MediumFunc type is an adapter to allow the use of ordinary function as a Querier.
type MediumFunc func(context.Context, *ent.MediumQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MediumFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MediumQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MediumQuery", q)
}

// The TraverseMedium type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMedium func(context.Context, *ent.MediumQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMedium) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMedium) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MediumQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MediumQuery", q)
}

// The ModelFunc type is an adapter to allow the use of ordinary function as a Querier.
type ModelFunc func(context.Context, *ent.ModelQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ModelFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ModelQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ModelQuery", q)
}

// The TraverseModel type is an adapter to allow the use of ordinary function as Traverser.
type TraverseModel func(context.Context, *ent.ModelQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseModel) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseModel) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ModelQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ModelQuery", q)
}

// The MonumentFunc type is an adapter to allow the use of ordinary function as a Querier.
type MonumentFunc func(context.Context, *ent.MonumentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MonumentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MonumentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MonumentQuery", q)
}

// The TraverseMonument type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMonument func(context.Context, *ent.MonumentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMonument) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMonument) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MonumentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MonumentQuery", q)
}

// The OrganizationFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationFunc func(context.Context, *ent.OrganizationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrganizationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrganizationQuery", q)
}

// The TraverseOrganization type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganization func(context.Context, *ent.OrganizationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganization) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganization) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrganizationQuery", q)
}

// The OrganizationTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationTypeFunc func(context.Context, *ent.OrganizationTypeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrganizationTypeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrganizationTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrganizationTypeQuery", q)
}

// The TraverseOrganizationType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganizationType func(context.Context, *ent.OrganizationTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganizationType) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganizationType) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrganizationTypeQuery", q)
}

// The PeriodFunc type is an adapter to allow the use of ordinary function as a Querier.
type PeriodFunc func(context.Context, *ent.PeriodQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PeriodFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PeriodQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PeriodQuery", q)
}

// The TraversePeriod type is an adapter to allow the use of ordinary function as Traverser.
type TraversePeriod func(context.Context, *ent.PeriodQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePeriod) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePeriod) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PeriodQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PeriodQuery", q)
}

// The PersonFunc type is an adapter to allow the use of ordinary function as a Querier.
type PersonFunc func(context.Context, *ent.PersonQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PersonFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PersonQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PersonQuery", q)
}

// The TraversePerson type is an adapter to allow the use of ordinary function as Traverser.
type TraversePerson func(context.Context, *ent.PersonQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePerson) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePerson) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PersonQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PersonQuery", q)
}

// The PersonRoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type PersonRoleFunc func(context.Context, *ent.PersonRoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PersonRoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PersonRoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PersonRoleQuery", q)
}

// The TraversePersonRole type is an adapter to allow the use of ordinary function as Traverser.
type TraversePersonRole func(context.Context, *ent.PersonRoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePersonRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePersonRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PersonRoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PersonRoleQuery", q)
}

// The ProjectFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProjectFunc func(context.Context, *ent.ProjectQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProjectFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProjectQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProjectQuery", q)
}

// The TraverseProject type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProject func(context.Context, *ent.ProjectQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProject) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProject) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProjectQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProjectQuery", q)
}

// The ProjectTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProjectTypeFunc func(context.Context, *ent.ProjectTypeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProjectTypeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProjectTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProjectTypeQuery", q)
}

// The TraverseProjectType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProjectType func(context.Context, *ent.ProjectTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProjectType) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProjectType) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProjectTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProjectTypeQuery", q)
}

// The ProtectedAreaFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProtectedAreaFunc func(context.Context, *ent.ProtectedAreaQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProtectedAreaFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProtectedAreaQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProtectedAreaQuery", q)
}

// The TraverseProtectedArea type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProtectedArea func(context.Context, *ent.ProtectedAreaQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProtectedArea) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProtectedArea) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProtectedAreaQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProtectedAreaQuery", q)
}

// The ProtectedAreaCategoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProtectedAreaCategoryFunc func(context.Context, *ent.ProtectedAreaCategoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProtectedAreaCategoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProtectedAreaCategoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProtectedAreaCategoryQuery", q)
}

// The TraverseProtectedAreaCategory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProtectedAreaCategory func(context.Context, *ent.ProtectedAreaCategoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProtectedAreaCategory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProtectedAreaCategory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProtectedAreaCategoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProtectedAreaCategoryQuery", q)
}

// The ProtectedAreaPictureFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProtectedAreaPictureFunc func(context.Context, *ent.ProtectedAreaPictureQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProtectedAreaPictureFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProtectedAreaPictureQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProtectedAreaPictureQuery", q)
}

// The TraverseProtectedAreaPicture type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProtectedAreaPicture func(context.Context, *ent.ProtectedAreaPictureQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProtectedAreaPicture) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProtectedAreaPicture) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProtectedAreaPictureQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProtectedAreaPictureQuery", q)
}

// The PublicationFunc type is an adapter to allow the use of ordinary function as a Querier.
type PublicationFunc func(context.Context, *ent.PublicationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PublicationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PublicationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PublicationQuery", q)
}

// The TraversePublication type is an adapter to allow the use of ordinary function as Traverser.
type TraversePublication func(context.Context, *ent.PublicationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePublication) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePublication) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PublicationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PublicationQuery", q)
}

// The PublisherFunc type is an adapter to allow the use of ordinary function as a Querier.
type PublisherFunc func(context.Context, *ent.PublisherQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PublisherFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PublisherQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PublisherQuery", q)
}

// The TraversePublisher type is an adapter to allow the use of ordinary function as Traverser.
type TraversePublisher func(context.Context, *ent.PublisherQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePublisher) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePublisher) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PublisherQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PublisherQuery", q)
}

// The RegionFunc type is an adapter to allow the use of ordinary function as a Querier.
type RegionFunc func(context.Context, *ent.RegionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RegionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RegionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RegionQuery", q)
}

// The TraverseRegion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRegion func(context.Context, *ent.RegionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRegion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRegion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RegionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RegionQuery", q)
}

// The SetFunc type is an adapter to allow the use of ordinary function as a Querier.
type SetFunc func(context.Context, *ent.SetQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SetFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SetQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SetQuery", q)
}

// The TraverseSet type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSet func(context.Context, *ent.SetQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSet) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSet) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SetQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SetQuery", q)
}

// The SettlementFunc type is an adapter to allow the use of ordinary function as a Querier.
type SettlementFunc func(context.Context, *ent.SettlementQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SettlementFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SettlementQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SettlementQuery", q)
}

// The TraverseSettlement type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSettlement func(context.Context, *ent.SettlementQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSettlement) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSettlement) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SettlementQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SettlementQuery", q)
}

// The TechniqueFunc type is an adapter to allow the use of ordinary function as a Querier.
type TechniqueFunc func(context.Context, *ent.TechniqueQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TechniqueFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TechniqueQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TechniqueQuery", q)
}

// The TraverseTechnique type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTechnique func(context.Context, *ent.TechniqueQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTechnique) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTechnique) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TechniqueQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TechniqueQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.ArtQuery:
		return &query[*ent.ArtQuery, predicate.Art, art.OrderOption]{typ: ent.TypeArt, tq: q}, nil
	case *ent.ArtGenreQuery:
		return &query[*ent.ArtGenreQuery, predicate.ArtGenre, artgenre.OrderOption]{typ: ent.TypeArtGenre, tq: q}, nil
	case *ent.ArtStyleQuery:
		return &query[*ent.ArtStyleQuery, predicate.ArtStyle, artstyle.OrderOption]{typ: ent.TypeArtStyle, tq: q}, nil
	case *ent.ArtifactQuery:
		return &query[*ent.ArtifactQuery, predicate.Artifact, artifact.OrderOption]{typ: ent.TypeArtifact, tq: q}, nil
	case *ent.AuditLogQuery:
		return &query[*ent.AuditLogQuery, predicate.AuditLog, auditlog.OrderOption]{typ: ent.TypeAuditLog, tq: q}, nil
	case *ent.BookQuery:
		return &query[*ent.BookQuery, predicate.Book, book.OrderOption]{typ: ent.TypeBook, tq: q}, nil
	case *ent.BookGenreQuery:
		return &query[*ent.BookGenreQuery, predicate.BookGenre, bookgenre.OrderOption]{typ: ent.TypeBookGenre, tq: q}, nil
	case *ent.CategoryQuery:
		return &query[*ent.CategoryQuery, predicate.Category, category.OrderOption]{typ: ent.TypeCategory, tq: q}, nil
	case *ent.CollectionQuery:
		return &query[*ent.CollectionQuery, predicate.Collection, collection.OrderOption]{typ: ent.TypeCollection, tq: q}, nil
	case *ent.CountryQuery:
		return &query[*ent.CountryQuery, predicate.Country, country.OrderOption]{typ: ent.TypeCountry, tq: q}, nil
	case *ent.CultureQuery:
		return &query[*ent.CultureQuery, predicate.Culture, culture.OrderOption]{typ: ent.TypeCulture, tq: q}, nil
	case *ent.DistrictQuery:
		return &query[*ent.DistrictQuery, predicate.District, district.OrderOption]{typ: ent.TypeDistrict, tq: q}, nil
	case *ent.HolderQuery:
		return &query[*ent.HolderQuery, predicate.Holder, holder.OrderOption]{typ: ent.TypeHolder, tq: q}, nil
	case *ent.HolderResponsibilityQuery:
		return &query[*ent.HolderResponsibilityQuery, predicate.HolderResponsibility, holderresponsibility.OrderOption]{typ: ent.TypeHolderResponsibility, tq: q}, nil
	case *ent.KeywordQuery:
		return &query[*ent.KeywordQuery, predicate.Keyword, keyword.OrderOption]{typ: ent.TypeKeyword, tq: q}, nil
	case *ent.LicenseQuery:
		return &query[*ent.LicenseQuery, predicate.License, license.OrderOption]{typ: ent.TypeLicense, tq: q}, nil
	case *ent.LocationQuery:
		return &query[*ent.LocationQuery, predicate.Location, location.OrderOption]{typ: ent.TypeLocation, tq: q}, nil
	case *ent.MediumQuery:
		return &query[*ent.MediumQuery, predicate.Medium, medium.OrderOption]{typ: ent.TypeMedium, tq: q}, nil
	case *ent.ModelQuery:
		return &query[*ent.ModelQuery, predicate.Model, model.OrderOption]{typ: ent.TypeModel, tq: q}, nil
	case *ent.MonumentQuery:
		return &query[*ent.MonumentQuery, predicate.Monument, monument.OrderOption]{typ: ent.TypeMonument, tq: q}, nil
	case *ent.OrganizationQuery:
		return &query[*ent.OrganizationQuery, predicate.Organization, organization.OrderOption]{typ: ent.TypeOrganization, tq: q}, nil
	case *ent.OrganizationTypeQuery:
		return &query[*ent.OrganizationTypeQuery, predicate.OrganizationType, organizationtype.OrderOption]{typ: ent.TypeOrganizationType, tq: q}, nil
	case *ent.PeriodQuery:
		return &query[*ent.PeriodQuery, predicate.Period, period.OrderOption]{typ: ent.TypePeriod, tq: q}, nil
	case *ent.PersonQuery:
		return &query[*ent.PersonQuery, predicate.Person, person.OrderOption]{typ: ent.TypePerson, tq: q}, nil
	case *ent.PersonRoleQuery:
		return &query[*ent.PersonRoleQuery, predicate.PersonRole, personrole.OrderOption]{typ: ent.TypePersonRole, tq: q}, nil
	case *ent.ProjectQuery:
		return &query[*ent.ProjectQuery, predicate.Project, project.OrderOption]{typ: ent.TypeProject, tq: q}, nil
	case *ent.ProjectTypeQuery:
		return &query[*ent.ProjectTypeQuery, predicate.ProjectType, projecttype.OrderOption]{typ: ent.TypeProjectType, tq: q}, nil
	case *ent.ProtectedAreaQuery:
		return &query[*ent.ProtectedAreaQuery, predicate.ProtectedArea, protectedarea.OrderOption]{typ: ent.TypeProtectedArea, tq: q}, nil
	case *ent.ProtectedAreaCategoryQuery:
		return &query[*ent.ProtectedAreaCategoryQuery, predicate.ProtectedAreaCategory, protectedareacategory.OrderOption]{typ: ent.TypeProtectedAreaCategory, tq: q}, nil
	case *ent.ProtectedAreaPictureQuery:
		return &query[*ent.ProtectedAreaPictureQuery, predicate.ProtectedAreaPicture, protectedareapicture.OrderOption]{typ: ent.TypeProtectedAreaPicture, tq: q}, nil
	case *ent.PublicationQuery:
		return &query[*ent.PublicationQuery, predicate.Publication, publication.OrderOption]{typ: ent.TypePublication, tq: q}, nil
	case *ent.PublisherQuery:
		return &query[*ent.PublisherQuery, predicate.Publisher, publisher.OrderOption]{typ: ent.TypePublisher, tq: q}, nil
	case *ent.RegionQuery:
		return &query[*ent.RegionQuery, predicate.Region, region.OrderOption]{typ: ent.TypeRegion, tq: q}, nil
	case *ent.SetQuery:
		return &query[*ent.SetQuery, predicate.Set, set.OrderOption]{typ: ent.TypeSet, tq: q}, nil
	case *ent.SettlementQuery:
		return &query[*ent.SettlementQuery, predicate.Settlement, settlement.OrderOption]{typ: ent.TypeSettlement, tq: q}, nil
	case *ent.TechniqueQuery:
		return &query[*ent.TechniqueQuery, predicate.Technique, technique.OrderOption]{typ: ent.TypeTechnique, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
