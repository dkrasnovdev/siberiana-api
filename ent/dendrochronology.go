// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronology"
)

// Dendrochronology is the model entity for the Dendrochronology schema.
type Dendrochronology struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Dating holds the value of the "dating" field.
	Dating string `json:"dating,omitempty"`
	// DatingStart holds the value of the "dating_start" field.
	DatingStart int `json:"dating_start,omitempty"`
	// DatingEnd holds the value of the "dating_end" field.
	DatingEnd int `json:"dating_end,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Abbreviation holds the value of the "abbreviation" field.
	Abbreviation string `json:"abbreviation,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ExternalLink holds the value of the "external_link" field.
	ExternalLink string `json:"external_link,omitempty"`
	// Status holds the value of the "status" field.
	Status dendrochronology.Status `json:"status,omitempty"`
	// PrimaryImageURL holds the value of the "primary_image_url" field.
	PrimaryImageURL string `json:"primary_image_url,omitempty"`
	// AdditionalImagesUrls holds the value of the "additional_images_urls" field.
	AdditionalImagesUrls []string `json:"additional_images_urls,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// AnalysisData holds the value of the "analysis_data" field.
	AnalysisData string `json:"analysis_data,omitempty"`
	// AnalysisURL holds the value of the "analysis_url" field.
	AnalysisURL string `json:"analysis_url,omitempty"`
	// DataURL holds the value of the "data_url" field.
	DataURL string `json:"data_url,omitempty"`
	// ChartURL holds the value of the "chart_url" field.
	ChartURL string `json:"chart_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DendrochronologyQuery when eager-loading is set.
	Edges                                DendrochronologyEdges `json:"edges"`
	collection_dendrochronology          *int
	personal_collection_dendrochronology *int
	selectValues                         sql.SelectValues
}

// DendrochronologyEdges holds the relations/edges for other nodes in the graph.
type DendrochronologyEdges struct {
	// Analysis holds the value of the analysis edge.
	Analysis []*DendrochronologicalAnalysis `json:"analysis,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedAnalysis map[string][]*DendrochronologicalAnalysis
}

// AnalysisOrErr returns the Analysis value or an error if the edge
// was not loaded in eager-loading.
func (e DendrochronologyEdges) AnalysisOrErr() ([]*DendrochronologicalAnalysis, error) {
	if e.loadedTypes[0] {
		return e.Analysis, nil
	}
	return nil, &NotLoadedError{edge: "analysis"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dendrochronology) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dendrochronology.FieldAdditionalImagesUrls:
			values[i] = new([]byte)
		case dendrochronology.FieldID, dendrochronology.FieldDatingStart, dendrochronology.FieldDatingEnd:
			values[i] = new(sql.NullInt64)
		case dendrochronology.FieldCreatedBy, dendrochronology.FieldUpdatedBy, dendrochronology.FieldDating, dendrochronology.FieldDisplayName, dendrochronology.FieldAbbreviation, dendrochronology.FieldDescription, dendrochronology.FieldExternalLink, dendrochronology.FieldStatus, dendrochronology.FieldPrimaryImageURL, dendrochronology.FieldDeletedBy, dendrochronology.FieldAnalysisData, dendrochronology.FieldAnalysisURL, dendrochronology.FieldDataURL, dendrochronology.FieldChartURL:
			values[i] = new(sql.NullString)
		case dendrochronology.FieldCreatedAt, dendrochronology.FieldUpdatedAt, dendrochronology.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case dendrochronology.ForeignKeys[0]: // collection_dendrochronology
			values[i] = new(sql.NullInt64)
		case dendrochronology.ForeignKeys[1]: // personal_collection_dendrochronology
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dendrochronology fields.
func (d *Dendrochronology) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dendrochronology.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case dendrochronology.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case dendrochronology.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				d.CreatedBy = value.String
			}
		case dendrochronology.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case dendrochronology.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				d.UpdatedBy = value.String
			}
		case dendrochronology.FieldDating:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dating", values[i])
			} else if value.Valid {
				d.Dating = value.String
			}
		case dendrochronology.FieldDatingStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dating_start", values[i])
			} else if value.Valid {
				d.DatingStart = int(value.Int64)
			}
		case dendrochronology.FieldDatingEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dating_end", values[i])
			} else if value.Valid {
				d.DatingEnd = int(value.Int64)
			}
		case dendrochronology.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				d.DisplayName = value.String
			}
		case dendrochronology.FieldAbbreviation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abbreviation", values[i])
			} else if value.Valid {
				d.Abbreviation = value.String
			}
		case dendrochronology.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				d.Description = value.String
			}
		case dendrochronology.FieldExternalLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_link", values[i])
			} else if value.Valid {
				d.ExternalLink = value.String
			}
		case dendrochronology.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = dendrochronology.Status(value.String)
			}
		case dendrochronology.FieldPrimaryImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_image_url", values[i])
			} else if value.Valid {
				d.PrimaryImageURL = value.String
			}
		case dendrochronology.FieldAdditionalImagesUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field additional_images_urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.AdditionalImagesUrls); err != nil {
					return fmt.Errorf("unmarshal field additional_images_urls: %w", err)
				}
			}
		case dendrochronology.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				d.DeletedAt = value.Time
			}
		case dendrochronology.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				d.DeletedBy = value.String
			}
		case dendrochronology.FieldAnalysisData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field analysis_data", values[i])
			} else if value.Valid {
				d.AnalysisData = value.String
			}
		case dendrochronology.FieldAnalysisURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field analysis_url", values[i])
			} else if value.Valid {
				d.AnalysisURL = value.String
			}
		case dendrochronology.FieldDataURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_url", values[i])
			} else if value.Valid {
				d.DataURL = value.String
			}
		case dendrochronology.FieldChartURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chart_url", values[i])
			} else if value.Valid {
				d.ChartURL = value.String
			}
		case dendrochronology.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field collection_dendrochronology", value)
			} else if value.Valid {
				d.collection_dendrochronology = new(int)
				*d.collection_dendrochronology = int(value.Int64)
			}
		case dendrochronology.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field personal_collection_dendrochronology", value)
			} else if value.Valid {
				d.personal_collection_dendrochronology = new(int)
				*d.personal_collection_dendrochronology = int(value.Int64)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Dendrochronology.
// This includes values selected through modifiers, order, etc.
func (d *Dendrochronology) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryAnalysis queries the "analysis" edge of the Dendrochronology entity.
func (d *Dendrochronology) QueryAnalysis() *DendrochronologicalAnalysisQuery {
	return NewDendrochronologyClient(d.config).QueryAnalysis(d)
}

// Update returns a builder for updating this Dendrochronology.
// Note that you need to call Dendrochronology.Unwrap() before calling this method if this Dendrochronology
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dendrochronology) Update() *DendrochronologyUpdateOne {
	return NewDendrochronologyClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Dendrochronology entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dendrochronology) Unwrap() *Dendrochronology {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dendrochronology is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dendrochronology) String() string {
	var builder strings.Builder
	builder.WriteString("Dendrochronology(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(d.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(d.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("dating=")
	builder.WriteString(d.Dating)
	builder.WriteString(", ")
	builder.WriteString("dating_start=")
	builder.WriteString(fmt.Sprintf("%v", d.DatingStart))
	builder.WriteString(", ")
	builder.WriteString("dating_end=")
	builder.WriteString(fmt.Sprintf("%v", d.DatingEnd))
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(d.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("abbreviation=")
	builder.WriteString(d.Abbreviation)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(d.Description)
	builder.WriteString(", ")
	builder.WriteString("external_link=")
	builder.WriteString(d.ExternalLink)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", d.Status))
	builder.WriteString(", ")
	builder.WriteString("primary_image_url=")
	builder.WriteString(d.PrimaryImageURL)
	builder.WriteString(", ")
	builder.WriteString("additional_images_urls=")
	builder.WriteString(fmt.Sprintf("%v", d.AdditionalImagesUrls))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(d.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(d.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("analysis_data=")
	builder.WriteString(d.AnalysisData)
	builder.WriteString(", ")
	builder.WriteString("analysis_url=")
	builder.WriteString(d.AnalysisURL)
	builder.WriteString(", ")
	builder.WriteString("data_url=")
	builder.WriteString(d.DataURL)
	builder.WriteString(", ")
	builder.WriteString("chart_url=")
	builder.WriteString(d.ChartURL)
	builder.WriteByte(')')
	return builder.String()
}

// NamedAnalysis returns the Analysis named value or an error if the edge was not
// loaded in eager-loading with this name.
func (d *Dendrochronology) NamedAnalysis(name string) ([]*DendrochronologicalAnalysis, error) {
	if d.Edges.namedAnalysis == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := d.Edges.namedAnalysis[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (d *Dendrochronology) appendNamedAnalysis(name string, edges ...*DendrochronologicalAnalysis) {
	if d.Edges.namedAnalysis == nil {
		d.Edges.namedAnalysis = make(map[string][]*DendrochronologicalAnalysis)
	}
	if len(edges) == 0 {
		d.Edges.namedAnalysis[name] = []*DendrochronologicalAnalysis{}
	} else {
		d.Edges.namedAnalysis[name] = append(d.Edges.namedAnalysis[name], edges...)
	}
}

// Dendrochronologies is a parsable slice of Dendrochronology.
type Dendrochronologies []*Dendrochronology
