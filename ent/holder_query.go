// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/artifact"
	"github.com/dkrasnovdev/heritage-api/ent/book"
	"github.com/dkrasnovdev/heritage-api/ent/holder"
	"github.com/dkrasnovdev/heritage-api/ent/holderresponsibility"
	"github.com/dkrasnovdev/heritage-api/ent/organization"
	"github.com/dkrasnovdev/heritage-api/ent/person"
	"github.com/dkrasnovdev/heritage-api/ent/predicate"
)

// HolderQuery is the builder for querying Holder entities.
type HolderQuery struct {
	config
	ctx                             *QueryContext
	order                           []holder.OrderOption
	inters                          []Interceptor
	predicates                      []predicate.Holder
	withArtifacts                   *ArtifactQuery
	withBooks                       *BookQuery
	withHolderResponsibilities      *HolderResponsibilityQuery
	withPerson                      *PersonQuery
	withOrganization                *OrganizationQuery
	modifiers                       []func(*sql.Selector)
	loadTotal                       []func(context.Context, []*Holder) error
	withNamedArtifacts              map[string]*ArtifactQuery
	withNamedBooks                  map[string]*BookQuery
	withNamedHolderResponsibilities map[string]*HolderResponsibilityQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HolderQuery builder.
func (hq *HolderQuery) Where(ps ...predicate.Holder) *HolderQuery {
	hq.predicates = append(hq.predicates, ps...)
	return hq
}

// Limit the number of records to be returned by this query.
func (hq *HolderQuery) Limit(limit int) *HolderQuery {
	hq.ctx.Limit = &limit
	return hq
}

// Offset to start from.
func (hq *HolderQuery) Offset(offset int) *HolderQuery {
	hq.ctx.Offset = &offset
	return hq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hq *HolderQuery) Unique(unique bool) *HolderQuery {
	hq.ctx.Unique = &unique
	return hq
}

// Order specifies how the records should be ordered.
func (hq *HolderQuery) Order(o ...holder.OrderOption) *HolderQuery {
	hq.order = append(hq.order, o...)
	return hq
}

// QueryArtifacts chains the current query on the "artifacts" edge.
func (hq *HolderQuery) QueryArtifacts() *ArtifactQuery {
	query := (&ArtifactClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(holder.Table, holder.FieldID, selector),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, holder.ArtifactsTable, holder.ArtifactsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBooks chains the current query on the "books" edge.
func (hq *HolderQuery) QueryBooks() *BookQuery {
	query := (&BookClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(holder.Table, holder.FieldID, selector),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, holder.BooksTable, holder.BooksPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHolderResponsibilities chains the current query on the "holder_responsibilities" edge.
func (hq *HolderQuery) QueryHolderResponsibilities() *HolderResponsibilityQuery {
	query := (&HolderResponsibilityClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(holder.Table, holder.FieldID, selector),
			sqlgraph.To(holderresponsibility.Table, holderresponsibility.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, holder.HolderResponsibilitiesTable, holder.HolderResponsibilitiesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPerson chains the current query on the "person" edge.
func (hq *HolderQuery) QueryPerson() *PersonQuery {
	query := (&PersonClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(holder.Table, holder.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, holder.PersonTable, holder.PersonColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (hq *HolderQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(holder.Table, holder.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, holder.OrganizationTable, holder.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Holder entity from the query.
// Returns a *NotFoundError when no Holder was found.
func (hq *HolderQuery) First(ctx context.Context) (*Holder, error) {
	nodes, err := hq.Limit(1).All(setContextOp(ctx, hq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{holder.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hq *HolderQuery) FirstX(ctx context.Context) *Holder {
	node, err := hq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Holder ID from the query.
// Returns a *NotFoundError when no Holder ID was found.
func (hq *HolderQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hq.Limit(1).IDs(setContextOp(ctx, hq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{holder.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hq *HolderQuery) FirstIDX(ctx context.Context) int {
	id, err := hq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Holder entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Holder entity is found.
// Returns a *NotFoundError when no Holder entities are found.
func (hq *HolderQuery) Only(ctx context.Context) (*Holder, error) {
	nodes, err := hq.Limit(2).All(setContextOp(ctx, hq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{holder.Label}
	default:
		return nil, &NotSingularError{holder.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hq *HolderQuery) OnlyX(ctx context.Context) *Holder {
	node, err := hq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Holder ID in the query.
// Returns a *NotSingularError when more than one Holder ID is found.
// Returns a *NotFoundError when no entities are found.
func (hq *HolderQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hq.Limit(2).IDs(setContextOp(ctx, hq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{holder.Label}
	default:
		err = &NotSingularError{holder.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hq *HolderQuery) OnlyIDX(ctx context.Context) int {
	id, err := hq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Holders.
func (hq *HolderQuery) All(ctx context.Context) ([]*Holder, error) {
	ctx = setContextOp(ctx, hq.ctx, "All")
	if err := hq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Holder, *HolderQuery]()
	return withInterceptors[[]*Holder](ctx, hq, qr, hq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hq *HolderQuery) AllX(ctx context.Context) []*Holder {
	nodes, err := hq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Holder IDs.
func (hq *HolderQuery) IDs(ctx context.Context) (ids []int, err error) {
	if hq.ctx.Unique == nil && hq.path != nil {
		hq.Unique(true)
	}
	ctx = setContextOp(ctx, hq.ctx, "IDs")
	if err = hq.Select(holder.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hq *HolderQuery) IDsX(ctx context.Context) []int {
	ids, err := hq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hq *HolderQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hq.ctx, "Count")
	if err := hq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hq, querierCount[*HolderQuery](), hq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hq *HolderQuery) CountX(ctx context.Context) int {
	count, err := hq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hq *HolderQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hq.ctx, "Exist")
	switch _, err := hq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hq *HolderQuery) ExistX(ctx context.Context) bool {
	exist, err := hq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HolderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hq *HolderQuery) Clone() *HolderQuery {
	if hq == nil {
		return nil
	}
	return &HolderQuery{
		config:                     hq.config,
		ctx:                        hq.ctx.Clone(),
		order:                      append([]holder.OrderOption{}, hq.order...),
		inters:                     append([]Interceptor{}, hq.inters...),
		predicates:                 append([]predicate.Holder{}, hq.predicates...),
		withArtifacts:              hq.withArtifacts.Clone(),
		withBooks:                  hq.withBooks.Clone(),
		withHolderResponsibilities: hq.withHolderResponsibilities.Clone(),
		withPerson:                 hq.withPerson.Clone(),
		withOrganization:           hq.withOrganization.Clone(),
		// clone intermediate query.
		sql:  hq.sql.Clone(),
		path: hq.path,
	}
}

// WithArtifacts tells the query-builder to eager-load the nodes that are connected to
// the "artifacts" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HolderQuery) WithArtifacts(opts ...func(*ArtifactQuery)) *HolderQuery {
	query := (&ArtifactClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withArtifacts = query
	return hq
}

// WithBooks tells the query-builder to eager-load the nodes that are connected to
// the "books" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HolderQuery) WithBooks(opts ...func(*BookQuery)) *HolderQuery {
	query := (&BookClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withBooks = query
	return hq
}

// WithHolderResponsibilities tells the query-builder to eager-load the nodes that are connected to
// the "holder_responsibilities" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HolderQuery) WithHolderResponsibilities(opts ...func(*HolderResponsibilityQuery)) *HolderQuery {
	query := (&HolderResponsibilityClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withHolderResponsibilities = query
	return hq
}

// WithPerson tells the query-builder to eager-load the nodes that are connected to
// the "person" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HolderQuery) WithPerson(opts ...func(*PersonQuery)) *HolderQuery {
	query := (&PersonClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withPerson = query
	return hq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HolderQuery) WithOrganization(opts ...func(*OrganizationQuery)) *HolderQuery {
	query := (&OrganizationClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withOrganization = query
	return hq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Holder.Query().
//		GroupBy(holder.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hq *HolderQuery) GroupBy(field string, fields ...string) *HolderGroupBy {
	hq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HolderGroupBy{build: hq}
	grbuild.flds = &hq.ctx.Fields
	grbuild.label = holder.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Holder.Query().
//		Select(holder.FieldCreatedAt).
//		Scan(ctx, &v)
func (hq *HolderQuery) Select(fields ...string) *HolderSelect {
	hq.ctx.Fields = append(hq.ctx.Fields, fields...)
	sbuild := &HolderSelect{HolderQuery: hq}
	sbuild.label = holder.Label
	sbuild.flds, sbuild.scan = &hq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HolderSelect configured with the given aggregations.
func (hq *HolderQuery) Aggregate(fns ...AggregateFunc) *HolderSelect {
	return hq.Select().Aggregate(fns...)
}

func (hq *HolderQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hq); err != nil {
				return err
			}
		}
	}
	for _, f := range hq.ctx.Fields {
		if !holder.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hq.path != nil {
		prev, err := hq.path(ctx)
		if err != nil {
			return err
		}
		hq.sql = prev
	}
	if holder.Policy == nil {
		return errors.New("ent: uninitialized holder.Policy (forgotten import ent/runtime?)")
	}
	if err := holder.Policy.EvalQuery(ctx, hq); err != nil {
		return err
	}
	return nil
}

func (hq *HolderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Holder, error) {
	var (
		nodes       = []*Holder{}
		_spec       = hq.querySpec()
		loadedTypes = [5]bool{
			hq.withArtifacts != nil,
			hq.withBooks != nil,
			hq.withHolderResponsibilities != nil,
			hq.withPerson != nil,
			hq.withOrganization != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Holder).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Holder{config: hq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hq.modifiers) > 0 {
		_spec.Modifiers = hq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hq.withArtifacts; query != nil {
		if err := hq.loadArtifacts(ctx, query, nodes,
			func(n *Holder) { n.Edges.Artifacts = []*Artifact{} },
			func(n *Holder, e *Artifact) { n.Edges.Artifacts = append(n.Edges.Artifacts, e) }); err != nil {
			return nil, err
		}
	}
	if query := hq.withBooks; query != nil {
		if err := hq.loadBooks(ctx, query, nodes,
			func(n *Holder) { n.Edges.Books = []*Book{} },
			func(n *Holder, e *Book) { n.Edges.Books = append(n.Edges.Books, e) }); err != nil {
			return nil, err
		}
	}
	if query := hq.withHolderResponsibilities; query != nil {
		if err := hq.loadHolderResponsibilities(ctx, query, nodes,
			func(n *Holder) { n.Edges.HolderResponsibilities = []*HolderResponsibility{} },
			func(n *Holder, e *HolderResponsibility) {
				n.Edges.HolderResponsibilities = append(n.Edges.HolderResponsibilities, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := hq.withPerson; query != nil {
		if err := hq.loadPerson(ctx, query, nodes, nil,
			func(n *Holder, e *Person) { n.Edges.Person = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withOrganization; query != nil {
		if err := hq.loadOrganization(ctx, query, nodes, nil,
			func(n *Holder, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range hq.withNamedArtifacts {
		if err := hq.loadArtifacts(ctx, query, nodes,
			func(n *Holder) { n.appendNamedArtifacts(name) },
			func(n *Holder, e *Artifact) { n.appendNamedArtifacts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hq.withNamedBooks {
		if err := hq.loadBooks(ctx, query, nodes,
			func(n *Holder) { n.appendNamedBooks(name) },
			func(n *Holder, e *Book) { n.appendNamedBooks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range hq.withNamedHolderResponsibilities {
		if err := hq.loadHolderResponsibilities(ctx, query, nodes,
			func(n *Holder) { n.appendNamedHolderResponsibilities(name) },
			func(n *Holder, e *HolderResponsibility) { n.appendNamedHolderResponsibilities(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range hq.loadTotal {
		if err := hq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hq *HolderQuery) loadArtifacts(ctx context.Context, query *ArtifactQuery, nodes []*Holder, init func(*Holder), assign func(*Holder, *Artifact)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Holder)
	nids := make(map[int]map[*Holder]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(holder.ArtifactsTable)
		s.Join(joinT).On(s.C(artifact.FieldID), joinT.C(holder.ArtifactsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(holder.ArtifactsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(holder.ArtifactsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Holder]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Artifact](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "artifacts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hq *HolderQuery) loadBooks(ctx context.Context, query *BookQuery, nodes []*Holder, init func(*Holder), assign func(*Holder, *Book)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Holder)
	nids := make(map[int]map[*Holder]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(holder.BooksTable)
		s.Join(joinT).On(s.C(book.FieldID), joinT.C(holder.BooksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(holder.BooksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(holder.BooksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Holder]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Book](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "books" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hq *HolderQuery) loadHolderResponsibilities(ctx context.Context, query *HolderResponsibilityQuery, nodes []*Holder, init func(*Holder), assign func(*Holder, *HolderResponsibility)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Holder)
	nids := make(map[int]map[*Holder]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(holder.HolderResponsibilitiesTable)
		s.Join(joinT).On(s.C(holderresponsibility.FieldID), joinT.C(holder.HolderResponsibilitiesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(holder.HolderResponsibilitiesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(holder.HolderResponsibilitiesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Holder]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*HolderResponsibility](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "holder_responsibilities" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (hq *HolderQuery) loadPerson(ctx context.Context, query *PersonQuery, nodes []*Holder, init func(*Holder), assign func(*Holder, *Person)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Holder)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Person(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(holder.PersonColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.holder_person
		if fk == nil {
			return fmt.Errorf(`foreign-key "holder_person" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "holder_person" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (hq *HolderQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*Holder, init func(*Holder), assign func(*Holder, *Organization)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Holder)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Organization(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(holder.OrganizationColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.holder_organization
		if fk == nil {
			return fmt.Errorf(`foreign-key "holder_organization" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "holder_organization" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (hq *HolderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hq.querySpec()
	if len(hq.modifiers) > 0 {
		_spec.Modifiers = hq.modifiers
	}
	_spec.Node.Columns = hq.ctx.Fields
	if len(hq.ctx.Fields) > 0 {
		_spec.Unique = hq.ctx.Unique != nil && *hq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hq.driver, _spec)
}

func (hq *HolderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(holder.Table, holder.Columns, sqlgraph.NewFieldSpec(holder.FieldID, field.TypeInt))
	_spec.From = hq.sql
	if unique := hq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hq.path != nil {
		_spec.Unique = true
	}
	if fields := hq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, holder.FieldID)
		for i := range fields {
			if fields[i] != holder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hq *HolderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hq.driver.Dialect())
	t1 := builder.Table(holder.Table)
	columns := hq.ctx.Fields
	if len(columns) == 0 {
		columns = holder.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hq.sql != nil {
		selector = hq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hq.ctx.Unique != nil && *hq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hq.predicates {
		p(selector)
	}
	for _, p := range hq.order {
		p(selector)
	}
	if offset := hq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedArtifacts tells the query-builder to eager-load the nodes that are connected to the "artifacts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hq *HolderQuery) WithNamedArtifacts(name string, opts ...func(*ArtifactQuery)) *HolderQuery {
	query := (&ArtifactClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hq.withNamedArtifacts == nil {
		hq.withNamedArtifacts = make(map[string]*ArtifactQuery)
	}
	hq.withNamedArtifacts[name] = query
	return hq
}

// WithNamedBooks tells the query-builder to eager-load the nodes that are connected to the "books"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hq *HolderQuery) WithNamedBooks(name string, opts ...func(*BookQuery)) *HolderQuery {
	query := (&BookClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hq.withNamedBooks == nil {
		hq.withNamedBooks = make(map[string]*BookQuery)
	}
	hq.withNamedBooks[name] = query
	return hq
}

// WithNamedHolderResponsibilities tells the query-builder to eager-load the nodes that are connected to the "holder_responsibilities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hq *HolderQuery) WithNamedHolderResponsibilities(name string, opts ...func(*HolderResponsibilityQuery)) *HolderQuery {
	query := (&HolderResponsibilityClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hq.withNamedHolderResponsibilities == nil {
		hq.withNamedHolderResponsibilities = make(map[string]*HolderResponsibilityQuery)
	}
	hq.withNamedHolderResponsibilities[name] = query
	return hq
}

// HolderGroupBy is the group-by builder for Holder entities.
type HolderGroupBy struct {
	selector
	build *HolderQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hgb *HolderGroupBy) Aggregate(fns ...AggregateFunc) *HolderGroupBy {
	hgb.fns = append(hgb.fns, fns...)
	return hgb
}

// Scan applies the selector query and scans the result into the given value.
func (hgb *HolderGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hgb.build.ctx, "GroupBy")
	if err := hgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HolderQuery, *HolderGroupBy](ctx, hgb.build, hgb, hgb.build.inters, v)
}

func (hgb *HolderGroupBy) sqlScan(ctx context.Context, root *HolderQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hgb.fns))
	for _, fn := range hgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hgb.flds)+len(hgb.fns))
		for _, f := range *hgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HolderSelect is the builder for selecting fields of Holder entities.
type HolderSelect struct {
	*HolderQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hs *HolderSelect) Aggregate(fns ...AggregateFunc) *HolderSelect {
	hs.fns = append(hs.fns, fns...)
	return hs
}

// Scan applies the selector query and scans the result into the given value.
func (hs *HolderSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hs.ctx, "Select")
	if err := hs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HolderQuery, *HolderSelect](ctx, hs.HolderQuery, hs, hs.inters, v)
}

func (hs *HolderSelect) sqlScan(ctx context.Context, root *HolderQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hs.fns))
	for _, fn := range hs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
