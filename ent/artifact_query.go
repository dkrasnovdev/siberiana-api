// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/culture"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/ethnos"
	"github.com/dkrasnovdev/siberiana-api/ent/license"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/medium"
	"github.com/dkrasnovdev/siberiana-api/ent/model"
	"github.com/dkrasnovdev/siberiana-api/ent/monument"
	"github.com/dkrasnovdev/siberiana-api/ent/organization"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/project"
	"github.com/dkrasnovdev/siberiana-api/ent/publication"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/set"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
	"github.com/dkrasnovdev/siberiana-api/ent/technique"
)

// ArtifactQuery is the builder for querying Artifact entities.
type ArtifactQuery struct {
	config
	ctx                     *QueryContext
	order                   []artifact.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Artifact
	withAuthors             *PersonQuery
	withDonor               *PersonQuery
	withMediums             *MediumQuery
	withTechniques          *TechniqueQuery
	withProjects            *ProjectQuery
	withPublications        *PublicationQuery
	withCulturalAffiliation *CultureQuery
	withEthnos              *EthnosQuery
	withOrganization        *OrganizationQuery
	withMonument            *MonumentQuery
	withModel               *ModelQuery
	withSet                 *SetQuery
	withLocation            *LocationQuery
	withCollection          *CollectionQuery
	withLicense             *LicenseQuery
	withCountry             *CountryQuery
	withSettlement          *SettlementQuery
	withDistrict            *DistrictQuery
	withRegion              *RegionQuery
	withFKs                 bool
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*Artifact) error
	withNamedAuthors        map[string]*PersonQuery
	withNamedMediums        map[string]*MediumQuery
	withNamedTechniques     map[string]*TechniqueQuery
	withNamedProjects       map[string]*ProjectQuery
	withNamedPublications   map[string]*PublicationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ArtifactQuery builder.
func (aq *ArtifactQuery) Where(ps ...predicate.Artifact) *ArtifactQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit the number of records to be returned by this query.
func (aq *ArtifactQuery) Limit(limit int) *ArtifactQuery {
	aq.ctx.Limit = &limit
	return aq
}

// Offset to start from.
func (aq *ArtifactQuery) Offset(offset int) *ArtifactQuery {
	aq.ctx.Offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *ArtifactQuery) Unique(unique bool) *ArtifactQuery {
	aq.ctx.Unique = &unique
	return aq
}

// Order specifies how the records should be ordered.
func (aq *ArtifactQuery) Order(o ...artifact.OrderOption) *ArtifactQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryAuthors chains the current query on the "authors" edge.
func (aq *ArtifactQuery) QueryAuthors() *PersonQuery {
	query := (&PersonClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, artifact.AuthorsTable, artifact.AuthorsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDonor chains the current query on the "donor" edge.
func (aq *ArtifactQuery) QueryDonor() *PersonQuery {
	query := (&PersonClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.DonorTable, artifact.DonorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMediums chains the current query on the "mediums" edge.
func (aq *ArtifactQuery) QueryMediums() *MediumQuery {
	query := (&MediumClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(medium.Table, medium.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, artifact.MediumsTable, artifact.MediumsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTechniques chains the current query on the "techniques" edge.
func (aq *ArtifactQuery) QueryTechniques() *TechniqueQuery {
	query := (&TechniqueClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(technique.Table, technique.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, artifact.TechniquesTable, artifact.TechniquesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProjects chains the current query on the "projects" edge.
func (aq *ArtifactQuery) QueryProjects() *ProjectQuery {
	query := (&ProjectClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, artifact.ProjectsTable, artifact.ProjectsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPublications chains the current query on the "publications" edge.
func (aq *ArtifactQuery) QueryPublications() *PublicationQuery {
	query := (&PublicationClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(publication.Table, publication.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, artifact.PublicationsTable, artifact.PublicationsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCulturalAffiliation chains the current query on the "cultural_affiliation" edge.
func (aq *ArtifactQuery) QueryCulturalAffiliation() *CultureQuery {
	query := (&CultureClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(culture.Table, culture.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.CulturalAffiliationTable, artifact.CulturalAffiliationColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEthnos chains the current query on the "ethnos" edge.
func (aq *ArtifactQuery) QueryEthnos() *EthnosQuery {
	query := (&EthnosClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(ethnos.Table, ethnos.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.EthnosTable, artifact.EthnosColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (aq *ArtifactQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.OrganizationTable, artifact.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMonument chains the current query on the "monument" edge.
func (aq *ArtifactQuery) QueryMonument() *MonumentQuery {
	query := (&MonumentClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(monument.Table, monument.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.MonumentTable, artifact.MonumentColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryModel chains the current query on the "model" edge.
func (aq *ArtifactQuery) QueryModel() *ModelQuery {
	query := (&ModelClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(model.Table, model.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.ModelTable, artifact.ModelColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySet chains the current query on the "set" edge.
func (aq *ArtifactQuery) QuerySet() *SetQuery {
	query := (&SetClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(set.Table, set.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.SetTable, artifact.SetColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocation chains the current query on the "location" edge.
func (aq *ArtifactQuery) QueryLocation() *LocationQuery {
	query := (&LocationClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.LocationTable, artifact.LocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCollection chains the current query on the "collection" edge.
func (aq *ArtifactQuery) QueryCollection() *CollectionQuery {
	query := (&CollectionClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(collection.Table, collection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.CollectionTable, artifact.CollectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLicense chains the current query on the "license" edge.
func (aq *ArtifactQuery) QueryLicense() *LicenseQuery {
	query := (&LicenseClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(license.Table, license.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.LicenseTable, artifact.LicenseColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountry chains the current query on the "country" edge.
func (aq *ArtifactQuery) QueryCountry() *CountryQuery {
	query := (&CountryClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.CountryTable, artifact.CountryColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySettlement chains the current query on the "settlement" edge.
func (aq *ArtifactQuery) QuerySettlement() *SettlementQuery {
	query := (&SettlementClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(settlement.Table, settlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.SettlementTable, artifact.SettlementColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDistrict chains the current query on the "district" edge.
func (aq *ArtifactQuery) QueryDistrict() *DistrictQuery {
	query := (&DistrictClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(district.Table, district.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.DistrictTable, artifact.DistrictColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRegion chains the current query on the "region" edge.
func (aq *ArtifactQuery) QueryRegion() *RegionQuery {
	query := (&RegionClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, selector),
			sqlgraph.To(region.Table, region.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifact.RegionTable, artifact.RegionColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Artifact entity from the query.
// Returns a *NotFoundError when no Artifact was found.
func (aq *ArtifactQuery) First(ctx context.Context) (*Artifact, error) {
	nodes, err := aq.Limit(1).All(setContextOp(ctx, aq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{artifact.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *ArtifactQuery) FirstX(ctx context.Context) *Artifact {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Artifact ID from the query.
// Returns a *NotFoundError when no Artifact ID was found.
func (aq *ArtifactQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(setContextOp(ctx, aq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{artifact.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *ArtifactQuery) FirstIDX(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Artifact entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Artifact entity is found.
// Returns a *NotFoundError when no Artifact entities are found.
func (aq *ArtifactQuery) Only(ctx context.Context) (*Artifact, error) {
	nodes, err := aq.Limit(2).All(setContextOp(ctx, aq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{artifact.Label}
	default:
		return nil, &NotSingularError{artifact.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *ArtifactQuery) OnlyX(ctx context.Context) *Artifact {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Artifact ID in the query.
// Returns a *NotSingularError when more than one Artifact ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *ArtifactQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(setContextOp(ctx, aq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{artifact.Label}
	default:
		err = &NotSingularError{artifact.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *ArtifactQuery) OnlyIDX(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Artifacts.
func (aq *ArtifactQuery) All(ctx context.Context) ([]*Artifact, error) {
	ctx = setContextOp(ctx, aq.ctx, "All")
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Artifact, *ArtifactQuery]()
	return withInterceptors[[]*Artifact](ctx, aq, qr, aq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aq *ArtifactQuery) AllX(ctx context.Context) []*Artifact {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Artifact IDs.
func (aq *ArtifactQuery) IDs(ctx context.Context) (ids []int, err error) {
	if aq.ctx.Unique == nil && aq.path != nil {
		aq.Unique(true)
	}
	ctx = setContextOp(ctx, aq.ctx, "IDs")
	if err = aq.Select(artifact.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *ArtifactQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *ArtifactQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aq.ctx, "Count")
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aq, querierCount[*ArtifactQuery](), aq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aq *ArtifactQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *ArtifactQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aq.ctx, "Exist")
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *ArtifactQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ArtifactQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *ArtifactQuery) Clone() *ArtifactQuery {
	if aq == nil {
		return nil
	}
	return &ArtifactQuery{
		config:                  aq.config,
		ctx:                     aq.ctx.Clone(),
		order:                   append([]artifact.OrderOption{}, aq.order...),
		inters:                  append([]Interceptor{}, aq.inters...),
		predicates:              append([]predicate.Artifact{}, aq.predicates...),
		withAuthors:             aq.withAuthors.Clone(),
		withDonor:               aq.withDonor.Clone(),
		withMediums:             aq.withMediums.Clone(),
		withTechniques:          aq.withTechniques.Clone(),
		withProjects:            aq.withProjects.Clone(),
		withPublications:        aq.withPublications.Clone(),
		withCulturalAffiliation: aq.withCulturalAffiliation.Clone(),
		withEthnos:              aq.withEthnos.Clone(),
		withOrganization:        aq.withOrganization.Clone(),
		withMonument:            aq.withMonument.Clone(),
		withModel:               aq.withModel.Clone(),
		withSet:                 aq.withSet.Clone(),
		withLocation:            aq.withLocation.Clone(),
		withCollection:          aq.withCollection.Clone(),
		withLicense:             aq.withLicense.Clone(),
		withCountry:             aq.withCountry.Clone(),
		withSettlement:          aq.withSettlement.Clone(),
		withDistrict:            aq.withDistrict.Clone(),
		withRegion:              aq.withRegion.Clone(),
		// clone intermediate query.
		sql:  aq.sql.Clone(),
		path: aq.path,
	}
}

// WithAuthors tells the query-builder to eager-load the nodes that are connected to
// the "authors" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithAuthors(opts ...func(*PersonQuery)) *ArtifactQuery {
	query := (&PersonClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAuthors = query
	return aq
}

// WithDonor tells the query-builder to eager-load the nodes that are connected to
// the "donor" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithDonor(opts ...func(*PersonQuery)) *ArtifactQuery {
	query := (&PersonClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withDonor = query
	return aq
}

// WithMediums tells the query-builder to eager-load the nodes that are connected to
// the "mediums" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithMediums(opts ...func(*MediumQuery)) *ArtifactQuery {
	query := (&MediumClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withMediums = query
	return aq
}

// WithTechniques tells the query-builder to eager-load the nodes that are connected to
// the "techniques" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithTechniques(opts ...func(*TechniqueQuery)) *ArtifactQuery {
	query := (&TechniqueClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withTechniques = query
	return aq
}

// WithProjects tells the query-builder to eager-load the nodes that are connected to
// the "projects" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithProjects(opts ...func(*ProjectQuery)) *ArtifactQuery {
	query := (&ProjectClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withProjects = query
	return aq
}

// WithPublications tells the query-builder to eager-load the nodes that are connected to
// the "publications" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithPublications(opts ...func(*PublicationQuery)) *ArtifactQuery {
	query := (&PublicationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withPublications = query
	return aq
}

// WithCulturalAffiliation tells the query-builder to eager-load the nodes that are connected to
// the "cultural_affiliation" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithCulturalAffiliation(opts ...func(*CultureQuery)) *ArtifactQuery {
	query := (&CultureClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withCulturalAffiliation = query
	return aq
}

// WithEthnos tells the query-builder to eager-load the nodes that are connected to
// the "ethnos" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithEthnos(opts ...func(*EthnosQuery)) *ArtifactQuery {
	query := (&EthnosClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withEthnos = query
	return aq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithOrganization(opts ...func(*OrganizationQuery)) *ArtifactQuery {
	query := (&OrganizationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withOrganization = query
	return aq
}

// WithMonument tells the query-builder to eager-load the nodes that are connected to
// the "monument" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithMonument(opts ...func(*MonumentQuery)) *ArtifactQuery {
	query := (&MonumentClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withMonument = query
	return aq
}

// WithModel tells the query-builder to eager-load the nodes that are connected to
// the "model" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithModel(opts ...func(*ModelQuery)) *ArtifactQuery {
	query := (&ModelClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withModel = query
	return aq
}

// WithSet tells the query-builder to eager-load the nodes that are connected to
// the "set" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithSet(opts ...func(*SetQuery)) *ArtifactQuery {
	query := (&SetClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withSet = query
	return aq
}

// WithLocation tells the query-builder to eager-load the nodes that are connected to
// the "location" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithLocation(opts ...func(*LocationQuery)) *ArtifactQuery {
	query := (&LocationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withLocation = query
	return aq
}

// WithCollection tells the query-builder to eager-load the nodes that are connected to
// the "collection" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithCollection(opts ...func(*CollectionQuery)) *ArtifactQuery {
	query := (&CollectionClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withCollection = query
	return aq
}

// WithLicense tells the query-builder to eager-load the nodes that are connected to
// the "license" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithLicense(opts ...func(*LicenseQuery)) *ArtifactQuery {
	query := (&LicenseClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withLicense = query
	return aq
}

// WithCountry tells the query-builder to eager-load the nodes that are connected to
// the "country" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithCountry(opts ...func(*CountryQuery)) *ArtifactQuery {
	query := (&CountryClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withCountry = query
	return aq
}

// WithSettlement tells the query-builder to eager-load the nodes that are connected to
// the "settlement" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithSettlement(opts ...func(*SettlementQuery)) *ArtifactQuery {
	query := (&SettlementClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withSettlement = query
	return aq
}

// WithDistrict tells the query-builder to eager-load the nodes that are connected to
// the "district" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithDistrict(opts ...func(*DistrictQuery)) *ArtifactQuery {
	query := (&DistrictClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withDistrict = query
	return aq
}

// WithRegion tells the query-builder to eager-load the nodes that are connected to
// the "region" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithRegion(opts ...func(*RegionQuery)) *ArtifactQuery {
	query := (&RegionClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRegion = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Artifact.Query().
//		GroupBy(artifact.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aq *ArtifactQuery) GroupBy(field string, fields ...string) *ArtifactGroupBy {
	aq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ArtifactGroupBy{build: aq}
	grbuild.flds = &aq.ctx.Fields
	grbuild.label = artifact.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Artifact.Query().
//		Select(artifact.FieldCreatedAt).
//		Scan(ctx, &v)
func (aq *ArtifactQuery) Select(fields ...string) *ArtifactSelect {
	aq.ctx.Fields = append(aq.ctx.Fields, fields...)
	sbuild := &ArtifactSelect{ArtifactQuery: aq}
	sbuild.label = artifact.Label
	sbuild.flds, sbuild.scan = &aq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ArtifactSelect configured with the given aggregations.
func (aq *ArtifactQuery) Aggregate(fns ...AggregateFunc) *ArtifactSelect {
	return aq.Select().Aggregate(fns...)
}

func (aq *ArtifactQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aq); err != nil {
				return err
			}
		}
	}
	for _, f := range aq.ctx.Fields {
		if !artifact.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	if artifact.Policy == nil {
		return errors.New("ent: uninitialized artifact.Policy (forgotten import ent/runtime?)")
	}
	if err := artifact.Policy.EvalQuery(ctx, aq); err != nil {
		return err
	}
	return nil
}

func (aq *ArtifactQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Artifact, error) {
	var (
		nodes       = []*Artifact{}
		withFKs     = aq.withFKs
		_spec       = aq.querySpec()
		loadedTypes = [19]bool{
			aq.withAuthors != nil,
			aq.withDonor != nil,
			aq.withMediums != nil,
			aq.withTechniques != nil,
			aq.withProjects != nil,
			aq.withPublications != nil,
			aq.withCulturalAffiliation != nil,
			aq.withEthnos != nil,
			aq.withOrganization != nil,
			aq.withMonument != nil,
			aq.withModel != nil,
			aq.withSet != nil,
			aq.withLocation != nil,
			aq.withCollection != nil,
			aq.withLicense != nil,
			aq.withCountry != nil,
			aq.withSettlement != nil,
			aq.withDistrict != nil,
			aq.withRegion != nil,
		}
	)
	if aq.withDonor != nil || aq.withCulturalAffiliation != nil || aq.withEthnos != nil || aq.withOrganization != nil || aq.withMonument != nil || aq.withModel != nil || aq.withSet != nil || aq.withLocation != nil || aq.withCollection != nil || aq.withLicense != nil || aq.withCountry != nil || aq.withSettlement != nil || aq.withDistrict != nil || aq.withRegion != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, artifact.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Artifact).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Artifact{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withAuthors; query != nil {
		if err := aq.loadAuthors(ctx, query, nodes,
			func(n *Artifact) { n.Edges.Authors = []*Person{} },
			func(n *Artifact, e *Person) { n.Edges.Authors = append(n.Edges.Authors, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withDonor; query != nil {
		if err := aq.loadDonor(ctx, query, nodes, nil,
			func(n *Artifact, e *Person) { n.Edges.Donor = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withMediums; query != nil {
		if err := aq.loadMediums(ctx, query, nodes,
			func(n *Artifact) { n.Edges.Mediums = []*Medium{} },
			func(n *Artifact, e *Medium) { n.Edges.Mediums = append(n.Edges.Mediums, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withTechniques; query != nil {
		if err := aq.loadTechniques(ctx, query, nodes,
			func(n *Artifact) { n.Edges.Techniques = []*Technique{} },
			func(n *Artifact, e *Technique) { n.Edges.Techniques = append(n.Edges.Techniques, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withProjects; query != nil {
		if err := aq.loadProjects(ctx, query, nodes,
			func(n *Artifact) { n.Edges.Projects = []*Project{} },
			func(n *Artifact, e *Project) { n.Edges.Projects = append(n.Edges.Projects, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withPublications; query != nil {
		if err := aq.loadPublications(ctx, query, nodes,
			func(n *Artifact) { n.Edges.Publications = []*Publication{} },
			func(n *Artifact, e *Publication) { n.Edges.Publications = append(n.Edges.Publications, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withCulturalAffiliation; query != nil {
		if err := aq.loadCulturalAffiliation(ctx, query, nodes, nil,
			func(n *Artifact, e *Culture) { n.Edges.CulturalAffiliation = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withEthnos; query != nil {
		if err := aq.loadEthnos(ctx, query, nodes, nil,
			func(n *Artifact, e *Ethnos) { n.Edges.Ethnos = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withOrganization; query != nil {
		if err := aq.loadOrganization(ctx, query, nodes, nil,
			func(n *Artifact, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withMonument; query != nil {
		if err := aq.loadMonument(ctx, query, nodes, nil,
			func(n *Artifact, e *Monument) { n.Edges.Monument = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withModel; query != nil {
		if err := aq.loadModel(ctx, query, nodes, nil,
			func(n *Artifact, e *Model) { n.Edges.Model = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withSet; query != nil {
		if err := aq.loadSet(ctx, query, nodes, nil,
			func(n *Artifact, e *Set) { n.Edges.Set = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withLocation; query != nil {
		if err := aq.loadLocation(ctx, query, nodes, nil,
			func(n *Artifact, e *Location) { n.Edges.Location = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withCollection; query != nil {
		if err := aq.loadCollection(ctx, query, nodes, nil,
			func(n *Artifact, e *Collection) { n.Edges.Collection = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withLicense; query != nil {
		if err := aq.loadLicense(ctx, query, nodes, nil,
			func(n *Artifact, e *License) { n.Edges.License = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withCountry; query != nil {
		if err := aq.loadCountry(ctx, query, nodes, nil,
			func(n *Artifact, e *Country) { n.Edges.Country = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withSettlement; query != nil {
		if err := aq.loadSettlement(ctx, query, nodes, nil,
			func(n *Artifact, e *Settlement) { n.Edges.Settlement = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withDistrict; query != nil {
		if err := aq.loadDistrict(ctx, query, nodes, nil,
			func(n *Artifact, e *District) { n.Edges.District = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRegion; query != nil {
		if err := aq.loadRegion(ctx, query, nodes, nil,
			func(n *Artifact, e *Region) { n.Edges.Region = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedAuthors {
		if err := aq.loadAuthors(ctx, query, nodes,
			func(n *Artifact) { n.appendNamedAuthors(name) },
			func(n *Artifact, e *Person) { n.appendNamedAuthors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedMediums {
		if err := aq.loadMediums(ctx, query, nodes,
			func(n *Artifact) { n.appendNamedMediums(name) },
			func(n *Artifact, e *Medium) { n.appendNamedMediums(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedTechniques {
		if err := aq.loadTechniques(ctx, query, nodes,
			func(n *Artifact) { n.appendNamedTechniques(name) },
			func(n *Artifact, e *Technique) { n.appendNamedTechniques(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedProjects {
		if err := aq.loadProjects(ctx, query, nodes,
			func(n *Artifact) { n.appendNamedProjects(name) },
			func(n *Artifact, e *Project) { n.appendNamedProjects(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedPublications {
		if err := aq.loadPublications(ctx, query, nodes,
			func(n *Artifact) { n.appendNamedPublications(name) },
			func(n *Artifact, e *Publication) { n.appendNamedPublications(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range aq.loadTotal {
		if err := aq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *ArtifactQuery) loadAuthors(ctx context.Context, query *PersonQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Person)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Artifact)
	nids := make(map[int]map[*Artifact]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(artifact.AuthorsTable)
		s.Join(joinT).On(s.C(person.FieldID), joinT.C(artifact.AuthorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(artifact.AuthorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(artifact.AuthorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Artifact]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Person](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "authors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadDonor(ctx context.Context, query *PersonQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Person)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].person_donated_artifacts == nil {
			continue
		}
		fk := *nodes[i].person_donated_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(person.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "person_donated_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadMediums(ctx context.Context, query *MediumQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Medium)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Artifact)
	nids := make(map[int]map[*Artifact]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(artifact.MediumsTable)
		s.Join(joinT).On(s.C(medium.FieldID), joinT.C(artifact.MediumsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(artifact.MediumsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(artifact.MediumsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Artifact]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Medium](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "mediums" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadTechniques(ctx context.Context, query *TechniqueQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Technique)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Artifact)
	nids := make(map[int]map[*Artifact]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(artifact.TechniquesTable)
		s.Join(joinT).On(s.C(technique.FieldID), joinT.C(artifact.TechniquesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(artifact.TechniquesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(artifact.TechniquesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Artifact]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Technique](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "techniques" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadProjects(ctx context.Context, query *ProjectQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Project)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Artifact)
	nids := make(map[int]map[*Artifact]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(artifact.ProjectsTable)
		s.Join(joinT).On(s.C(project.FieldID), joinT.C(artifact.ProjectsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(artifact.ProjectsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(artifact.ProjectsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Artifact]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Project](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "projects" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadPublications(ctx context.Context, query *PublicationQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Publication)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Artifact)
	nids := make(map[int]map[*Artifact]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(artifact.PublicationsTable)
		s.Join(joinT).On(s.C(publication.FieldID), joinT.C(artifact.PublicationsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(artifact.PublicationsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(artifact.PublicationsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Artifact]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Publication](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "publications" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadCulturalAffiliation(ctx context.Context, query *CultureQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Culture)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].culture_artifacts == nil {
			continue
		}
		fk := *nodes[i].culture_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(culture.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "culture_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadEthnos(ctx context.Context, query *EthnosQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Ethnos)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].ethnos_artifacts == nil {
			continue
		}
		fk := *nodes[i].ethnos_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ethnos.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ethnos_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Organization)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].organization_artifacts == nil {
			continue
		}
		fk := *nodes[i].organization_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadMonument(ctx context.Context, query *MonumentQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Monument)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].monument_artifacts == nil {
			continue
		}
		fk := *nodes[i].monument_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(monument.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "monument_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadModel(ctx context.Context, query *ModelQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Model)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].model_artifacts == nil {
			continue
		}
		fk := *nodes[i].model_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(model.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "model_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadSet(ctx context.Context, query *SetQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Set)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].set_artifacts == nil {
			continue
		}
		fk := *nodes[i].set_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(set.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "set_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadLocation(ctx context.Context, query *LocationQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Location)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].location_artifacts == nil {
			continue
		}
		fk := *nodes[i].location_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(location.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "location_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadCollection(ctx context.Context, query *CollectionQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Collection)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].collection_artifacts == nil {
			continue
		}
		fk := *nodes[i].collection_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(collection.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "collection_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadLicense(ctx context.Context, query *LicenseQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *License)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].license_artifacts == nil {
			continue
		}
		fk := *nodes[i].license_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(license.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "license_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadCountry(ctx context.Context, query *CountryQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Country)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].country_artifacts == nil {
			continue
		}
		fk := *nodes[i].country_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(country.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "country_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadSettlement(ctx context.Context, query *SettlementQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Settlement)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].settlement_artifacts == nil {
			continue
		}
		fk := *nodes[i].settlement_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(settlement.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "settlement_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadDistrict(ctx context.Context, query *DistrictQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *District)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].district_artifacts == nil {
			continue
		}
		fk := *nodes[i].district_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(district.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "district_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ArtifactQuery) loadRegion(ctx context.Context, query *RegionQuery, nodes []*Artifact, init func(*Artifact), assign func(*Artifact, *Region)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Artifact)
	for i := range nodes {
		if nodes[i].region_artifacts == nil {
			continue
		}
		fk := *nodes[i].region_artifacts
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(region.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "region_artifacts" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (aq *ArtifactQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	_spec.Node.Columns = aq.ctx.Fields
	if len(aq.ctx.Fields) > 0 {
		_spec.Unique = aq.ctx.Unique != nil && *aq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *ArtifactQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(artifact.Table, artifact.Columns, sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt))
	_spec.From = aq.sql
	if unique := aq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aq.path != nil {
		_spec.Unique = true
	}
	if fields := aq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artifact.FieldID)
		for i := range fields {
			if fields[i] != artifact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *ArtifactQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(artifact.Table)
	columns := aq.ctx.Fields
	if len(columns) == 0 {
		columns = artifact.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.ctx.Unique != nil && *aq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedAuthors tells the query-builder to eager-load the nodes that are connected to the "authors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithNamedAuthors(name string, opts ...func(*PersonQuery)) *ArtifactQuery {
	query := (&PersonClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedAuthors == nil {
		aq.withNamedAuthors = make(map[string]*PersonQuery)
	}
	aq.withNamedAuthors[name] = query
	return aq
}

// WithNamedMediums tells the query-builder to eager-load the nodes that are connected to the "mediums"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithNamedMediums(name string, opts ...func(*MediumQuery)) *ArtifactQuery {
	query := (&MediumClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedMediums == nil {
		aq.withNamedMediums = make(map[string]*MediumQuery)
	}
	aq.withNamedMediums[name] = query
	return aq
}

// WithNamedTechniques tells the query-builder to eager-load the nodes that are connected to the "techniques"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithNamedTechniques(name string, opts ...func(*TechniqueQuery)) *ArtifactQuery {
	query := (&TechniqueClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedTechniques == nil {
		aq.withNamedTechniques = make(map[string]*TechniqueQuery)
	}
	aq.withNamedTechniques[name] = query
	return aq
}

// WithNamedProjects tells the query-builder to eager-load the nodes that are connected to the "projects"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithNamedProjects(name string, opts ...func(*ProjectQuery)) *ArtifactQuery {
	query := (&ProjectClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedProjects == nil {
		aq.withNamedProjects = make(map[string]*ProjectQuery)
	}
	aq.withNamedProjects[name] = query
	return aq
}

// WithNamedPublications tells the query-builder to eager-load the nodes that are connected to the "publications"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithNamedPublications(name string, opts ...func(*PublicationQuery)) *ArtifactQuery {
	query := (&PublicationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedPublications == nil {
		aq.withNamedPublications = make(map[string]*PublicationQuery)
	}
	aq.withNamedPublications[name] = query
	return aq
}

// ArtifactGroupBy is the group-by builder for Artifact entities.
type ArtifactGroupBy struct {
	selector
	build *ArtifactQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *ArtifactGroupBy) Aggregate(fns ...AggregateFunc) *ArtifactGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the selector query and scans the result into the given value.
func (agb *ArtifactGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, agb.build.ctx, "GroupBy")
	if err := agb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ArtifactQuery, *ArtifactGroupBy](ctx, agb.build, agb, agb.build.inters, v)
}

func (agb *ArtifactGroupBy) sqlScan(ctx context.Context, root *ArtifactQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*agb.flds)+len(agb.fns))
		for _, f := range *agb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*agb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ArtifactSelect is the builder for selecting fields of Artifact entities.
type ArtifactSelect struct {
	*ArtifactQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *ArtifactSelect) Aggregate(fns ...AggregateFunc) *ArtifactSelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *ArtifactSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, as.ctx, "Select")
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ArtifactQuery, *ArtifactSelect](ctx, as.ArtifactQuery, as, as.inters, v)
}

func (as *ArtifactSelect) sqlScan(ctx context.Context, root *ArtifactQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(as.fns))
	for _, fn := range as.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*as.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
