// Code generated by ent, DO NOT EDIT.

package visit

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the visit type in the database.
	Label = "visit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldYear holds the string denoting the year field in the database.
	FieldYear = "year"
	// EdgeMounds holds the string denoting the mounds edge name in mutations.
	EdgeMounds = "mounds"
	// EdgeVisitors holds the string denoting the visitors edge name in mutations.
	EdgeVisitors = "visitors"
	// Table holds the table name of the visit in the database.
	Table = "visits"
	// MoundsTable is the table that holds the mounds relation/edge. The primary key declared below.
	MoundsTable = "visit_mounds"
	// MoundsInverseTable is the table name for the Mound entity.
	// It exists in this package in order to avoid circular dependency with the "mound" package.
	MoundsInverseTable = "mounds"
	// VisitorsTable is the table that holds the visitors relation/edge. The primary key declared below.
	VisitorsTable = "person_visits"
	// VisitorsInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	VisitorsInverseTable = "persons"
)

// Columns holds all SQL columns for visit fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldYear,
}

var (
	// MoundsPrimaryKey and MoundsColumn2 are the table columns denoting the
	// primary key for the mounds relation (M2M).
	MoundsPrimaryKey = []string{"visit_id", "mound_id"}
	// VisitorsPrimaryKey and VisitorsColumn2 are the table columns denoting the
	// primary key for the visitors relation (M2M).
	VisitorsPrimaryKey = []string{"person_id", "visit_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/dkrasnovdev/siberiana-api/ent/runtime"
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// YearValidator is a validator for the "year" field. It is called by the builders before save.
	YearValidator func(int) error
)

// OrderOption defines the ordering options for the Visit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByYear orders the results by the year field.
func ByYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYear, opts...).ToFunc()
}

// ByMoundsCount orders the results by mounds count.
func ByMoundsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMoundsStep(), opts...)
	}
}

// ByMounds orders the results by mounds terms.
func ByMounds(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMoundsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVisitorsCount orders the results by visitors count.
func ByVisitorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVisitorsStep(), opts...)
	}
}

// ByVisitors orders the results by visitors terms.
func ByVisitors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVisitorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMoundsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MoundsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MoundsTable, MoundsPrimaryKey...),
	)
}
func newVisitorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VisitorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, VisitorsTable, VisitorsPrimaryKey...),
	)
}
