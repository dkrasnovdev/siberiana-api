// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/favourite"
	"github.com/dkrasnovdev/siberiana-api/ent/personal"
	"github.com/dkrasnovdev/siberiana-api/ent/proxy"
)

// Proxy is the model entity for the Proxy schema.
type Proxy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Type holds the value of the "type" field.
	Type proxy.Type `json:"type,omitempty"`
	// RefID holds the value of the "ref_id" field.
	RefID string `json:"ref_id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProxyQuery when eager-loading is set.
	Edges             ProxyEdges `json:"edges"`
	favourite_proxies *int
	personal_proxies  *int
	selectValues      sql.SelectValues
}

// ProxyEdges holds the relations/edges for other nodes in the graph.
type ProxyEdges struct {
	// Favourite holds the value of the favourite edge.
	Favourite *Favourite `json:"favourite,omitempty"`
	// Personal holds the value of the personal edge.
	Personal *Personal `json:"personal,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// FavouriteOrErr returns the Favourite value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProxyEdges) FavouriteOrErr() (*Favourite, error) {
	if e.loadedTypes[0] {
		if e.Favourite == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: favourite.Label}
		}
		return e.Favourite, nil
	}
	return nil, &NotLoadedError{edge: "favourite"}
}

// PersonalOrErr returns the Personal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProxyEdges) PersonalOrErr() (*Personal, error) {
	if e.loadedTypes[1] {
		if e.Personal == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: personal.Label}
		}
		return e.Personal, nil
	}
	return nil, &NotLoadedError{edge: "personal"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Proxy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case proxy.FieldID:
			values[i] = new(sql.NullInt64)
		case proxy.FieldCreatedBy, proxy.FieldUpdatedBy, proxy.FieldType, proxy.FieldRefID, proxy.FieldURL:
			values[i] = new(sql.NullString)
		case proxy.FieldCreatedAt, proxy.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case proxy.ForeignKeys[0]: // favourite_proxies
			values[i] = new(sql.NullInt64)
		case proxy.ForeignKeys[1]: // personal_proxies
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Proxy fields.
func (pr *Proxy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case proxy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case proxy.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case proxy.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pr.CreatedBy = value.String
			}
		case proxy.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case proxy.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pr.UpdatedBy = value.String
			}
		case proxy.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pr.Type = proxy.Type(value.String)
			}
		case proxy.FieldRefID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref_id", values[i])
			} else if value.Valid {
				pr.RefID = value.String
			}
		case proxy.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				pr.URL = value.String
			}
		case proxy.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field favourite_proxies", value)
			} else if value.Valid {
				pr.favourite_proxies = new(int)
				*pr.favourite_proxies = int(value.Int64)
			}
		case proxy.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field personal_proxies", value)
			} else if value.Valid {
				pr.personal_proxies = new(int)
				*pr.personal_proxies = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Proxy.
// This includes values selected through modifiers, order, etc.
func (pr *Proxy) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryFavourite queries the "favourite" edge of the Proxy entity.
func (pr *Proxy) QueryFavourite() *FavouriteQuery {
	return NewProxyClient(pr.config).QueryFavourite(pr)
}

// QueryPersonal queries the "personal" edge of the Proxy entity.
func (pr *Proxy) QueryPersonal() *PersonalQuery {
	return NewProxyClient(pr.config).QueryPersonal(pr)
}

// Update returns a builder for updating this Proxy.
// Note that you need to call Proxy.Unwrap() before calling this method if this Proxy
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Proxy) Update() *ProxyUpdateOne {
	return NewProxyClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Proxy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Proxy) Unwrap() *Proxy {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Proxy is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Proxy) String() string {
	var builder strings.Builder
	builder.WriteString("Proxy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pr.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pr.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pr.Type))
	builder.WriteString(", ")
	builder.WriteString("ref_id=")
	builder.WriteString(pr.RefID)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(pr.URL)
	builder.WriteByte(')')
	return builder.String()
}

// Proxies is a parsable slice of Proxy.
type Proxies []*Proxy
