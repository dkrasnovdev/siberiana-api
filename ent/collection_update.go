// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/category"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/petroglyph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
)

// CollectionUpdate is the builder for updating Collection entities.
type CollectionUpdate struct {
	config
	hooks    []Hook
	mutation *CollectionMutation
}

// Where appends a list predicates to the CollectionUpdate builder.
func (cu *CollectionUpdate) Where(ps ...predicate.Collection) *CollectionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedBy sets the "created_by" field.
func (cu *CollectionUpdate) SetCreatedBy(s string) *CollectionUpdate {
	cu.mutation.SetCreatedBy(s)
	return cu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableCreatedBy(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetCreatedBy(*s)
	}
	return cu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (cu *CollectionUpdate) ClearCreatedBy() *CollectionUpdate {
	cu.mutation.ClearCreatedBy()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CollectionUpdate) SetUpdatedAt(t time.Time) *CollectionUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CollectionUpdate) SetUpdatedBy(s string) *CollectionUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableUpdatedBy(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *CollectionUpdate) ClearUpdatedBy() *CollectionUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetDisplayName sets the "display_name" field.
func (cu *CollectionUpdate) SetDisplayName(s string) *CollectionUpdate {
	cu.mutation.SetDisplayName(s)
	return cu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableDisplayName(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetDisplayName(*s)
	}
	return cu
}

// ClearDisplayName clears the value of the "display_name" field.
func (cu *CollectionUpdate) ClearDisplayName() *CollectionUpdate {
	cu.mutation.ClearDisplayName()
	return cu
}

// SetAbbreviation sets the "abbreviation" field.
func (cu *CollectionUpdate) SetAbbreviation(s string) *CollectionUpdate {
	cu.mutation.SetAbbreviation(s)
	return cu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableAbbreviation(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetAbbreviation(*s)
	}
	return cu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (cu *CollectionUpdate) ClearAbbreviation() *CollectionUpdate {
	cu.mutation.ClearAbbreviation()
	return cu
}

// SetDescription sets the "description" field.
func (cu *CollectionUpdate) SetDescription(s string) *CollectionUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableDescription(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CollectionUpdate) ClearDescription() *CollectionUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetExternalLink sets the "external_link" field.
func (cu *CollectionUpdate) SetExternalLink(s string) *CollectionUpdate {
	cu.mutation.SetExternalLink(s)
	return cu
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableExternalLink(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetExternalLink(*s)
	}
	return cu
}

// ClearExternalLink clears the value of the "external_link" field.
func (cu *CollectionUpdate) ClearExternalLink() *CollectionUpdate {
	cu.mutation.ClearExternalLink()
	return cu
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (cu *CollectionUpdate) SetPrimaryImageURL(s string) *CollectionUpdate {
	cu.mutation.SetPrimaryImageURL(s)
	return cu
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillablePrimaryImageURL(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetPrimaryImageURL(*s)
	}
	return cu
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (cu *CollectionUpdate) ClearPrimaryImageURL() *CollectionUpdate {
	cu.mutation.ClearPrimaryImageURL()
	return cu
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (cu *CollectionUpdate) SetAdditionalImagesUrls(s []string) *CollectionUpdate {
	cu.mutation.SetAdditionalImagesUrls(s)
	return cu
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (cu *CollectionUpdate) AppendAdditionalImagesUrls(s []string) *CollectionUpdate {
	cu.mutation.AppendAdditionalImagesUrls(s)
	return cu
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (cu *CollectionUpdate) ClearAdditionalImagesUrls() *CollectionUpdate {
	cu.mutation.ClearAdditionalImagesUrls()
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CollectionUpdate) SetDeletedAt(t time.Time) *CollectionUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableDeletedAt(t *time.Time) *CollectionUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CollectionUpdate) ClearDeletedAt() *CollectionUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetDeletedBy sets the "deleted_by" field.
func (cu *CollectionUpdate) SetDeletedBy(s string) *CollectionUpdate {
	cu.mutation.SetDeletedBy(s)
	return cu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableDeletedBy(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetDeletedBy(*s)
	}
	return cu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (cu *CollectionUpdate) ClearDeletedBy() *CollectionUpdate {
	cu.mutation.ClearDeletedBy()
	return cu
}

// SetSlug sets the "slug" field.
func (cu *CollectionUpdate) SetSlug(s string) *CollectionUpdate {
	cu.mutation.SetSlug(s)
	return cu
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (cu *CollectionUpdate) AddArtIDs(ids ...int) *CollectionUpdate {
	cu.mutation.AddArtIDs(ids...)
	return cu
}

// AddArt adds the "art" edges to the Art entity.
func (cu *CollectionUpdate) AddArt(a ...*Art) *CollectionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (cu *CollectionUpdate) AddArtifactIDs(ids ...int) *CollectionUpdate {
	cu.mutation.AddArtifactIDs(ids...)
	return cu
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (cu *CollectionUpdate) AddArtifacts(a ...*Artifact) *CollectionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddArtifactIDs(ids...)
}

// AddPetroglyphIDs adds the "petroglyphs" edge to the Petroglyph entity by IDs.
func (cu *CollectionUpdate) AddPetroglyphIDs(ids ...int) *CollectionUpdate {
	cu.mutation.AddPetroglyphIDs(ids...)
	return cu
}

// AddPetroglyphs adds the "petroglyphs" edges to the Petroglyph entity.
func (cu *CollectionUpdate) AddPetroglyphs(p ...*Petroglyph) *CollectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPetroglyphIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (cu *CollectionUpdate) AddBookIDs(ids ...int) *CollectionUpdate {
	cu.mutation.AddBookIDs(ids...)
	return cu
}

// AddBooks adds the "books" edges to the Book entity.
func (cu *CollectionUpdate) AddBooks(b ...*Book) *CollectionUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddBookIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (cu *CollectionUpdate) AddProtectedAreaPictureIDs(ids ...int) *CollectionUpdate {
	cu.mutation.AddProtectedAreaPictureIDs(ids...)
	return cu
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (cu *CollectionUpdate) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *CollectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProtectedAreaPictureIDs(ids...)
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (cu *CollectionUpdate) SetCategoryID(id int) *CollectionUpdate {
	cu.mutation.SetCategoryID(id)
	return cu
}

// SetCategory sets the "category" edge to the Category entity.
func (cu *CollectionUpdate) SetCategory(c *Category) *CollectionUpdate {
	return cu.SetCategoryID(c.ID)
}

// AddAuthorIDs adds the "authors" edge to the Person entity by IDs.
func (cu *CollectionUpdate) AddAuthorIDs(ids ...int) *CollectionUpdate {
	cu.mutation.AddAuthorIDs(ids...)
	return cu
}

// AddAuthors adds the "authors" edges to the Person entity.
func (cu *CollectionUpdate) AddAuthors(p ...*Person) *CollectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddAuthorIDs(ids...)
}

// Mutation returns the CollectionMutation object of the builder.
func (cu *CollectionUpdate) Mutation() *CollectionMutation {
	return cu.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (cu *CollectionUpdate) ClearArt() *CollectionUpdate {
	cu.mutation.ClearArt()
	return cu
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (cu *CollectionUpdate) RemoveArtIDs(ids ...int) *CollectionUpdate {
	cu.mutation.RemoveArtIDs(ids...)
	return cu
}

// RemoveArt removes "art" edges to Art entities.
func (cu *CollectionUpdate) RemoveArt(a ...*Art) *CollectionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (cu *CollectionUpdate) ClearArtifacts() *CollectionUpdate {
	cu.mutation.ClearArtifacts()
	return cu
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (cu *CollectionUpdate) RemoveArtifactIDs(ids ...int) *CollectionUpdate {
	cu.mutation.RemoveArtifactIDs(ids...)
	return cu
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (cu *CollectionUpdate) RemoveArtifacts(a ...*Artifact) *CollectionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveArtifactIDs(ids...)
}

// ClearPetroglyphs clears all "petroglyphs" edges to the Petroglyph entity.
func (cu *CollectionUpdate) ClearPetroglyphs() *CollectionUpdate {
	cu.mutation.ClearPetroglyphs()
	return cu
}

// RemovePetroglyphIDs removes the "petroglyphs" edge to Petroglyph entities by IDs.
func (cu *CollectionUpdate) RemovePetroglyphIDs(ids ...int) *CollectionUpdate {
	cu.mutation.RemovePetroglyphIDs(ids...)
	return cu
}

// RemovePetroglyphs removes "petroglyphs" edges to Petroglyph entities.
func (cu *CollectionUpdate) RemovePetroglyphs(p ...*Petroglyph) *CollectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePetroglyphIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (cu *CollectionUpdate) ClearBooks() *CollectionUpdate {
	cu.mutation.ClearBooks()
	return cu
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (cu *CollectionUpdate) RemoveBookIDs(ids ...int) *CollectionUpdate {
	cu.mutation.RemoveBookIDs(ids...)
	return cu
}

// RemoveBooks removes "books" edges to Book entities.
func (cu *CollectionUpdate) RemoveBooks(b ...*Book) *CollectionUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveBookIDs(ids...)
}

// ClearProtectedAreaPictures clears all "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (cu *CollectionUpdate) ClearProtectedAreaPictures() *CollectionUpdate {
	cu.mutation.ClearProtectedAreaPictures()
	return cu
}

// RemoveProtectedAreaPictureIDs removes the "protected_area_pictures" edge to ProtectedAreaPicture entities by IDs.
func (cu *CollectionUpdate) RemoveProtectedAreaPictureIDs(ids ...int) *CollectionUpdate {
	cu.mutation.RemoveProtectedAreaPictureIDs(ids...)
	return cu
}

// RemoveProtectedAreaPictures removes "protected_area_pictures" edges to ProtectedAreaPicture entities.
func (cu *CollectionUpdate) RemoveProtectedAreaPictures(p ...*ProtectedAreaPicture) *CollectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProtectedAreaPictureIDs(ids...)
}

// ClearCategory clears the "category" edge to the Category entity.
func (cu *CollectionUpdate) ClearCategory() *CollectionUpdate {
	cu.mutation.ClearCategory()
	return cu
}

// ClearAuthors clears all "authors" edges to the Person entity.
func (cu *CollectionUpdate) ClearAuthors() *CollectionUpdate {
	cu.mutation.ClearAuthors()
	return cu
}

// RemoveAuthorIDs removes the "authors" edge to Person entities by IDs.
func (cu *CollectionUpdate) RemoveAuthorIDs(ids ...int) *CollectionUpdate {
	cu.mutation.RemoveAuthorIDs(ids...)
	return cu
}

// RemoveAuthors removes "authors" edges to Person entities.
func (cu *CollectionUpdate) RemoveAuthors(p ...*Person) *CollectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveAuthorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CollectionUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CollectionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CollectionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CollectionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CollectionUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if collection.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized collection.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := collection.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CollectionUpdate) check() error {
	if _, ok := cu.mutation.CategoryID(); cu.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Collection.category"`)
	}
	return nil
}

func (cu *CollectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(collection.Table, collection.Columns, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedBy(); ok {
		_spec.SetField(collection.FieldCreatedBy, field.TypeString, value)
	}
	if cu.mutation.CreatedByCleared() {
		_spec.ClearField(collection.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(collection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(collection.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(collection.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.DisplayName(); ok {
		_spec.SetField(collection.FieldDisplayName, field.TypeString, value)
	}
	if cu.mutation.DisplayNameCleared() {
		_spec.ClearField(collection.FieldDisplayName, field.TypeString)
	}
	if value, ok := cu.mutation.Abbreviation(); ok {
		_spec.SetField(collection.FieldAbbreviation, field.TypeString, value)
	}
	if cu.mutation.AbbreviationCleared() {
		_spec.ClearField(collection.FieldAbbreviation, field.TypeString)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(collection.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(collection.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.ExternalLink(); ok {
		_spec.SetField(collection.FieldExternalLink, field.TypeString, value)
	}
	if cu.mutation.ExternalLinkCleared() {
		_spec.ClearField(collection.FieldExternalLink, field.TypeString)
	}
	if value, ok := cu.mutation.PrimaryImageURL(); ok {
		_spec.SetField(collection.FieldPrimaryImageURL, field.TypeString, value)
	}
	if cu.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(collection.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := cu.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(collection.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, collection.FieldAdditionalImagesUrls, value)
		})
	}
	if cu.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(collection.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(collection.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(collection.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.DeletedBy(); ok {
		_spec.SetField(collection.FieldDeletedBy, field.TypeString, value)
	}
	if cu.mutation.DeletedByCleared() {
		_spec.ClearField(collection.FieldDeletedBy, field.TypeString)
	}
	if value, ok := cu.mutation.Slug(); ok {
		_spec.SetField(collection.FieldSlug, field.TypeString, value)
	}
	if cu.mutation.TypeCleared() {
		_spec.ClearField(collection.FieldType, field.TypeEnum)
	}
	if cu.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtTable,
			Columns: []string{collection.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedArtIDs(); len(nodes) > 0 && !cu.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtTable,
			Columns: []string{collection.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtTable,
			Columns: []string{collection.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtifactsTable,
			Columns: []string{collection.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !cu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtifactsTable,
			Columns: []string{collection.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtifactsTable,
			Columns: []string{collection.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.PetroglyphsTable,
			Columns: []string{collection.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPetroglyphsIDs(); len(nodes) > 0 && !cu.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.PetroglyphsTable,
			Columns: []string{collection.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PetroglyphsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.PetroglyphsTable,
			Columns: []string{collection.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.BooksTable,
			Columns: []string{collection.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedBooksIDs(); len(nodes) > 0 && !cu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.BooksTable,
			Columns: []string{collection.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.BooksTable,
			Columns: []string{collection.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ProtectedAreaPicturesTable,
			Columns: []string{collection.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProtectedAreaPicturesIDs(); len(nodes) > 0 && !cu.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ProtectedAreaPicturesTable,
			Columns: []string{collection.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ProtectedAreaPicturesTable,
			Columns: []string{collection.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.CategoryTable,
			Columns: []string{collection.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.CategoryTable,
			Columns: []string{collection.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   collection.AuthorsTable,
			Columns: collection.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAuthorsIDs(); len(nodes) > 0 && !cu.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   collection.AuthorsTable,
			Columns: collection.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   collection.AuthorsTable,
			Columns: collection.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CollectionUpdateOne is the builder for updating a single Collection entity.
type CollectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CollectionMutation
}

// SetCreatedBy sets the "created_by" field.
func (cuo *CollectionUpdateOne) SetCreatedBy(s string) *CollectionUpdateOne {
	cuo.mutation.SetCreatedBy(s)
	return cuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableCreatedBy(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetCreatedBy(*s)
	}
	return cuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (cuo *CollectionUpdateOne) ClearCreatedBy() *CollectionUpdateOne {
	cuo.mutation.ClearCreatedBy()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CollectionUpdateOne) SetUpdatedAt(t time.Time) *CollectionUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CollectionUpdateOne) SetUpdatedBy(s string) *CollectionUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableUpdatedBy(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *CollectionUpdateOne) ClearUpdatedBy() *CollectionUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetDisplayName sets the "display_name" field.
func (cuo *CollectionUpdateOne) SetDisplayName(s string) *CollectionUpdateOne {
	cuo.mutation.SetDisplayName(s)
	return cuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableDisplayName(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetDisplayName(*s)
	}
	return cuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (cuo *CollectionUpdateOne) ClearDisplayName() *CollectionUpdateOne {
	cuo.mutation.ClearDisplayName()
	return cuo
}

// SetAbbreviation sets the "abbreviation" field.
func (cuo *CollectionUpdateOne) SetAbbreviation(s string) *CollectionUpdateOne {
	cuo.mutation.SetAbbreviation(s)
	return cuo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableAbbreviation(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetAbbreviation(*s)
	}
	return cuo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (cuo *CollectionUpdateOne) ClearAbbreviation() *CollectionUpdateOne {
	cuo.mutation.ClearAbbreviation()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CollectionUpdateOne) SetDescription(s string) *CollectionUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableDescription(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CollectionUpdateOne) ClearDescription() *CollectionUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetExternalLink sets the "external_link" field.
func (cuo *CollectionUpdateOne) SetExternalLink(s string) *CollectionUpdateOne {
	cuo.mutation.SetExternalLink(s)
	return cuo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableExternalLink(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetExternalLink(*s)
	}
	return cuo
}

// ClearExternalLink clears the value of the "external_link" field.
func (cuo *CollectionUpdateOne) ClearExternalLink() *CollectionUpdateOne {
	cuo.mutation.ClearExternalLink()
	return cuo
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (cuo *CollectionUpdateOne) SetPrimaryImageURL(s string) *CollectionUpdateOne {
	cuo.mutation.SetPrimaryImageURL(s)
	return cuo
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillablePrimaryImageURL(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetPrimaryImageURL(*s)
	}
	return cuo
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (cuo *CollectionUpdateOne) ClearPrimaryImageURL() *CollectionUpdateOne {
	cuo.mutation.ClearPrimaryImageURL()
	return cuo
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (cuo *CollectionUpdateOne) SetAdditionalImagesUrls(s []string) *CollectionUpdateOne {
	cuo.mutation.SetAdditionalImagesUrls(s)
	return cuo
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (cuo *CollectionUpdateOne) AppendAdditionalImagesUrls(s []string) *CollectionUpdateOne {
	cuo.mutation.AppendAdditionalImagesUrls(s)
	return cuo
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (cuo *CollectionUpdateOne) ClearAdditionalImagesUrls() *CollectionUpdateOne {
	cuo.mutation.ClearAdditionalImagesUrls()
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CollectionUpdateOne) SetDeletedAt(t time.Time) *CollectionUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableDeletedAt(t *time.Time) *CollectionUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CollectionUpdateOne) ClearDeletedAt() *CollectionUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetDeletedBy sets the "deleted_by" field.
func (cuo *CollectionUpdateOne) SetDeletedBy(s string) *CollectionUpdateOne {
	cuo.mutation.SetDeletedBy(s)
	return cuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableDeletedBy(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetDeletedBy(*s)
	}
	return cuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (cuo *CollectionUpdateOne) ClearDeletedBy() *CollectionUpdateOne {
	cuo.mutation.ClearDeletedBy()
	return cuo
}

// SetSlug sets the "slug" field.
func (cuo *CollectionUpdateOne) SetSlug(s string) *CollectionUpdateOne {
	cuo.mutation.SetSlug(s)
	return cuo
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (cuo *CollectionUpdateOne) AddArtIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.AddArtIDs(ids...)
	return cuo
}

// AddArt adds the "art" edges to the Art entity.
func (cuo *CollectionUpdateOne) AddArt(a ...*Art) *CollectionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (cuo *CollectionUpdateOne) AddArtifactIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.AddArtifactIDs(ids...)
	return cuo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (cuo *CollectionUpdateOne) AddArtifacts(a ...*Artifact) *CollectionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddArtifactIDs(ids...)
}

// AddPetroglyphIDs adds the "petroglyphs" edge to the Petroglyph entity by IDs.
func (cuo *CollectionUpdateOne) AddPetroglyphIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.AddPetroglyphIDs(ids...)
	return cuo
}

// AddPetroglyphs adds the "petroglyphs" edges to the Petroglyph entity.
func (cuo *CollectionUpdateOne) AddPetroglyphs(p ...*Petroglyph) *CollectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPetroglyphIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (cuo *CollectionUpdateOne) AddBookIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.AddBookIDs(ids...)
	return cuo
}

// AddBooks adds the "books" edges to the Book entity.
func (cuo *CollectionUpdateOne) AddBooks(b ...*Book) *CollectionUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddBookIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (cuo *CollectionUpdateOne) AddProtectedAreaPictureIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.AddProtectedAreaPictureIDs(ids...)
	return cuo
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (cuo *CollectionUpdateOne) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *CollectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProtectedAreaPictureIDs(ids...)
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (cuo *CollectionUpdateOne) SetCategoryID(id int) *CollectionUpdateOne {
	cuo.mutation.SetCategoryID(id)
	return cuo
}

// SetCategory sets the "category" edge to the Category entity.
func (cuo *CollectionUpdateOne) SetCategory(c *Category) *CollectionUpdateOne {
	return cuo.SetCategoryID(c.ID)
}

// AddAuthorIDs adds the "authors" edge to the Person entity by IDs.
func (cuo *CollectionUpdateOne) AddAuthorIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.AddAuthorIDs(ids...)
	return cuo
}

// AddAuthors adds the "authors" edges to the Person entity.
func (cuo *CollectionUpdateOne) AddAuthors(p ...*Person) *CollectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddAuthorIDs(ids...)
}

// Mutation returns the CollectionMutation object of the builder.
func (cuo *CollectionUpdateOne) Mutation() *CollectionMutation {
	return cuo.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (cuo *CollectionUpdateOne) ClearArt() *CollectionUpdateOne {
	cuo.mutation.ClearArt()
	return cuo
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (cuo *CollectionUpdateOne) RemoveArtIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.RemoveArtIDs(ids...)
	return cuo
}

// RemoveArt removes "art" edges to Art entities.
func (cuo *CollectionUpdateOne) RemoveArt(a ...*Art) *CollectionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (cuo *CollectionUpdateOne) ClearArtifacts() *CollectionUpdateOne {
	cuo.mutation.ClearArtifacts()
	return cuo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (cuo *CollectionUpdateOne) RemoveArtifactIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.RemoveArtifactIDs(ids...)
	return cuo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (cuo *CollectionUpdateOne) RemoveArtifacts(a ...*Artifact) *CollectionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveArtifactIDs(ids...)
}

// ClearPetroglyphs clears all "petroglyphs" edges to the Petroglyph entity.
func (cuo *CollectionUpdateOne) ClearPetroglyphs() *CollectionUpdateOne {
	cuo.mutation.ClearPetroglyphs()
	return cuo
}

// RemovePetroglyphIDs removes the "petroglyphs" edge to Petroglyph entities by IDs.
func (cuo *CollectionUpdateOne) RemovePetroglyphIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.RemovePetroglyphIDs(ids...)
	return cuo
}

// RemovePetroglyphs removes "petroglyphs" edges to Petroglyph entities.
func (cuo *CollectionUpdateOne) RemovePetroglyphs(p ...*Petroglyph) *CollectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePetroglyphIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (cuo *CollectionUpdateOne) ClearBooks() *CollectionUpdateOne {
	cuo.mutation.ClearBooks()
	return cuo
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (cuo *CollectionUpdateOne) RemoveBookIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.RemoveBookIDs(ids...)
	return cuo
}

// RemoveBooks removes "books" edges to Book entities.
func (cuo *CollectionUpdateOne) RemoveBooks(b ...*Book) *CollectionUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveBookIDs(ids...)
}

// ClearProtectedAreaPictures clears all "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (cuo *CollectionUpdateOne) ClearProtectedAreaPictures() *CollectionUpdateOne {
	cuo.mutation.ClearProtectedAreaPictures()
	return cuo
}

// RemoveProtectedAreaPictureIDs removes the "protected_area_pictures" edge to ProtectedAreaPicture entities by IDs.
func (cuo *CollectionUpdateOne) RemoveProtectedAreaPictureIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.RemoveProtectedAreaPictureIDs(ids...)
	return cuo
}

// RemoveProtectedAreaPictures removes "protected_area_pictures" edges to ProtectedAreaPicture entities.
func (cuo *CollectionUpdateOne) RemoveProtectedAreaPictures(p ...*ProtectedAreaPicture) *CollectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProtectedAreaPictureIDs(ids...)
}

// ClearCategory clears the "category" edge to the Category entity.
func (cuo *CollectionUpdateOne) ClearCategory() *CollectionUpdateOne {
	cuo.mutation.ClearCategory()
	return cuo
}

// ClearAuthors clears all "authors" edges to the Person entity.
func (cuo *CollectionUpdateOne) ClearAuthors() *CollectionUpdateOne {
	cuo.mutation.ClearAuthors()
	return cuo
}

// RemoveAuthorIDs removes the "authors" edge to Person entities by IDs.
func (cuo *CollectionUpdateOne) RemoveAuthorIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.RemoveAuthorIDs(ids...)
	return cuo
}

// RemoveAuthors removes "authors" edges to Person entities.
func (cuo *CollectionUpdateOne) RemoveAuthors(p ...*Person) *CollectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveAuthorIDs(ids...)
}

// Where appends a list predicates to the CollectionUpdate builder.
func (cuo *CollectionUpdateOne) Where(ps ...predicate.Collection) *CollectionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CollectionUpdateOne) Select(field string, fields ...string) *CollectionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Collection entity.
func (cuo *CollectionUpdateOne) Save(ctx context.Context) (*Collection, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CollectionUpdateOne) SaveX(ctx context.Context) *Collection {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CollectionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CollectionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CollectionUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if collection.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized collection.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := collection.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CollectionUpdateOne) check() error {
	if _, ok := cuo.mutation.CategoryID(); cuo.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Collection.category"`)
	}
	return nil
}

func (cuo *CollectionUpdateOne) sqlSave(ctx context.Context) (_node *Collection, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(collection.Table, collection.Columns, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Collection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collection.FieldID)
		for _, f := range fields {
			if !collection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != collection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedBy(); ok {
		_spec.SetField(collection.FieldCreatedBy, field.TypeString, value)
	}
	if cuo.mutation.CreatedByCleared() {
		_spec.ClearField(collection.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(collection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(collection.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(collection.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.DisplayName(); ok {
		_spec.SetField(collection.FieldDisplayName, field.TypeString, value)
	}
	if cuo.mutation.DisplayNameCleared() {
		_spec.ClearField(collection.FieldDisplayName, field.TypeString)
	}
	if value, ok := cuo.mutation.Abbreviation(); ok {
		_spec.SetField(collection.FieldAbbreviation, field.TypeString, value)
	}
	if cuo.mutation.AbbreviationCleared() {
		_spec.ClearField(collection.FieldAbbreviation, field.TypeString)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(collection.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(collection.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.ExternalLink(); ok {
		_spec.SetField(collection.FieldExternalLink, field.TypeString, value)
	}
	if cuo.mutation.ExternalLinkCleared() {
		_spec.ClearField(collection.FieldExternalLink, field.TypeString)
	}
	if value, ok := cuo.mutation.PrimaryImageURL(); ok {
		_spec.SetField(collection.FieldPrimaryImageURL, field.TypeString, value)
	}
	if cuo.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(collection.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := cuo.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(collection.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, collection.FieldAdditionalImagesUrls, value)
		})
	}
	if cuo.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(collection.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(collection.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(collection.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.DeletedBy(); ok {
		_spec.SetField(collection.FieldDeletedBy, field.TypeString, value)
	}
	if cuo.mutation.DeletedByCleared() {
		_spec.ClearField(collection.FieldDeletedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.Slug(); ok {
		_spec.SetField(collection.FieldSlug, field.TypeString, value)
	}
	if cuo.mutation.TypeCleared() {
		_spec.ClearField(collection.FieldType, field.TypeEnum)
	}
	if cuo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtTable,
			Columns: []string{collection.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedArtIDs(); len(nodes) > 0 && !cuo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtTable,
			Columns: []string{collection.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtTable,
			Columns: []string{collection.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtifactsTable,
			Columns: []string{collection.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !cuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtifactsTable,
			Columns: []string{collection.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtifactsTable,
			Columns: []string{collection.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.PetroglyphsTable,
			Columns: []string{collection.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPetroglyphsIDs(); len(nodes) > 0 && !cuo.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.PetroglyphsTable,
			Columns: []string{collection.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PetroglyphsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.PetroglyphsTable,
			Columns: []string{collection.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.BooksTable,
			Columns: []string{collection.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedBooksIDs(); len(nodes) > 0 && !cuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.BooksTable,
			Columns: []string{collection.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.BooksTable,
			Columns: []string{collection.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ProtectedAreaPicturesTable,
			Columns: []string{collection.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProtectedAreaPicturesIDs(); len(nodes) > 0 && !cuo.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ProtectedAreaPicturesTable,
			Columns: []string{collection.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ProtectedAreaPicturesTable,
			Columns: []string{collection.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.CategoryTable,
			Columns: []string{collection.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.CategoryTable,
			Columns: []string{collection.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   collection.AuthorsTable,
			Columns: collection.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAuthorsIDs(); len(nodes) > 0 && !cuo.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   collection.AuthorsTable,
			Columns: collection.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   collection.AuthorsTable,
			Columns: collection.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Collection{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
