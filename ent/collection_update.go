// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/artifact"
	"github.com/dkrasnovdev/heritage-api/ent/book"
	"github.com/dkrasnovdev/heritage-api/ent/category"
	"github.com/dkrasnovdev/heritage-api/ent/collection"
	"github.com/dkrasnovdev/heritage-api/ent/person"
	"github.com/dkrasnovdev/heritage-api/ent/predicate"
)

// CollectionUpdate is the builder for updating Collection entities.
type CollectionUpdate struct {
	config
	hooks    []Hook
	mutation *CollectionMutation
}

// Where appends a list predicates to the CollectionUpdate builder.
func (cu *CollectionUpdate) Where(ps ...predicate.Collection) *CollectionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedBy sets the "created_by" field.
func (cu *CollectionUpdate) SetCreatedBy(s string) *CollectionUpdate {
	cu.mutation.SetCreatedBy(s)
	return cu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableCreatedBy(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetCreatedBy(*s)
	}
	return cu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (cu *CollectionUpdate) ClearCreatedBy() *CollectionUpdate {
	cu.mutation.ClearCreatedBy()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CollectionUpdate) SetUpdatedAt(t time.Time) *CollectionUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CollectionUpdate) SetUpdatedBy(s string) *CollectionUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableUpdatedBy(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *CollectionUpdate) ClearUpdatedBy() *CollectionUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetDisplayName sets the "display_name" field.
func (cu *CollectionUpdate) SetDisplayName(s string) *CollectionUpdate {
	cu.mutation.SetDisplayName(s)
	return cu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableDisplayName(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetDisplayName(*s)
	}
	return cu
}

// ClearDisplayName clears the value of the "display_name" field.
func (cu *CollectionUpdate) ClearDisplayName() *CollectionUpdate {
	cu.mutation.ClearDisplayName()
	return cu
}

// SetAbbreviation sets the "abbreviation" field.
func (cu *CollectionUpdate) SetAbbreviation(s string) *CollectionUpdate {
	cu.mutation.SetAbbreviation(s)
	return cu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableAbbreviation(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetAbbreviation(*s)
	}
	return cu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (cu *CollectionUpdate) ClearAbbreviation() *CollectionUpdate {
	cu.mutation.ClearAbbreviation()
	return cu
}

// SetDescription sets the "description" field.
func (cu *CollectionUpdate) SetDescription(s string) *CollectionUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableDescription(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CollectionUpdate) ClearDescription() *CollectionUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetExternalLinks sets the "external_links" field.
func (cu *CollectionUpdate) SetExternalLinks(s []string) *CollectionUpdate {
	cu.mutation.SetExternalLinks(s)
	return cu
}

// AppendExternalLinks appends s to the "external_links" field.
func (cu *CollectionUpdate) AppendExternalLinks(s []string) *CollectionUpdate {
	cu.mutation.AppendExternalLinks(s)
	return cu
}

// ClearExternalLinks clears the value of the "external_links" field.
func (cu *CollectionUpdate) ClearExternalLinks() *CollectionUpdate {
	cu.mutation.ClearExternalLinks()
	return cu
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (cu *CollectionUpdate) AddArtifactIDs(ids ...int) *CollectionUpdate {
	cu.mutation.AddArtifactIDs(ids...)
	return cu
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (cu *CollectionUpdate) AddArtifacts(a ...*Artifact) *CollectionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (cu *CollectionUpdate) AddBookIDs(ids ...int) *CollectionUpdate {
	cu.mutation.AddBookIDs(ids...)
	return cu
}

// AddBooks adds the "books" edges to the Book entity.
func (cu *CollectionUpdate) AddBooks(b ...*Book) *CollectionUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddBookIDs(ids...)
}

// AddPersonIDs adds the "people" edge to the Person entity by IDs.
func (cu *CollectionUpdate) AddPersonIDs(ids ...int) *CollectionUpdate {
	cu.mutation.AddPersonIDs(ids...)
	return cu
}

// AddPeople adds the "people" edges to the Person entity.
func (cu *CollectionUpdate) AddPeople(p ...*Person) *CollectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPersonIDs(ids...)
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (cu *CollectionUpdate) SetCategoryID(id int) *CollectionUpdate {
	cu.mutation.SetCategoryID(id)
	return cu
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (cu *CollectionUpdate) SetNillableCategoryID(id *int) *CollectionUpdate {
	if id != nil {
		cu = cu.SetCategoryID(*id)
	}
	return cu
}

// SetCategory sets the "category" edge to the Category entity.
func (cu *CollectionUpdate) SetCategory(c *Category) *CollectionUpdate {
	return cu.SetCategoryID(c.ID)
}

// Mutation returns the CollectionMutation object of the builder.
func (cu *CollectionUpdate) Mutation() *CollectionMutation {
	return cu.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (cu *CollectionUpdate) ClearArtifacts() *CollectionUpdate {
	cu.mutation.ClearArtifacts()
	return cu
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (cu *CollectionUpdate) RemoveArtifactIDs(ids ...int) *CollectionUpdate {
	cu.mutation.RemoveArtifactIDs(ids...)
	return cu
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (cu *CollectionUpdate) RemoveArtifacts(a ...*Artifact) *CollectionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveArtifactIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (cu *CollectionUpdate) ClearBooks() *CollectionUpdate {
	cu.mutation.ClearBooks()
	return cu
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (cu *CollectionUpdate) RemoveBookIDs(ids ...int) *CollectionUpdate {
	cu.mutation.RemoveBookIDs(ids...)
	return cu
}

// RemoveBooks removes "books" edges to Book entities.
func (cu *CollectionUpdate) RemoveBooks(b ...*Book) *CollectionUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveBookIDs(ids...)
}

// ClearPeople clears all "people" edges to the Person entity.
func (cu *CollectionUpdate) ClearPeople() *CollectionUpdate {
	cu.mutation.ClearPeople()
	return cu
}

// RemovePersonIDs removes the "people" edge to Person entities by IDs.
func (cu *CollectionUpdate) RemovePersonIDs(ids ...int) *CollectionUpdate {
	cu.mutation.RemovePersonIDs(ids...)
	return cu
}

// RemovePeople removes "people" edges to Person entities.
func (cu *CollectionUpdate) RemovePeople(p ...*Person) *CollectionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePersonIDs(ids...)
}

// ClearCategory clears the "category" edge to the Category entity.
func (cu *CollectionUpdate) ClearCategory() *CollectionUpdate {
	cu.mutation.ClearCategory()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CollectionUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CollectionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CollectionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CollectionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CollectionUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if collection.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized collection.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := collection.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cu *CollectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(collection.Table, collection.Columns, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedBy(); ok {
		_spec.SetField(collection.FieldCreatedBy, field.TypeString, value)
	}
	if cu.mutation.CreatedByCleared() {
		_spec.ClearField(collection.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(collection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(collection.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(collection.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.DisplayName(); ok {
		_spec.SetField(collection.FieldDisplayName, field.TypeString, value)
	}
	if cu.mutation.DisplayNameCleared() {
		_spec.ClearField(collection.FieldDisplayName, field.TypeString)
	}
	if value, ok := cu.mutation.Abbreviation(); ok {
		_spec.SetField(collection.FieldAbbreviation, field.TypeString, value)
	}
	if cu.mutation.AbbreviationCleared() {
		_spec.ClearField(collection.FieldAbbreviation, field.TypeString)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(collection.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(collection.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.ExternalLinks(); ok {
		_spec.SetField(collection.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, collection.FieldExternalLinks, value)
		})
	}
	if cu.mutation.ExternalLinksCleared() {
		_spec.ClearField(collection.FieldExternalLinks, field.TypeJSON)
	}
	if cu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtifactsTable,
			Columns: []string{collection.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !cu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtifactsTable,
			Columns: []string{collection.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtifactsTable,
			Columns: []string{collection.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.BooksTable,
			Columns: []string{collection.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedBooksIDs(); len(nodes) > 0 && !cu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.BooksTable,
			Columns: []string{collection.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.BooksTable,
			Columns: []string{collection.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.PeopleTable,
			Columns: []string{collection.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPeopleIDs(); len(nodes) > 0 && !cu.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.PeopleTable,
			Columns: []string{collection.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.PeopleTable,
			Columns: []string{collection.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.CategoryTable,
			Columns: []string{collection.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.CategoryTable,
			Columns: []string{collection.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CollectionUpdateOne is the builder for updating a single Collection entity.
type CollectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CollectionMutation
}

// SetCreatedBy sets the "created_by" field.
func (cuo *CollectionUpdateOne) SetCreatedBy(s string) *CollectionUpdateOne {
	cuo.mutation.SetCreatedBy(s)
	return cuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableCreatedBy(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetCreatedBy(*s)
	}
	return cuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (cuo *CollectionUpdateOne) ClearCreatedBy() *CollectionUpdateOne {
	cuo.mutation.ClearCreatedBy()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CollectionUpdateOne) SetUpdatedAt(t time.Time) *CollectionUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CollectionUpdateOne) SetUpdatedBy(s string) *CollectionUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableUpdatedBy(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *CollectionUpdateOne) ClearUpdatedBy() *CollectionUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetDisplayName sets the "display_name" field.
func (cuo *CollectionUpdateOne) SetDisplayName(s string) *CollectionUpdateOne {
	cuo.mutation.SetDisplayName(s)
	return cuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableDisplayName(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetDisplayName(*s)
	}
	return cuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (cuo *CollectionUpdateOne) ClearDisplayName() *CollectionUpdateOne {
	cuo.mutation.ClearDisplayName()
	return cuo
}

// SetAbbreviation sets the "abbreviation" field.
func (cuo *CollectionUpdateOne) SetAbbreviation(s string) *CollectionUpdateOne {
	cuo.mutation.SetAbbreviation(s)
	return cuo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableAbbreviation(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetAbbreviation(*s)
	}
	return cuo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (cuo *CollectionUpdateOne) ClearAbbreviation() *CollectionUpdateOne {
	cuo.mutation.ClearAbbreviation()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CollectionUpdateOne) SetDescription(s string) *CollectionUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableDescription(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CollectionUpdateOne) ClearDescription() *CollectionUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetExternalLinks sets the "external_links" field.
func (cuo *CollectionUpdateOne) SetExternalLinks(s []string) *CollectionUpdateOne {
	cuo.mutation.SetExternalLinks(s)
	return cuo
}

// AppendExternalLinks appends s to the "external_links" field.
func (cuo *CollectionUpdateOne) AppendExternalLinks(s []string) *CollectionUpdateOne {
	cuo.mutation.AppendExternalLinks(s)
	return cuo
}

// ClearExternalLinks clears the value of the "external_links" field.
func (cuo *CollectionUpdateOne) ClearExternalLinks() *CollectionUpdateOne {
	cuo.mutation.ClearExternalLinks()
	return cuo
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (cuo *CollectionUpdateOne) AddArtifactIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.AddArtifactIDs(ids...)
	return cuo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (cuo *CollectionUpdateOne) AddArtifacts(a ...*Artifact) *CollectionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (cuo *CollectionUpdateOne) AddBookIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.AddBookIDs(ids...)
	return cuo
}

// AddBooks adds the "books" edges to the Book entity.
func (cuo *CollectionUpdateOne) AddBooks(b ...*Book) *CollectionUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddBookIDs(ids...)
}

// AddPersonIDs adds the "people" edge to the Person entity by IDs.
func (cuo *CollectionUpdateOne) AddPersonIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.AddPersonIDs(ids...)
	return cuo
}

// AddPeople adds the "people" edges to the Person entity.
func (cuo *CollectionUpdateOne) AddPeople(p ...*Person) *CollectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPersonIDs(ids...)
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (cuo *CollectionUpdateOne) SetCategoryID(id int) *CollectionUpdateOne {
	cuo.mutation.SetCategoryID(id)
	return cuo
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableCategoryID(id *int) *CollectionUpdateOne {
	if id != nil {
		cuo = cuo.SetCategoryID(*id)
	}
	return cuo
}

// SetCategory sets the "category" edge to the Category entity.
func (cuo *CollectionUpdateOne) SetCategory(c *Category) *CollectionUpdateOne {
	return cuo.SetCategoryID(c.ID)
}

// Mutation returns the CollectionMutation object of the builder.
func (cuo *CollectionUpdateOne) Mutation() *CollectionMutation {
	return cuo.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (cuo *CollectionUpdateOne) ClearArtifacts() *CollectionUpdateOne {
	cuo.mutation.ClearArtifacts()
	return cuo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (cuo *CollectionUpdateOne) RemoveArtifactIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.RemoveArtifactIDs(ids...)
	return cuo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (cuo *CollectionUpdateOne) RemoveArtifacts(a ...*Artifact) *CollectionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveArtifactIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (cuo *CollectionUpdateOne) ClearBooks() *CollectionUpdateOne {
	cuo.mutation.ClearBooks()
	return cuo
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (cuo *CollectionUpdateOne) RemoveBookIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.RemoveBookIDs(ids...)
	return cuo
}

// RemoveBooks removes "books" edges to Book entities.
func (cuo *CollectionUpdateOne) RemoveBooks(b ...*Book) *CollectionUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveBookIDs(ids...)
}

// ClearPeople clears all "people" edges to the Person entity.
func (cuo *CollectionUpdateOne) ClearPeople() *CollectionUpdateOne {
	cuo.mutation.ClearPeople()
	return cuo
}

// RemovePersonIDs removes the "people" edge to Person entities by IDs.
func (cuo *CollectionUpdateOne) RemovePersonIDs(ids ...int) *CollectionUpdateOne {
	cuo.mutation.RemovePersonIDs(ids...)
	return cuo
}

// RemovePeople removes "people" edges to Person entities.
func (cuo *CollectionUpdateOne) RemovePeople(p ...*Person) *CollectionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePersonIDs(ids...)
}

// ClearCategory clears the "category" edge to the Category entity.
func (cuo *CollectionUpdateOne) ClearCategory() *CollectionUpdateOne {
	cuo.mutation.ClearCategory()
	return cuo
}

// Where appends a list predicates to the CollectionUpdate builder.
func (cuo *CollectionUpdateOne) Where(ps ...predicate.Collection) *CollectionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CollectionUpdateOne) Select(field string, fields ...string) *CollectionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Collection entity.
func (cuo *CollectionUpdateOne) Save(ctx context.Context) (*Collection, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CollectionUpdateOne) SaveX(ctx context.Context) *Collection {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CollectionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CollectionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CollectionUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if collection.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized collection.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := collection.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cuo *CollectionUpdateOne) sqlSave(ctx context.Context) (_node *Collection, err error) {
	_spec := sqlgraph.NewUpdateSpec(collection.Table, collection.Columns, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Collection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collection.FieldID)
		for _, f := range fields {
			if !collection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != collection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedBy(); ok {
		_spec.SetField(collection.FieldCreatedBy, field.TypeString, value)
	}
	if cuo.mutation.CreatedByCleared() {
		_spec.ClearField(collection.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(collection.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(collection.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(collection.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.DisplayName(); ok {
		_spec.SetField(collection.FieldDisplayName, field.TypeString, value)
	}
	if cuo.mutation.DisplayNameCleared() {
		_spec.ClearField(collection.FieldDisplayName, field.TypeString)
	}
	if value, ok := cuo.mutation.Abbreviation(); ok {
		_spec.SetField(collection.FieldAbbreviation, field.TypeString, value)
	}
	if cuo.mutation.AbbreviationCleared() {
		_spec.ClearField(collection.FieldAbbreviation, field.TypeString)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(collection.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(collection.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.ExternalLinks(); ok {
		_spec.SetField(collection.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, collection.FieldExternalLinks, value)
		})
	}
	if cuo.mutation.ExternalLinksCleared() {
		_spec.ClearField(collection.FieldExternalLinks, field.TypeJSON)
	}
	if cuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtifactsTable,
			Columns: []string{collection.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !cuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtifactsTable,
			Columns: []string{collection.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.ArtifactsTable,
			Columns: []string{collection.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.BooksTable,
			Columns: []string{collection.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedBooksIDs(); len(nodes) > 0 && !cuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.BooksTable,
			Columns: []string{collection.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.BooksTable,
			Columns: []string{collection.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.PeopleTable,
			Columns: []string{collection.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPeopleIDs(); len(nodes) > 0 && !cuo.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.PeopleTable,
			Columns: []string{collection.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.PeopleTable,
			Columns: []string{collection.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.CategoryTable,
			Columns: []string{collection.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.CategoryTable,
			Columns: []string{collection.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Collection{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
