// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/person"
	"github.com/dkrasnovdev/heritage-api/ent/personrole"
	"github.com/dkrasnovdev/heritage-api/ent/predicate"
)

// PersonRoleUpdate is the builder for updating PersonRole entities.
type PersonRoleUpdate struct {
	config
	hooks    []Hook
	mutation *PersonRoleMutation
}

// Where appends a list predicates to the PersonRoleUpdate builder.
func (pru *PersonRoleUpdate) Where(ps ...predicate.PersonRole) *PersonRoleUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetCreatedBy sets the "created_by" field.
func (pru *PersonRoleUpdate) SetCreatedBy(s string) *PersonRoleUpdate {
	pru.mutation.SetCreatedBy(s)
	return pru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pru *PersonRoleUpdate) SetNillableCreatedBy(s *string) *PersonRoleUpdate {
	if s != nil {
		pru.SetCreatedBy(*s)
	}
	return pru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pru *PersonRoleUpdate) ClearCreatedBy() *PersonRoleUpdate {
	pru.mutation.ClearCreatedBy()
	return pru
}

// SetUpdatedAt sets the "updated_at" field.
func (pru *PersonRoleUpdate) SetUpdatedAt(t time.Time) *PersonRoleUpdate {
	pru.mutation.SetUpdatedAt(t)
	return pru
}

// SetUpdatedBy sets the "updated_by" field.
func (pru *PersonRoleUpdate) SetUpdatedBy(s string) *PersonRoleUpdate {
	pru.mutation.SetUpdatedBy(s)
	return pru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pru *PersonRoleUpdate) SetNillableUpdatedBy(s *string) *PersonRoleUpdate {
	if s != nil {
		pru.SetUpdatedBy(*s)
	}
	return pru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pru *PersonRoleUpdate) ClearUpdatedBy() *PersonRoleUpdate {
	pru.mutation.ClearUpdatedBy()
	return pru
}

// SetAbbreviation sets the "abbreviation" field.
func (pru *PersonRoleUpdate) SetAbbreviation(s string) *PersonRoleUpdate {
	pru.mutation.SetAbbreviation(s)
	return pru
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (pru *PersonRoleUpdate) SetNillableAbbreviation(s *string) *PersonRoleUpdate {
	if s != nil {
		pru.SetAbbreviation(*s)
	}
	return pru
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (pru *PersonRoleUpdate) ClearAbbreviation() *PersonRoleUpdate {
	pru.mutation.ClearAbbreviation()
	return pru
}

// SetDisplayName sets the "display_name" field.
func (pru *PersonRoleUpdate) SetDisplayName(s string) *PersonRoleUpdate {
	pru.mutation.SetDisplayName(s)
	return pru
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pru *PersonRoleUpdate) SetNillableDisplayName(s *string) *PersonRoleUpdate {
	if s != nil {
		pru.SetDisplayName(*s)
	}
	return pru
}

// ClearDisplayName clears the value of the "display_name" field.
func (pru *PersonRoleUpdate) ClearDisplayName() *PersonRoleUpdate {
	pru.mutation.ClearDisplayName()
	return pru
}

// SetDescription sets the "description" field.
func (pru *PersonRoleUpdate) SetDescription(s string) *PersonRoleUpdate {
	pru.mutation.SetDescription(s)
	return pru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pru *PersonRoleUpdate) SetNillableDescription(s *string) *PersonRoleUpdate {
	if s != nil {
		pru.SetDescription(*s)
	}
	return pru
}

// ClearDescription clears the value of the "description" field.
func (pru *PersonRoleUpdate) ClearDescription() *PersonRoleUpdate {
	pru.mutation.ClearDescription()
	return pru
}

// SetExternalLinks sets the "external_links" field.
func (pru *PersonRoleUpdate) SetExternalLinks(s []string) *PersonRoleUpdate {
	pru.mutation.SetExternalLinks(s)
	return pru
}

// AppendExternalLinks appends s to the "external_links" field.
func (pru *PersonRoleUpdate) AppendExternalLinks(s []string) *PersonRoleUpdate {
	pru.mutation.AppendExternalLinks(s)
	return pru
}

// ClearExternalLinks clears the value of the "external_links" field.
func (pru *PersonRoleUpdate) ClearExternalLinks() *PersonRoleUpdate {
	pru.mutation.ClearExternalLinks()
	return pru
}

// AddPersonIDs adds the "person" edge to the Person entity by IDs.
func (pru *PersonRoleUpdate) AddPersonIDs(ids ...int) *PersonRoleUpdate {
	pru.mutation.AddPersonIDs(ids...)
	return pru
}

// AddPerson adds the "person" edges to the Person entity.
func (pru *PersonRoleUpdate) AddPerson(p ...*Person) *PersonRoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pru.AddPersonIDs(ids...)
}

// Mutation returns the PersonRoleMutation object of the builder.
func (pru *PersonRoleUpdate) Mutation() *PersonRoleMutation {
	return pru.mutation
}

// ClearPerson clears all "person" edges to the Person entity.
func (pru *PersonRoleUpdate) ClearPerson() *PersonRoleUpdate {
	pru.mutation.ClearPerson()
	return pru
}

// RemovePersonIDs removes the "person" edge to Person entities by IDs.
func (pru *PersonRoleUpdate) RemovePersonIDs(ids ...int) *PersonRoleUpdate {
	pru.mutation.RemovePersonIDs(ids...)
	return pru
}

// RemovePerson removes "person" edges to Person entities.
func (pru *PersonRoleUpdate) RemovePerson(p ...*Person) *PersonRoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pru.RemovePersonIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PersonRoleUpdate) Save(ctx context.Context) (int, error) {
	if err := pru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PersonRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PersonRoleUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PersonRoleUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pru *PersonRoleUpdate) defaults() error {
	if _, ok := pru.mutation.UpdatedAt(); !ok {
		if personrole.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized personrole.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := personrole.UpdateDefaultUpdatedAt()
		pru.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pru *PersonRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(personrole.Table, personrole.Columns, sqlgraph.NewFieldSpec(personrole.FieldID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.CreatedBy(); ok {
		_spec.SetField(personrole.FieldCreatedBy, field.TypeString, value)
	}
	if pru.mutation.CreatedByCleared() {
		_spec.ClearField(personrole.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pru.mutation.UpdatedAt(); ok {
		_spec.SetField(personrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.UpdatedBy(); ok {
		_spec.SetField(personrole.FieldUpdatedBy, field.TypeString, value)
	}
	if pru.mutation.UpdatedByCleared() {
		_spec.ClearField(personrole.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pru.mutation.Abbreviation(); ok {
		_spec.SetField(personrole.FieldAbbreviation, field.TypeString, value)
	}
	if pru.mutation.AbbreviationCleared() {
		_spec.ClearField(personrole.FieldAbbreviation, field.TypeString)
	}
	if value, ok := pru.mutation.DisplayName(); ok {
		_spec.SetField(personrole.FieldDisplayName, field.TypeString, value)
	}
	if pru.mutation.DisplayNameCleared() {
		_spec.ClearField(personrole.FieldDisplayName, field.TypeString)
	}
	if value, ok := pru.mutation.Description(); ok {
		_spec.SetField(personrole.FieldDescription, field.TypeString, value)
	}
	if pru.mutation.DescriptionCleared() {
		_spec.ClearField(personrole.FieldDescription, field.TypeString)
	}
	if value, ok := pru.mutation.ExternalLinks(); ok {
		_spec.SetField(personrole.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := pru.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, personrole.FieldExternalLinks, value)
		})
	}
	if pru.mutation.ExternalLinksCleared() {
		_spec.ClearField(personrole.FieldExternalLinks, field.TypeJSON)
	}
	if pru.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   personrole.PersonTable,
			Columns: personrole.PersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RemovedPersonIDs(); len(nodes) > 0 && !pru.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   personrole.PersonTable,
			Columns: personrole.PersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   personrole.PersonTable,
			Columns: personrole.PersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PersonRoleUpdateOne is the builder for updating a single PersonRole entity.
type PersonRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonRoleMutation
}

// SetCreatedBy sets the "created_by" field.
func (pruo *PersonRoleUpdateOne) SetCreatedBy(s string) *PersonRoleUpdateOne {
	pruo.mutation.SetCreatedBy(s)
	return pruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pruo *PersonRoleUpdateOne) SetNillableCreatedBy(s *string) *PersonRoleUpdateOne {
	if s != nil {
		pruo.SetCreatedBy(*s)
	}
	return pruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pruo *PersonRoleUpdateOne) ClearCreatedBy() *PersonRoleUpdateOne {
	pruo.mutation.ClearCreatedBy()
	return pruo
}

// SetUpdatedAt sets the "updated_at" field.
func (pruo *PersonRoleUpdateOne) SetUpdatedAt(t time.Time) *PersonRoleUpdateOne {
	pruo.mutation.SetUpdatedAt(t)
	return pruo
}

// SetUpdatedBy sets the "updated_by" field.
func (pruo *PersonRoleUpdateOne) SetUpdatedBy(s string) *PersonRoleUpdateOne {
	pruo.mutation.SetUpdatedBy(s)
	return pruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pruo *PersonRoleUpdateOne) SetNillableUpdatedBy(s *string) *PersonRoleUpdateOne {
	if s != nil {
		pruo.SetUpdatedBy(*s)
	}
	return pruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pruo *PersonRoleUpdateOne) ClearUpdatedBy() *PersonRoleUpdateOne {
	pruo.mutation.ClearUpdatedBy()
	return pruo
}

// SetAbbreviation sets the "abbreviation" field.
func (pruo *PersonRoleUpdateOne) SetAbbreviation(s string) *PersonRoleUpdateOne {
	pruo.mutation.SetAbbreviation(s)
	return pruo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (pruo *PersonRoleUpdateOne) SetNillableAbbreviation(s *string) *PersonRoleUpdateOne {
	if s != nil {
		pruo.SetAbbreviation(*s)
	}
	return pruo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (pruo *PersonRoleUpdateOne) ClearAbbreviation() *PersonRoleUpdateOne {
	pruo.mutation.ClearAbbreviation()
	return pruo
}

// SetDisplayName sets the "display_name" field.
func (pruo *PersonRoleUpdateOne) SetDisplayName(s string) *PersonRoleUpdateOne {
	pruo.mutation.SetDisplayName(s)
	return pruo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pruo *PersonRoleUpdateOne) SetNillableDisplayName(s *string) *PersonRoleUpdateOne {
	if s != nil {
		pruo.SetDisplayName(*s)
	}
	return pruo
}

// ClearDisplayName clears the value of the "display_name" field.
func (pruo *PersonRoleUpdateOne) ClearDisplayName() *PersonRoleUpdateOne {
	pruo.mutation.ClearDisplayName()
	return pruo
}

// SetDescription sets the "description" field.
func (pruo *PersonRoleUpdateOne) SetDescription(s string) *PersonRoleUpdateOne {
	pruo.mutation.SetDescription(s)
	return pruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pruo *PersonRoleUpdateOne) SetNillableDescription(s *string) *PersonRoleUpdateOne {
	if s != nil {
		pruo.SetDescription(*s)
	}
	return pruo
}

// ClearDescription clears the value of the "description" field.
func (pruo *PersonRoleUpdateOne) ClearDescription() *PersonRoleUpdateOne {
	pruo.mutation.ClearDescription()
	return pruo
}

// SetExternalLinks sets the "external_links" field.
func (pruo *PersonRoleUpdateOne) SetExternalLinks(s []string) *PersonRoleUpdateOne {
	pruo.mutation.SetExternalLinks(s)
	return pruo
}

// AppendExternalLinks appends s to the "external_links" field.
func (pruo *PersonRoleUpdateOne) AppendExternalLinks(s []string) *PersonRoleUpdateOne {
	pruo.mutation.AppendExternalLinks(s)
	return pruo
}

// ClearExternalLinks clears the value of the "external_links" field.
func (pruo *PersonRoleUpdateOne) ClearExternalLinks() *PersonRoleUpdateOne {
	pruo.mutation.ClearExternalLinks()
	return pruo
}

// AddPersonIDs adds the "person" edge to the Person entity by IDs.
func (pruo *PersonRoleUpdateOne) AddPersonIDs(ids ...int) *PersonRoleUpdateOne {
	pruo.mutation.AddPersonIDs(ids...)
	return pruo
}

// AddPerson adds the "person" edges to the Person entity.
func (pruo *PersonRoleUpdateOne) AddPerson(p ...*Person) *PersonRoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pruo.AddPersonIDs(ids...)
}

// Mutation returns the PersonRoleMutation object of the builder.
func (pruo *PersonRoleUpdateOne) Mutation() *PersonRoleMutation {
	return pruo.mutation
}

// ClearPerson clears all "person" edges to the Person entity.
func (pruo *PersonRoleUpdateOne) ClearPerson() *PersonRoleUpdateOne {
	pruo.mutation.ClearPerson()
	return pruo
}

// RemovePersonIDs removes the "person" edge to Person entities by IDs.
func (pruo *PersonRoleUpdateOne) RemovePersonIDs(ids ...int) *PersonRoleUpdateOne {
	pruo.mutation.RemovePersonIDs(ids...)
	return pruo
}

// RemovePerson removes "person" edges to Person entities.
func (pruo *PersonRoleUpdateOne) RemovePerson(p ...*Person) *PersonRoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pruo.RemovePersonIDs(ids...)
}

// Where appends a list predicates to the PersonRoleUpdate builder.
func (pruo *PersonRoleUpdateOne) Where(ps ...predicate.PersonRole) *PersonRoleUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PersonRoleUpdateOne) Select(field string, fields ...string) *PersonRoleUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PersonRole entity.
func (pruo *PersonRoleUpdateOne) Save(ctx context.Context) (*PersonRole, error) {
	if err := pruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PersonRoleUpdateOne) SaveX(ctx context.Context) *PersonRole {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PersonRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PersonRoleUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pruo *PersonRoleUpdateOne) defaults() error {
	if _, ok := pruo.mutation.UpdatedAt(); !ok {
		if personrole.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized personrole.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := personrole.UpdateDefaultUpdatedAt()
		pruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pruo *PersonRoleUpdateOne) sqlSave(ctx context.Context) (_node *PersonRole, err error) {
	_spec := sqlgraph.NewUpdateSpec(personrole.Table, personrole.Columns, sqlgraph.NewFieldSpec(personrole.FieldID, field.TypeInt))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PersonRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personrole.FieldID)
		for _, f := range fields {
			if !personrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.CreatedBy(); ok {
		_spec.SetField(personrole.FieldCreatedBy, field.TypeString, value)
	}
	if pruo.mutation.CreatedByCleared() {
		_spec.ClearField(personrole.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pruo.mutation.UpdatedAt(); ok {
		_spec.SetField(personrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.UpdatedBy(); ok {
		_spec.SetField(personrole.FieldUpdatedBy, field.TypeString, value)
	}
	if pruo.mutation.UpdatedByCleared() {
		_spec.ClearField(personrole.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pruo.mutation.Abbreviation(); ok {
		_spec.SetField(personrole.FieldAbbreviation, field.TypeString, value)
	}
	if pruo.mutation.AbbreviationCleared() {
		_spec.ClearField(personrole.FieldAbbreviation, field.TypeString)
	}
	if value, ok := pruo.mutation.DisplayName(); ok {
		_spec.SetField(personrole.FieldDisplayName, field.TypeString, value)
	}
	if pruo.mutation.DisplayNameCleared() {
		_spec.ClearField(personrole.FieldDisplayName, field.TypeString)
	}
	if value, ok := pruo.mutation.Description(); ok {
		_spec.SetField(personrole.FieldDescription, field.TypeString, value)
	}
	if pruo.mutation.DescriptionCleared() {
		_spec.ClearField(personrole.FieldDescription, field.TypeString)
	}
	if value, ok := pruo.mutation.ExternalLinks(); ok {
		_spec.SetField(personrole.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := pruo.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, personrole.FieldExternalLinks, value)
		})
	}
	if pruo.mutation.ExternalLinksCleared() {
		_spec.ClearField(personrole.FieldExternalLinks, field.TypeJSON)
	}
	if pruo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   personrole.PersonTable,
			Columns: personrole.PersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RemovedPersonIDs(); len(nodes) > 0 && !pruo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   personrole.PersonTable,
			Columns: personrole.PersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   personrole.PersonTable,
			Columns: personrole.PersonPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PersonRole{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
