// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/culture"
	"github.com/dkrasnovdev/siberiana-api/ent/petroglyph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
)

// CultureUpdate is the builder for updating Culture entities.
type CultureUpdate struct {
	config
	hooks    []Hook
	mutation *CultureMutation
}

// Where appends a list predicates to the CultureUpdate builder.
func (cu *CultureUpdate) Where(ps ...predicate.Culture) *CultureUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedBy sets the "created_by" field.
func (cu *CultureUpdate) SetCreatedBy(s string) *CultureUpdate {
	cu.mutation.SetCreatedBy(s)
	return cu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cu *CultureUpdate) SetNillableCreatedBy(s *string) *CultureUpdate {
	if s != nil {
		cu.SetCreatedBy(*s)
	}
	return cu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (cu *CultureUpdate) ClearCreatedBy() *CultureUpdate {
	cu.mutation.ClearCreatedBy()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CultureUpdate) SetUpdatedAt(t time.Time) *CultureUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CultureUpdate) SetUpdatedBy(s string) *CultureUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CultureUpdate) SetNillableUpdatedBy(s *string) *CultureUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *CultureUpdate) ClearUpdatedBy() *CultureUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetDisplayName sets the "display_name" field.
func (cu *CultureUpdate) SetDisplayName(s string) *CultureUpdate {
	cu.mutation.SetDisplayName(s)
	return cu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cu *CultureUpdate) SetNillableDisplayName(s *string) *CultureUpdate {
	if s != nil {
		cu.SetDisplayName(*s)
	}
	return cu
}

// ClearDisplayName clears the value of the "display_name" field.
func (cu *CultureUpdate) ClearDisplayName() *CultureUpdate {
	cu.mutation.ClearDisplayName()
	return cu
}

// SetAbbreviation sets the "abbreviation" field.
func (cu *CultureUpdate) SetAbbreviation(s string) *CultureUpdate {
	cu.mutation.SetAbbreviation(s)
	return cu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (cu *CultureUpdate) SetNillableAbbreviation(s *string) *CultureUpdate {
	if s != nil {
		cu.SetAbbreviation(*s)
	}
	return cu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (cu *CultureUpdate) ClearAbbreviation() *CultureUpdate {
	cu.mutation.ClearAbbreviation()
	return cu
}

// SetDescription sets the "description" field.
func (cu *CultureUpdate) SetDescription(s string) *CultureUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CultureUpdate) SetNillableDescription(s *string) *CultureUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CultureUpdate) ClearDescription() *CultureUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetExternalLink sets the "external_link" field.
func (cu *CultureUpdate) SetExternalLink(s string) *CultureUpdate {
	cu.mutation.SetExternalLink(s)
	return cu
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (cu *CultureUpdate) SetNillableExternalLink(s *string) *CultureUpdate {
	if s != nil {
		cu.SetExternalLink(*s)
	}
	return cu
}

// ClearExternalLink clears the value of the "external_link" field.
func (cu *CultureUpdate) ClearExternalLink() *CultureUpdate {
	cu.mutation.ClearExternalLink()
	return cu
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (cu *CultureUpdate) AddArtifactIDs(ids ...int) *CultureUpdate {
	cu.mutation.AddArtifactIDs(ids...)
	return cu
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (cu *CultureUpdate) AddArtifacts(a ...*Artifact) *CultureUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddArtifactIDs(ids...)
}

// AddPetroglyphIDs adds the "petroglyphs" edge to the Petroglyph entity by IDs.
func (cu *CultureUpdate) AddPetroglyphIDs(ids ...int) *CultureUpdate {
	cu.mutation.AddPetroglyphIDs(ids...)
	return cu
}

// AddPetroglyphs adds the "petroglyphs" edges to the Petroglyph entity.
func (cu *CultureUpdate) AddPetroglyphs(p ...*Petroglyph) *CultureUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPetroglyphIDs(ids...)
}

// Mutation returns the CultureMutation object of the builder.
func (cu *CultureUpdate) Mutation() *CultureMutation {
	return cu.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (cu *CultureUpdate) ClearArtifacts() *CultureUpdate {
	cu.mutation.ClearArtifacts()
	return cu
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (cu *CultureUpdate) RemoveArtifactIDs(ids ...int) *CultureUpdate {
	cu.mutation.RemoveArtifactIDs(ids...)
	return cu
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (cu *CultureUpdate) RemoveArtifacts(a ...*Artifact) *CultureUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveArtifactIDs(ids...)
}

// ClearPetroglyphs clears all "petroglyphs" edges to the Petroglyph entity.
func (cu *CultureUpdate) ClearPetroglyphs() *CultureUpdate {
	cu.mutation.ClearPetroglyphs()
	return cu
}

// RemovePetroglyphIDs removes the "petroglyphs" edge to Petroglyph entities by IDs.
func (cu *CultureUpdate) RemovePetroglyphIDs(ids ...int) *CultureUpdate {
	cu.mutation.RemovePetroglyphIDs(ids...)
	return cu
}

// RemovePetroglyphs removes "petroglyphs" edges to Petroglyph entities.
func (cu *CultureUpdate) RemovePetroglyphs(p ...*Petroglyph) *CultureUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePetroglyphIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CultureUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CultureUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CultureUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CultureUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CultureUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if culture.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized culture.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := culture.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cu *CultureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(culture.Table, culture.Columns, sqlgraph.NewFieldSpec(culture.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedBy(); ok {
		_spec.SetField(culture.FieldCreatedBy, field.TypeString, value)
	}
	if cu.mutation.CreatedByCleared() {
		_spec.ClearField(culture.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(culture.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(culture.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(culture.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.DisplayName(); ok {
		_spec.SetField(culture.FieldDisplayName, field.TypeString, value)
	}
	if cu.mutation.DisplayNameCleared() {
		_spec.ClearField(culture.FieldDisplayName, field.TypeString)
	}
	if value, ok := cu.mutation.Abbreviation(); ok {
		_spec.SetField(culture.FieldAbbreviation, field.TypeString, value)
	}
	if cu.mutation.AbbreviationCleared() {
		_spec.ClearField(culture.FieldAbbreviation, field.TypeString)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(culture.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(culture.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.ExternalLink(); ok {
		_spec.SetField(culture.FieldExternalLink, field.TypeString, value)
	}
	if cu.mutation.ExternalLinkCleared() {
		_spec.ClearField(culture.FieldExternalLink, field.TypeString)
	}
	if cu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   culture.ArtifactsTable,
			Columns: []string{culture.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !cu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   culture.ArtifactsTable,
			Columns: []string{culture.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   culture.ArtifactsTable,
			Columns: []string{culture.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   culture.PetroglyphsTable,
			Columns: []string{culture.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPetroglyphsIDs(); len(nodes) > 0 && !cu.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   culture.PetroglyphsTable,
			Columns: []string{culture.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PetroglyphsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   culture.PetroglyphsTable,
			Columns: []string{culture.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{culture.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CultureUpdateOne is the builder for updating a single Culture entity.
type CultureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CultureMutation
}

// SetCreatedBy sets the "created_by" field.
func (cuo *CultureUpdateOne) SetCreatedBy(s string) *CultureUpdateOne {
	cuo.mutation.SetCreatedBy(s)
	return cuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cuo *CultureUpdateOne) SetNillableCreatedBy(s *string) *CultureUpdateOne {
	if s != nil {
		cuo.SetCreatedBy(*s)
	}
	return cuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (cuo *CultureUpdateOne) ClearCreatedBy() *CultureUpdateOne {
	cuo.mutation.ClearCreatedBy()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CultureUpdateOne) SetUpdatedAt(t time.Time) *CultureUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CultureUpdateOne) SetUpdatedBy(s string) *CultureUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CultureUpdateOne) SetNillableUpdatedBy(s *string) *CultureUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *CultureUpdateOne) ClearUpdatedBy() *CultureUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetDisplayName sets the "display_name" field.
func (cuo *CultureUpdateOne) SetDisplayName(s string) *CultureUpdateOne {
	cuo.mutation.SetDisplayName(s)
	return cuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cuo *CultureUpdateOne) SetNillableDisplayName(s *string) *CultureUpdateOne {
	if s != nil {
		cuo.SetDisplayName(*s)
	}
	return cuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (cuo *CultureUpdateOne) ClearDisplayName() *CultureUpdateOne {
	cuo.mutation.ClearDisplayName()
	return cuo
}

// SetAbbreviation sets the "abbreviation" field.
func (cuo *CultureUpdateOne) SetAbbreviation(s string) *CultureUpdateOne {
	cuo.mutation.SetAbbreviation(s)
	return cuo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (cuo *CultureUpdateOne) SetNillableAbbreviation(s *string) *CultureUpdateOne {
	if s != nil {
		cuo.SetAbbreviation(*s)
	}
	return cuo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (cuo *CultureUpdateOne) ClearAbbreviation() *CultureUpdateOne {
	cuo.mutation.ClearAbbreviation()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CultureUpdateOne) SetDescription(s string) *CultureUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CultureUpdateOne) SetNillableDescription(s *string) *CultureUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CultureUpdateOne) ClearDescription() *CultureUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetExternalLink sets the "external_link" field.
func (cuo *CultureUpdateOne) SetExternalLink(s string) *CultureUpdateOne {
	cuo.mutation.SetExternalLink(s)
	return cuo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (cuo *CultureUpdateOne) SetNillableExternalLink(s *string) *CultureUpdateOne {
	if s != nil {
		cuo.SetExternalLink(*s)
	}
	return cuo
}

// ClearExternalLink clears the value of the "external_link" field.
func (cuo *CultureUpdateOne) ClearExternalLink() *CultureUpdateOne {
	cuo.mutation.ClearExternalLink()
	return cuo
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (cuo *CultureUpdateOne) AddArtifactIDs(ids ...int) *CultureUpdateOne {
	cuo.mutation.AddArtifactIDs(ids...)
	return cuo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (cuo *CultureUpdateOne) AddArtifacts(a ...*Artifact) *CultureUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddArtifactIDs(ids...)
}

// AddPetroglyphIDs adds the "petroglyphs" edge to the Petroglyph entity by IDs.
func (cuo *CultureUpdateOne) AddPetroglyphIDs(ids ...int) *CultureUpdateOne {
	cuo.mutation.AddPetroglyphIDs(ids...)
	return cuo
}

// AddPetroglyphs adds the "petroglyphs" edges to the Petroglyph entity.
func (cuo *CultureUpdateOne) AddPetroglyphs(p ...*Petroglyph) *CultureUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPetroglyphIDs(ids...)
}

// Mutation returns the CultureMutation object of the builder.
func (cuo *CultureUpdateOne) Mutation() *CultureMutation {
	return cuo.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (cuo *CultureUpdateOne) ClearArtifacts() *CultureUpdateOne {
	cuo.mutation.ClearArtifacts()
	return cuo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (cuo *CultureUpdateOne) RemoveArtifactIDs(ids ...int) *CultureUpdateOne {
	cuo.mutation.RemoveArtifactIDs(ids...)
	return cuo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (cuo *CultureUpdateOne) RemoveArtifacts(a ...*Artifact) *CultureUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveArtifactIDs(ids...)
}

// ClearPetroglyphs clears all "petroglyphs" edges to the Petroglyph entity.
func (cuo *CultureUpdateOne) ClearPetroglyphs() *CultureUpdateOne {
	cuo.mutation.ClearPetroglyphs()
	return cuo
}

// RemovePetroglyphIDs removes the "petroglyphs" edge to Petroglyph entities by IDs.
func (cuo *CultureUpdateOne) RemovePetroglyphIDs(ids ...int) *CultureUpdateOne {
	cuo.mutation.RemovePetroglyphIDs(ids...)
	return cuo
}

// RemovePetroglyphs removes "petroglyphs" edges to Petroglyph entities.
func (cuo *CultureUpdateOne) RemovePetroglyphs(p ...*Petroglyph) *CultureUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePetroglyphIDs(ids...)
}

// Where appends a list predicates to the CultureUpdate builder.
func (cuo *CultureUpdateOne) Where(ps ...predicate.Culture) *CultureUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CultureUpdateOne) Select(field string, fields ...string) *CultureUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Culture entity.
func (cuo *CultureUpdateOne) Save(ctx context.Context) (*Culture, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CultureUpdateOne) SaveX(ctx context.Context) *Culture {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CultureUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CultureUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CultureUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if culture.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized culture.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := culture.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (cuo *CultureUpdateOne) sqlSave(ctx context.Context) (_node *Culture, err error) {
	_spec := sqlgraph.NewUpdateSpec(culture.Table, culture.Columns, sqlgraph.NewFieldSpec(culture.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Culture.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, culture.FieldID)
		for _, f := range fields {
			if !culture.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != culture.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedBy(); ok {
		_spec.SetField(culture.FieldCreatedBy, field.TypeString, value)
	}
	if cuo.mutation.CreatedByCleared() {
		_spec.ClearField(culture.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(culture.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(culture.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(culture.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.DisplayName(); ok {
		_spec.SetField(culture.FieldDisplayName, field.TypeString, value)
	}
	if cuo.mutation.DisplayNameCleared() {
		_spec.ClearField(culture.FieldDisplayName, field.TypeString)
	}
	if value, ok := cuo.mutation.Abbreviation(); ok {
		_spec.SetField(culture.FieldAbbreviation, field.TypeString, value)
	}
	if cuo.mutation.AbbreviationCleared() {
		_spec.ClearField(culture.FieldAbbreviation, field.TypeString)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(culture.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(culture.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.ExternalLink(); ok {
		_spec.SetField(culture.FieldExternalLink, field.TypeString, value)
	}
	if cuo.mutation.ExternalLinkCleared() {
		_spec.ClearField(culture.FieldExternalLink, field.TypeString)
	}
	if cuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   culture.ArtifactsTable,
			Columns: []string{culture.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !cuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   culture.ArtifactsTable,
			Columns: []string{culture.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   culture.ArtifactsTable,
			Columns: []string{culture.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   culture.PetroglyphsTable,
			Columns: []string{culture.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPetroglyphsIDs(); len(nodes) > 0 && !cuo.mutation.PetroglyphsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   culture.PetroglyphsTable,
			Columns: []string{culture.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PetroglyphsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   culture.PetroglyphsTable,
			Columns: []string{culture.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Culture{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{culture.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
