// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/license"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedarea"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
	"github.com/dkrasnovdev/siberiana-api/internal/ent/types"
)

// ProtectedAreaPictureUpdate is the builder for updating ProtectedAreaPicture entities.
type ProtectedAreaPictureUpdate struct {
	config
	hooks    []Hook
	mutation *ProtectedAreaPictureMutation
}

// Where appends a list predicates to the ProtectedAreaPictureUpdate builder.
func (papu *ProtectedAreaPictureUpdate) Where(ps ...predicate.ProtectedAreaPicture) *ProtectedAreaPictureUpdate {
	papu.mutation.Where(ps...)
	return papu
}

// SetCreatedBy sets the "created_by" field.
func (papu *ProtectedAreaPictureUpdate) SetCreatedBy(s string) *ProtectedAreaPictureUpdate {
	papu.mutation.SetCreatedBy(s)
	return papu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillableCreatedBy(s *string) *ProtectedAreaPictureUpdate {
	if s != nil {
		papu.SetCreatedBy(*s)
	}
	return papu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (papu *ProtectedAreaPictureUpdate) ClearCreatedBy() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearCreatedBy()
	return papu
}

// SetUpdatedAt sets the "updated_at" field.
func (papu *ProtectedAreaPictureUpdate) SetUpdatedAt(t time.Time) *ProtectedAreaPictureUpdate {
	papu.mutation.SetUpdatedAt(t)
	return papu
}

// SetUpdatedBy sets the "updated_by" field.
func (papu *ProtectedAreaPictureUpdate) SetUpdatedBy(s string) *ProtectedAreaPictureUpdate {
	papu.mutation.SetUpdatedBy(s)
	return papu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillableUpdatedBy(s *string) *ProtectedAreaPictureUpdate {
	if s != nil {
		papu.SetUpdatedBy(*s)
	}
	return papu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (papu *ProtectedAreaPictureUpdate) ClearUpdatedBy() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearUpdatedBy()
	return papu
}

// SetDisplayName sets the "display_name" field.
func (papu *ProtectedAreaPictureUpdate) SetDisplayName(s string) *ProtectedAreaPictureUpdate {
	papu.mutation.SetDisplayName(s)
	return papu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillableDisplayName(s *string) *ProtectedAreaPictureUpdate {
	if s != nil {
		papu.SetDisplayName(*s)
	}
	return papu
}

// ClearDisplayName clears the value of the "display_name" field.
func (papu *ProtectedAreaPictureUpdate) ClearDisplayName() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearDisplayName()
	return papu
}

// SetAbbreviation sets the "abbreviation" field.
func (papu *ProtectedAreaPictureUpdate) SetAbbreviation(s string) *ProtectedAreaPictureUpdate {
	papu.mutation.SetAbbreviation(s)
	return papu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillableAbbreviation(s *string) *ProtectedAreaPictureUpdate {
	if s != nil {
		papu.SetAbbreviation(*s)
	}
	return papu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (papu *ProtectedAreaPictureUpdate) ClearAbbreviation() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearAbbreviation()
	return papu
}

// SetDescription sets the "description" field.
func (papu *ProtectedAreaPictureUpdate) SetDescription(s string) *ProtectedAreaPictureUpdate {
	papu.mutation.SetDescription(s)
	return papu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillableDescription(s *string) *ProtectedAreaPictureUpdate {
	if s != nil {
		papu.SetDescription(*s)
	}
	return papu
}

// ClearDescription clears the value of the "description" field.
func (papu *ProtectedAreaPictureUpdate) ClearDescription() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearDescription()
	return papu
}

// SetExternalLink sets the "external_link" field.
func (papu *ProtectedAreaPictureUpdate) SetExternalLink(s string) *ProtectedAreaPictureUpdate {
	papu.mutation.SetExternalLink(s)
	return papu
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillableExternalLink(s *string) *ProtectedAreaPictureUpdate {
	if s != nil {
		papu.SetExternalLink(*s)
	}
	return papu
}

// ClearExternalLink clears the value of the "external_link" field.
func (papu *ProtectedAreaPictureUpdate) ClearExternalLink() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearExternalLink()
	return papu
}

// SetType sets the "type" field.
func (papu *ProtectedAreaPictureUpdate) SetType(pr protectedareapicture.Type) *ProtectedAreaPictureUpdate {
	papu.mutation.SetType(pr)
	return papu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillableType(pr *protectedareapicture.Type) *ProtectedAreaPictureUpdate {
	if pr != nil {
		papu.SetType(*pr)
	}
	return papu
}

// ClearType clears the value of the "type" field.
func (papu *ProtectedAreaPictureUpdate) ClearType() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearType()
	return papu
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (papu *ProtectedAreaPictureUpdate) SetPrimaryImageURL(s string) *ProtectedAreaPictureUpdate {
	papu.mutation.SetPrimaryImageURL(s)
	return papu
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillablePrimaryImageURL(s *string) *ProtectedAreaPictureUpdate {
	if s != nil {
		papu.SetPrimaryImageURL(*s)
	}
	return papu
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (papu *ProtectedAreaPictureUpdate) ClearPrimaryImageURL() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearPrimaryImageURL()
	return papu
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (papu *ProtectedAreaPictureUpdate) SetAdditionalImagesUrls(s []string) *ProtectedAreaPictureUpdate {
	papu.mutation.SetAdditionalImagesUrls(s)
	return papu
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (papu *ProtectedAreaPictureUpdate) AppendAdditionalImagesUrls(s []string) *ProtectedAreaPictureUpdate {
	papu.mutation.AppendAdditionalImagesUrls(s)
	return papu
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (papu *ProtectedAreaPictureUpdate) ClearAdditionalImagesUrls() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearAdditionalImagesUrls()
	return papu
}

// SetShootingDate sets the "shooting_date" field.
func (papu *ProtectedAreaPictureUpdate) SetShootingDate(t time.Time) *ProtectedAreaPictureUpdate {
	papu.mutation.SetShootingDate(t)
	return papu
}

// SetNillableShootingDate sets the "shooting_date" field if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillableShootingDate(t *time.Time) *ProtectedAreaPictureUpdate {
	if t != nil {
		papu.SetShootingDate(*t)
	}
	return papu
}

// ClearShootingDate clears the value of the "shooting_date" field.
func (papu *ProtectedAreaPictureUpdate) ClearShootingDate() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearShootingDate()
	return papu
}

// SetGeometry sets the "geometry" field.
func (papu *ProtectedAreaPictureUpdate) SetGeometry(t types.Geometry) *ProtectedAreaPictureUpdate {
	papu.mutation.SetGeometry(t)
	return papu
}

// SetNillableGeometry sets the "geometry" field if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillableGeometry(t *types.Geometry) *ProtectedAreaPictureUpdate {
	if t != nil {
		papu.SetGeometry(*t)
	}
	return papu
}

// ClearGeometry clears the value of the "geometry" field.
func (papu *ProtectedAreaPictureUpdate) ClearGeometry() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearGeometry()
	return papu
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (papu *ProtectedAreaPictureUpdate) SetCollectionID(id int) *ProtectedAreaPictureUpdate {
	papu.mutation.SetCollectionID(id)
	return papu
}

// SetCollection sets the "collection" edge to the Collection entity.
func (papu *ProtectedAreaPictureUpdate) SetCollection(c *Collection) *ProtectedAreaPictureUpdate {
	return papu.SetCollectionID(c.ID)
}

// SetProtectedAreaID sets the "protected_area" edge to the ProtectedArea entity by ID.
func (papu *ProtectedAreaPictureUpdate) SetProtectedAreaID(id int) *ProtectedAreaPictureUpdate {
	papu.mutation.SetProtectedAreaID(id)
	return papu
}

// SetNillableProtectedAreaID sets the "protected_area" edge to the ProtectedArea entity by ID if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillableProtectedAreaID(id *int) *ProtectedAreaPictureUpdate {
	if id != nil {
		papu = papu.SetProtectedAreaID(*id)
	}
	return papu
}

// SetProtectedArea sets the "protected_area" edge to the ProtectedArea entity.
func (papu *ProtectedAreaPictureUpdate) SetProtectedArea(p *ProtectedArea) *ProtectedAreaPictureUpdate {
	return papu.SetProtectedAreaID(p.ID)
}

// SetLocationID sets the "location" edge to the Location entity by ID.
func (papu *ProtectedAreaPictureUpdate) SetLocationID(id int) *ProtectedAreaPictureUpdate {
	papu.mutation.SetLocationID(id)
	return papu
}

// SetNillableLocationID sets the "location" edge to the Location entity by ID if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillableLocationID(id *int) *ProtectedAreaPictureUpdate {
	if id != nil {
		papu = papu.SetLocationID(*id)
	}
	return papu
}

// SetLocation sets the "location" edge to the Location entity.
func (papu *ProtectedAreaPictureUpdate) SetLocation(l *Location) *ProtectedAreaPictureUpdate {
	return papu.SetLocationID(l.ID)
}

// SetLicenseID sets the "license" edge to the License entity by ID.
func (papu *ProtectedAreaPictureUpdate) SetLicenseID(id int) *ProtectedAreaPictureUpdate {
	papu.mutation.SetLicenseID(id)
	return papu
}

// SetNillableLicenseID sets the "license" edge to the License entity by ID if the given value is not nil.
func (papu *ProtectedAreaPictureUpdate) SetNillableLicenseID(id *int) *ProtectedAreaPictureUpdate {
	if id != nil {
		papu = papu.SetLicenseID(*id)
	}
	return papu
}

// SetLicense sets the "license" edge to the License entity.
func (papu *ProtectedAreaPictureUpdate) SetLicense(l *License) *ProtectedAreaPictureUpdate {
	return papu.SetLicenseID(l.ID)
}

// Mutation returns the ProtectedAreaPictureMutation object of the builder.
func (papu *ProtectedAreaPictureUpdate) Mutation() *ProtectedAreaPictureMutation {
	return papu.mutation
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (papu *ProtectedAreaPictureUpdate) ClearCollection() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearCollection()
	return papu
}

// ClearProtectedArea clears the "protected_area" edge to the ProtectedArea entity.
func (papu *ProtectedAreaPictureUpdate) ClearProtectedArea() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearProtectedArea()
	return papu
}

// ClearLocation clears the "location" edge to the Location entity.
func (papu *ProtectedAreaPictureUpdate) ClearLocation() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearLocation()
	return papu
}

// ClearLicense clears the "license" edge to the License entity.
func (papu *ProtectedAreaPictureUpdate) ClearLicense() *ProtectedAreaPictureUpdate {
	papu.mutation.ClearLicense()
	return papu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (papu *ProtectedAreaPictureUpdate) Save(ctx context.Context) (int, error) {
	if err := papu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, papu.sqlSave, papu.mutation, papu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (papu *ProtectedAreaPictureUpdate) SaveX(ctx context.Context) int {
	affected, err := papu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (papu *ProtectedAreaPictureUpdate) Exec(ctx context.Context) error {
	_, err := papu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (papu *ProtectedAreaPictureUpdate) ExecX(ctx context.Context) {
	if err := papu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (papu *ProtectedAreaPictureUpdate) defaults() error {
	if _, ok := papu.mutation.UpdatedAt(); !ok {
		if protectedareapicture.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized protectedareapicture.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := protectedareapicture.UpdateDefaultUpdatedAt()
		papu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (papu *ProtectedAreaPictureUpdate) check() error {
	if v, ok := papu.mutation.GetType(); ok {
		if err := protectedareapicture.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProtectedAreaPicture.type": %w`, err)}
		}
	}
	if _, ok := papu.mutation.CollectionID(); papu.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProtectedAreaPicture.collection"`)
	}
	return nil
}

func (papu *ProtectedAreaPictureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := papu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(protectedareapicture.Table, protectedareapicture.Columns, sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt))
	if ps := papu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := papu.mutation.CreatedBy(); ok {
		_spec.SetField(protectedareapicture.FieldCreatedBy, field.TypeString, value)
	}
	if papu.mutation.CreatedByCleared() {
		_spec.ClearField(protectedareapicture.FieldCreatedBy, field.TypeString)
	}
	if value, ok := papu.mutation.UpdatedAt(); ok {
		_spec.SetField(protectedareapicture.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := papu.mutation.UpdatedBy(); ok {
		_spec.SetField(protectedareapicture.FieldUpdatedBy, field.TypeString, value)
	}
	if papu.mutation.UpdatedByCleared() {
		_spec.ClearField(protectedareapicture.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := papu.mutation.DisplayName(); ok {
		_spec.SetField(protectedareapicture.FieldDisplayName, field.TypeString, value)
	}
	if papu.mutation.DisplayNameCleared() {
		_spec.ClearField(protectedareapicture.FieldDisplayName, field.TypeString)
	}
	if value, ok := papu.mutation.Abbreviation(); ok {
		_spec.SetField(protectedareapicture.FieldAbbreviation, field.TypeString, value)
	}
	if papu.mutation.AbbreviationCleared() {
		_spec.ClearField(protectedareapicture.FieldAbbreviation, field.TypeString)
	}
	if value, ok := papu.mutation.Description(); ok {
		_spec.SetField(protectedareapicture.FieldDescription, field.TypeString, value)
	}
	if papu.mutation.DescriptionCleared() {
		_spec.ClearField(protectedareapicture.FieldDescription, field.TypeString)
	}
	if value, ok := papu.mutation.ExternalLink(); ok {
		_spec.SetField(protectedareapicture.FieldExternalLink, field.TypeString, value)
	}
	if papu.mutation.ExternalLinkCleared() {
		_spec.ClearField(protectedareapicture.FieldExternalLink, field.TypeString)
	}
	if value, ok := papu.mutation.GetType(); ok {
		_spec.SetField(protectedareapicture.FieldType, field.TypeEnum, value)
	}
	if papu.mutation.TypeCleared() {
		_spec.ClearField(protectedareapicture.FieldType, field.TypeEnum)
	}
	if value, ok := papu.mutation.PrimaryImageURL(); ok {
		_spec.SetField(protectedareapicture.FieldPrimaryImageURL, field.TypeString, value)
	}
	if papu.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(protectedareapicture.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := papu.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(protectedareapicture.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := papu.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, protectedareapicture.FieldAdditionalImagesUrls, value)
		})
	}
	if papu.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(protectedareapicture.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := papu.mutation.ShootingDate(); ok {
		_spec.SetField(protectedareapicture.FieldShootingDate, field.TypeTime, value)
	}
	if papu.mutation.ShootingDateCleared() {
		_spec.ClearField(protectedareapicture.FieldShootingDate, field.TypeTime)
	}
	if value, ok := papu.mutation.Geometry(); ok {
		_spec.SetField(protectedareapicture.FieldGeometry, field.TypeOther, value)
	}
	if papu.mutation.GeometryCleared() {
		_spec.ClearField(protectedareapicture.FieldGeometry, field.TypeOther)
	}
	if papu.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.CollectionTable,
			Columns: []string{protectedareapicture.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := papu.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.CollectionTable,
			Columns: []string{protectedareapicture.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if papu.mutation.ProtectedAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.ProtectedAreaTable,
			Columns: []string{protectedareapicture.ProtectedAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := papu.mutation.ProtectedAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.ProtectedAreaTable,
			Columns: []string{protectedareapicture.ProtectedAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if papu.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.LocationTable,
			Columns: []string{protectedareapicture.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := papu.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.LocationTable,
			Columns: []string{protectedareapicture.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if papu.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.LicenseTable,
			Columns: []string{protectedareapicture.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := papu.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.LicenseTable,
			Columns: []string{protectedareapicture.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, papu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{protectedareapicture.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	papu.mutation.done = true
	return n, nil
}

// ProtectedAreaPictureUpdateOne is the builder for updating a single ProtectedAreaPicture entity.
type ProtectedAreaPictureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProtectedAreaPictureMutation
}

// SetCreatedBy sets the "created_by" field.
func (papuo *ProtectedAreaPictureUpdateOne) SetCreatedBy(s string) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetCreatedBy(s)
	return papuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillableCreatedBy(s *string) *ProtectedAreaPictureUpdateOne {
	if s != nil {
		papuo.SetCreatedBy(*s)
	}
	return papuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (papuo *ProtectedAreaPictureUpdateOne) ClearCreatedBy() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearCreatedBy()
	return papuo
}

// SetUpdatedAt sets the "updated_at" field.
func (papuo *ProtectedAreaPictureUpdateOne) SetUpdatedAt(t time.Time) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetUpdatedAt(t)
	return papuo
}

// SetUpdatedBy sets the "updated_by" field.
func (papuo *ProtectedAreaPictureUpdateOne) SetUpdatedBy(s string) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetUpdatedBy(s)
	return papuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillableUpdatedBy(s *string) *ProtectedAreaPictureUpdateOne {
	if s != nil {
		papuo.SetUpdatedBy(*s)
	}
	return papuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (papuo *ProtectedAreaPictureUpdateOne) ClearUpdatedBy() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearUpdatedBy()
	return papuo
}

// SetDisplayName sets the "display_name" field.
func (papuo *ProtectedAreaPictureUpdateOne) SetDisplayName(s string) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetDisplayName(s)
	return papuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillableDisplayName(s *string) *ProtectedAreaPictureUpdateOne {
	if s != nil {
		papuo.SetDisplayName(*s)
	}
	return papuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (papuo *ProtectedAreaPictureUpdateOne) ClearDisplayName() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearDisplayName()
	return papuo
}

// SetAbbreviation sets the "abbreviation" field.
func (papuo *ProtectedAreaPictureUpdateOne) SetAbbreviation(s string) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetAbbreviation(s)
	return papuo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillableAbbreviation(s *string) *ProtectedAreaPictureUpdateOne {
	if s != nil {
		papuo.SetAbbreviation(*s)
	}
	return papuo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (papuo *ProtectedAreaPictureUpdateOne) ClearAbbreviation() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearAbbreviation()
	return papuo
}

// SetDescription sets the "description" field.
func (papuo *ProtectedAreaPictureUpdateOne) SetDescription(s string) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetDescription(s)
	return papuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillableDescription(s *string) *ProtectedAreaPictureUpdateOne {
	if s != nil {
		papuo.SetDescription(*s)
	}
	return papuo
}

// ClearDescription clears the value of the "description" field.
func (papuo *ProtectedAreaPictureUpdateOne) ClearDescription() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearDescription()
	return papuo
}

// SetExternalLink sets the "external_link" field.
func (papuo *ProtectedAreaPictureUpdateOne) SetExternalLink(s string) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetExternalLink(s)
	return papuo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillableExternalLink(s *string) *ProtectedAreaPictureUpdateOne {
	if s != nil {
		papuo.SetExternalLink(*s)
	}
	return papuo
}

// ClearExternalLink clears the value of the "external_link" field.
func (papuo *ProtectedAreaPictureUpdateOne) ClearExternalLink() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearExternalLink()
	return papuo
}

// SetType sets the "type" field.
func (papuo *ProtectedAreaPictureUpdateOne) SetType(pr protectedareapicture.Type) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetType(pr)
	return papuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillableType(pr *protectedareapicture.Type) *ProtectedAreaPictureUpdateOne {
	if pr != nil {
		papuo.SetType(*pr)
	}
	return papuo
}

// ClearType clears the value of the "type" field.
func (papuo *ProtectedAreaPictureUpdateOne) ClearType() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearType()
	return papuo
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (papuo *ProtectedAreaPictureUpdateOne) SetPrimaryImageURL(s string) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetPrimaryImageURL(s)
	return papuo
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillablePrimaryImageURL(s *string) *ProtectedAreaPictureUpdateOne {
	if s != nil {
		papuo.SetPrimaryImageURL(*s)
	}
	return papuo
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (papuo *ProtectedAreaPictureUpdateOne) ClearPrimaryImageURL() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearPrimaryImageURL()
	return papuo
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (papuo *ProtectedAreaPictureUpdateOne) SetAdditionalImagesUrls(s []string) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetAdditionalImagesUrls(s)
	return papuo
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (papuo *ProtectedAreaPictureUpdateOne) AppendAdditionalImagesUrls(s []string) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.AppendAdditionalImagesUrls(s)
	return papuo
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (papuo *ProtectedAreaPictureUpdateOne) ClearAdditionalImagesUrls() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearAdditionalImagesUrls()
	return papuo
}

// SetShootingDate sets the "shooting_date" field.
func (papuo *ProtectedAreaPictureUpdateOne) SetShootingDate(t time.Time) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetShootingDate(t)
	return papuo
}

// SetNillableShootingDate sets the "shooting_date" field if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillableShootingDate(t *time.Time) *ProtectedAreaPictureUpdateOne {
	if t != nil {
		papuo.SetShootingDate(*t)
	}
	return papuo
}

// ClearShootingDate clears the value of the "shooting_date" field.
func (papuo *ProtectedAreaPictureUpdateOne) ClearShootingDate() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearShootingDate()
	return papuo
}

// SetGeometry sets the "geometry" field.
func (papuo *ProtectedAreaPictureUpdateOne) SetGeometry(t types.Geometry) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetGeometry(t)
	return papuo
}

// SetNillableGeometry sets the "geometry" field if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillableGeometry(t *types.Geometry) *ProtectedAreaPictureUpdateOne {
	if t != nil {
		papuo.SetGeometry(*t)
	}
	return papuo
}

// ClearGeometry clears the value of the "geometry" field.
func (papuo *ProtectedAreaPictureUpdateOne) ClearGeometry() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearGeometry()
	return papuo
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (papuo *ProtectedAreaPictureUpdateOne) SetCollectionID(id int) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetCollectionID(id)
	return papuo
}

// SetCollection sets the "collection" edge to the Collection entity.
func (papuo *ProtectedAreaPictureUpdateOne) SetCollection(c *Collection) *ProtectedAreaPictureUpdateOne {
	return papuo.SetCollectionID(c.ID)
}

// SetProtectedAreaID sets the "protected_area" edge to the ProtectedArea entity by ID.
func (papuo *ProtectedAreaPictureUpdateOne) SetProtectedAreaID(id int) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetProtectedAreaID(id)
	return papuo
}

// SetNillableProtectedAreaID sets the "protected_area" edge to the ProtectedArea entity by ID if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillableProtectedAreaID(id *int) *ProtectedAreaPictureUpdateOne {
	if id != nil {
		papuo = papuo.SetProtectedAreaID(*id)
	}
	return papuo
}

// SetProtectedArea sets the "protected_area" edge to the ProtectedArea entity.
func (papuo *ProtectedAreaPictureUpdateOne) SetProtectedArea(p *ProtectedArea) *ProtectedAreaPictureUpdateOne {
	return papuo.SetProtectedAreaID(p.ID)
}

// SetLocationID sets the "location" edge to the Location entity by ID.
func (papuo *ProtectedAreaPictureUpdateOne) SetLocationID(id int) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetLocationID(id)
	return papuo
}

// SetNillableLocationID sets the "location" edge to the Location entity by ID if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillableLocationID(id *int) *ProtectedAreaPictureUpdateOne {
	if id != nil {
		papuo = papuo.SetLocationID(*id)
	}
	return papuo
}

// SetLocation sets the "location" edge to the Location entity.
func (papuo *ProtectedAreaPictureUpdateOne) SetLocation(l *Location) *ProtectedAreaPictureUpdateOne {
	return papuo.SetLocationID(l.ID)
}

// SetLicenseID sets the "license" edge to the License entity by ID.
func (papuo *ProtectedAreaPictureUpdateOne) SetLicenseID(id int) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.SetLicenseID(id)
	return papuo
}

// SetNillableLicenseID sets the "license" edge to the License entity by ID if the given value is not nil.
func (papuo *ProtectedAreaPictureUpdateOne) SetNillableLicenseID(id *int) *ProtectedAreaPictureUpdateOne {
	if id != nil {
		papuo = papuo.SetLicenseID(*id)
	}
	return papuo
}

// SetLicense sets the "license" edge to the License entity.
func (papuo *ProtectedAreaPictureUpdateOne) SetLicense(l *License) *ProtectedAreaPictureUpdateOne {
	return papuo.SetLicenseID(l.ID)
}

// Mutation returns the ProtectedAreaPictureMutation object of the builder.
func (papuo *ProtectedAreaPictureUpdateOne) Mutation() *ProtectedAreaPictureMutation {
	return papuo.mutation
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (papuo *ProtectedAreaPictureUpdateOne) ClearCollection() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearCollection()
	return papuo
}

// ClearProtectedArea clears the "protected_area" edge to the ProtectedArea entity.
func (papuo *ProtectedAreaPictureUpdateOne) ClearProtectedArea() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearProtectedArea()
	return papuo
}

// ClearLocation clears the "location" edge to the Location entity.
func (papuo *ProtectedAreaPictureUpdateOne) ClearLocation() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearLocation()
	return papuo
}

// ClearLicense clears the "license" edge to the License entity.
func (papuo *ProtectedAreaPictureUpdateOne) ClearLicense() *ProtectedAreaPictureUpdateOne {
	papuo.mutation.ClearLicense()
	return papuo
}

// Where appends a list predicates to the ProtectedAreaPictureUpdate builder.
func (papuo *ProtectedAreaPictureUpdateOne) Where(ps ...predicate.ProtectedAreaPicture) *ProtectedAreaPictureUpdateOne {
	papuo.mutation.Where(ps...)
	return papuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (papuo *ProtectedAreaPictureUpdateOne) Select(field string, fields ...string) *ProtectedAreaPictureUpdateOne {
	papuo.fields = append([]string{field}, fields...)
	return papuo
}

// Save executes the query and returns the updated ProtectedAreaPicture entity.
func (papuo *ProtectedAreaPictureUpdateOne) Save(ctx context.Context) (*ProtectedAreaPicture, error) {
	if err := papuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, papuo.sqlSave, papuo.mutation, papuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (papuo *ProtectedAreaPictureUpdateOne) SaveX(ctx context.Context) *ProtectedAreaPicture {
	node, err := papuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (papuo *ProtectedAreaPictureUpdateOne) Exec(ctx context.Context) error {
	_, err := papuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (papuo *ProtectedAreaPictureUpdateOne) ExecX(ctx context.Context) {
	if err := papuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (papuo *ProtectedAreaPictureUpdateOne) defaults() error {
	if _, ok := papuo.mutation.UpdatedAt(); !ok {
		if protectedareapicture.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized protectedareapicture.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := protectedareapicture.UpdateDefaultUpdatedAt()
		papuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (papuo *ProtectedAreaPictureUpdateOne) check() error {
	if v, ok := papuo.mutation.GetType(); ok {
		if err := protectedareapicture.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProtectedAreaPicture.type": %w`, err)}
		}
	}
	if _, ok := papuo.mutation.CollectionID(); papuo.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProtectedAreaPicture.collection"`)
	}
	return nil
}

func (papuo *ProtectedAreaPictureUpdateOne) sqlSave(ctx context.Context) (_node *ProtectedAreaPicture, err error) {
	if err := papuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(protectedareapicture.Table, protectedareapicture.Columns, sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt))
	id, ok := papuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProtectedAreaPicture.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := papuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, protectedareapicture.FieldID)
		for _, f := range fields {
			if !protectedareapicture.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != protectedareapicture.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := papuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := papuo.mutation.CreatedBy(); ok {
		_spec.SetField(protectedareapicture.FieldCreatedBy, field.TypeString, value)
	}
	if papuo.mutation.CreatedByCleared() {
		_spec.ClearField(protectedareapicture.FieldCreatedBy, field.TypeString)
	}
	if value, ok := papuo.mutation.UpdatedAt(); ok {
		_spec.SetField(protectedareapicture.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := papuo.mutation.UpdatedBy(); ok {
		_spec.SetField(protectedareapicture.FieldUpdatedBy, field.TypeString, value)
	}
	if papuo.mutation.UpdatedByCleared() {
		_spec.ClearField(protectedareapicture.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := papuo.mutation.DisplayName(); ok {
		_spec.SetField(protectedareapicture.FieldDisplayName, field.TypeString, value)
	}
	if papuo.mutation.DisplayNameCleared() {
		_spec.ClearField(protectedareapicture.FieldDisplayName, field.TypeString)
	}
	if value, ok := papuo.mutation.Abbreviation(); ok {
		_spec.SetField(protectedareapicture.FieldAbbreviation, field.TypeString, value)
	}
	if papuo.mutation.AbbreviationCleared() {
		_spec.ClearField(protectedareapicture.FieldAbbreviation, field.TypeString)
	}
	if value, ok := papuo.mutation.Description(); ok {
		_spec.SetField(protectedareapicture.FieldDescription, field.TypeString, value)
	}
	if papuo.mutation.DescriptionCleared() {
		_spec.ClearField(protectedareapicture.FieldDescription, field.TypeString)
	}
	if value, ok := papuo.mutation.ExternalLink(); ok {
		_spec.SetField(protectedareapicture.FieldExternalLink, field.TypeString, value)
	}
	if papuo.mutation.ExternalLinkCleared() {
		_spec.ClearField(protectedareapicture.FieldExternalLink, field.TypeString)
	}
	if value, ok := papuo.mutation.GetType(); ok {
		_spec.SetField(protectedareapicture.FieldType, field.TypeEnum, value)
	}
	if papuo.mutation.TypeCleared() {
		_spec.ClearField(protectedareapicture.FieldType, field.TypeEnum)
	}
	if value, ok := papuo.mutation.PrimaryImageURL(); ok {
		_spec.SetField(protectedareapicture.FieldPrimaryImageURL, field.TypeString, value)
	}
	if papuo.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(protectedareapicture.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := papuo.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(protectedareapicture.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := papuo.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, protectedareapicture.FieldAdditionalImagesUrls, value)
		})
	}
	if papuo.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(protectedareapicture.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := papuo.mutation.ShootingDate(); ok {
		_spec.SetField(protectedareapicture.FieldShootingDate, field.TypeTime, value)
	}
	if papuo.mutation.ShootingDateCleared() {
		_spec.ClearField(protectedareapicture.FieldShootingDate, field.TypeTime)
	}
	if value, ok := papuo.mutation.Geometry(); ok {
		_spec.SetField(protectedareapicture.FieldGeometry, field.TypeOther, value)
	}
	if papuo.mutation.GeometryCleared() {
		_spec.ClearField(protectedareapicture.FieldGeometry, field.TypeOther)
	}
	if papuo.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.CollectionTable,
			Columns: []string{protectedareapicture.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := papuo.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.CollectionTable,
			Columns: []string{protectedareapicture.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if papuo.mutation.ProtectedAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.ProtectedAreaTable,
			Columns: []string{protectedareapicture.ProtectedAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := papuo.mutation.ProtectedAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.ProtectedAreaTable,
			Columns: []string{protectedareapicture.ProtectedAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if papuo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.LocationTable,
			Columns: []string{protectedareapicture.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := papuo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.LocationTable,
			Columns: []string{protectedareapicture.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if papuo.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.LicenseTable,
			Columns: []string{protectedareapicture.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := papuo.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   protectedareapicture.LicenseTable,
			Columns: []string{protectedareapicture.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(license.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProtectedAreaPicture{config: papuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, papuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{protectedareapicture.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	papuo.mutation.done = true
	return _node, nil
}
