// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/mound"
)

// Mound is the model entity for the Mound schema.
type Mound struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Abbreviation holds the value of the "abbreviation" field.
	Abbreviation string `json:"abbreviation,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ExternalLink holds the value of the "external_link" field.
	ExternalLink string `json:"external_link,omitempty"`
	// Number holds the value of the "number" field.
	Number string `json:"number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MoundQuery when eager-loading is set.
	Edges        MoundEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MoundEdges holds the relations/edges for other nodes in the graph.
type MoundEdges struct {
	// Petroglyphs holds the value of the petroglyphs edge.
	Petroglyphs []*Petroglyph `json:"petroglyphs,omitempty"`
	// Visits holds the value of the visits edge.
	Visits []*Visit `json:"visits,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedPetroglyphs map[string][]*Petroglyph
	namedVisits      map[string][]*Visit
}

// PetroglyphsOrErr returns the Petroglyphs value or an error if the edge
// was not loaded in eager-loading.
func (e MoundEdges) PetroglyphsOrErr() ([]*Petroglyph, error) {
	if e.loadedTypes[0] {
		return e.Petroglyphs, nil
	}
	return nil, &NotLoadedError{edge: "petroglyphs"}
}

// VisitsOrErr returns the Visits value or an error if the edge
// was not loaded in eager-loading.
func (e MoundEdges) VisitsOrErr() ([]*Visit, error) {
	if e.loadedTypes[1] {
		return e.Visits, nil
	}
	return nil, &NotLoadedError{edge: "visits"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mound) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mound.FieldID:
			values[i] = new(sql.NullInt64)
		case mound.FieldCreatedBy, mound.FieldUpdatedBy, mound.FieldDisplayName, mound.FieldAbbreviation, mound.FieldDescription, mound.FieldExternalLink, mound.FieldNumber:
			values[i] = new(sql.NullString)
		case mound.FieldCreatedAt, mound.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mound fields.
func (m *Mound) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mound.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case mound.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case mound.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				m.CreatedBy = value.String
			}
		case mound.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case mound.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				m.UpdatedBy = value.String
			}
		case mound.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				m.DisplayName = value.String
			}
		case mound.FieldAbbreviation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abbreviation", values[i])
			} else if value.Valid {
				m.Abbreviation = value.String
			}
		case mound.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = value.String
			}
		case mound.FieldExternalLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_link", values[i])
			} else if value.Valid {
				m.ExternalLink = value.String
			}
		case mound.FieldNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				m.Number = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Mound.
// This includes values selected through modifiers, order, etc.
func (m *Mound) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryPetroglyphs queries the "petroglyphs" edge of the Mound entity.
func (m *Mound) QueryPetroglyphs() *PetroglyphQuery {
	return NewMoundClient(m.config).QueryPetroglyphs(m)
}

// QueryVisits queries the "visits" edge of the Mound entity.
func (m *Mound) QueryVisits() *VisitQuery {
	return NewMoundClient(m.config).QueryVisits(m)
}

// Update returns a builder for updating this Mound.
// Note that you need to call Mound.Unwrap() before calling this method if this Mound
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mound) Update() *MoundUpdateOne {
	return NewMoundClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Mound entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mound) Unwrap() *Mound {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mound is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mound) String() string {
	var builder strings.Builder
	builder.WriteString("Mound(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(m.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("abbreviation=")
	builder.WriteString(m.Abbreviation)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(m.Description)
	builder.WriteString(", ")
	builder.WriteString("external_link=")
	builder.WriteString(m.ExternalLink)
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(m.Number)
	builder.WriteByte(')')
	return builder.String()
}

// NamedPetroglyphs returns the Petroglyphs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Mound) NamedPetroglyphs(name string) ([]*Petroglyph, error) {
	if m.Edges.namedPetroglyphs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedPetroglyphs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Mound) appendNamedPetroglyphs(name string, edges ...*Petroglyph) {
	if m.Edges.namedPetroglyphs == nil {
		m.Edges.namedPetroglyphs = make(map[string][]*Petroglyph)
	}
	if len(edges) == 0 {
		m.Edges.namedPetroglyphs[name] = []*Petroglyph{}
	} else {
		m.Edges.namedPetroglyphs[name] = append(m.Edges.namedPetroglyphs[name], edges...)
	}
}

// NamedVisits returns the Visits named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Mound) NamedVisits(name string) ([]*Visit, error) {
	if m.Edges.namedVisits == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedVisits[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Mound) appendNamedVisits(name string, edges ...*Visit) {
	if m.Edges.namedVisits == nil {
		m.Edges.namedVisits = make(map[string][]*Visit)
	}
	if len(edges) == 0 {
		m.Edges.namedVisits[name] = []*Visit{}
	} else {
		m.Edges.namedVisits[name] = append(m.Edges.namedVisits[name], edges...)
	}
}

// Mounds is a parsable slice of Mound.
type Mounds []*Mound
