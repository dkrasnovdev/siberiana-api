// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronologicalanalysis"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronology"
)

// DendrochronologicalAnalysisCreate is the builder for creating a DendrochronologicalAnalysis entity.
type DendrochronologicalAnalysisCreate struct {
	config
	mutation *DendrochronologicalAnalysisMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dac *DendrochronologicalAnalysisCreate) SetCreatedAt(t time.Time) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetCreatedAt(t)
	return dac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dac *DendrochronologicalAnalysisCreate) SetNillableCreatedAt(t *time.Time) *DendrochronologicalAnalysisCreate {
	if t != nil {
		dac.SetCreatedAt(*t)
	}
	return dac
}

// SetCreatedBy sets the "created_by" field.
func (dac *DendrochronologicalAnalysisCreate) SetCreatedBy(s string) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetCreatedBy(s)
	return dac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dac *DendrochronologicalAnalysisCreate) SetNillableCreatedBy(s *string) *DendrochronologicalAnalysisCreate {
	if s != nil {
		dac.SetCreatedBy(*s)
	}
	return dac
}

// SetUpdatedAt sets the "updated_at" field.
func (dac *DendrochronologicalAnalysisCreate) SetUpdatedAt(t time.Time) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetUpdatedAt(t)
	return dac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dac *DendrochronologicalAnalysisCreate) SetNillableUpdatedAt(t *time.Time) *DendrochronologicalAnalysisCreate {
	if t != nil {
		dac.SetUpdatedAt(*t)
	}
	return dac
}

// SetUpdatedBy sets the "updated_by" field.
func (dac *DendrochronologicalAnalysisCreate) SetUpdatedBy(s string) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetUpdatedBy(s)
	return dac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dac *DendrochronologicalAnalysisCreate) SetNillableUpdatedBy(s *string) *DendrochronologicalAnalysisCreate {
	if s != nil {
		dac.SetUpdatedBy(*s)
	}
	return dac
}

// SetDisplayName sets the "display_name" field.
func (dac *DendrochronologicalAnalysisCreate) SetDisplayName(s string) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetDisplayName(s)
	return dac
}

// SetStartYear sets the "start_year" field.
func (dac *DendrochronologicalAnalysisCreate) SetStartYear(i int) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetStartYear(i)
	return dac
}

// SetEndYear sets the "end_year" field.
func (dac *DendrochronologicalAnalysisCreate) SetEndYear(i int) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetEndYear(i)
	return dac
}

// SetNumberOfRings sets the "number_of_rings" field.
func (dac *DendrochronologicalAnalysisCreate) SetNumberOfRings(i int) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetNumberOfRings(i)
	return dac
}

// SetCoefficientCorrelation sets the "coefficient_correlation" field.
func (dac *DendrochronologicalAnalysisCreate) SetCoefficientCorrelation(f float64) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetCoefficientCorrelation(f)
	return dac
}

// SetStandardDeviation sets the "standard_deviation" field.
func (dac *DendrochronologicalAnalysisCreate) SetStandardDeviation(f float64) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetStandardDeviation(f)
	return dac
}

// SetSensitivity sets the "sensitivity" field.
func (dac *DendrochronologicalAnalysisCreate) SetSensitivity(f float64) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetSensitivity(f)
	return dac
}

// SetSamplingLocation sets the "sampling_location" field.
func (dac *DendrochronologicalAnalysisCreate) SetSamplingLocation(s string) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetSamplingLocation(s)
	return dac
}

// SetDendrochronologyID sets the "dendrochronology" edge to the Dendrochronology entity by ID.
func (dac *DendrochronologicalAnalysisCreate) SetDendrochronologyID(id int) *DendrochronologicalAnalysisCreate {
	dac.mutation.SetDendrochronologyID(id)
	return dac
}

// SetDendrochronology sets the "dendrochronology" edge to the Dendrochronology entity.
func (dac *DendrochronologicalAnalysisCreate) SetDendrochronology(d *Dendrochronology) *DendrochronologicalAnalysisCreate {
	return dac.SetDendrochronologyID(d.ID)
}

// Mutation returns the DendrochronologicalAnalysisMutation object of the builder.
func (dac *DendrochronologicalAnalysisCreate) Mutation() *DendrochronologicalAnalysisMutation {
	return dac.mutation
}

// Save creates the DendrochronologicalAnalysis in the database.
func (dac *DendrochronologicalAnalysisCreate) Save(ctx context.Context) (*DendrochronologicalAnalysis, error) {
	if err := dac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dac.sqlSave, dac.mutation, dac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dac *DendrochronologicalAnalysisCreate) SaveX(ctx context.Context) *DendrochronologicalAnalysis {
	v, err := dac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dac *DendrochronologicalAnalysisCreate) Exec(ctx context.Context) error {
	_, err := dac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dac *DendrochronologicalAnalysisCreate) ExecX(ctx context.Context) {
	if err := dac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dac *DendrochronologicalAnalysisCreate) defaults() error {
	if _, ok := dac.mutation.CreatedAt(); !ok {
		if dendrochronologicalanalysis.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized dendrochronologicalanalysis.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := dendrochronologicalanalysis.DefaultCreatedAt()
		dac.mutation.SetCreatedAt(v)
	}
	if _, ok := dac.mutation.UpdatedAt(); !ok {
		if dendrochronologicalanalysis.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized dendrochronologicalanalysis.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := dendrochronologicalanalysis.DefaultUpdatedAt()
		dac.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dac *DendrochronologicalAnalysisCreate) check() error {
	if _, ok := dac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DendrochronologicalAnalysis.created_at"`)}
	}
	if _, ok := dac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DendrochronologicalAnalysis.updated_at"`)}
	}
	if _, ok := dac.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "DendrochronologicalAnalysis.display_name"`)}
	}
	if _, ok := dac.mutation.StartYear(); !ok {
		return &ValidationError{Name: "start_year", err: errors.New(`ent: missing required field "DendrochronologicalAnalysis.start_year"`)}
	}
	if _, ok := dac.mutation.EndYear(); !ok {
		return &ValidationError{Name: "end_year", err: errors.New(`ent: missing required field "DendrochronologicalAnalysis.end_year"`)}
	}
	if _, ok := dac.mutation.NumberOfRings(); !ok {
		return &ValidationError{Name: "number_of_rings", err: errors.New(`ent: missing required field "DendrochronologicalAnalysis.number_of_rings"`)}
	}
	if _, ok := dac.mutation.CoefficientCorrelation(); !ok {
		return &ValidationError{Name: "coefficient_correlation", err: errors.New(`ent: missing required field "DendrochronologicalAnalysis.coefficient_correlation"`)}
	}
	if _, ok := dac.mutation.StandardDeviation(); !ok {
		return &ValidationError{Name: "standard_deviation", err: errors.New(`ent: missing required field "DendrochronologicalAnalysis.standard_deviation"`)}
	}
	if _, ok := dac.mutation.Sensitivity(); !ok {
		return &ValidationError{Name: "sensitivity", err: errors.New(`ent: missing required field "DendrochronologicalAnalysis.sensitivity"`)}
	}
	if _, ok := dac.mutation.SamplingLocation(); !ok {
		return &ValidationError{Name: "sampling_location", err: errors.New(`ent: missing required field "DendrochronologicalAnalysis.sampling_location"`)}
	}
	if _, ok := dac.mutation.DendrochronologyID(); !ok {
		return &ValidationError{Name: "dendrochronology", err: errors.New(`ent: missing required edge "DendrochronologicalAnalysis.dendrochronology"`)}
	}
	return nil
}

func (dac *DendrochronologicalAnalysisCreate) sqlSave(ctx context.Context) (*DendrochronologicalAnalysis, error) {
	if err := dac.check(); err != nil {
		return nil, err
	}
	_node, _spec := dac.createSpec()
	if err := sqlgraph.CreateNode(ctx, dac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dac.mutation.id = &_node.ID
	dac.mutation.done = true
	return _node, nil
}

func (dac *DendrochronologicalAnalysisCreate) createSpec() (*DendrochronologicalAnalysis, *sqlgraph.CreateSpec) {
	var (
		_node = &DendrochronologicalAnalysis{config: dac.config}
		_spec = sqlgraph.NewCreateSpec(dendrochronologicalanalysis.Table, sqlgraph.NewFieldSpec(dendrochronologicalanalysis.FieldID, field.TypeInt))
	)
	if value, ok := dac.mutation.CreatedAt(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dac.mutation.CreatedBy(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := dac.mutation.UpdatedAt(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dac.mutation.UpdatedBy(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := dac.mutation.DisplayName(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := dac.mutation.StartYear(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldStartYear, field.TypeInt, value)
		_node.StartYear = value
	}
	if value, ok := dac.mutation.EndYear(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldEndYear, field.TypeInt, value)
		_node.EndYear = value
	}
	if value, ok := dac.mutation.NumberOfRings(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldNumberOfRings, field.TypeInt, value)
		_node.NumberOfRings = value
	}
	if value, ok := dac.mutation.CoefficientCorrelation(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldCoefficientCorrelation, field.TypeFloat64, value)
		_node.CoefficientCorrelation = value
	}
	if value, ok := dac.mutation.StandardDeviation(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldStandardDeviation, field.TypeFloat64, value)
		_node.StandardDeviation = value
	}
	if value, ok := dac.mutation.Sensitivity(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldSensitivity, field.TypeFloat64, value)
		_node.Sensitivity = value
	}
	if value, ok := dac.mutation.SamplingLocation(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldSamplingLocation, field.TypeString, value)
		_node.SamplingLocation = value
	}
	if nodes := dac.mutation.DendrochronologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dendrochronologicalanalysis.DendrochronologyTable,
			Columns: []string{dendrochronologicalanalysis.DendrochronologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.dendrochronological_analysis_dendrochronology = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DendrochronologicalAnalysisCreateBulk is the builder for creating many DendrochronologicalAnalysis entities in bulk.
type DendrochronologicalAnalysisCreateBulk struct {
	config
	err      error
	builders []*DendrochronologicalAnalysisCreate
}

// Save creates the DendrochronologicalAnalysis entities in the database.
func (dacb *DendrochronologicalAnalysisCreateBulk) Save(ctx context.Context) ([]*DendrochronologicalAnalysis, error) {
	if dacb.err != nil {
		return nil, dacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dacb.builders))
	nodes := make([]*DendrochronologicalAnalysis, len(dacb.builders))
	mutators := make([]Mutator, len(dacb.builders))
	for i := range dacb.builders {
		func(i int, root context.Context) {
			builder := dacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DendrochronologicalAnalysisMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dacb *DendrochronologicalAnalysisCreateBulk) SaveX(ctx context.Context) []*DendrochronologicalAnalysis {
	v, err := dacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dacb *DendrochronologicalAnalysisCreateBulk) Exec(ctx context.Context) error {
	_, err := dacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dacb *DendrochronologicalAnalysisCreateBulk) ExecX(ctx context.Context) {
	if err := dacb.Exec(ctx); err != nil {
		panic(err)
	}
}
