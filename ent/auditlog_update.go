// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/auditlog"
	"github.com/dkrasnovdev/heritage-api/ent/predicate"
)

// AuditLogUpdate is the builder for updating AuditLog entities.
type AuditLogUpdate struct {
	config
	hooks    []Hook
	mutation *AuditLogMutation
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (alu *AuditLogUpdate) Where(ps ...predicate.AuditLog) *AuditLogUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetTable sets the "table" field.
func (alu *AuditLogUpdate) SetTable(s string) *AuditLogUpdate {
	alu.mutation.SetTable(s)
	return alu
}

// SetNillableTable sets the "table" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableTable(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetTable(*s)
	}
	return alu
}

// ClearTable clears the value of the "table" field.
func (alu *AuditLogUpdate) ClearTable() *AuditLogUpdate {
	alu.mutation.ClearTable()
	return alu
}

// SetRefID sets the "ref_id" field.
func (alu *AuditLogUpdate) SetRefID(i int) *AuditLogUpdate {
	alu.mutation.ResetRefID()
	alu.mutation.SetRefID(i)
	return alu
}

// SetNillableRefID sets the "ref_id" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableRefID(i *int) *AuditLogUpdate {
	if i != nil {
		alu.SetRefID(*i)
	}
	return alu
}

// AddRefID adds i to the "ref_id" field.
func (alu *AuditLogUpdate) AddRefID(i int) *AuditLogUpdate {
	alu.mutation.AddRefID(i)
	return alu
}

// ClearRefID clears the value of the "ref_id" field.
func (alu *AuditLogUpdate) ClearRefID() *AuditLogUpdate {
	alu.mutation.ClearRefID()
	return alu
}

// SetOperation sets the "operation" field.
func (alu *AuditLogUpdate) SetOperation(s string) *AuditLogUpdate {
	alu.mutation.SetOperation(s)
	return alu
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableOperation(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetOperation(*s)
	}
	return alu
}

// ClearOperation clears the value of the "operation" field.
func (alu *AuditLogUpdate) ClearOperation() *AuditLogUpdate {
	alu.mutation.ClearOperation()
	return alu
}

// SetChanges sets the "changes" field.
func (alu *AuditLogUpdate) SetChanges(s []string) *AuditLogUpdate {
	alu.mutation.SetChanges(s)
	return alu
}

// AppendChanges appends s to the "changes" field.
func (alu *AuditLogUpdate) AppendChanges(s []string) *AuditLogUpdate {
	alu.mutation.AppendChanges(s)
	return alu
}

// ClearChanges clears the value of the "changes" field.
func (alu *AuditLogUpdate) ClearChanges() *AuditLogUpdate {
	alu.mutation.ClearChanges()
	return alu
}

// SetAddedEdges sets the "added_edges" field.
func (alu *AuditLogUpdate) SetAddedEdges(s []string) *AuditLogUpdate {
	alu.mutation.SetAddedEdges(s)
	return alu
}

// AppendAddedEdges appends s to the "added_edges" field.
func (alu *AuditLogUpdate) AppendAddedEdges(s []string) *AuditLogUpdate {
	alu.mutation.AppendAddedEdges(s)
	return alu
}

// ClearAddedEdges clears the value of the "added_edges" field.
func (alu *AuditLogUpdate) ClearAddedEdges() *AuditLogUpdate {
	alu.mutation.ClearAddedEdges()
	return alu
}

// SetRemovedEdges sets the "removed_edges" field.
func (alu *AuditLogUpdate) SetRemovedEdges(s []string) *AuditLogUpdate {
	alu.mutation.SetRemovedEdges(s)
	return alu
}

// AppendRemovedEdges appends s to the "removed_edges" field.
func (alu *AuditLogUpdate) AppendRemovedEdges(s []string) *AuditLogUpdate {
	alu.mutation.AppendRemovedEdges(s)
	return alu
}

// ClearRemovedEdges clears the value of the "removed_edges" field.
func (alu *AuditLogUpdate) ClearRemovedEdges() *AuditLogUpdate {
	alu.mutation.ClearRemovedEdges()
	return alu
}

// SetClearedEdges sets the "cleared_edges" field.
func (alu *AuditLogUpdate) SetClearedEdges(s []string) *AuditLogUpdate {
	alu.mutation.SetClearedEdges(s)
	return alu
}

// AppendClearedEdges appends s to the "cleared_edges" field.
func (alu *AuditLogUpdate) AppendClearedEdges(s []string) *AuditLogUpdate {
	alu.mutation.AppendClearedEdges(s)
	return alu
}

// ClearClearedEdges clears the value of the "cleared_edges" field.
func (alu *AuditLogUpdate) ClearClearedEdges() *AuditLogUpdate {
	alu.mutation.ClearClearedEdges()
	return alu
}

// SetBlame sets the "blame" field.
func (alu *AuditLogUpdate) SetBlame(s string) *AuditLogUpdate {
	alu.mutation.SetBlame(s)
	return alu
}

// SetNillableBlame sets the "blame" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableBlame(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetBlame(*s)
	}
	return alu
}

// ClearBlame clears the value of the "blame" field.
func (alu *AuditLogUpdate) ClearBlame() *AuditLogUpdate {
	alu.mutation.ClearBlame()
	return alu
}

// Mutation returns the AuditLogMutation object of the builder.
func (alu *AuditLogUpdate) Mutation() *AuditLogMutation {
	return alu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AuditLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AuditLogUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AuditLogUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AuditLogUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (alu *AuditLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.Table(); ok {
		_spec.SetField(auditlog.FieldTable, field.TypeString, value)
	}
	if alu.mutation.TableCleared() {
		_spec.ClearField(auditlog.FieldTable, field.TypeString)
	}
	if value, ok := alu.mutation.RefID(); ok {
		_spec.SetField(auditlog.FieldRefID, field.TypeInt, value)
	}
	if value, ok := alu.mutation.AddedRefID(); ok {
		_spec.AddField(auditlog.FieldRefID, field.TypeInt, value)
	}
	if alu.mutation.RefIDCleared() {
		_spec.ClearField(auditlog.FieldRefID, field.TypeInt)
	}
	if value, ok := alu.mutation.Operation(); ok {
		_spec.SetField(auditlog.FieldOperation, field.TypeString, value)
	}
	if alu.mutation.OperationCleared() {
		_spec.ClearField(auditlog.FieldOperation, field.TypeString)
	}
	if value, ok := alu.mutation.Changes(); ok {
		_spec.SetField(auditlog.FieldChanges, field.TypeJSON, value)
	}
	if value, ok := alu.mutation.AppendedChanges(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, auditlog.FieldChanges, value)
		})
	}
	if alu.mutation.ChangesCleared() {
		_spec.ClearField(auditlog.FieldChanges, field.TypeJSON)
	}
	if value, ok := alu.mutation.GetAddedEdges(); ok {
		_spec.SetField(auditlog.FieldAddedEdges, field.TypeJSON, value)
	}
	if value, ok := alu.mutation.AppendedAddedEdges(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, auditlog.FieldAddedEdges, value)
		})
	}
	if alu.mutation.AddedEdgesCleared() {
		_spec.ClearField(auditlog.FieldAddedEdges, field.TypeJSON)
	}
	if value, ok := alu.mutation.GetRemovedEdges(); ok {
		_spec.SetField(auditlog.FieldRemovedEdges, field.TypeJSON, value)
	}
	if value, ok := alu.mutation.AppendedRemovedEdges(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, auditlog.FieldRemovedEdges, value)
		})
	}
	if alu.mutation.RemovedEdgesCleared() {
		_spec.ClearField(auditlog.FieldRemovedEdges, field.TypeJSON)
	}
	if value, ok := alu.mutation.GetClearedEdges(); ok {
		_spec.SetField(auditlog.FieldClearedEdges, field.TypeJSON, value)
	}
	if value, ok := alu.mutation.AppendedClearedEdges(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, auditlog.FieldClearedEdges, value)
		})
	}
	if alu.mutation.ClearedEdgesCleared() {
		_spec.ClearField(auditlog.FieldClearedEdges, field.TypeJSON)
	}
	if value, ok := alu.mutation.Blame(); ok {
		_spec.SetField(auditlog.FieldBlame, field.TypeString, value)
	}
	if alu.mutation.BlameCleared() {
		_spec.ClearField(auditlog.FieldBlame, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AuditLogUpdateOne is the builder for updating a single AuditLog entity.
type AuditLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuditLogMutation
}

// SetTable sets the "table" field.
func (aluo *AuditLogUpdateOne) SetTable(s string) *AuditLogUpdateOne {
	aluo.mutation.SetTable(s)
	return aluo
}

// SetNillableTable sets the "table" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableTable(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetTable(*s)
	}
	return aluo
}

// ClearTable clears the value of the "table" field.
func (aluo *AuditLogUpdateOne) ClearTable() *AuditLogUpdateOne {
	aluo.mutation.ClearTable()
	return aluo
}

// SetRefID sets the "ref_id" field.
func (aluo *AuditLogUpdateOne) SetRefID(i int) *AuditLogUpdateOne {
	aluo.mutation.ResetRefID()
	aluo.mutation.SetRefID(i)
	return aluo
}

// SetNillableRefID sets the "ref_id" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableRefID(i *int) *AuditLogUpdateOne {
	if i != nil {
		aluo.SetRefID(*i)
	}
	return aluo
}

// AddRefID adds i to the "ref_id" field.
func (aluo *AuditLogUpdateOne) AddRefID(i int) *AuditLogUpdateOne {
	aluo.mutation.AddRefID(i)
	return aluo
}

// ClearRefID clears the value of the "ref_id" field.
func (aluo *AuditLogUpdateOne) ClearRefID() *AuditLogUpdateOne {
	aluo.mutation.ClearRefID()
	return aluo
}

// SetOperation sets the "operation" field.
func (aluo *AuditLogUpdateOne) SetOperation(s string) *AuditLogUpdateOne {
	aluo.mutation.SetOperation(s)
	return aluo
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableOperation(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetOperation(*s)
	}
	return aluo
}

// ClearOperation clears the value of the "operation" field.
func (aluo *AuditLogUpdateOne) ClearOperation() *AuditLogUpdateOne {
	aluo.mutation.ClearOperation()
	return aluo
}

// SetChanges sets the "changes" field.
func (aluo *AuditLogUpdateOne) SetChanges(s []string) *AuditLogUpdateOne {
	aluo.mutation.SetChanges(s)
	return aluo
}

// AppendChanges appends s to the "changes" field.
func (aluo *AuditLogUpdateOne) AppendChanges(s []string) *AuditLogUpdateOne {
	aluo.mutation.AppendChanges(s)
	return aluo
}

// ClearChanges clears the value of the "changes" field.
func (aluo *AuditLogUpdateOne) ClearChanges() *AuditLogUpdateOne {
	aluo.mutation.ClearChanges()
	return aluo
}

// SetAddedEdges sets the "added_edges" field.
func (aluo *AuditLogUpdateOne) SetAddedEdges(s []string) *AuditLogUpdateOne {
	aluo.mutation.SetAddedEdges(s)
	return aluo
}

// AppendAddedEdges appends s to the "added_edges" field.
func (aluo *AuditLogUpdateOne) AppendAddedEdges(s []string) *AuditLogUpdateOne {
	aluo.mutation.AppendAddedEdges(s)
	return aluo
}

// ClearAddedEdges clears the value of the "added_edges" field.
func (aluo *AuditLogUpdateOne) ClearAddedEdges() *AuditLogUpdateOne {
	aluo.mutation.ClearAddedEdges()
	return aluo
}

// SetRemovedEdges sets the "removed_edges" field.
func (aluo *AuditLogUpdateOne) SetRemovedEdges(s []string) *AuditLogUpdateOne {
	aluo.mutation.SetRemovedEdges(s)
	return aluo
}

// AppendRemovedEdges appends s to the "removed_edges" field.
func (aluo *AuditLogUpdateOne) AppendRemovedEdges(s []string) *AuditLogUpdateOne {
	aluo.mutation.AppendRemovedEdges(s)
	return aluo
}

// ClearRemovedEdges clears the value of the "removed_edges" field.
func (aluo *AuditLogUpdateOne) ClearRemovedEdges() *AuditLogUpdateOne {
	aluo.mutation.ClearRemovedEdges()
	return aluo
}

// SetClearedEdges sets the "cleared_edges" field.
func (aluo *AuditLogUpdateOne) SetClearedEdges(s []string) *AuditLogUpdateOne {
	aluo.mutation.SetClearedEdges(s)
	return aluo
}

// AppendClearedEdges appends s to the "cleared_edges" field.
func (aluo *AuditLogUpdateOne) AppendClearedEdges(s []string) *AuditLogUpdateOne {
	aluo.mutation.AppendClearedEdges(s)
	return aluo
}

// ClearClearedEdges clears the value of the "cleared_edges" field.
func (aluo *AuditLogUpdateOne) ClearClearedEdges() *AuditLogUpdateOne {
	aluo.mutation.ClearClearedEdges()
	return aluo
}

// SetBlame sets the "blame" field.
func (aluo *AuditLogUpdateOne) SetBlame(s string) *AuditLogUpdateOne {
	aluo.mutation.SetBlame(s)
	return aluo
}

// SetNillableBlame sets the "blame" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableBlame(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetBlame(*s)
	}
	return aluo
}

// ClearBlame clears the value of the "blame" field.
func (aluo *AuditLogUpdateOne) ClearBlame() *AuditLogUpdateOne {
	aluo.mutation.ClearBlame()
	return aluo
}

// Mutation returns the AuditLogMutation object of the builder.
func (aluo *AuditLogUpdateOne) Mutation() *AuditLogMutation {
	return aluo.mutation
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (aluo *AuditLogUpdateOne) Where(ps ...predicate.AuditLog) *AuditLogUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AuditLogUpdateOne) Select(field string, fields ...string) *AuditLogUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AuditLog entity.
func (aluo *AuditLogUpdateOne) Save(ctx context.Context) (*AuditLog, error) {
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AuditLogUpdateOne) SaveX(ctx context.Context) *AuditLog {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AuditLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AuditLogUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aluo *AuditLogUpdateOne) sqlSave(ctx context.Context) (_node *AuditLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuditLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auditlog.FieldID)
		for _, f := range fields {
			if !auditlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != auditlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.Table(); ok {
		_spec.SetField(auditlog.FieldTable, field.TypeString, value)
	}
	if aluo.mutation.TableCleared() {
		_spec.ClearField(auditlog.FieldTable, field.TypeString)
	}
	if value, ok := aluo.mutation.RefID(); ok {
		_spec.SetField(auditlog.FieldRefID, field.TypeInt, value)
	}
	if value, ok := aluo.mutation.AddedRefID(); ok {
		_spec.AddField(auditlog.FieldRefID, field.TypeInt, value)
	}
	if aluo.mutation.RefIDCleared() {
		_spec.ClearField(auditlog.FieldRefID, field.TypeInt)
	}
	if value, ok := aluo.mutation.Operation(); ok {
		_spec.SetField(auditlog.FieldOperation, field.TypeString, value)
	}
	if aluo.mutation.OperationCleared() {
		_spec.ClearField(auditlog.FieldOperation, field.TypeString)
	}
	if value, ok := aluo.mutation.Changes(); ok {
		_spec.SetField(auditlog.FieldChanges, field.TypeJSON, value)
	}
	if value, ok := aluo.mutation.AppendedChanges(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, auditlog.FieldChanges, value)
		})
	}
	if aluo.mutation.ChangesCleared() {
		_spec.ClearField(auditlog.FieldChanges, field.TypeJSON)
	}
	if value, ok := aluo.mutation.GetAddedEdges(); ok {
		_spec.SetField(auditlog.FieldAddedEdges, field.TypeJSON, value)
	}
	if value, ok := aluo.mutation.AppendedAddedEdges(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, auditlog.FieldAddedEdges, value)
		})
	}
	if aluo.mutation.AddedEdgesCleared() {
		_spec.ClearField(auditlog.FieldAddedEdges, field.TypeJSON)
	}
	if value, ok := aluo.mutation.GetRemovedEdges(); ok {
		_spec.SetField(auditlog.FieldRemovedEdges, field.TypeJSON, value)
	}
	if value, ok := aluo.mutation.AppendedRemovedEdges(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, auditlog.FieldRemovedEdges, value)
		})
	}
	if aluo.mutation.RemovedEdgesCleared() {
		_spec.ClearField(auditlog.FieldRemovedEdges, field.TypeJSON)
	}
	if value, ok := aluo.mutation.GetClearedEdges(); ok {
		_spec.SetField(auditlog.FieldClearedEdges, field.TypeJSON, value)
	}
	if value, ok := aluo.mutation.AppendedClearedEdges(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, auditlog.FieldClearedEdges, value)
		})
	}
	if aluo.mutation.ClearedEdgesCleared() {
		_spec.ClearField(auditlog.FieldClearedEdges, field.TypeJSON)
	}
	if value, ok := aluo.mutation.Blame(); ok {
		_spec.SetField(auditlog.FieldBlame, field.TypeString, value)
	}
	if aluo.mutation.BlameCleared() {
		_spec.ClearField(auditlog.FieldBlame, field.TypeString)
	}
	_node = &AuditLog{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
