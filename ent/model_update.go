// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/artifact"
	"github.com/dkrasnovdev/heritage-api/ent/model"
	"github.com/dkrasnovdev/heritage-api/ent/predicate"
)

// ModelUpdate is the builder for updating Model entities.
type ModelUpdate struct {
	config
	hooks    []Hook
	mutation *ModelMutation
}

// Where appends a list predicates to the ModelUpdate builder.
func (mu *ModelUpdate) Where(ps ...predicate.Model) *ModelUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetCreatedBy sets the "created_by" field.
func (mu *ModelUpdate) SetCreatedBy(s string) *ModelUpdate {
	mu.mutation.SetCreatedBy(s)
	return mu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mu *ModelUpdate) SetNillableCreatedBy(s *string) *ModelUpdate {
	if s != nil {
		mu.SetCreatedBy(*s)
	}
	return mu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (mu *ModelUpdate) ClearCreatedBy() *ModelUpdate {
	mu.mutation.ClearCreatedBy()
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *ModelUpdate) SetUpdatedAt(t time.Time) *ModelUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetUpdatedBy sets the "updated_by" field.
func (mu *ModelUpdate) SetUpdatedBy(s string) *ModelUpdate {
	mu.mutation.SetUpdatedBy(s)
	return mu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mu *ModelUpdate) SetNillableUpdatedBy(s *string) *ModelUpdate {
	if s != nil {
		mu.SetUpdatedBy(*s)
	}
	return mu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mu *ModelUpdate) ClearUpdatedBy() *ModelUpdate {
	mu.mutation.ClearUpdatedBy()
	return mu
}

// SetDisplayName sets the "display_name" field.
func (mu *ModelUpdate) SetDisplayName(s string) *ModelUpdate {
	mu.mutation.SetDisplayName(s)
	return mu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (mu *ModelUpdate) SetNillableDisplayName(s *string) *ModelUpdate {
	if s != nil {
		mu.SetDisplayName(*s)
	}
	return mu
}

// ClearDisplayName clears the value of the "display_name" field.
func (mu *ModelUpdate) ClearDisplayName() *ModelUpdate {
	mu.mutation.ClearDisplayName()
	return mu
}

// SetDescription sets the "description" field.
func (mu *ModelUpdate) SetDescription(s string) *ModelUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *ModelUpdate) SetNillableDescription(s *string) *ModelUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// ClearDescription clears the value of the "description" field.
func (mu *ModelUpdate) ClearDescription() *ModelUpdate {
	mu.mutation.ClearDescription()
	return mu
}

// SetExternalLinks sets the "external_links" field.
func (mu *ModelUpdate) SetExternalLinks(s []string) *ModelUpdate {
	mu.mutation.SetExternalLinks(s)
	return mu
}

// AppendExternalLinks appends s to the "external_links" field.
func (mu *ModelUpdate) AppendExternalLinks(s []string) *ModelUpdate {
	mu.mutation.AppendExternalLinks(s)
	return mu
}

// ClearExternalLinks clears the value of the "external_links" field.
func (mu *ModelUpdate) ClearExternalLinks() *ModelUpdate {
	mu.mutation.ClearExternalLinks()
	return mu
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (mu *ModelUpdate) AddArtifactIDs(ids ...int) *ModelUpdate {
	mu.mutation.AddArtifactIDs(ids...)
	return mu
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (mu *ModelUpdate) AddArtifacts(a ...*Artifact) *ModelUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.AddArtifactIDs(ids...)
}

// Mutation returns the ModelMutation object of the builder.
func (mu *ModelUpdate) Mutation() *ModelMutation {
	return mu.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (mu *ModelUpdate) ClearArtifacts() *ModelUpdate {
	mu.mutation.ClearArtifacts()
	return mu
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (mu *ModelUpdate) RemoveArtifactIDs(ids ...int) *ModelUpdate {
	mu.mutation.RemoveArtifactIDs(ids...)
	return mu
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (mu *ModelUpdate) RemoveArtifacts(a ...*Artifact) *ModelUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.RemoveArtifactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *ModelUpdate) Save(ctx context.Context) (int, error) {
	if err := mu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *ModelUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *ModelUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *ModelUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *ModelUpdate) defaults() error {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		if model.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized model.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := model.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (mu *ModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(model.Table, model.Columns, sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.CreatedBy(); ok {
		_spec.SetField(model.FieldCreatedBy, field.TypeString, value)
	}
	if mu.mutation.CreatedByCleared() {
		_spec.ClearField(model.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(model.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.UpdatedBy(); ok {
		_spec.SetField(model.FieldUpdatedBy, field.TypeString, value)
	}
	if mu.mutation.UpdatedByCleared() {
		_spec.ClearField(model.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := mu.mutation.DisplayName(); ok {
		_spec.SetField(model.FieldDisplayName, field.TypeString, value)
	}
	if mu.mutation.DisplayNameCleared() {
		_spec.ClearField(model.FieldDisplayName, field.TypeString)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(model.FieldDescription, field.TypeString, value)
	}
	if mu.mutation.DescriptionCleared() {
		_spec.ClearField(model.FieldDescription, field.TypeString)
	}
	if value, ok := mu.mutation.ExternalLinks(); ok {
		_spec.SetField(model.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, model.FieldExternalLinks, value)
		})
	}
	if mu.mutation.ExternalLinksCleared() {
		_spec.ClearField(model.FieldExternalLinks, field.TypeJSON)
	}
	if mu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   model.ArtifactsTable,
			Columns: []string{model.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !mu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   model.ArtifactsTable,
			Columns: []string{model.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   model.ArtifactsTable,
			Columns: []string{model.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{model.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// ModelUpdateOne is the builder for updating a single Model entity.
type ModelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ModelMutation
}

// SetCreatedBy sets the "created_by" field.
func (muo *ModelUpdateOne) SetCreatedBy(s string) *ModelUpdateOne {
	muo.mutation.SetCreatedBy(s)
	return muo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (muo *ModelUpdateOne) SetNillableCreatedBy(s *string) *ModelUpdateOne {
	if s != nil {
		muo.SetCreatedBy(*s)
	}
	return muo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (muo *ModelUpdateOne) ClearCreatedBy() *ModelUpdateOne {
	muo.mutation.ClearCreatedBy()
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *ModelUpdateOne) SetUpdatedAt(t time.Time) *ModelUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetUpdatedBy sets the "updated_by" field.
func (muo *ModelUpdateOne) SetUpdatedBy(s string) *ModelUpdateOne {
	muo.mutation.SetUpdatedBy(s)
	return muo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (muo *ModelUpdateOne) SetNillableUpdatedBy(s *string) *ModelUpdateOne {
	if s != nil {
		muo.SetUpdatedBy(*s)
	}
	return muo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (muo *ModelUpdateOne) ClearUpdatedBy() *ModelUpdateOne {
	muo.mutation.ClearUpdatedBy()
	return muo
}

// SetDisplayName sets the "display_name" field.
func (muo *ModelUpdateOne) SetDisplayName(s string) *ModelUpdateOne {
	muo.mutation.SetDisplayName(s)
	return muo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (muo *ModelUpdateOne) SetNillableDisplayName(s *string) *ModelUpdateOne {
	if s != nil {
		muo.SetDisplayName(*s)
	}
	return muo
}

// ClearDisplayName clears the value of the "display_name" field.
func (muo *ModelUpdateOne) ClearDisplayName() *ModelUpdateOne {
	muo.mutation.ClearDisplayName()
	return muo
}

// SetDescription sets the "description" field.
func (muo *ModelUpdateOne) SetDescription(s string) *ModelUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *ModelUpdateOne) SetNillableDescription(s *string) *ModelUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// ClearDescription clears the value of the "description" field.
func (muo *ModelUpdateOne) ClearDescription() *ModelUpdateOne {
	muo.mutation.ClearDescription()
	return muo
}

// SetExternalLinks sets the "external_links" field.
func (muo *ModelUpdateOne) SetExternalLinks(s []string) *ModelUpdateOne {
	muo.mutation.SetExternalLinks(s)
	return muo
}

// AppendExternalLinks appends s to the "external_links" field.
func (muo *ModelUpdateOne) AppendExternalLinks(s []string) *ModelUpdateOne {
	muo.mutation.AppendExternalLinks(s)
	return muo
}

// ClearExternalLinks clears the value of the "external_links" field.
func (muo *ModelUpdateOne) ClearExternalLinks() *ModelUpdateOne {
	muo.mutation.ClearExternalLinks()
	return muo
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (muo *ModelUpdateOne) AddArtifactIDs(ids ...int) *ModelUpdateOne {
	muo.mutation.AddArtifactIDs(ids...)
	return muo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (muo *ModelUpdateOne) AddArtifacts(a ...*Artifact) *ModelUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.AddArtifactIDs(ids...)
}

// Mutation returns the ModelMutation object of the builder.
func (muo *ModelUpdateOne) Mutation() *ModelMutation {
	return muo.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (muo *ModelUpdateOne) ClearArtifacts() *ModelUpdateOne {
	muo.mutation.ClearArtifacts()
	return muo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (muo *ModelUpdateOne) RemoveArtifactIDs(ids ...int) *ModelUpdateOne {
	muo.mutation.RemoveArtifactIDs(ids...)
	return muo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (muo *ModelUpdateOne) RemoveArtifacts(a ...*Artifact) *ModelUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.RemoveArtifactIDs(ids...)
}

// Where appends a list predicates to the ModelUpdate builder.
func (muo *ModelUpdateOne) Where(ps ...predicate.Model) *ModelUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *ModelUpdateOne) Select(field string, fields ...string) *ModelUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Model entity.
func (muo *ModelUpdateOne) Save(ctx context.Context) (*Model, error) {
	if err := muo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *ModelUpdateOne) SaveX(ctx context.Context) *Model {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *ModelUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *ModelUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *ModelUpdateOne) defaults() error {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		if model.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized model.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := model.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (muo *ModelUpdateOne) sqlSave(ctx context.Context) (_node *Model, err error) {
	_spec := sqlgraph.NewUpdateSpec(model.Table, model.Columns, sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Model.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, model.FieldID)
		for _, f := range fields {
			if !model.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != model.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.CreatedBy(); ok {
		_spec.SetField(model.FieldCreatedBy, field.TypeString, value)
	}
	if muo.mutation.CreatedByCleared() {
		_spec.ClearField(model.FieldCreatedBy, field.TypeString)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(model.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.UpdatedBy(); ok {
		_spec.SetField(model.FieldUpdatedBy, field.TypeString, value)
	}
	if muo.mutation.UpdatedByCleared() {
		_spec.ClearField(model.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := muo.mutation.DisplayName(); ok {
		_spec.SetField(model.FieldDisplayName, field.TypeString, value)
	}
	if muo.mutation.DisplayNameCleared() {
		_spec.ClearField(model.FieldDisplayName, field.TypeString)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(model.FieldDescription, field.TypeString, value)
	}
	if muo.mutation.DescriptionCleared() {
		_spec.ClearField(model.FieldDescription, field.TypeString)
	}
	if value, ok := muo.mutation.ExternalLinks(); ok {
		_spec.SetField(model.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, model.FieldExternalLinks, value)
		})
	}
	if muo.mutation.ExternalLinksCleared() {
		_spec.ClearField(model.FieldExternalLinks, field.TypeJSON)
	}
	if muo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   model.ArtifactsTable,
			Columns: []string{model.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !muo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   model.ArtifactsTable,
			Columns: []string{model.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   model.ArtifactsTable,
			Columns: []string{model.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Model{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{model.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
