// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
)

// ProtectedAreaPictureDelete is the builder for deleting a ProtectedAreaPicture entity.
type ProtectedAreaPictureDelete struct {
	config
	hooks    []Hook
	mutation *ProtectedAreaPictureMutation
}

// Where appends a list predicates to the ProtectedAreaPictureDelete builder.
func (papd *ProtectedAreaPictureDelete) Where(ps ...predicate.ProtectedAreaPicture) *ProtectedAreaPictureDelete {
	papd.mutation.Where(ps...)
	return papd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (papd *ProtectedAreaPictureDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, papd.sqlExec, papd.mutation, papd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (papd *ProtectedAreaPictureDelete) ExecX(ctx context.Context) int {
	n, err := papd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (papd *ProtectedAreaPictureDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(protectedareapicture.Table, sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt))
	if ps := papd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, papd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	papd.mutation.done = true
	return affected, err
}

// ProtectedAreaPictureDeleteOne is the builder for deleting a single ProtectedAreaPicture entity.
type ProtectedAreaPictureDeleteOne struct {
	papd *ProtectedAreaPictureDelete
}

// Where appends a list predicates to the ProtectedAreaPictureDelete builder.
func (papdo *ProtectedAreaPictureDeleteOne) Where(ps ...predicate.ProtectedAreaPicture) *ProtectedAreaPictureDeleteOne {
	papdo.papd.mutation.Where(ps...)
	return papdo
}

// Exec executes the deletion query.
func (papdo *ProtectedAreaPictureDeleteOne) Exec(ctx context.Context) error {
	n, err := papdo.papd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{protectedareapicture.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (papdo *ProtectedAreaPictureDeleteOne) ExecX(ctx context.Context) {
	if err := papdo.Exec(ctx); err != nil {
		panic(err)
	}
}
