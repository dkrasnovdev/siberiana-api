// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronologicalanalysis"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronology"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
)

// DendrochronologicalAnalysisUpdate is the builder for updating DendrochronologicalAnalysis entities.
type DendrochronologicalAnalysisUpdate struct {
	config
	hooks    []Hook
	mutation *DendrochronologicalAnalysisMutation
}

// Where appends a list predicates to the DendrochronologicalAnalysisUpdate builder.
func (dau *DendrochronologicalAnalysisUpdate) Where(ps ...predicate.DendrochronologicalAnalysis) *DendrochronologicalAnalysisUpdate {
	dau.mutation.Where(ps...)
	return dau
}

// SetCreatedBy sets the "created_by" field.
func (dau *DendrochronologicalAnalysisUpdate) SetCreatedBy(s string) *DendrochronologicalAnalysisUpdate {
	dau.mutation.SetCreatedBy(s)
	return dau
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dau *DendrochronologicalAnalysisUpdate) SetNillableCreatedBy(s *string) *DendrochronologicalAnalysisUpdate {
	if s != nil {
		dau.SetCreatedBy(*s)
	}
	return dau
}

// ClearCreatedBy clears the value of the "created_by" field.
func (dau *DendrochronologicalAnalysisUpdate) ClearCreatedBy() *DendrochronologicalAnalysisUpdate {
	dau.mutation.ClearCreatedBy()
	return dau
}

// SetUpdatedAt sets the "updated_at" field.
func (dau *DendrochronologicalAnalysisUpdate) SetUpdatedAt(t time.Time) *DendrochronologicalAnalysisUpdate {
	dau.mutation.SetUpdatedAt(t)
	return dau
}

// SetUpdatedBy sets the "updated_by" field.
func (dau *DendrochronologicalAnalysisUpdate) SetUpdatedBy(s string) *DendrochronologicalAnalysisUpdate {
	dau.mutation.SetUpdatedBy(s)
	return dau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dau *DendrochronologicalAnalysisUpdate) SetNillableUpdatedBy(s *string) *DendrochronologicalAnalysisUpdate {
	if s != nil {
		dau.SetUpdatedBy(*s)
	}
	return dau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dau *DendrochronologicalAnalysisUpdate) ClearUpdatedBy() *DendrochronologicalAnalysisUpdate {
	dau.mutation.ClearUpdatedBy()
	return dau
}

// SetDisplayName sets the "display_name" field.
func (dau *DendrochronologicalAnalysisUpdate) SetDisplayName(s string) *DendrochronologicalAnalysisUpdate {
	dau.mutation.SetDisplayName(s)
	return dau
}

// SetStartYear sets the "start_year" field.
func (dau *DendrochronologicalAnalysisUpdate) SetStartYear(i int) *DendrochronologicalAnalysisUpdate {
	dau.mutation.ResetStartYear()
	dau.mutation.SetStartYear(i)
	return dau
}

// AddStartYear adds i to the "start_year" field.
func (dau *DendrochronologicalAnalysisUpdate) AddStartYear(i int) *DendrochronologicalAnalysisUpdate {
	dau.mutation.AddStartYear(i)
	return dau
}

// SetEndYear sets the "end_year" field.
func (dau *DendrochronologicalAnalysisUpdate) SetEndYear(i int) *DendrochronologicalAnalysisUpdate {
	dau.mutation.ResetEndYear()
	dau.mutation.SetEndYear(i)
	return dau
}

// AddEndYear adds i to the "end_year" field.
func (dau *DendrochronologicalAnalysisUpdate) AddEndYear(i int) *DendrochronologicalAnalysisUpdate {
	dau.mutation.AddEndYear(i)
	return dau
}

// SetNumberOfRings sets the "number_of_rings" field.
func (dau *DendrochronologicalAnalysisUpdate) SetNumberOfRings(i int) *DendrochronologicalAnalysisUpdate {
	dau.mutation.ResetNumberOfRings()
	dau.mutation.SetNumberOfRings(i)
	return dau
}

// AddNumberOfRings adds i to the "number_of_rings" field.
func (dau *DendrochronologicalAnalysisUpdate) AddNumberOfRings(i int) *DendrochronologicalAnalysisUpdate {
	dau.mutation.AddNumberOfRings(i)
	return dau
}

// SetCoefficientCorrelation sets the "coefficient_correlation" field.
func (dau *DendrochronologicalAnalysisUpdate) SetCoefficientCorrelation(f float64) *DendrochronologicalAnalysisUpdate {
	dau.mutation.ResetCoefficientCorrelation()
	dau.mutation.SetCoefficientCorrelation(f)
	return dau
}

// AddCoefficientCorrelation adds f to the "coefficient_correlation" field.
func (dau *DendrochronologicalAnalysisUpdate) AddCoefficientCorrelation(f float64) *DendrochronologicalAnalysisUpdate {
	dau.mutation.AddCoefficientCorrelation(f)
	return dau
}

// SetStandardDeviation sets the "standard_deviation" field.
func (dau *DendrochronologicalAnalysisUpdate) SetStandardDeviation(f float64) *DendrochronologicalAnalysisUpdate {
	dau.mutation.ResetStandardDeviation()
	dau.mutation.SetStandardDeviation(f)
	return dau
}

// AddStandardDeviation adds f to the "standard_deviation" field.
func (dau *DendrochronologicalAnalysisUpdate) AddStandardDeviation(f float64) *DendrochronologicalAnalysisUpdate {
	dau.mutation.AddStandardDeviation(f)
	return dau
}

// SetSensitivity sets the "sensitivity" field.
func (dau *DendrochronologicalAnalysisUpdate) SetSensitivity(f float64) *DendrochronologicalAnalysisUpdate {
	dau.mutation.ResetSensitivity()
	dau.mutation.SetSensitivity(f)
	return dau
}

// AddSensitivity adds f to the "sensitivity" field.
func (dau *DendrochronologicalAnalysisUpdate) AddSensitivity(f float64) *DendrochronologicalAnalysisUpdate {
	dau.mutation.AddSensitivity(f)
	return dau
}

// SetSamplingLocation sets the "sampling_location" field.
func (dau *DendrochronologicalAnalysisUpdate) SetSamplingLocation(s string) *DendrochronologicalAnalysisUpdate {
	dau.mutation.SetSamplingLocation(s)
	return dau
}

// SetDendrochronologyID sets the "dendrochronology" edge to the Dendrochronology entity by ID.
func (dau *DendrochronologicalAnalysisUpdate) SetDendrochronologyID(id int) *DendrochronologicalAnalysisUpdate {
	dau.mutation.SetDendrochronologyID(id)
	return dau
}

// SetDendrochronology sets the "dendrochronology" edge to the Dendrochronology entity.
func (dau *DendrochronologicalAnalysisUpdate) SetDendrochronology(d *Dendrochronology) *DendrochronologicalAnalysisUpdate {
	return dau.SetDendrochronologyID(d.ID)
}

// Mutation returns the DendrochronologicalAnalysisMutation object of the builder.
func (dau *DendrochronologicalAnalysisUpdate) Mutation() *DendrochronologicalAnalysisMutation {
	return dau.mutation
}

// ClearDendrochronology clears the "dendrochronology" edge to the Dendrochronology entity.
func (dau *DendrochronologicalAnalysisUpdate) ClearDendrochronology() *DendrochronologicalAnalysisUpdate {
	dau.mutation.ClearDendrochronology()
	return dau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dau *DendrochronologicalAnalysisUpdate) Save(ctx context.Context) (int, error) {
	if err := dau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, dau.sqlSave, dau.mutation, dau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dau *DendrochronologicalAnalysisUpdate) SaveX(ctx context.Context) int {
	affected, err := dau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dau *DendrochronologicalAnalysisUpdate) Exec(ctx context.Context) error {
	_, err := dau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dau *DendrochronologicalAnalysisUpdate) ExecX(ctx context.Context) {
	if err := dau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dau *DendrochronologicalAnalysisUpdate) defaults() error {
	if _, ok := dau.mutation.UpdatedAt(); !ok {
		if dendrochronologicalanalysis.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized dendrochronologicalanalysis.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := dendrochronologicalanalysis.UpdateDefaultUpdatedAt()
		dau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dau *DendrochronologicalAnalysisUpdate) check() error {
	if _, ok := dau.mutation.DendrochronologyID(); dau.mutation.DendrochronologyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DendrochronologicalAnalysis.dendrochronology"`)
	}
	return nil
}

func (dau *DendrochronologicalAnalysisUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dendrochronologicalanalysis.Table, dendrochronologicalanalysis.Columns, sqlgraph.NewFieldSpec(dendrochronologicalanalysis.FieldID, field.TypeInt))
	if ps := dau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dau.mutation.CreatedBy(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldCreatedBy, field.TypeString, value)
	}
	if dau.mutation.CreatedByCleared() {
		_spec.ClearField(dendrochronologicalanalysis.FieldCreatedBy, field.TypeString)
	}
	if value, ok := dau.mutation.UpdatedAt(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dau.mutation.UpdatedBy(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldUpdatedBy, field.TypeString, value)
	}
	if dau.mutation.UpdatedByCleared() {
		_spec.ClearField(dendrochronologicalanalysis.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := dau.mutation.DisplayName(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := dau.mutation.StartYear(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldStartYear, field.TypeInt, value)
	}
	if value, ok := dau.mutation.AddedStartYear(); ok {
		_spec.AddField(dendrochronologicalanalysis.FieldStartYear, field.TypeInt, value)
	}
	if value, ok := dau.mutation.EndYear(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldEndYear, field.TypeInt, value)
	}
	if value, ok := dau.mutation.AddedEndYear(); ok {
		_spec.AddField(dendrochronologicalanalysis.FieldEndYear, field.TypeInt, value)
	}
	if value, ok := dau.mutation.NumberOfRings(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldNumberOfRings, field.TypeInt, value)
	}
	if value, ok := dau.mutation.AddedNumberOfRings(); ok {
		_spec.AddField(dendrochronologicalanalysis.FieldNumberOfRings, field.TypeInt, value)
	}
	if value, ok := dau.mutation.CoefficientCorrelation(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldCoefficientCorrelation, field.TypeFloat64, value)
	}
	if value, ok := dau.mutation.AddedCoefficientCorrelation(); ok {
		_spec.AddField(dendrochronologicalanalysis.FieldCoefficientCorrelation, field.TypeFloat64, value)
	}
	if value, ok := dau.mutation.StandardDeviation(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldStandardDeviation, field.TypeFloat64, value)
	}
	if value, ok := dau.mutation.AddedStandardDeviation(); ok {
		_spec.AddField(dendrochronologicalanalysis.FieldStandardDeviation, field.TypeFloat64, value)
	}
	if value, ok := dau.mutation.Sensitivity(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldSensitivity, field.TypeFloat64, value)
	}
	if value, ok := dau.mutation.AddedSensitivity(); ok {
		_spec.AddField(dendrochronologicalanalysis.FieldSensitivity, field.TypeFloat64, value)
	}
	if value, ok := dau.mutation.SamplingLocation(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldSamplingLocation, field.TypeString, value)
	}
	if dau.mutation.DendrochronologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dendrochronologicalanalysis.DendrochronologyTable,
			Columns: []string{dendrochronologicalanalysis.DendrochronologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.DendrochronologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dendrochronologicalanalysis.DendrochronologyTable,
			Columns: []string{dendrochronologicalanalysis.DendrochronologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dendrochronologicalanalysis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dau.mutation.done = true
	return n, nil
}

// DendrochronologicalAnalysisUpdateOne is the builder for updating a single DendrochronologicalAnalysis entity.
type DendrochronologicalAnalysisUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DendrochronologicalAnalysisMutation
}

// SetCreatedBy sets the "created_by" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetCreatedBy(s string) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.SetCreatedBy(s)
	return dauo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetNillableCreatedBy(s *string) *DendrochronologicalAnalysisUpdateOne {
	if s != nil {
		dauo.SetCreatedBy(*s)
	}
	return dauo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) ClearCreatedBy() *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.ClearCreatedBy()
	return dauo
}

// SetUpdatedAt sets the "updated_at" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetUpdatedAt(t time.Time) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.SetUpdatedAt(t)
	return dauo
}

// SetUpdatedBy sets the "updated_by" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetUpdatedBy(s string) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.SetUpdatedBy(s)
	return dauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetNillableUpdatedBy(s *string) *DendrochronologicalAnalysisUpdateOne {
	if s != nil {
		dauo.SetUpdatedBy(*s)
	}
	return dauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) ClearUpdatedBy() *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.ClearUpdatedBy()
	return dauo
}

// SetDisplayName sets the "display_name" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetDisplayName(s string) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.SetDisplayName(s)
	return dauo
}

// SetStartYear sets the "start_year" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetStartYear(i int) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.ResetStartYear()
	dauo.mutation.SetStartYear(i)
	return dauo
}

// AddStartYear adds i to the "start_year" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) AddStartYear(i int) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.AddStartYear(i)
	return dauo
}

// SetEndYear sets the "end_year" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetEndYear(i int) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.ResetEndYear()
	dauo.mutation.SetEndYear(i)
	return dauo
}

// AddEndYear adds i to the "end_year" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) AddEndYear(i int) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.AddEndYear(i)
	return dauo
}

// SetNumberOfRings sets the "number_of_rings" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetNumberOfRings(i int) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.ResetNumberOfRings()
	dauo.mutation.SetNumberOfRings(i)
	return dauo
}

// AddNumberOfRings adds i to the "number_of_rings" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) AddNumberOfRings(i int) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.AddNumberOfRings(i)
	return dauo
}

// SetCoefficientCorrelation sets the "coefficient_correlation" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetCoefficientCorrelation(f float64) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.ResetCoefficientCorrelation()
	dauo.mutation.SetCoefficientCorrelation(f)
	return dauo
}

// AddCoefficientCorrelation adds f to the "coefficient_correlation" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) AddCoefficientCorrelation(f float64) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.AddCoefficientCorrelation(f)
	return dauo
}

// SetStandardDeviation sets the "standard_deviation" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetStandardDeviation(f float64) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.ResetStandardDeviation()
	dauo.mutation.SetStandardDeviation(f)
	return dauo
}

// AddStandardDeviation adds f to the "standard_deviation" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) AddStandardDeviation(f float64) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.AddStandardDeviation(f)
	return dauo
}

// SetSensitivity sets the "sensitivity" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetSensitivity(f float64) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.ResetSensitivity()
	dauo.mutation.SetSensitivity(f)
	return dauo
}

// AddSensitivity adds f to the "sensitivity" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) AddSensitivity(f float64) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.AddSensitivity(f)
	return dauo
}

// SetSamplingLocation sets the "sampling_location" field.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetSamplingLocation(s string) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.SetSamplingLocation(s)
	return dauo
}

// SetDendrochronologyID sets the "dendrochronology" edge to the Dendrochronology entity by ID.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetDendrochronologyID(id int) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.SetDendrochronologyID(id)
	return dauo
}

// SetDendrochronology sets the "dendrochronology" edge to the Dendrochronology entity.
func (dauo *DendrochronologicalAnalysisUpdateOne) SetDendrochronology(d *Dendrochronology) *DendrochronologicalAnalysisUpdateOne {
	return dauo.SetDendrochronologyID(d.ID)
}

// Mutation returns the DendrochronologicalAnalysisMutation object of the builder.
func (dauo *DendrochronologicalAnalysisUpdateOne) Mutation() *DendrochronologicalAnalysisMutation {
	return dauo.mutation
}

// ClearDendrochronology clears the "dendrochronology" edge to the Dendrochronology entity.
func (dauo *DendrochronologicalAnalysisUpdateOne) ClearDendrochronology() *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.ClearDendrochronology()
	return dauo
}

// Where appends a list predicates to the DendrochronologicalAnalysisUpdate builder.
func (dauo *DendrochronologicalAnalysisUpdateOne) Where(ps ...predicate.DendrochronologicalAnalysis) *DendrochronologicalAnalysisUpdateOne {
	dauo.mutation.Where(ps...)
	return dauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dauo *DendrochronologicalAnalysisUpdateOne) Select(field string, fields ...string) *DendrochronologicalAnalysisUpdateOne {
	dauo.fields = append([]string{field}, fields...)
	return dauo
}

// Save executes the query and returns the updated DendrochronologicalAnalysis entity.
func (dauo *DendrochronologicalAnalysisUpdateOne) Save(ctx context.Context) (*DendrochronologicalAnalysis, error) {
	if err := dauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dauo.sqlSave, dauo.mutation, dauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dauo *DendrochronologicalAnalysisUpdateOne) SaveX(ctx context.Context) *DendrochronologicalAnalysis {
	node, err := dauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dauo *DendrochronologicalAnalysisUpdateOne) Exec(ctx context.Context) error {
	_, err := dauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dauo *DendrochronologicalAnalysisUpdateOne) ExecX(ctx context.Context) {
	if err := dauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dauo *DendrochronologicalAnalysisUpdateOne) defaults() error {
	if _, ok := dauo.mutation.UpdatedAt(); !ok {
		if dendrochronologicalanalysis.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized dendrochronologicalanalysis.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := dendrochronologicalanalysis.UpdateDefaultUpdatedAt()
		dauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dauo *DendrochronologicalAnalysisUpdateOne) check() error {
	if _, ok := dauo.mutation.DendrochronologyID(); dauo.mutation.DendrochronologyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DendrochronologicalAnalysis.dendrochronology"`)
	}
	return nil
}

func (dauo *DendrochronologicalAnalysisUpdateOne) sqlSave(ctx context.Context) (_node *DendrochronologicalAnalysis, err error) {
	if err := dauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dendrochronologicalanalysis.Table, dendrochronologicalanalysis.Columns, sqlgraph.NewFieldSpec(dendrochronologicalanalysis.FieldID, field.TypeInt))
	id, ok := dauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DendrochronologicalAnalysis.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dendrochronologicalanalysis.FieldID)
		for _, f := range fields {
			if !dendrochronologicalanalysis.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dendrochronologicalanalysis.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dauo.mutation.CreatedBy(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldCreatedBy, field.TypeString, value)
	}
	if dauo.mutation.CreatedByCleared() {
		_spec.ClearField(dendrochronologicalanalysis.FieldCreatedBy, field.TypeString)
	}
	if value, ok := dauo.mutation.UpdatedAt(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dauo.mutation.UpdatedBy(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldUpdatedBy, field.TypeString, value)
	}
	if dauo.mutation.UpdatedByCleared() {
		_spec.ClearField(dendrochronologicalanalysis.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := dauo.mutation.DisplayName(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := dauo.mutation.StartYear(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldStartYear, field.TypeInt, value)
	}
	if value, ok := dauo.mutation.AddedStartYear(); ok {
		_spec.AddField(dendrochronologicalanalysis.FieldStartYear, field.TypeInt, value)
	}
	if value, ok := dauo.mutation.EndYear(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldEndYear, field.TypeInt, value)
	}
	if value, ok := dauo.mutation.AddedEndYear(); ok {
		_spec.AddField(dendrochronologicalanalysis.FieldEndYear, field.TypeInt, value)
	}
	if value, ok := dauo.mutation.NumberOfRings(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldNumberOfRings, field.TypeInt, value)
	}
	if value, ok := dauo.mutation.AddedNumberOfRings(); ok {
		_spec.AddField(dendrochronologicalanalysis.FieldNumberOfRings, field.TypeInt, value)
	}
	if value, ok := dauo.mutation.CoefficientCorrelation(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldCoefficientCorrelation, field.TypeFloat64, value)
	}
	if value, ok := dauo.mutation.AddedCoefficientCorrelation(); ok {
		_spec.AddField(dendrochronologicalanalysis.FieldCoefficientCorrelation, field.TypeFloat64, value)
	}
	if value, ok := dauo.mutation.StandardDeviation(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldStandardDeviation, field.TypeFloat64, value)
	}
	if value, ok := dauo.mutation.AddedStandardDeviation(); ok {
		_spec.AddField(dendrochronologicalanalysis.FieldStandardDeviation, field.TypeFloat64, value)
	}
	if value, ok := dauo.mutation.Sensitivity(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldSensitivity, field.TypeFloat64, value)
	}
	if value, ok := dauo.mutation.AddedSensitivity(); ok {
		_spec.AddField(dendrochronologicalanalysis.FieldSensitivity, field.TypeFloat64, value)
	}
	if value, ok := dauo.mutation.SamplingLocation(); ok {
		_spec.SetField(dendrochronologicalanalysis.FieldSamplingLocation, field.TypeString, value)
	}
	if dauo.mutation.DendrochronologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dendrochronologicalanalysis.DendrochronologyTable,
			Columns: []string{dendrochronologicalanalysis.DendrochronologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.DendrochronologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dendrochronologicalanalysis.DendrochronologyTable,
			Columns: []string{dendrochronologicalanalysis.DendrochronologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DendrochronologicalAnalysis{config: dauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dendrochronologicalanalysis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dauo.mutation.done = true
	return _node, nil
}
