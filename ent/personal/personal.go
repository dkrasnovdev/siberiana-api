// Code generated by ent, DO NOT EDIT.

package personal

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the personal type in the database.
	Label = "personal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// EdgeProxies holds the string denoting the proxies edge name in mutations.
	EdgeProxies = "proxies"
	// Table holds the table name of the personal in the database.
	Table = "personals"
	// ProxiesTable is the table that holds the proxies relation/edge.
	ProxiesTable = "proxies"
	// ProxiesInverseTable is the table name for the Proxy entity.
	// It exists in this package in order to avoid circular dependency with the "proxy" package.
	ProxiesInverseTable = "proxies"
	// ProxiesColumn is the table column denoting the proxies relation/edge.
	ProxiesColumn = "personal_proxies"
)

// Columns holds all SQL columns for personal fields.
var Columns = []string{
	FieldID,
	FieldOwnerID,
	FieldDisplayName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/dkrasnovdev/siberiana-api/ent/runtime"
var (
	Hooks [1]ent.Hook
	// OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	OwnerIDValidator func(string) error
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
)

// OrderOption defines the ordering options for the Personal queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByProxiesCount orders the results by proxies count.
func ByProxiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProxiesStep(), opts...)
	}
}

// ByProxies orders the results by proxies terms.
func ByProxies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProxiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProxiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProxiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProxiesTable, ProxiesColumn),
	)
}
