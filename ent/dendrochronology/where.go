// Code generated by ent, DO NOT EDIT.

package dendrochronology

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldUpdatedBy, v))
}

// Dating applies equality check predicate on the "dating" field. It's identical to DatingEQ.
func Dating(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDating, v))
}

// DatingStart applies equality check predicate on the "dating_start" field. It's identical to DatingStartEQ.
func DatingStart(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDatingStart, v))
}

// DatingEnd applies equality check predicate on the "dating_end" field. It's identical to DatingEndEQ.
func DatingEnd(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDatingEnd, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDisplayName, v))
}

// Abbreviation applies equality check predicate on the "abbreviation" field. It's identical to AbbreviationEQ.
func Abbreviation(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldAbbreviation, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDescription, v))
}

// ExternalLink applies equality check predicate on the "external_link" field. It's identical to ExternalLinkEQ.
func ExternalLink(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldExternalLink, v))
}

// PrimaryImageURL applies equality check predicate on the "primary_image_url" field. It's identical to PrimaryImageURLEQ.
func PrimaryImageURL(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldPrimaryImageURL, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDeletedBy, v))
}

// AnalysisData applies equality check predicate on the "analysis_data" field. It's identical to AnalysisDataEQ.
func AnalysisData(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldAnalysisData, v))
}

// AnalysisURL applies equality check predicate on the "analysis_url" field. It's identical to AnalysisURLEQ.
func AnalysisURL(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldAnalysisURL, v))
}

// DataURL applies equality check predicate on the "data_url" field. It's identical to DataURLEQ.
func DataURL(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDataURL, v))
}

// ChartURL applies equality check predicate on the "chart_url" field. It's identical to ChartURLEQ.
func ChartURL(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldChartURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DatingEQ applies the EQ predicate on the "dating" field.
func DatingEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDating, v))
}

// DatingNEQ applies the NEQ predicate on the "dating" field.
func DatingNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldDating, v))
}

// DatingIn applies the In predicate on the "dating" field.
func DatingIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldDating, vs...))
}

// DatingNotIn applies the NotIn predicate on the "dating" field.
func DatingNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldDating, vs...))
}

// DatingGT applies the GT predicate on the "dating" field.
func DatingGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldDating, v))
}

// DatingGTE applies the GTE predicate on the "dating" field.
func DatingGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldDating, v))
}

// DatingLT applies the LT predicate on the "dating" field.
func DatingLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldDating, v))
}

// DatingLTE applies the LTE predicate on the "dating" field.
func DatingLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldDating, v))
}

// DatingContains applies the Contains predicate on the "dating" field.
func DatingContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldDating, v))
}

// DatingHasPrefix applies the HasPrefix predicate on the "dating" field.
func DatingHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldDating, v))
}

// DatingHasSuffix applies the HasSuffix predicate on the "dating" field.
func DatingHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldDating, v))
}

// DatingIsNil applies the IsNil predicate on the "dating" field.
func DatingIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldDating))
}

// DatingNotNil applies the NotNil predicate on the "dating" field.
func DatingNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldDating))
}

// DatingEqualFold applies the EqualFold predicate on the "dating" field.
func DatingEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldDating, v))
}

// DatingContainsFold applies the ContainsFold predicate on the "dating" field.
func DatingContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldDating, v))
}

// DatingStartEQ applies the EQ predicate on the "dating_start" field.
func DatingStartEQ(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDatingStart, v))
}

// DatingStartNEQ applies the NEQ predicate on the "dating_start" field.
func DatingStartNEQ(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldDatingStart, v))
}

// DatingStartIn applies the In predicate on the "dating_start" field.
func DatingStartIn(vs ...int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldDatingStart, vs...))
}

// DatingStartNotIn applies the NotIn predicate on the "dating_start" field.
func DatingStartNotIn(vs ...int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldDatingStart, vs...))
}

// DatingStartGT applies the GT predicate on the "dating_start" field.
func DatingStartGT(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldDatingStart, v))
}

// DatingStartGTE applies the GTE predicate on the "dating_start" field.
func DatingStartGTE(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldDatingStart, v))
}

// DatingStartLT applies the LT predicate on the "dating_start" field.
func DatingStartLT(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldDatingStart, v))
}

// DatingStartLTE applies the LTE predicate on the "dating_start" field.
func DatingStartLTE(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldDatingStart, v))
}

// DatingStartIsNil applies the IsNil predicate on the "dating_start" field.
func DatingStartIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldDatingStart))
}

// DatingStartNotNil applies the NotNil predicate on the "dating_start" field.
func DatingStartNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldDatingStart))
}

// DatingEndEQ applies the EQ predicate on the "dating_end" field.
func DatingEndEQ(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDatingEnd, v))
}

// DatingEndNEQ applies the NEQ predicate on the "dating_end" field.
func DatingEndNEQ(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldDatingEnd, v))
}

// DatingEndIn applies the In predicate on the "dating_end" field.
func DatingEndIn(vs ...int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldDatingEnd, vs...))
}

// DatingEndNotIn applies the NotIn predicate on the "dating_end" field.
func DatingEndNotIn(vs ...int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldDatingEnd, vs...))
}

// DatingEndGT applies the GT predicate on the "dating_end" field.
func DatingEndGT(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldDatingEnd, v))
}

// DatingEndGTE applies the GTE predicate on the "dating_end" field.
func DatingEndGTE(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldDatingEnd, v))
}

// DatingEndLT applies the LT predicate on the "dating_end" field.
func DatingEndLT(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldDatingEnd, v))
}

// DatingEndLTE applies the LTE predicate on the "dating_end" field.
func DatingEndLTE(v int) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldDatingEnd, v))
}

// DatingEndIsNil applies the IsNil predicate on the "dating_end" field.
func DatingEndIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldDatingEnd))
}

// DatingEndNotNil applies the NotNil predicate on the "dating_end" field.
func DatingEndNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldDatingEnd))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldDisplayName, v))
}

// AbbreviationEQ applies the EQ predicate on the "abbreviation" field.
func AbbreviationEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldAbbreviation, v))
}

// AbbreviationNEQ applies the NEQ predicate on the "abbreviation" field.
func AbbreviationNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldAbbreviation, v))
}

// AbbreviationIn applies the In predicate on the "abbreviation" field.
func AbbreviationIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldAbbreviation, vs...))
}

// AbbreviationNotIn applies the NotIn predicate on the "abbreviation" field.
func AbbreviationNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldAbbreviation, vs...))
}

// AbbreviationGT applies the GT predicate on the "abbreviation" field.
func AbbreviationGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldAbbreviation, v))
}

// AbbreviationGTE applies the GTE predicate on the "abbreviation" field.
func AbbreviationGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldAbbreviation, v))
}

// AbbreviationLT applies the LT predicate on the "abbreviation" field.
func AbbreviationLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldAbbreviation, v))
}

// AbbreviationLTE applies the LTE predicate on the "abbreviation" field.
func AbbreviationLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldAbbreviation, v))
}

// AbbreviationContains applies the Contains predicate on the "abbreviation" field.
func AbbreviationContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldAbbreviation, v))
}

// AbbreviationHasPrefix applies the HasPrefix predicate on the "abbreviation" field.
func AbbreviationHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldAbbreviation, v))
}

// AbbreviationHasSuffix applies the HasSuffix predicate on the "abbreviation" field.
func AbbreviationHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldAbbreviation, v))
}

// AbbreviationIsNil applies the IsNil predicate on the "abbreviation" field.
func AbbreviationIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldAbbreviation))
}

// AbbreviationNotNil applies the NotNil predicate on the "abbreviation" field.
func AbbreviationNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldAbbreviation))
}

// AbbreviationEqualFold applies the EqualFold predicate on the "abbreviation" field.
func AbbreviationEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldAbbreviation, v))
}

// AbbreviationContainsFold applies the ContainsFold predicate on the "abbreviation" field.
func AbbreviationContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldAbbreviation, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldDescription, v))
}

// ExternalLinkEQ applies the EQ predicate on the "external_link" field.
func ExternalLinkEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldExternalLink, v))
}

// ExternalLinkNEQ applies the NEQ predicate on the "external_link" field.
func ExternalLinkNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldExternalLink, v))
}

// ExternalLinkIn applies the In predicate on the "external_link" field.
func ExternalLinkIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldExternalLink, vs...))
}

// ExternalLinkNotIn applies the NotIn predicate on the "external_link" field.
func ExternalLinkNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldExternalLink, vs...))
}

// ExternalLinkGT applies the GT predicate on the "external_link" field.
func ExternalLinkGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldExternalLink, v))
}

// ExternalLinkGTE applies the GTE predicate on the "external_link" field.
func ExternalLinkGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldExternalLink, v))
}

// ExternalLinkLT applies the LT predicate on the "external_link" field.
func ExternalLinkLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldExternalLink, v))
}

// ExternalLinkLTE applies the LTE predicate on the "external_link" field.
func ExternalLinkLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldExternalLink, v))
}

// ExternalLinkContains applies the Contains predicate on the "external_link" field.
func ExternalLinkContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldExternalLink, v))
}

// ExternalLinkHasPrefix applies the HasPrefix predicate on the "external_link" field.
func ExternalLinkHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldExternalLink, v))
}

// ExternalLinkHasSuffix applies the HasSuffix predicate on the "external_link" field.
func ExternalLinkHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldExternalLink, v))
}

// ExternalLinkIsNil applies the IsNil predicate on the "external_link" field.
func ExternalLinkIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldExternalLink))
}

// ExternalLinkNotNil applies the NotNil predicate on the "external_link" field.
func ExternalLinkNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldExternalLink))
}

// ExternalLinkEqualFold applies the EqualFold predicate on the "external_link" field.
func ExternalLinkEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldExternalLink, v))
}

// ExternalLinkContainsFold applies the ContainsFold predicate on the "external_link" field.
func ExternalLinkContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldExternalLink, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldStatus))
}

// PrimaryImageURLEQ applies the EQ predicate on the "primary_image_url" field.
func PrimaryImageURLEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldPrimaryImageURL, v))
}

// PrimaryImageURLNEQ applies the NEQ predicate on the "primary_image_url" field.
func PrimaryImageURLNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldPrimaryImageURL, v))
}

// PrimaryImageURLIn applies the In predicate on the "primary_image_url" field.
func PrimaryImageURLIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldPrimaryImageURL, vs...))
}

// PrimaryImageURLNotIn applies the NotIn predicate on the "primary_image_url" field.
func PrimaryImageURLNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldPrimaryImageURL, vs...))
}

// PrimaryImageURLGT applies the GT predicate on the "primary_image_url" field.
func PrimaryImageURLGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldPrimaryImageURL, v))
}

// PrimaryImageURLGTE applies the GTE predicate on the "primary_image_url" field.
func PrimaryImageURLGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldPrimaryImageURL, v))
}

// PrimaryImageURLLT applies the LT predicate on the "primary_image_url" field.
func PrimaryImageURLLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldPrimaryImageURL, v))
}

// PrimaryImageURLLTE applies the LTE predicate on the "primary_image_url" field.
func PrimaryImageURLLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldPrimaryImageURL, v))
}

// PrimaryImageURLContains applies the Contains predicate on the "primary_image_url" field.
func PrimaryImageURLContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldPrimaryImageURL, v))
}

// PrimaryImageURLHasPrefix applies the HasPrefix predicate on the "primary_image_url" field.
func PrimaryImageURLHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldPrimaryImageURL, v))
}

// PrimaryImageURLHasSuffix applies the HasSuffix predicate on the "primary_image_url" field.
func PrimaryImageURLHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldPrimaryImageURL, v))
}

// PrimaryImageURLIsNil applies the IsNil predicate on the "primary_image_url" field.
func PrimaryImageURLIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldPrimaryImageURL))
}

// PrimaryImageURLNotNil applies the NotNil predicate on the "primary_image_url" field.
func PrimaryImageURLNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldPrimaryImageURL))
}

// PrimaryImageURLEqualFold applies the EqualFold predicate on the "primary_image_url" field.
func PrimaryImageURLEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldPrimaryImageURL, v))
}

// PrimaryImageURLContainsFold applies the ContainsFold predicate on the "primary_image_url" field.
func PrimaryImageURLContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldPrimaryImageURL, v))
}

// AdditionalImagesUrlsIsNil applies the IsNil predicate on the "additional_images_urls" field.
func AdditionalImagesUrlsIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldAdditionalImagesUrls))
}

// AdditionalImagesUrlsNotNil applies the NotNil predicate on the "additional_images_urls" field.
func AdditionalImagesUrlsNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldAdditionalImagesUrls))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldDeletedBy, v))
}

// AnalysisDataEQ applies the EQ predicate on the "analysis_data" field.
func AnalysisDataEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldAnalysisData, v))
}

// AnalysisDataNEQ applies the NEQ predicate on the "analysis_data" field.
func AnalysisDataNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldAnalysisData, v))
}

// AnalysisDataIn applies the In predicate on the "analysis_data" field.
func AnalysisDataIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldAnalysisData, vs...))
}

// AnalysisDataNotIn applies the NotIn predicate on the "analysis_data" field.
func AnalysisDataNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldAnalysisData, vs...))
}

// AnalysisDataGT applies the GT predicate on the "analysis_data" field.
func AnalysisDataGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldAnalysisData, v))
}

// AnalysisDataGTE applies the GTE predicate on the "analysis_data" field.
func AnalysisDataGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldAnalysisData, v))
}

// AnalysisDataLT applies the LT predicate on the "analysis_data" field.
func AnalysisDataLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldAnalysisData, v))
}

// AnalysisDataLTE applies the LTE predicate on the "analysis_data" field.
func AnalysisDataLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldAnalysisData, v))
}

// AnalysisDataContains applies the Contains predicate on the "analysis_data" field.
func AnalysisDataContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldAnalysisData, v))
}

// AnalysisDataHasPrefix applies the HasPrefix predicate on the "analysis_data" field.
func AnalysisDataHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldAnalysisData, v))
}

// AnalysisDataHasSuffix applies the HasSuffix predicate on the "analysis_data" field.
func AnalysisDataHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldAnalysisData, v))
}

// AnalysisDataIsNil applies the IsNil predicate on the "analysis_data" field.
func AnalysisDataIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldAnalysisData))
}

// AnalysisDataNotNil applies the NotNil predicate on the "analysis_data" field.
func AnalysisDataNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldAnalysisData))
}

// AnalysisDataEqualFold applies the EqualFold predicate on the "analysis_data" field.
func AnalysisDataEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldAnalysisData, v))
}

// AnalysisDataContainsFold applies the ContainsFold predicate on the "analysis_data" field.
func AnalysisDataContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldAnalysisData, v))
}

// AnalysisURLEQ applies the EQ predicate on the "analysis_url" field.
func AnalysisURLEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldAnalysisURL, v))
}

// AnalysisURLNEQ applies the NEQ predicate on the "analysis_url" field.
func AnalysisURLNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldAnalysisURL, v))
}

// AnalysisURLIn applies the In predicate on the "analysis_url" field.
func AnalysisURLIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldAnalysisURL, vs...))
}

// AnalysisURLNotIn applies the NotIn predicate on the "analysis_url" field.
func AnalysisURLNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldAnalysisURL, vs...))
}

// AnalysisURLGT applies the GT predicate on the "analysis_url" field.
func AnalysisURLGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldAnalysisURL, v))
}

// AnalysisURLGTE applies the GTE predicate on the "analysis_url" field.
func AnalysisURLGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldAnalysisURL, v))
}

// AnalysisURLLT applies the LT predicate on the "analysis_url" field.
func AnalysisURLLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldAnalysisURL, v))
}

// AnalysisURLLTE applies the LTE predicate on the "analysis_url" field.
func AnalysisURLLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldAnalysisURL, v))
}

// AnalysisURLContains applies the Contains predicate on the "analysis_url" field.
func AnalysisURLContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldAnalysisURL, v))
}

// AnalysisURLHasPrefix applies the HasPrefix predicate on the "analysis_url" field.
func AnalysisURLHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldAnalysisURL, v))
}

// AnalysisURLHasSuffix applies the HasSuffix predicate on the "analysis_url" field.
func AnalysisURLHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldAnalysisURL, v))
}

// AnalysisURLIsNil applies the IsNil predicate on the "analysis_url" field.
func AnalysisURLIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldAnalysisURL))
}

// AnalysisURLNotNil applies the NotNil predicate on the "analysis_url" field.
func AnalysisURLNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldAnalysisURL))
}

// AnalysisURLEqualFold applies the EqualFold predicate on the "analysis_url" field.
func AnalysisURLEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldAnalysisURL, v))
}

// AnalysisURLContainsFold applies the ContainsFold predicate on the "analysis_url" field.
func AnalysisURLContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldAnalysisURL, v))
}

// DataURLEQ applies the EQ predicate on the "data_url" field.
func DataURLEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldDataURL, v))
}

// DataURLNEQ applies the NEQ predicate on the "data_url" field.
func DataURLNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldDataURL, v))
}

// DataURLIn applies the In predicate on the "data_url" field.
func DataURLIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldDataURL, vs...))
}

// DataURLNotIn applies the NotIn predicate on the "data_url" field.
func DataURLNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldDataURL, vs...))
}

// DataURLGT applies the GT predicate on the "data_url" field.
func DataURLGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldDataURL, v))
}

// DataURLGTE applies the GTE predicate on the "data_url" field.
func DataURLGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldDataURL, v))
}

// DataURLLT applies the LT predicate on the "data_url" field.
func DataURLLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldDataURL, v))
}

// DataURLLTE applies the LTE predicate on the "data_url" field.
func DataURLLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldDataURL, v))
}

// DataURLContains applies the Contains predicate on the "data_url" field.
func DataURLContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldDataURL, v))
}

// DataURLHasPrefix applies the HasPrefix predicate on the "data_url" field.
func DataURLHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldDataURL, v))
}

// DataURLHasSuffix applies the HasSuffix predicate on the "data_url" field.
func DataURLHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldDataURL, v))
}

// DataURLIsNil applies the IsNil predicate on the "data_url" field.
func DataURLIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldDataURL))
}

// DataURLNotNil applies the NotNil predicate on the "data_url" field.
func DataURLNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldDataURL))
}

// DataURLEqualFold applies the EqualFold predicate on the "data_url" field.
func DataURLEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldDataURL, v))
}

// DataURLContainsFold applies the ContainsFold predicate on the "data_url" field.
func DataURLContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldDataURL, v))
}

// ChartURLEQ applies the EQ predicate on the "chart_url" field.
func ChartURLEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEQ(FieldChartURL, v))
}

// ChartURLNEQ applies the NEQ predicate on the "chart_url" field.
func ChartURLNEQ(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNEQ(FieldChartURL, v))
}

// ChartURLIn applies the In predicate on the "chart_url" field.
func ChartURLIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIn(FieldChartURL, vs...))
}

// ChartURLNotIn applies the NotIn predicate on the "chart_url" field.
func ChartURLNotIn(vs ...string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotIn(FieldChartURL, vs...))
}

// ChartURLGT applies the GT predicate on the "chart_url" field.
func ChartURLGT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGT(FieldChartURL, v))
}

// ChartURLGTE applies the GTE predicate on the "chart_url" field.
func ChartURLGTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldGTE(FieldChartURL, v))
}

// ChartURLLT applies the LT predicate on the "chart_url" field.
func ChartURLLT(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLT(FieldChartURL, v))
}

// ChartURLLTE applies the LTE predicate on the "chart_url" field.
func ChartURLLTE(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldLTE(FieldChartURL, v))
}

// ChartURLContains applies the Contains predicate on the "chart_url" field.
func ChartURLContains(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContains(FieldChartURL, v))
}

// ChartURLHasPrefix applies the HasPrefix predicate on the "chart_url" field.
func ChartURLHasPrefix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasPrefix(FieldChartURL, v))
}

// ChartURLHasSuffix applies the HasSuffix predicate on the "chart_url" field.
func ChartURLHasSuffix(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldHasSuffix(FieldChartURL, v))
}

// ChartURLIsNil applies the IsNil predicate on the "chart_url" field.
func ChartURLIsNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldIsNull(FieldChartURL))
}

// ChartURLNotNil applies the NotNil predicate on the "chart_url" field.
func ChartURLNotNil() predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldNotNull(FieldChartURL))
}

// ChartURLEqualFold applies the EqualFold predicate on the "chart_url" field.
func ChartURLEqualFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldEqualFold(FieldChartURL, v))
}

// ChartURLContainsFold applies the ContainsFold predicate on the "chart_url" field.
func ChartURLContainsFold(v string) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.FieldContainsFold(FieldChartURL, v))
}

// HasAnalysis applies the HasEdge predicate on the "analysis" edge.
func HasAnalysis() predicate.Dendrochronology {
	return predicate.Dendrochronology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, AnalysisTable, AnalysisColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnalysisWith applies the HasEdge predicate on the "analysis" edge with a given conditions (other predicates).
func HasAnalysisWith(preds ...predicate.DendrochronologicalAnalysis) predicate.Dendrochronology {
	return predicate.Dendrochronology(func(s *sql.Selector) {
		step := newAnalysisStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Dendrochronology) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Dendrochronology) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Dendrochronology) predicate.Dendrochronology {
	return predicate.Dendrochronology(sql.NotPredicates(p))
}
