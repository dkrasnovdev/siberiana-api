// Code generated by ent, DO NOT EDIT.

package dendrochronology

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the dendrochronology type in the database.
	Label = "dendrochronology"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDating holds the string denoting the dating field in the database.
	FieldDating = "dating"
	// FieldDatingStart holds the string denoting the dating_start field in the database.
	FieldDatingStart = "dating_start"
	// FieldDatingEnd holds the string denoting the dating_end field in the database.
	FieldDatingEnd = "dating_end"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldAbbreviation holds the string denoting the abbreviation field in the database.
	FieldAbbreviation = "abbreviation"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldExternalLink holds the string denoting the external_link field in the database.
	FieldExternalLink = "external_link"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPrimaryImageURL holds the string denoting the primary_image_url field in the database.
	FieldPrimaryImageURL = "primary_image_url"
	// FieldAdditionalImagesUrls holds the string denoting the additional_images_urls field in the database.
	FieldAdditionalImagesUrls = "additional_images_urls"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldAnalysisData holds the string denoting the analysis_data field in the database.
	FieldAnalysisData = "analysis_data"
	// FieldAnalysisURL holds the string denoting the analysis_url field in the database.
	FieldAnalysisURL = "analysis_url"
	// FieldDataURL holds the string denoting the data_url field in the database.
	FieldDataURL = "data_url"
	// FieldChartURL holds the string denoting the chart_url field in the database.
	FieldChartURL = "chart_url"
	// EdgeAnalysis holds the string denoting the analysis edge name in mutations.
	EdgeAnalysis = "analysis"
	// Table holds the table name of the dendrochronology in the database.
	Table = "dendrochronologies"
	// AnalysisTable is the table that holds the analysis relation/edge.
	AnalysisTable = "dendrochronological_analyses"
	// AnalysisInverseTable is the table name for the DendrochronologicalAnalysis entity.
	// It exists in this package in order to avoid circular dependency with the "dendrochronologicalanalysis" package.
	AnalysisInverseTable = "dendrochronological_analyses"
	// AnalysisColumn is the table column denoting the analysis relation/edge.
	AnalysisColumn = "dendrochronological_analysis_dendrochronology"
)

// Columns holds all SQL columns for dendrochronology fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldDating,
	FieldDatingStart,
	FieldDatingEnd,
	FieldDisplayName,
	FieldAbbreviation,
	FieldDescription,
	FieldExternalLink,
	FieldStatus,
	FieldPrimaryImageURL,
	FieldAdditionalImagesUrls,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldAnalysisData,
	FieldAnalysisURL,
	FieldDataURL,
	FieldChartURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/dkrasnovdev/siberiana-api/ent/runtime"
var (
	Hooks        [3]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusDraft is the default value of the Status enum.
const DefaultStatus = StatusDraft

// Status values.
const (
	StatusListed   Status = "listed"
	StatusUnlisted Status = "unlisted"
	StatusDraft    Status = "draft"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusListed, StatusUnlisted, StatusDraft:
		return nil
	default:
		return fmt.Errorf("dendrochronology: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Dendrochronology queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDating orders the results by the dating field.
func ByDating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDating, opts...).ToFunc()
}

// ByDatingStart orders the results by the dating_start field.
func ByDatingStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDatingStart, opts...).ToFunc()
}

// ByDatingEnd orders the results by the dating_end field.
func ByDatingEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDatingEnd, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByAbbreviation orders the results by the abbreviation field.
func ByAbbreviation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbbreviation, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByExternalLink orders the results by the external_link field.
func ByExternalLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalLink, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPrimaryImageURL orders the results by the primary_image_url field.
func ByPrimaryImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryImageURL, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByAnalysisData orders the results by the analysis_data field.
func ByAnalysisData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnalysisData, opts...).ToFunc()
}

// ByAnalysisURL orders the results by the analysis_url field.
func ByAnalysisURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnalysisURL, opts...).ToFunc()
}

// ByDataURL orders the results by the data_url field.
func ByDataURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataURL, opts...).ToFunc()
}

// ByChartURL orders the results by the chart_url field.
func ByChartURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChartURL, opts...).ToFunc()
}

// ByAnalysisCount orders the results by analysis count.
func ByAnalysisCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnalysisStep(), opts...)
	}
}

// ByAnalysis orders the results by analysis terms.
func ByAnalysis(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnalysisStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAnalysisStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnalysisInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AnalysisTable, AnalysisColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
