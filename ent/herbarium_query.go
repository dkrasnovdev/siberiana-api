// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/familia"
	"github.com/dkrasnovdev/siberiana-api/ent/genus"
	"github.com/dkrasnovdev/siberiana-api/ent/group"
	"github.com/dkrasnovdev/siberiana-api/ent/herbarium"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/personalcollection"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
	"github.com/dkrasnovdev/siberiana-api/ent/species"
)

// HerbariumQuery is the builder for querying Herbarium entities.
type HerbariumQuery struct {
	config
	ctx                         *QueryContext
	order                       []herbarium.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.Herbarium
	withAuthor                  *PersonQuery
	withFamilia                 *FamiliaQuery
	withGenus                   *GenusQuery
	withGroup                   *GroupQuery
	withSpecies                 *SpeciesQuery
	withCollection              *CollectionQuery
	withCountry                 *CountryQuery
	withSettlement              *SettlementQuery
	withDistrict                *DistrictQuery
	withRegion                  *RegionQuery
	withPersonalCollection      *PersonalCollectionQuery
	withFKs                     bool
	modifiers                   []func(*sql.Selector)
	loadTotal                   []func(context.Context, []*Herbarium) error
	withNamedPersonalCollection map[string]*PersonalCollectionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HerbariumQuery builder.
func (hq *HerbariumQuery) Where(ps ...predicate.Herbarium) *HerbariumQuery {
	hq.predicates = append(hq.predicates, ps...)
	return hq
}

// Limit the number of records to be returned by this query.
func (hq *HerbariumQuery) Limit(limit int) *HerbariumQuery {
	hq.ctx.Limit = &limit
	return hq
}

// Offset to start from.
func (hq *HerbariumQuery) Offset(offset int) *HerbariumQuery {
	hq.ctx.Offset = &offset
	return hq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hq *HerbariumQuery) Unique(unique bool) *HerbariumQuery {
	hq.ctx.Unique = &unique
	return hq
}

// Order specifies how the records should be ordered.
func (hq *HerbariumQuery) Order(o ...herbarium.OrderOption) *HerbariumQuery {
	hq.order = append(hq.order, o...)
	return hq
}

// QueryAuthor chains the current query on the "author" edge.
func (hq *HerbariumQuery) QueryAuthor() *PersonQuery {
	query := (&PersonClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(herbarium.Table, herbarium.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, herbarium.AuthorTable, herbarium.AuthorColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFamilia chains the current query on the "familia" edge.
func (hq *HerbariumQuery) QueryFamilia() *FamiliaQuery {
	query := (&FamiliaClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(herbarium.Table, herbarium.FieldID, selector),
			sqlgraph.To(familia.Table, familia.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, herbarium.FamiliaTable, herbarium.FamiliaColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGenus chains the current query on the "genus" edge.
func (hq *HerbariumQuery) QueryGenus() *GenusQuery {
	query := (&GenusClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(herbarium.Table, herbarium.FieldID, selector),
			sqlgraph.To(genus.Table, genus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, herbarium.GenusTable, herbarium.GenusColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroup chains the current query on the "group" edge.
func (hq *HerbariumQuery) QueryGroup() *GroupQuery {
	query := (&GroupClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(herbarium.Table, herbarium.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, herbarium.GroupTable, herbarium.GroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySpecies chains the current query on the "species" edge.
func (hq *HerbariumQuery) QuerySpecies() *SpeciesQuery {
	query := (&SpeciesClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(herbarium.Table, herbarium.FieldID, selector),
			sqlgraph.To(species.Table, species.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, herbarium.SpeciesTable, herbarium.SpeciesColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCollection chains the current query on the "collection" edge.
func (hq *HerbariumQuery) QueryCollection() *CollectionQuery {
	query := (&CollectionClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(herbarium.Table, herbarium.FieldID, selector),
			sqlgraph.To(collection.Table, collection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, herbarium.CollectionTable, herbarium.CollectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountry chains the current query on the "country" edge.
func (hq *HerbariumQuery) QueryCountry() *CountryQuery {
	query := (&CountryClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(herbarium.Table, herbarium.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, herbarium.CountryTable, herbarium.CountryColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySettlement chains the current query on the "settlement" edge.
func (hq *HerbariumQuery) QuerySettlement() *SettlementQuery {
	query := (&SettlementClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(herbarium.Table, herbarium.FieldID, selector),
			sqlgraph.To(settlement.Table, settlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, herbarium.SettlementTable, herbarium.SettlementColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDistrict chains the current query on the "district" edge.
func (hq *HerbariumQuery) QueryDistrict() *DistrictQuery {
	query := (&DistrictClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(herbarium.Table, herbarium.FieldID, selector),
			sqlgraph.To(district.Table, district.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, herbarium.DistrictTable, herbarium.DistrictColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRegion chains the current query on the "region" edge.
func (hq *HerbariumQuery) QueryRegion() *RegionQuery {
	query := (&RegionClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(herbarium.Table, herbarium.FieldID, selector),
			sqlgraph.To(region.Table, region.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, herbarium.RegionTable, herbarium.RegionColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPersonalCollection chains the current query on the "personal_collection" edge.
func (hq *HerbariumQuery) QueryPersonalCollection() *PersonalCollectionQuery {
	query := (&PersonalCollectionClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(herbarium.Table, herbarium.FieldID, selector),
			sqlgraph.To(personalcollection.Table, personalcollection.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, herbarium.PersonalCollectionTable, herbarium.PersonalCollectionPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Herbarium entity from the query.
// Returns a *NotFoundError when no Herbarium was found.
func (hq *HerbariumQuery) First(ctx context.Context) (*Herbarium, error) {
	nodes, err := hq.Limit(1).All(setContextOp(ctx, hq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{herbarium.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hq *HerbariumQuery) FirstX(ctx context.Context) *Herbarium {
	node, err := hq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Herbarium ID from the query.
// Returns a *NotFoundError when no Herbarium ID was found.
func (hq *HerbariumQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hq.Limit(1).IDs(setContextOp(ctx, hq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{herbarium.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hq *HerbariumQuery) FirstIDX(ctx context.Context) int {
	id, err := hq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Herbarium entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Herbarium entity is found.
// Returns a *NotFoundError when no Herbarium entities are found.
func (hq *HerbariumQuery) Only(ctx context.Context) (*Herbarium, error) {
	nodes, err := hq.Limit(2).All(setContextOp(ctx, hq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{herbarium.Label}
	default:
		return nil, &NotSingularError{herbarium.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hq *HerbariumQuery) OnlyX(ctx context.Context) *Herbarium {
	node, err := hq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Herbarium ID in the query.
// Returns a *NotSingularError when more than one Herbarium ID is found.
// Returns a *NotFoundError when no entities are found.
func (hq *HerbariumQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hq.Limit(2).IDs(setContextOp(ctx, hq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{herbarium.Label}
	default:
		err = &NotSingularError{herbarium.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hq *HerbariumQuery) OnlyIDX(ctx context.Context) int {
	id, err := hq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Herbaria.
func (hq *HerbariumQuery) All(ctx context.Context) ([]*Herbarium, error) {
	ctx = setContextOp(ctx, hq.ctx, "All")
	if err := hq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Herbarium, *HerbariumQuery]()
	return withInterceptors[[]*Herbarium](ctx, hq, qr, hq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hq *HerbariumQuery) AllX(ctx context.Context) []*Herbarium {
	nodes, err := hq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Herbarium IDs.
func (hq *HerbariumQuery) IDs(ctx context.Context) (ids []int, err error) {
	if hq.ctx.Unique == nil && hq.path != nil {
		hq.Unique(true)
	}
	ctx = setContextOp(ctx, hq.ctx, "IDs")
	if err = hq.Select(herbarium.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hq *HerbariumQuery) IDsX(ctx context.Context) []int {
	ids, err := hq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hq *HerbariumQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hq.ctx, "Count")
	if err := hq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hq, querierCount[*HerbariumQuery](), hq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hq *HerbariumQuery) CountX(ctx context.Context) int {
	count, err := hq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hq *HerbariumQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hq.ctx, "Exist")
	switch _, err := hq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hq *HerbariumQuery) ExistX(ctx context.Context) bool {
	exist, err := hq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HerbariumQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hq *HerbariumQuery) Clone() *HerbariumQuery {
	if hq == nil {
		return nil
	}
	return &HerbariumQuery{
		config:                 hq.config,
		ctx:                    hq.ctx.Clone(),
		order:                  append([]herbarium.OrderOption{}, hq.order...),
		inters:                 append([]Interceptor{}, hq.inters...),
		predicates:             append([]predicate.Herbarium{}, hq.predicates...),
		withAuthor:             hq.withAuthor.Clone(),
		withFamilia:            hq.withFamilia.Clone(),
		withGenus:              hq.withGenus.Clone(),
		withGroup:              hq.withGroup.Clone(),
		withSpecies:            hq.withSpecies.Clone(),
		withCollection:         hq.withCollection.Clone(),
		withCountry:            hq.withCountry.Clone(),
		withSettlement:         hq.withSettlement.Clone(),
		withDistrict:           hq.withDistrict.Clone(),
		withRegion:             hq.withRegion.Clone(),
		withPersonalCollection: hq.withPersonalCollection.Clone(),
		// clone intermediate query.
		sql:  hq.sql.Clone(),
		path: hq.path,
	}
}

// WithAuthor tells the query-builder to eager-load the nodes that are connected to
// the "author" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HerbariumQuery) WithAuthor(opts ...func(*PersonQuery)) *HerbariumQuery {
	query := (&PersonClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withAuthor = query
	return hq
}

// WithFamilia tells the query-builder to eager-load the nodes that are connected to
// the "familia" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HerbariumQuery) WithFamilia(opts ...func(*FamiliaQuery)) *HerbariumQuery {
	query := (&FamiliaClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withFamilia = query
	return hq
}

// WithGenus tells the query-builder to eager-load the nodes that are connected to
// the "genus" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HerbariumQuery) WithGenus(opts ...func(*GenusQuery)) *HerbariumQuery {
	query := (&GenusClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withGenus = query
	return hq
}

// WithGroup tells the query-builder to eager-load the nodes that are connected to
// the "group" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HerbariumQuery) WithGroup(opts ...func(*GroupQuery)) *HerbariumQuery {
	query := (&GroupClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withGroup = query
	return hq
}

// WithSpecies tells the query-builder to eager-load the nodes that are connected to
// the "species" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HerbariumQuery) WithSpecies(opts ...func(*SpeciesQuery)) *HerbariumQuery {
	query := (&SpeciesClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withSpecies = query
	return hq
}

// WithCollection tells the query-builder to eager-load the nodes that are connected to
// the "collection" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HerbariumQuery) WithCollection(opts ...func(*CollectionQuery)) *HerbariumQuery {
	query := (&CollectionClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withCollection = query
	return hq
}

// WithCountry tells the query-builder to eager-load the nodes that are connected to
// the "country" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HerbariumQuery) WithCountry(opts ...func(*CountryQuery)) *HerbariumQuery {
	query := (&CountryClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withCountry = query
	return hq
}

// WithSettlement tells the query-builder to eager-load the nodes that are connected to
// the "settlement" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HerbariumQuery) WithSettlement(opts ...func(*SettlementQuery)) *HerbariumQuery {
	query := (&SettlementClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withSettlement = query
	return hq
}

// WithDistrict tells the query-builder to eager-load the nodes that are connected to
// the "district" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HerbariumQuery) WithDistrict(opts ...func(*DistrictQuery)) *HerbariumQuery {
	query := (&DistrictClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withDistrict = query
	return hq
}

// WithRegion tells the query-builder to eager-load the nodes that are connected to
// the "region" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HerbariumQuery) WithRegion(opts ...func(*RegionQuery)) *HerbariumQuery {
	query := (&RegionClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withRegion = query
	return hq
}

// WithPersonalCollection tells the query-builder to eager-load the nodes that are connected to
// the "personal_collection" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HerbariumQuery) WithPersonalCollection(opts ...func(*PersonalCollectionQuery)) *HerbariumQuery {
	query := (&PersonalCollectionClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withPersonalCollection = query
	return hq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Herbarium.Query().
//		GroupBy(herbarium.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hq *HerbariumQuery) GroupBy(field string, fields ...string) *HerbariumGroupBy {
	hq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HerbariumGroupBy{build: hq}
	grbuild.flds = &hq.ctx.Fields
	grbuild.label = herbarium.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Herbarium.Query().
//		Select(herbarium.FieldCreatedAt).
//		Scan(ctx, &v)
func (hq *HerbariumQuery) Select(fields ...string) *HerbariumSelect {
	hq.ctx.Fields = append(hq.ctx.Fields, fields...)
	sbuild := &HerbariumSelect{HerbariumQuery: hq}
	sbuild.label = herbarium.Label
	sbuild.flds, sbuild.scan = &hq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HerbariumSelect configured with the given aggregations.
func (hq *HerbariumQuery) Aggregate(fns ...AggregateFunc) *HerbariumSelect {
	return hq.Select().Aggregate(fns...)
}

func (hq *HerbariumQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hq); err != nil {
				return err
			}
		}
	}
	for _, f := range hq.ctx.Fields {
		if !herbarium.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hq.path != nil {
		prev, err := hq.path(ctx)
		if err != nil {
			return err
		}
		hq.sql = prev
	}
	if herbarium.Policy == nil {
		return errors.New("ent: uninitialized herbarium.Policy (forgotten import ent/runtime?)")
	}
	if err := herbarium.Policy.EvalQuery(ctx, hq); err != nil {
		return err
	}
	return nil
}

func (hq *HerbariumQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Herbarium, error) {
	var (
		nodes       = []*Herbarium{}
		withFKs     = hq.withFKs
		_spec       = hq.querySpec()
		loadedTypes = [11]bool{
			hq.withAuthor != nil,
			hq.withFamilia != nil,
			hq.withGenus != nil,
			hq.withGroup != nil,
			hq.withSpecies != nil,
			hq.withCollection != nil,
			hq.withCountry != nil,
			hq.withSettlement != nil,
			hq.withDistrict != nil,
			hq.withRegion != nil,
			hq.withPersonalCollection != nil,
		}
	)
	if hq.withAuthor != nil || hq.withFamilia != nil || hq.withGenus != nil || hq.withGroup != nil || hq.withSpecies != nil || hq.withCollection != nil || hq.withCountry != nil || hq.withSettlement != nil || hq.withDistrict != nil || hq.withRegion != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, herbarium.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Herbarium).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Herbarium{config: hq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hq.modifiers) > 0 {
		_spec.Modifiers = hq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hq.withAuthor; query != nil {
		if err := hq.loadAuthor(ctx, query, nodes, nil,
			func(n *Herbarium, e *Person) { n.Edges.Author = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withFamilia; query != nil {
		if err := hq.loadFamilia(ctx, query, nodes, nil,
			func(n *Herbarium, e *Familia) { n.Edges.Familia = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withGenus; query != nil {
		if err := hq.loadGenus(ctx, query, nodes, nil,
			func(n *Herbarium, e *Genus) { n.Edges.Genus = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withGroup; query != nil {
		if err := hq.loadGroup(ctx, query, nodes, nil,
			func(n *Herbarium, e *Group) { n.Edges.Group = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withSpecies; query != nil {
		if err := hq.loadSpecies(ctx, query, nodes, nil,
			func(n *Herbarium, e *Species) { n.Edges.Species = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withCollection; query != nil {
		if err := hq.loadCollection(ctx, query, nodes, nil,
			func(n *Herbarium, e *Collection) { n.Edges.Collection = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withCountry; query != nil {
		if err := hq.loadCountry(ctx, query, nodes, nil,
			func(n *Herbarium, e *Country) { n.Edges.Country = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withSettlement; query != nil {
		if err := hq.loadSettlement(ctx, query, nodes, nil,
			func(n *Herbarium, e *Settlement) { n.Edges.Settlement = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withDistrict; query != nil {
		if err := hq.loadDistrict(ctx, query, nodes, nil,
			func(n *Herbarium, e *District) { n.Edges.District = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withRegion; query != nil {
		if err := hq.loadRegion(ctx, query, nodes, nil,
			func(n *Herbarium, e *Region) { n.Edges.Region = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withPersonalCollection; query != nil {
		if err := hq.loadPersonalCollection(ctx, query, nodes,
			func(n *Herbarium) { n.Edges.PersonalCollection = []*PersonalCollection{} },
			func(n *Herbarium, e *PersonalCollection) {
				n.Edges.PersonalCollection = append(n.Edges.PersonalCollection, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range hq.withNamedPersonalCollection {
		if err := hq.loadPersonalCollection(ctx, query, nodes,
			func(n *Herbarium) { n.appendNamedPersonalCollection(name) },
			func(n *Herbarium, e *PersonalCollection) { n.appendNamedPersonalCollection(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range hq.loadTotal {
		if err := hq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hq *HerbariumQuery) loadAuthor(ctx context.Context, query *PersonQuery, nodes []*Herbarium, init func(*Herbarium), assign func(*Herbarium, *Person)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Herbarium)
	for i := range nodes {
		if nodes[i].person_herbaria == nil {
			continue
		}
		fk := *nodes[i].person_herbaria
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(person.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "person_herbaria" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HerbariumQuery) loadFamilia(ctx context.Context, query *FamiliaQuery, nodes []*Herbarium, init func(*Herbarium), assign func(*Herbarium, *Familia)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Herbarium)
	for i := range nodes {
		if nodes[i].familia_herbaria == nil {
			continue
		}
		fk := *nodes[i].familia_herbaria
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(familia.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "familia_herbaria" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HerbariumQuery) loadGenus(ctx context.Context, query *GenusQuery, nodes []*Herbarium, init func(*Herbarium), assign func(*Herbarium, *Genus)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Herbarium)
	for i := range nodes {
		if nodes[i].genus_herbaria == nil {
			continue
		}
		fk := *nodes[i].genus_herbaria
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(genus.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "genus_herbaria" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HerbariumQuery) loadGroup(ctx context.Context, query *GroupQuery, nodes []*Herbarium, init func(*Herbarium), assign func(*Herbarium, *Group)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Herbarium)
	for i := range nodes {
		if nodes[i].group_herbaria == nil {
			continue
		}
		fk := *nodes[i].group_herbaria
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(group.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "group_herbaria" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HerbariumQuery) loadSpecies(ctx context.Context, query *SpeciesQuery, nodes []*Herbarium, init func(*Herbarium), assign func(*Herbarium, *Species)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Herbarium)
	for i := range nodes {
		if nodes[i].species_herbaria == nil {
			continue
		}
		fk := *nodes[i].species_herbaria
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(species.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "species_herbaria" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HerbariumQuery) loadCollection(ctx context.Context, query *CollectionQuery, nodes []*Herbarium, init func(*Herbarium), assign func(*Herbarium, *Collection)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Herbarium)
	for i := range nodes {
		if nodes[i].collection_herbaria == nil {
			continue
		}
		fk := *nodes[i].collection_herbaria
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(collection.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "collection_herbaria" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HerbariumQuery) loadCountry(ctx context.Context, query *CountryQuery, nodes []*Herbarium, init func(*Herbarium), assign func(*Herbarium, *Country)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Herbarium)
	for i := range nodes {
		if nodes[i].country_herbaria == nil {
			continue
		}
		fk := *nodes[i].country_herbaria
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(country.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "country_herbaria" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HerbariumQuery) loadSettlement(ctx context.Context, query *SettlementQuery, nodes []*Herbarium, init func(*Herbarium), assign func(*Herbarium, *Settlement)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Herbarium)
	for i := range nodes {
		if nodes[i].settlement_herbaria == nil {
			continue
		}
		fk := *nodes[i].settlement_herbaria
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(settlement.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "settlement_herbaria" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HerbariumQuery) loadDistrict(ctx context.Context, query *DistrictQuery, nodes []*Herbarium, init func(*Herbarium), assign func(*Herbarium, *District)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Herbarium)
	for i := range nodes {
		if nodes[i].district_herbaria == nil {
			continue
		}
		fk := *nodes[i].district_herbaria
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(district.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "district_herbaria" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HerbariumQuery) loadRegion(ctx context.Context, query *RegionQuery, nodes []*Herbarium, init func(*Herbarium), assign func(*Herbarium, *Region)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Herbarium)
	for i := range nodes {
		if nodes[i].region_herbaria == nil {
			continue
		}
		fk := *nodes[i].region_herbaria
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(region.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "region_herbaria" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HerbariumQuery) loadPersonalCollection(ctx context.Context, query *PersonalCollectionQuery, nodes []*Herbarium, init func(*Herbarium), assign func(*Herbarium, *PersonalCollection)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Herbarium)
	nids := make(map[int]map[*Herbarium]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(herbarium.PersonalCollectionTable)
		s.Join(joinT).On(s.C(personalcollection.FieldID), joinT.C(herbarium.PersonalCollectionPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(herbarium.PersonalCollectionPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(herbarium.PersonalCollectionPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Herbarium]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*PersonalCollection](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "personal_collection" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (hq *HerbariumQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hq.querySpec()
	if len(hq.modifiers) > 0 {
		_spec.Modifiers = hq.modifiers
	}
	_spec.Node.Columns = hq.ctx.Fields
	if len(hq.ctx.Fields) > 0 {
		_spec.Unique = hq.ctx.Unique != nil && *hq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hq.driver, _spec)
}

func (hq *HerbariumQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(herbarium.Table, herbarium.Columns, sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt))
	_spec.From = hq.sql
	if unique := hq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hq.path != nil {
		_spec.Unique = true
	}
	if fields := hq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, herbarium.FieldID)
		for i := range fields {
			if fields[i] != herbarium.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hq *HerbariumQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hq.driver.Dialect())
	t1 := builder.Table(herbarium.Table)
	columns := hq.ctx.Fields
	if len(columns) == 0 {
		columns = herbarium.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hq.sql != nil {
		selector = hq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hq.ctx.Unique != nil && *hq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hq.predicates {
		p(selector)
	}
	for _, p := range hq.order {
		p(selector)
	}
	if offset := hq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedPersonalCollection tells the query-builder to eager-load the nodes that are connected to the "personal_collection"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (hq *HerbariumQuery) WithNamedPersonalCollection(name string, opts ...func(*PersonalCollectionQuery)) *HerbariumQuery {
	query := (&PersonalCollectionClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if hq.withNamedPersonalCollection == nil {
		hq.withNamedPersonalCollection = make(map[string]*PersonalCollectionQuery)
	}
	hq.withNamedPersonalCollection[name] = query
	return hq
}

// HerbariumGroupBy is the group-by builder for Herbarium entities.
type HerbariumGroupBy struct {
	selector
	build *HerbariumQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hgb *HerbariumGroupBy) Aggregate(fns ...AggregateFunc) *HerbariumGroupBy {
	hgb.fns = append(hgb.fns, fns...)
	return hgb
}

// Scan applies the selector query and scans the result into the given value.
func (hgb *HerbariumGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hgb.build.ctx, "GroupBy")
	if err := hgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HerbariumQuery, *HerbariumGroupBy](ctx, hgb.build, hgb, hgb.build.inters, v)
}

func (hgb *HerbariumGroupBy) sqlScan(ctx context.Context, root *HerbariumQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hgb.fns))
	for _, fn := range hgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hgb.flds)+len(hgb.fns))
		for _, f := range *hgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HerbariumSelect is the builder for selecting fields of Herbarium entities.
type HerbariumSelect struct {
	*HerbariumQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hs *HerbariumSelect) Aggregate(fns ...AggregateFunc) *HerbariumSelect {
	hs.fns = append(hs.fns, fns...)
	return hs
}

// Scan applies the selector query and scans the result into the given value.
func (hs *HerbariumSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hs.ctx, "Select")
	if err := hs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HerbariumQuery, *HerbariumSelect](ctx, hs.HerbariumQuery, hs, hs.inters, v)
}

func (hs *HerbariumSelect) sqlScan(ctx context.Context, root *HerbariumQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hs.fns))
	for _, fn := range hs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
