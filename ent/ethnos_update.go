// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/ethnos"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
)

// EthnosUpdate is the builder for updating Ethnos entities.
type EthnosUpdate struct {
	config
	hooks    []Hook
	mutation *EthnosMutation
}

// Where appends a list predicates to the EthnosUpdate builder.
func (eu *EthnosUpdate) Where(ps ...predicate.Ethnos) *EthnosUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetCreatedBy sets the "created_by" field.
func (eu *EthnosUpdate) SetCreatedBy(s string) *EthnosUpdate {
	eu.mutation.SetCreatedBy(s)
	return eu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (eu *EthnosUpdate) SetNillableCreatedBy(s *string) *EthnosUpdate {
	if s != nil {
		eu.SetCreatedBy(*s)
	}
	return eu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (eu *EthnosUpdate) ClearCreatedBy() *EthnosUpdate {
	eu.mutation.ClearCreatedBy()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EthnosUpdate) SetUpdatedAt(t time.Time) *EthnosUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetUpdatedBy sets the "updated_by" field.
func (eu *EthnosUpdate) SetUpdatedBy(s string) *EthnosUpdate {
	eu.mutation.SetUpdatedBy(s)
	return eu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eu *EthnosUpdate) SetNillableUpdatedBy(s *string) *EthnosUpdate {
	if s != nil {
		eu.SetUpdatedBy(*s)
	}
	return eu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (eu *EthnosUpdate) ClearUpdatedBy() *EthnosUpdate {
	eu.mutation.ClearUpdatedBy()
	return eu
}

// SetDisplayName sets the "display_name" field.
func (eu *EthnosUpdate) SetDisplayName(s string) *EthnosUpdate {
	eu.mutation.SetDisplayName(s)
	return eu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (eu *EthnosUpdate) SetNillableDisplayName(s *string) *EthnosUpdate {
	if s != nil {
		eu.SetDisplayName(*s)
	}
	return eu
}

// ClearDisplayName clears the value of the "display_name" field.
func (eu *EthnosUpdate) ClearDisplayName() *EthnosUpdate {
	eu.mutation.ClearDisplayName()
	return eu
}

// SetAbbreviation sets the "abbreviation" field.
func (eu *EthnosUpdate) SetAbbreviation(s string) *EthnosUpdate {
	eu.mutation.SetAbbreviation(s)
	return eu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (eu *EthnosUpdate) SetNillableAbbreviation(s *string) *EthnosUpdate {
	if s != nil {
		eu.SetAbbreviation(*s)
	}
	return eu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (eu *EthnosUpdate) ClearAbbreviation() *EthnosUpdate {
	eu.mutation.ClearAbbreviation()
	return eu
}

// SetDescription sets the "description" field.
func (eu *EthnosUpdate) SetDescription(s string) *EthnosUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EthnosUpdate) SetNillableDescription(s *string) *EthnosUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EthnosUpdate) ClearDescription() *EthnosUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetExternalLink sets the "external_link" field.
func (eu *EthnosUpdate) SetExternalLink(s string) *EthnosUpdate {
	eu.mutation.SetExternalLink(s)
	return eu
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (eu *EthnosUpdate) SetNillableExternalLink(s *string) *EthnosUpdate {
	if s != nil {
		eu.SetExternalLink(*s)
	}
	return eu
}

// ClearExternalLink clears the value of the "external_link" field.
func (eu *EthnosUpdate) ClearExternalLink() *EthnosUpdate {
	eu.mutation.ClearExternalLink()
	return eu
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (eu *EthnosUpdate) AddArtifactIDs(ids ...int) *EthnosUpdate {
	eu.mutation.AddArtifactIDs(ids...)
	return eu
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (eu *EthnosUpdate) AddArtifacts(a ...*Artifact) *EthnosUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.AddArtifactIDs(ids...)
}

// Mutation returns the EthnosMutation object of the builder.
func (eu *EthnosUpdate) Mutation() *EthnosMutation {
	return eu.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (eu *EthnosUpdate) ClearArtifacts() *EthnosUpdate {
	eu.mutation.ClearArtifacts()
	return eu
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (eu *EthnosUpdate) RemoveArtifactIDs(ids ...int) *EthnosUpdate {
	eu.mutation.RemoveArtifactIDs(ids...)
	return eu
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (eu *EthnosUpdate) RemoveArtifacts(a ...*Artifact) *EthnosUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.RemoveArtifactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EthnosUpdate) Save(ctx context.Context) (int, error) {
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EthnosUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EthnosUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EthnosUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EthnosUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if ethnos.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ethnos.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ethnos.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (eu *EthnosUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ethnos.Table, ethnos.Columns, sqlgraph.NewFieldSpec(ethnos.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.CreatedBy(); ok {
		_spec.SetField(ethnos.FieldCreatedBy, field.TypeString, value)
	}
	if eu.mutation.CreatedByCleared() {
		_spec.ClearField(ethnos.FieldCreatedBy, field.TypeString)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(ethnos.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.UpdatedBy(); ok {
		_spec.SetField(ethnos.FieldUpdatedBy, field.TypeString, value)
	}
	if eu.mutation.UpdatedByCleared() {
		_spec.ClearField(ethnos.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eu.mutation.DisplayName(); ok {
		_spec.SetField(ethnos.FieldDisplayName, field.TypeString, value)
	}
	if eu.mutation.DisplayNameCleared() {
		_spec.ClearField(ethnos.FieldDisplayName, field.TypeString)
	}
	if value, ok := eu.mutation.Abbreviation(); ok {
		_spec.SetField(ethnos.FieldAbbreviation, field.TypeString, value)
	}
	if eu.mutation.AbbreviationCleared() {
		_spec.ClearField(ethnos.FieldAbbreviation, field.TypeString)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(ethnos.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(ethnos.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.ExternalLink(); ok {
		_spec.SetField(ethnos.FieldExternalLink, field.TypeString, value)
	}
	if eu.mutation.ExternalLinkCleared() {
		_spec.ClearField(ethnos.FieldExternalLink, field.TypeString)
	}
	if eu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnos.ArtifactsTable,
			Columns: []string{ethnos.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !eu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnos.ArtifactsTable,
			Columns: []string{ethnos.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnos.ArtifactsTable,
			Columns: []string{ethnos.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ethnos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EthnosUpdateOne is the builder for updating a single Ethnos entity.
type EthnosUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EthnosMutation
}

// SetCreatedBy sets the "created_by" field.
func (euo *EthnosUpdateOne) SetCreatedBy(s string) *EthnosUpdateOne {
	euo.mutation.SetCreatedBy(s)
	return euo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (euo *EthnosUpdateOne) SetNillableCreatedBy(s *string) *EthnosUpdateOne {
	if s != nil {
		euo.SetCreatedBy(*s)
	}
	return euo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (euo *EthnosUpdateOne) ClearCreatedBy() *EthnosUpdateOne {
	euo.mutation.ClearCreatedBy()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EthnosUpdateOne) SetUpdatedAt(t time.Time) *EthnosUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetUpdatedBy sets the "updated_by" field.
func (euo *EthnosUpdateOne) SetUpdatedBy(s string) *EthnosUpdateOne {
	euo.mutation.SetUpdatedBy(s)
	return euo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (euo *EthnosUpdateOne) SetNillableUpdatedBy(s *string) *EthnosUpdateOne {
	if s != nil {
		euo.SetUpdatedBy(*s)
	}
	return euo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (euo *EthnosUpdateOne) ClearUpdatedBy() *EthnosUpdateOne {
	euo.mutation.ClearUpdatedBy()
	return euo
}

// SetDisplayName sets the "display_name" field.
func (euo *EthnosUpdateOne) SetDisplayName(s string) *EthnosUpdateOne {
	euo.mutation.SetDisplayName(s)
	return euo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (euo *EthnosUpdateOne) SetNillableDisplayName(s *string) *EthnosUpdateOne {
	if s != nil {
		euo.SetDisplayName(*s)
	}
	return euo
}

// ClearDisplayName clears the value of the "display_name" field.
func (euo *EthnosUpdateOne) ClearDisplayName() *EthnosUpdateOne {
	euo.mutation.ClearDisplayName()
	return euo
}

// SetAbbreviation sets the "abbreviation" field.
func (euo *EthnosUpdateOne) SetAbbreviation(s string) *EthnosUpdateOne {
	euo.mutation.SetAbbreviation(s)
	return euo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (euo *EthnosUpdateOne) SetNillableAbbreviation(s *string) *EthnosUpdateOne {
	if s != nil {
		euo.SetAbbreviation(*s)
	}
	return euo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (euo *EthnosUpdateOne) ClearAbbreviation() *EthnosUpdateOne {
	euo.mutation.ClearAbbreviation()
	return euo
}

// SetDescription sets the "description" field.
func (euo *EthnosUpdateOne) SetDescription(s string) *EthnosUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EthnosUpdateOne) SetNillableDescription(s *string) *EthnosUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EthnosUpdateOne) ClearDescription() *EthnosUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetExternalLink sets the "external_link" field.
func (euo *EthnosUpdateOne) SetExternalLink(s string) *EthnosUpdateOne {
	euo.mutation.SetExternalLink(s)
	return euo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (euo *EthnosUpdateOne) SetNillableExternalLink(s *string) *EthnosUpdateOne {
	if s != nil {
		euo.SetExternalLink(*s)
	}
	return euo
}

// ClearExternalLink clears the value of the "external_link" field.
func (euo *EthnosUpdateOne) ClearExternalLink() *EthnosUpdateOne {
	euo.mutation.ClearExternalLink()
	return euo
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (euo *EthnosUpdateOne) AddArtifactIDs(ids ...int) *EthnosUpdateOne {
	euo.mutation.AddArtifactIDs(ids...)
	return euo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (euo *EthnosUpdateOne) AddArtifacts(a ...*Artifact) *EthnosUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.AddArtifactIDs(ids...)
}

// Mutation returns the EthnosMutation object of the builder.
func (euo *EthnosUpdateOne) Mutation() *EthnosMutation {
	return euo.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (euo *EthnosUpdateOne) ClearArtifacts() *EthnosUpdateOne {
	euo.mutation.ClearArtifacts()
	return euo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (euo *EthnosUpdateOne) RemoveArtifactIDs(ids ...int) *EthnosUpdateOne {
	euo.mutation.RemoveArtifactIDs(ids...)
	return euo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (euo *EthnosUpdateOne) RemoveArtifacts(a ...*Artifact) *EthnosUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.RemoveArtifactIDs(ids...)
}

// Where appends a list predicates to the EthnosUpdate builder.
func (euo *EthnosUpdateOne) Where(ps ...predicate.Ethnos) *EthnosUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EthnosUpdateOne) Select(field string, fields ...string) *EthnosUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Ethnos entity.
func (euo *EthnosUpdateOne) Save(ctx context.Context) (*Ethnos, error) {
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EthnosUpdateOne) SaveX(ctx context.Context) *Ethnos {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EthnosUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EthnosUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EthnosUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if ethnos.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ethnos.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ethnos.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (euo *EthnosUpdateOne) sqlSave(ctx context.Context) (_node *Ethnos, err error) {
	_spec := sqlgraph.NewUpdateSpec(ethnos.Table, ethnos.Columns, sqlgraph.NewFieldSpec(ethnos.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ethnos.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ethnos.FieldID)
		for _, f := range fields {
			if !ethnos.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ethnos.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.CreatedBy(); ok {
		_spec.SetField(ethnos.FieldCreatedBy, field.TypeString, value)
	}
	if euo.mutation.CreatedByCleared() {
		_spec.ClearField(ethnos.FieldCreatedBy, field.TypeString)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(ethnos.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.UpdatedBy(); ok {
		_spec.SetField(ethnos.FieldUpdatedBy, field.TypeString, value)
	}
	if euo.mutation.UpdatedByCleared() {
		_spec.ClearField(ethnos.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := euo.mutation.DisplayName(); ok {
		_spec.SetField(ethnos.FieldDisplayName, field.TypeString, value)
	}
	if euo.mutation.DisplayNameCleared() {
		_spec.ClearField(ethnos.FieldDisplayName, field.TypeString)
	}
	if value, ok := euo.mutation.Abbreviation(); ok {
		_spec.SetField(ethnos.FieldAbbreviation, field.TypeString, value)
	}
	if euo.mutation.AbbreviationCleared() {
		_spec.ClearField(ethnos.FieldAbbreviation, field.TypeString)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(ethnos.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(ethnos.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.ExternalLink(); ok {
		_spec.SetField(ethnos.FieldExternalLink, field.TypeString, value)
	}
	if euo.mutation.ExternalLinkCleared() {
		_spec.ClearField(ethnos.FieldExternalLink, field.TypeString)
	}
	if euo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnos.ArtifactsTable,
			Columns: []string{ethnos.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !euo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnos.ArtifactsTable,
			Columns: []string{ethnos.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnos.ArtifactsTable,
			Columns: []string{ethnos.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ethnos{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ethnos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
