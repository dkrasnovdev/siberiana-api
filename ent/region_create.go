// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/petroglyph"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
)

// RegionCreate is the builder for creating a Region entity.
type RegionCreate struct {
	config
	mutation *RegionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RegionCreate) SetCreatedAt(t time.Time) *RegionCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RegionCreate) SetNillableCreatedAt(t *time.Time) *RegionCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetCreatedBy sets the "created_by" field.
func (rc *RegionCreate) SetCreatedBy(s string) *RegionCreate {
	rc.mutation.SetCreatedBy(s)
	return rc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rc *RegionCreate) SetNillableCreatedBy(s *string) *RegionCreate {
	if s != nil {
		rc.SetCreatedBy(*s)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RegionCreate) SetUpdatedAt(t time.Time) *RegionCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RegionCreate) SetNillableUpdatedAt(t *time.Time) *RegionCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetUpdatedBy sets the "updated_by" field.
func (rc *RegionCreate) SetUpdatedBy(s string) *RegionCreate {
	rc.mutation.SetUpdatedBy(s)
	return rc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rc *RegionCreate) SetNillableUpdatedBy(s *string) *RegionCreate {
	if s != nil {
		rc.SetUpdatedBy(*s)
	}
	return rc
}

// SetDisplayName sets the "display_name" field.
func (rc *RegionCreate) SetDisplayName(s string) *RegionCreate {
	rc.mutation.SetDisplayName(s)
	return rc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (rc *RegionCreate) SetNillableDisplayName(s *string) *RegionCreate {
	if s != nil {
		rc.SetDisplayName(*s)
	}
	return rc
}

// SetAbbreviation sets the "abbreviation" field.
func (rc *RegionCreate) SetAbbreviation(s string) *RegionCreate {
	rc.mutation.SetAbbreviation(s)
	return rc
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (rc *RegionCreate) SetNillableAbbreviation(s *string) *RegionCreate {
	if s != nil {
		rc.SetAbbreviation(*s)
	}
	return rc
}

// SetDescription sets the "description" field.
func (rc *RegionCreate) SetDescription(s string) *RegionCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *RegionCreate) SetNillableDescription(s *string) *RegionCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetExternalLink sets the "external_link" field.
func (rc *RegionCreate) SetExternalLink(s string) *RegionCreate {
	rc.mutation.SetExternalLink(s)
	return rc
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (rc *RegionCreate) SetNillableExternalLink(s *string) *RegionCreate {
	if s != nil {
		rc.SetExternalLink(*s)
	}
	return rc
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (rc *RegionCreate) AddArtIDs(ids ...int) *RegionCreate {
	rc.mutation.AddArtIDs(ids...)
	return rc
}

// AddArt adds the "art" edges to the Art entity.
func (rc *RegionCreate) AddArt(a ...*Art) *RegionCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rc.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (rc *RegionCreate) AddArtifactIDs(ids ...int) *RegionCreate {
	rc.mutation.AddArtifactIDs(ids...)
	return rc
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (rc *RegionCreate) AddArtifacts(a ...*Artifact) *RegionCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rc.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (rc *RegionCreate) AddBookIDs(ids ...int) *RegionCreate {
	rc.mutation.AddBookIDs(ids...)
	return rc
}

// AddBooks adds the "books" edges to the Book entity.
func (rc *RegionCreate) AddBooks(b ...*Book) *RegionCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return rc.AddBookIDs(ids...)
}

// AddPetroglyphIDs adds the "petroglyphs" edge to the Petroglyph entity by IDs.
func (rc *RegionCreate) AddPetroglyphIDs(ids ...int) *RegionCreate {
	rc.mutation.AddPetroglyphIDs(ids...)
	return rc
}

// AddPetroglyphs adds the "petroglyphs" edges to the Petroglyph entity.
func (rc *RegionCreate) AddPetroglyphs(p ...*Petroglyph) *RegionCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPetroglyphIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (rc *RegionCreate) AddProtectedAreaPictureIDs(ids ...int) *RegionCreate {
	rc.mutation.AddProtectedAreaPictureIDs(ids...)
	return rc
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (rc *RegionCreate) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *RegionCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddProtectedAreaPictureIDs(ids...)
}

// AddDistrictIDs adds the "districts" edge to the District entity by IDs.
func (rc *RegionCreate) AddDistrictIDs(ids ...int) *RegionCreate {
	rc.mutation.AddDistrictIDs(ids...)
	return rc
}

// AddDistricts adds the "districts" edges to the District entity.
func (rc *RegionCreate) AddDistricts(d ...*District) *RegionCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rc.AddDistrictIDs(ids...)
}

// AddSettlementIDs adds the "settlements" edge to the Settlement entity by IDs.
func (rc *RegionCreate) AddSettlementIDs(ids ...int) *RegionCreate {
	rc.mutation.AddSettlementIDs(ids...)
	return rc
}

// AddSettlements adds the "settlements" edges to the Settlement entity.
func (rc *RegionCreate) AddSettlements(s ...*Settlement) *RegionCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rc.AddSettlementIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (rc *RegionCreate) AddLocationIDs(ids ...int) *RegionCreate {
	rc.mutation.AddLocationIDs(ids...)
	return rc
}

// AddLocations adds the "locations" edges to the Location entity.
func (rc *RegionCreate) AddLocations(l ...*Location) *RegionCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rc.AddLocationIDs(ids...)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (rc *RegionCreate) SetCountryID(id int) *RegionCreate {
	rc.mutation.SetCountryID(id)
	return rc
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (rc *RegionCreate) SetNillableCountryID(id *int) *RegionCreate {
	if id != nil {
		rc = rc.SetCountryID(*id)
	}
	return rc
}

// SetCountry sets the "country" edge to the Country entity.
func (rc *RegionCreate) SetCountry(c *Country) *RegionCreate {
	return rc.SetCountryID(c.ID)
}

// Mutation returns the RegionMutation object of the builder.
func (rc *RegionCreate) Mutation() *RegionMutation {
	return rc.mutation
}

// Save creates the Region in the database.
func (rc *RegionCreate) Save(ctx context.Context) (*Region, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RegionCreate) SaveX(ctx context.Context) *Region {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RegionCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RegionCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RegionCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if region.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized region.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := region.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if region.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized region.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := region.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RegionCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Region.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Region.updated_at"`)}
	}
	return nil
}

func (rc *RegionCreate) sqlSave(ctx context.Context) (*Region, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RegionCreate) createSpec() (*Region, *sqlgraph.CreateSpec) {
	var (
		_node = &Region{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(region.Table, sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(region.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.CreatedBy(); ok {
		_spec.SetField(region.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(region.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.UpdatedBy(); ok {
		_spec.SetField(region.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := rc.mutation.DisplayName(); ok {
		_spec.SetField(region.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := rc.mutation.Abbreviation(); ok {
		_spec.SetField(region.FieldAbbreviation, field.TypeString, value)
		_node.Abbreviation = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(region.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.ExternalLink(); ok {
		_spec.SetField(region.FieldExternalLink, field.TypeString, value)
		_node.ExternalLink = value
	}
	if nodes := rc.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtTable,
			Columns: []string{region.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ArtifactsTable,
			Columns: []string{region.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.BooksTable,
			Columns: []string{region.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.PetroglyphsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.PetroglyphsTable,
			Columns: []string{region.PetroglyphsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ProtectedAreaPicturesTable,
			Columns: []string{region.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.DistrictsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.DistrictsTable,
			Columns: []string{region.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.SettlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.SettlementsTable,
			Columns: []string{region.SettlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   region.LocationsTable,
			Columns: []string{region.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.country_regions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RegionCreateBulk is the builder for creating many Region entities in bulk.
type RegionCreateBulk struct {
	config
	err      error
	builders []*RegionCreate
}

// Save creates the Region entities in the database.
func (rcb *RegionCreateBulk) Save(ctx context.Context) ([]*Region, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Region, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RegionCreateBulk) SaveX(ctx context.Context) []*Region {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RegionCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RegionCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
