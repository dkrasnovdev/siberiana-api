// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/dkrasnovdev/siberiana-api/ent"

	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The ArtQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ArtQueryRuleFunc func(context.Context, *ent.ArtQuery) error

// EvalQuery return f(ctx, q).
func (f ArtQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ArtQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ArtQuery", q)
}

// The ArtMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ArtMutationRuleFunc func(context.Context, *ent.ArtMutation) error

// EvalMutation calls f(ctx, m).
func (f ArtMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ArtMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ArtMutation", m)
}

// The ArtGenreQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ArtGenreQueryRuleFunc func(context.Context, *ent.ArtGenreQuery) error

// EvalQuery return f(ctx, q).
func (f ArtGenreQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ArtGenreQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ArtGenreQuery", q)
}

// The ArtGenreMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ArtGenreMutationRuleFunc func(context.Context, *ent.ArtGenreMutation) error

// EvalMutation calls f(ctx, m).
func (f ArtGenreMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ArtGenreMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ArtGenreMutation", m)
}

// The ArtStyleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ArtStyleQueryRuleFunc func(context.Context, *ent.ArtStyleQuery) error

// EvalQuery return f(ctx, q).
func (f ArtStyleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ArtStyleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ArtStyleQuery", q)
}

// The ArtStyleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ArtStyleMutationRuleFunc func(context.Context, *ent.ArtStyleMutation) error

// EvalMutation calls f(ctx, m).
func (f ArtStyleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ArtStyleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ArtStyleMutation", m)
}

// The ArtifactQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ArtifactQueryRuleFunc func(context.Context, *ent.ArtifactQuery) error

// EvalQuery return f(ctx, q).
func (f ArtifactQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ArtifactQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ArtifactQuery", q)
}

// The ArtifactMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ArtifactMutationRuleFunc func(context.Context, *ent.ArtifactMutation) error

// EvalMutation calls f(ctx, m).
func (f ArtifactMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ArtifactMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ArtifactMutation", m)
}

// The AuditLogQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AuditLogQueryRuleFunc func(context.Context, *ent.AuditLogQuery) error

// EvalQuery return f(ctx, q).
func (f AuditLogQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AuditLogQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AuditLogQuery", q)
}

// The AuditLogMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AuditLogMutationRuleFunc func(context.Context, *ent.AuditLogMutation) error

// EvalMutation calls f(ctx, m).
func (f AuditLogMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AuditLogMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AuditLogMutation", m)
}

// The BookQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BookQueryRuleFunc func(context.Context, *ent.BookQuery) error

// EvalQuery return f(ctx, q).
func (f BookQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BookQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BookQuery", q)
}

// The BookMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BookMutationRuleFunc func(context.Context, *ent.BookMutation) error

// EvalMutation calls f(ctx, m).
func (f BookMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BookMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BookMutation", m)
}

// The BookGenreQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BookGenreQueryRuleFunc func(context.Context, *ent.BookGenreQuery) error

// EvalQuery return f(ctx, q).
func (f BookGenreQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BookGenreQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BookGenreQuery", q)
}

// The BookGenreMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BookGenreMutationRuleFunc func(context.Context, *ent.BookGenreMutation) error

// EvalMutation calls f(ctx, m).
func (f BookGenreMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BookGenreMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BookGenreMutation", m)
}

// The CategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CategoryQueryRuleFunc func(context.Context, *ent.CategoryQuery) error

// EvalQuery return f(ctx, q).
func (f CategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CategoryQuery", q)
}

// The CategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CategoryMutationRuleFunc func(context.Context, *ent.CategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f CategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CategoryMutation", m)
}

// The CollectionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CollectionQueryRuleFunc func(context.Context, *ent.CollectionQuery) error

// EvalQuery return f(ctx, q).
func (f CollectionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CollectionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CollectionQuery", q)
}

// The CollectionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CollectionMutationRuleFunc func(context.Context, *ent.CollectionMutation) error

// EvalMutation calls f(ctx, m).
func (f CollectionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CollectionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CollectionMutation", m)
}

// The CountryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CountryQueryRuleFunc func(context.Context, *ent.CountryQuery) error

// EvalQuery return f(ctx, q).
func (f CountryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CountryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CountryQuery", q)
}

// The CountryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CountryMutationRuleFunc func(context.Context, *ent.CountryMutation) error

// EvalMutation calls f(ctx, m).
func (f CountryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CountryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CountryMutation", m)
}

// The CultureQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CultureQueryRuleFunc func(context.Context, *ent.CultureQuery) error

// EvalQuery return f(ctx, q).
func (f CultureQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CultureQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CultureQuery", q)
}

// The CultureMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CultureMutationRuleFunc func(context.Context, *ent.CultureMutation) error

// EvalMutation calls f(ctx, m).
func (f CultureMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CultureMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CultureMutation", m)
}

// The DistrictQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DistrictQueryRuleFunc func(context.Context, *ent.DistrictQuery) error

// EvalQuery return f(ctx, q).
func (f DistrictQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DistrictQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DistrictQuery", q)
}

// The DistrictMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DistrictMutationRuleFunc func(context.Context, *ent.DistrictMutation) error

// EvalMutation calls f(ctx, m).
func (f DistrictMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DistrictMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DistrictMutation", m)
}

// The EthnosQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EthnosQueryRuleFunc func(context.Context, *ent.EthnosQuery) error

// EvalQuery return f(ctx, q).
func (f EthnosQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EthnosQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EthnosQuery", q)
}

// The EthnosMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EthnosMutationRuleFunc func(context.Context, *ent.EthnosMutation) error

// EvalMutation calls f(ctx, m).
func (f EthnosMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EthnosMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EthnosMutation", m)
}

// The FavouriteQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FavouriteQueryRuleFunc func(context.Context, *ent.FavouriteQuery) error

// EvalQuery return f(ctx, q).
func (f FavouriteQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FavouriteQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FavouriteQuery", q)
}

// The FavouriteMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FavouriteMutationRuleFunc func(context.Context, *ent.FavouriteMutation) error

// EvalMutation calls f(ctx, m).
func (f FavouriteMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FavouriteMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FavouriteMutation", m)
}

// The InterviewQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type InterviewQueryRuleFunc func(context.Context, *ent.InterviewQuery) error

// EvalQuery return f(ctx, q).
func (f InterviewQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InterviewQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.InterviewQuery", q)
}

// The InterviewMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type InterviewMutationRuleFunc func(context.Context, *ent.InterviewMutation) error

// EvalMutation calls f(ctx, m).
func (f InterviewMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.InterviewMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.InterviewMutation", m)
}

// The KeywordQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type KeywordQueryRuleFunc func(context.Context, *ent.KeywordQuery) error

// EvalQuery return f(ctx, q).
func (f KeywordQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.KeywordQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.KeywordQuery", q)
}

// The KeywordMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type KeywordMutationRuleFunc func(context.Context, *ent.KeywordMutation) error

// EvalMutation calls f(ctx, m).
func (f KeywordMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.KeywordMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.KeywordMutation", m)
}

// The LicenseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LicenseQueryRuleFunc func(context.Context, *ent.LicenseQuery) error

// EvalQuery return f(ctx, q).
func (f LicenseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LicenseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LicenseQuery", q)
}

// The LicenseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LicenseMutationRuleFunc func(context.Context, *ent.LicenseMutation) error

// EvalMutation calls f(ctx, m).
func (f LicenseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LicenseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LicenseMutation", m)
}

// The LocationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LocationQueryRuleFunc func(context.Context, *ent.LocationQuery) error

// EvalQuery return f(ctx, q).
func (f LocationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LocationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LocationQuery", q)
}

// The LocationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LocationMutationRuleFunc func(context.Context, *ent.LocationMutation) error

// EvalMutation calls f(ctx, m).
func (f LocationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LocationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LocationMutation", m)
}

// The MediumQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MediumQueryRuleFunc func(context.Context, *ent.MediumQuery) error

// EvalQuery return f(ctx, q).
func (f MediumQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MediumQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MediumQuery", q)
}

// The MediumMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MediumMutationRuleFunc func(context.Context, *ent.MediumMutation) error

// EvalMutation calls f(ctx, m).
func (f MediumMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MediumMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MediumMutation", m)
}

// The ModelQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ModelQueryRuleFunc func(context.Context, *ent.ModelQuery) error

// EvalQuery return f(ctx, q).
func (f ModelQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ModelQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ModelQuery", q)
}

// The ModelMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ModelMutationRuleFunc func(context.Context, *ent.ModelMutation) error

// EvalMutation calls f(ctx, m).
func (f ModelMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ModelMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ModelMutation", m)
}

// The MonumentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MonumentQueryRuleFunc func(context.Context, *ent.MonumentQuery) error

// EvalQuery return f(ctx, q).
func (f MonumentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MonumentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MonumentQuery", q)
}

// The MonumentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MonumentMutationRuleFunc func(context.Context, *ent.MonumentMutation) error

// EvalMutation calls f(ctx, m).
func (f MonumentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MonumentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MonumentMutation", m)
}

// The OrganizationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrganizationQueryRuleFunc func(context.Context, *ent.OrganizationQuery) error

// EvalQuery return f(ctx, q).
func (f OrganizationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrganizationQuery", q)
}

// The OrganizationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrganizationMutationRuleFunc func(context.Context, *ent.OrganizationMutation) error

// EvalMutation calls f(ctx, m).
func (f OrganizationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrganizationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrganizationMutation", m)
}

// The PeriodicalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PeriodicalQueryRuleFunc func(context.Context, *ent.PeriodicalQuery) error

// EvalQuery return f(ctx, q).
func (f PeriodicalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PeriodicalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PeriodicalQuery", q)
}

// The PeriodicalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PeriodicalMutationRuleFunc func(context.Context, *ent.PeriodicalMutation) error

// EvalMutation calls f(ctx, m).
func (f PeriodicalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PeriodicalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PeriodicalMutation", m)
}

// The PersonQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PersonQueryRuleFunc func(context.Context, *ent.PersonQuery) error

// EvalQuery return f(ctx, q).
func (f PersonQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PersonQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PersonQuery", q)
}

// The PersonMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PersonMutationRuleFunc func(context.Context, *ent.PersonMutation) error

// EvalMutation calls f(ctx, m).
func (f PersonMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PersonMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PersonMutation", m)
}

// The PersonalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PersonalQueryRuleFunc func(context.Context, *ent.PersonalQuery) error

// EvalQuery return f(ctx, q).
func (f PersonalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PersonalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PersonalQuery", q)
}

// The PersonalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PersonalMutationRuleFunc func(context.Context, *ent.PersonalMutation) error

// EvalMutation calls f(ctx, m).
func (f PersonalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PersonalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PersonalMutation", m)
}

// The ProjectQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProjectQueryRuleFunc func(context.Context, *ent.ProjectQuery) error

// EvalQuery return f(ctx, q).
func (f ProjectQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProjectQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProjectQuery", q)
}

// The ProjectMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProjectMutationRuleFunc func(context.Context, *ent.ProjectMutation) error

// EvalMutation calls f(ctx, m).
func (f ProjectMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProjectMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProjectMutation", m)
}

// The ProtectedAreaQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProtectedAreaQueryRuleFunc func(context.Context, *ent.ProtectedAreaQuery) error

// EvalQuery return f(ctx, q).
func (f ProtectedAreaQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProtectedAreaQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProtectedAreaQuery", q)
}

// The ProtectedAreaMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProtectedAreaMutationRuleFunc func(context.Context, *ent.ProtectedAreaMutation) error

// EvalMutation calls f(ctx, m).
func (f ProtectedAreaMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProtectedAreaMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProtectedAreaMutation", m)
}

// The ProtectedAreaCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProtectedAreaCategoryQueryRuleFunc func(context.Context, *ent.ProtectedAreaCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f ProtectedAreaCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProtectedAreaCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProtectedAreaCategoryQuery", q)
}

// The ProtectedAreaCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProtectedAreaCategoryMutationRuleFunc func(context.Context, *ent.ProtectedAreaCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ProtectedAreaCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProtectedAreaCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProtectedAreaCategoryMutation", m)
}

// The ProtectedAreaPictureQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProtectedAreaPictureQueryRuleFunc func(context.Context, *ent.ProtectedAreaPictureQuery) error

// EvalQuery return f(ctx, q).
func (f ProtectedAreaPictureQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProtectedAreaPictureQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProtectedAreaPictureQuery", q)
}

// The ProtectedAreaPictureMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProtectedAreaPictureMutationRuleFunc func(context.Context, *ent.ProtectedAreaPictureMutation) error

// EvalMutation calls f(ctx, m).
func (f ProtectedAreaPictureMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProtectedAreaPictureMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProtectedAreaPictureMutation", m)
}

// The ProxyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProxyQueryRuleFunc func(context.Context, *ent.ProxyQuery) error

// EvalQuery return f(ctx, q).
func (f ProxyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProxyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProxyQuery", q)
}

// The ProxyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProxyMutationRuleFunc func(context.Context, *ent.ProxyMutation) error

// EvalMutation calls f(ctx, m).
func (f ProxyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProxyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProxyMutation", m)
}

// The PublicationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PublicationQueryRuleFunc func(context.Context, *ent.PublicationQuery) error

// EvalQuery return f(ctx, q).
func (f PublicationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PublicationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PublicationQuery", q)
}

// The PublicationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PublicationMutationRuleFunc func(context.Context, *ent.PublicationMutation) error

// EvalMutation calls f(ctx, m).
func (f PublicationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PublicationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PublicationMutation", m)
}

// The PublisherQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PublisherQueryRuleFunc func(context.Context, *ent.PublisherQuery) error

// EvalQuery return f(ctx, q).
func (f PublisherQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PublisherQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PublisherQuery", q)
}

// The PublisherMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PublisherMutationRuleFunc func(context.Context, *ent.PublisherMutation) error

// EvalMutation calls f(ctx, m).
func (f PublisherMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PublisherMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PublisherMutation", m)
}

// The RegionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RegionQueryRuleFunc func(context.Context, *ent.RegionQuery) error

// EvalQuery return f(ctx, q).
func (f RegionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RegionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RegionQuery", q)
}

// The RegionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RegionMutationRuleFunc func(context.Context, *ent.RegionMutation) error

// EvalMutation calls f(ctx, m).
func (f RegionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RegionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RegionMutation", m)
}

// The SetQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SetQueryRuleFunc func(context.Context, *ent.SetQuery) error

// EvalQuery return f(ctx, q).
func (f SetQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SetQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SetQuery", q)
}

// The SetMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SetMutationRuleFunc func(context.Context, *ent.SetMutation) error

// EvalMutation calls f(ctx, m).
func (f SetMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SetMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SetMutation", m)
}

// The SettlementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SettlementQueryRuleFunc func(context.Context, *ent.SettlementQuery) error

// EvalQuery return f(ctx, q).
func (f SettlementQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SettlementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SettlementQuery", q)
}

// The SettlementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SettlementMutationRuleFunc func(context.Context, *ent.SettlementMutation) error

// EvalMutation calls f(ctx, m).
func (f SettlementMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SettlementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SettlementMutation", m)
}

// The TechniqueQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TechniqueQueryRuleFunc func(context.Context, *ent.TechniqueQuery) error

// EvalQuery return f(ctx, q).
func (f TechniqueQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TechniqueQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TechniqueQuery", q)
}

// The TechniqueMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TechniqueMutationRuleFunc func(context.Context, *ent.TechniqueMutation) error

// EvalMutation calls f(ctx, m).
func (f TechniqueMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TechniqueMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TechniqueMutation", m)
}
