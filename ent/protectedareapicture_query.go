// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/collection"
	"github.com/dkrasnovdev/heritage-api/ent/license"
	"github.com/dkrasnovdev/heritage-api/ent/location"
	"github.com/dkrasnovdev/heritage-api/ent/predicate"
	"github.com/dkrasnovdev/heritage-api/ent/protectedarea"
	"github.com/dkrasnovdev/heritage-api/ent/protectedareapicture"
)

// ProtectedAreaPictureQuery is the builder for querying ProtectedAreaPicture entities.
type ProtectedAreaPictureQuery struct {
	config
	ctx               *QueryContext
	order             []protectedareapicture.OrderOption
	inters            []Interceptor
	predicates        []predicate.ProtectedAreaPicture
	withCollection    *CollectionQuery
	withProtectedArea *ProtectedAreaQuery
	withLocation      *LocationQuery
	withLicense       *LicenseQuery
	withFKs           bool
	modifiers         []func(*sql.Selector)
	loadTotal         []func(context.Context, []*ProtectedAreaPicture) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProtectedAreaPictureQuery builder.
func (papq *ProtectedAreaPictureQuery) Where(ps ...predicate.ProtectedAreaPicture) *ProtectedAreaPictureQuery {
	papq.predicates = append(papq.predicates, ps...)
	return papq
}

// Limit the number of records to be returned by this query.
func (papq *ProtectedAreaPictureQuery) Limit(limit int) *ProtectedAreaPictureQuery {
	papq.ctx.Limit = &limit
	return papq
}

// Offset to start from.
func (papq *ProtectedAreaPictureQuery) Offset(offset int) *ProtectedAreaPictureQuery {
	papq.ctx.Offset = &offset
	return papq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (papq *ProtectedAreaPictureQuery) Unique(unique bool) *ProtectedAreaPictureQuery {
	papq.ctx.Unique = &unique
	return papq
}

// Order specifies how the records should be ordered.
func (papq *ProtectedAreaPictureQuery) Order(o ...protectedareapicture.OrderOption) *ProtectedAreaPictureQuery {
	papq.order = append(papq.order, o...)
	return papq
}

// QueryCollection chains the current query on the "collection" edge.
func (papq *ProtectedAreaPictureQuery) QueryCollection() *CollectionQuery {
	query := (&CollectionClient{config: papq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := papq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := papq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(protectedareapicture.Table, protectedareapicture.FieldID, selector),
			sqlgraph.To(collection.Table, collection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, protectedareapicture.CollectionTable, protectedareapicture.CollectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(papq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProtectedArea chains the current query on the "protected_area" edge.
func (papq *ProtectedAreaPictureQuery) QueryProtectedArea() *ProtectedAreaQuery {
	query := (&ProtectedAreaClient{config: papq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := papq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := papq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(protectedareapicture.Table, protectedareapicture.FieldID, selector),
			sqlgraph.To(protectedarea.Table, protectedarea.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, protectedareapicture.ProtectedAreaTable, protectedareapicture.ProtectedAreaColumn),
		)
		fromU = sqlgraph.SetNeighbors(papq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocation chains the current query on the "location" edge.
func (papq *ProtectedAreaPictureQuery) QueryLocation() *LocationQuery {
	query := (&LocationClient{config: papq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := papq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := papq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(protectedareapicture.Table, protectedareapicture.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, protectedareapicture.LocationTable, protectedareapicture.LocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(papq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLicense chains the current query on the "license" edge.
func (papq *ProtectedAreaPictureQuery) QueryLicense() *LicenseQuery {
	query := (&LicenseClient{config: papq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := papq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := papq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(protectedareapicture.Table, protectedareapicture.FieldID, selector),
			sqlgraph.To(license.Table, license.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, protectedareapicture.LicenseTable, protectedareapicture.LicenseColumn),
		)
		fromU = sqlgraph.SetNeighbors(papq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProtectedAreaPicture entity from the query.
// Returns a *NotFoundError when no ProtectedAreaPicture was found.
func (papq *ProtectedAreaPictureQuery) First(ctx context.Context) (*ProtectedAreaPicture, error) {
	nodes, err := papq.Limit(1).All(setContextOp(ctx, papq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{protectedareapicture.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (papq *ProtectedAreaPictureQuery) FirstX(ctx context.Context) *ProtectedAreaPicture {
	node, err := papq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProtectedAreaPicture ID from the query.
// Returns a *NotFoundError when no ProtectedAreaPicture ID was found.
func (papq *ProtectedAreaPictureQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = papq.Limit(1).IDs(setContextOp(ctx, papq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{protectedareapicture.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (papq *ProtectedAreaPictureQuery) FirstIDX(ctx context.Context) int {
	id, err := papq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProtectedAreaPicture entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProtectedAreaPicture entity is found.
// Returns a *NotFoundError when no ProtectedAreaPicture entities are found.
func (papq *ProtectedAreaPictureQuery) Only(ctx context.Context) (*ProtectedAreaPicture, error) {
	nodes, err := papq.Limit(2).All(setContextOp(ctx, papq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{protectedareapicture.Label}
	default:
		return nil, &NotSingularError{protectedareapicture.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (papq *ProtectedAreaPictureQuery) OnlyX(ctx context.Context) *ProtectedAreaPicture {
	node, err := papq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProtectedAreaPicture ID in the query.
// Returns a *NotSingularError when more than one ProtectedAreaPicture ID is found.
// Returns a *NotFoundError when no entities are found.
func (papq *ProtectedAreaPictureQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = papq.Limit(2).IDs(setContextOp(ctx, papq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{protectedareapicture.Label}
	default:
		err = &NotSingularError{protectedareapicture.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (papq *ProtectedAreaPictureQuery) OnlyIDX(ctx context.Context) int {
	id, err := papq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProtectedAreaPictures.
func (papq *ProtectedAreaPictureQuery) All(ctx context.Context) ([]*ProtectedAreaPicture, error) {
	ctx = setContextOp(ctx, papq.ctx, "All")
	if err := papq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProtectedAreaPicture, *ProtectedAreaPictureQuery]()
	return withInterceptors[[]*ProtectedAreaPicture](ctx, papq, qr, papq.inters)
}

// AllX is like All, but panics if an error occurs.
func (papq *ProtectedAreaPictureQuery) AllX(ctx context.Context) []*ProtectedAreaPicture {
	nodes, err := papq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProtectedAreaPicture IDs.
func (papq *ProtectedAreaPictureQuery) IDs(ctx context.Context) (ids []int, err error) {
	if papq.ctx.Unique == nil && papq.path != nil {
		papq.Unique(true)
	}
	ctx = setContextOp(ctx, papq.ctx, "IDs")
	if err = papq.Select(protectedareapicture.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (papq *ProtectedAreaPictureQuery) IDsX(ctx context.Context) []int {
	ids, err := papq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (papq *ProtectedAreaPictureQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, papq.ctx, "Count")
	if err := papq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, papq, querierCount[*ProtectedAreaPictureQuery](), papq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (papq *ProtectedAreaPictureQuery) CountX(ctx context.Context) int {
	count, err := papq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (papq *ProtectedAreaPictureQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, papq.ctx, "Exist")
	switch _, err := papq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (papq *ProtectedAreaPictureQuery) ExistX(ctx context.Context) bool {
	exist, err := papq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProtectedAreaPictureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (papq *ProtectedAreaPictureQuery) Clone() *ProtectedAreaPictureQuery {
	if papq == nil {
		return nil
	}
	return &ProtectedAreaPictureQuery{
		config:            papq.config,
		ctx:               papq.ctx.Clone(),
		order:             append([]protectedareapicture.OrderOption{}, papq.order...),
		inters:            append([]Interceptor{}, papq.inters...),
		predicates:        append([]predicate.ProtectedAreaPicture{}, papq.predicates...),
		withCollection:    papq.withCollection.Clone(),
		withProtectedArea: papq.withProtectedArea.Clone(),
		withLocation:      papq.withLocation.Clone(),
		withLicense:       papq.withLicense.Clone(),
		// clone intermediate query.
		sql:  papq.sql.Clone(),
		path: papq.path,
	}
}

// WithCollection tells the query-builder to eager-load the nodes that are connected to
// the "collection" edge. The optional arguments are used to configure the query builder of the edge.
func (papq *ProtectedAreaPictureQuery) WithCollection(opts ...func(*CollectionQuery)) *ProtectedAreaPictureQuery {
	query := (&CollectionClient{config: papq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	papq.withCollection = query
	return papq
}

// WithProtectedArea tells the query-builder to eager-load the nodes that are connected to
// the "protected_area" edge. The optional arguments are used to configure the query builder of the edge.
func (papq *ProtectedAreaPictureQuery) WithProtectedArea(opts ...func(*ProtectedAreaQuery)) *ProtectedAreaPictureQuery {
	query := (&ProtectedAreaClient{config: papq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	papq.withProtectedArea = query
	return papq
}

// WithLocation tells the query-builder to eager-load the nodes that are connected to
// the "location" edge. The optional arguments are used to configure the query builder of the edge.
func (papq *ProtectedAreaPictureQuery) WithLocation(opts ...func(*LocationQuery)) *ProtectedAreaPictureQuery {
	query := (&LocationClient{config: papq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	papq.withLocation = query
	return papq
}

// WithLicense tells the query-builder to eager-load the nodes that are connected to
// the "license" edge. The optional arguments are used to configure the query builder of the edge.
func (papq *ProtectedAreaPictureQuery) WithLicense(opts ...func(*LicenseQuery)) *ProtectedAreaPictureQuery {
	query := (&LicenseClient{config: papq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	papq.withLicense = query
	return papq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProtectedAreaPicture.Query().
//		GroupBy(protectedareapicture.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (papq *ProtectedAreaPictureQuery) GroupBy(field string, fields ...string) *ProtectedAreaPictureGroupBy {
	papq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProtectedAreaPictureGroupBy{build: papq}
	grbuild.flds = &papq.ctx.Fields
	grbuild.label = protectedareapicture.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ProtectedAreaPicture.Query().
//		Select(protectedareapicture.FieldCreatedAt).
//		Scan(ctx, &v)
func (papq *ProtectedAreaPictureQuery) Select(fields ...string) *ProtectedAreaPictureSelect {
	papq.ctx.Fields = append(papq.ctx.Fields, fields...)
	sbuild := &ProtectedAreaPictureSelect{ProtectedAreaPictureQuery: papq}
	sbuild.label = protectedareapicture.Label
	sbuild.flds, sbuild.scan = &papq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProtectedAreaPictureSelect configured with the given aggregations.
func (papq *ProtectedAreaPictureQuery) Aggregate(fns ...AggregateFunc) *ProtectedAreaPictureSelect {
	return papq.Select().Aggregate(fns...)
}

func (papq *ProtectedAreaPictureQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range papq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, papq); err != nil {
				return err
			}
		}
	}
	for _, f := range papq.ctx.Fields {
		if !protectedareapicture.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if papq.path != nil {
		prev, err := papq.path(ctx)
		if err != nil {
			return err
		}
		papq.sql = prev
	}
	if protectedareapicture.Policy == nil {
		return errors.New("ent: uninitialized protectedareapicture.Policy (forgotten import ent/runtime?)")
	}
	if err := protectedareapicture.Policy.EvalQuery(ctx, papq); err != nil {
		return err
	}
	return nil
}

func (papq *ProtectedAreaPictureQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProtectedAreaPicture, error) {
	var (
		nodes       = []*ProtectedAreaPicture{}
		withFKs     = papq.withFKs
		_spec       = papq.querySpec()
		loadedTypes = [4]bool{
			papq.withCollection != nil,
			papq.withProtectedArea != nil,
			papq.withLocation != nil,
			papq.withLicense != nil,
		}
	)
	if papq.withCollection != nil || papq.withProtectedArea != nil || papq.withLocation != nil || papq.withLicense != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, protectedareapicture.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProtectedAreaPicture).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProtectedAreaPicture{config: papq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(papq.modifiers) > 0 {
		_spec.Modifiers = papq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, papq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := papq.withCollection; query != nil {
		if err := papq.loadCollection(ctx, query, nodes, nil,
			func(n *ProtectedAreaPicture, e *Collection) { n.Edges.Collection = e }); err != nil {
			return nil, err
		}
	}
	if query := papq.withProtectedArea; query != nil {
		if err := papq.loadProtectedArea(ctx, query, nodes, nil,
			func(n *ProtectedAreaPicture, e *ProtectedArea) { n.Edges.ProtectedArea = e }); err != nil {
			return nil, err
		}
	}
	if query := papq.withLocation; query != nil {
		if err := papq.loadLocation(ctx, query, nodes, nil,
			func(n *ProtectedAreaPicture, e *Location) { n.Edges.Location = e }); err != nil {
			return nil, err
		}
	}
	if query := papq.withLicense; query != nil {
		if err := papq.loadLicense(ctx, query, nodes, nil,
			func(n *ProtectedAreaPicture, e *License) { n.Edges.License = e }); err != nil {
			return nil, err
		}
	}
	for i := range papq.loadTotal {
		if err := papq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (papq *ProtectedAreaPictureQuery) loadCollection(ctx context.Context, query *CollectionQuery, nodes []*ProtectedAreaPicture, init func(*ProtectedAreaPicture), assign func(*ProtectedAreaPicture, *Collection)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProtectedAreaPicture)
	for i := range nodes {
		if nodes[i].collection_protected_area_pictures == nil {
			continue
		}
		fk := *nodes[i].collection_protected_area_pictures
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(collection.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "collection_protected_area_pictures" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (papq *ProtectedAreaPictureQuery) loadProtectedArea(ctx context.Context, query *ProtectedAreaQuery, nodes []*ProtectedAreaPicture, init func(*ProtectedAreaPicture), assign func(*ProtectedAreaPicture, *ProtectedArea)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProtectedAreaPicture)
	for i := range nodes {
		if nodes[i].protected_area_protected_area_pictures == nil {
			continue
		}
		fk := *nodes[i].protected_area_protected_area_pictures
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(protectedarea.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "protected_area_protected_area_pictures" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (papq *ProtectedAreaPictureQuery) loadLocation(ctx context.Context, query *LocationQuery, nodes []*ProtectedAreaPicture, init func(*ProtectedAreaPicture), assign func(*ProtectedAreaPicture, *Location)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProtectedAreaPicture)
	for i := range nodes {
		if nodes[i].location_protected_area_pictures == nil {
			continue
		}
		fk := *nodes[i].location_protected_area_pictures
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(location.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "location_protected_area_pictures" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (papq *ProtectedAreaPictureQuery) loadLicense(ctx context.Context, query *LicenseQuery, nodes []*ProtectedAreaPicture, init func(*ProtectedAreaPicture), assign func(*ProtectedAreaPicture, *License)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProtectedAreaPicture)
	for i := range nodes {
		if nodes[i].license_protected_area_pictures == nil {
			continue
		}
		fk := *nodes[i].license_protected_area_pictures
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(license.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "license_protected_area_pictures" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (papq *ProtectedAreaPictureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := papq.querySpec()
	if len(papq.modifiers) > 0 {
		_spec.Modifiers = papq.modifiers
	}
	_spec.Node.Columns = papq.ctx.Fields
	if len(papq.ctx.Fields) > 0 {
		_spec.Unique = papq.ctx.Unique != nil && *papq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, papq.driver, _spec)
}

func (papq *ProtectedAreaPictureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(protectedareapicture.Table, protectedareapicture.Columns, sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt))
	_spec.From = papq.sql
	if unique := papq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if papq.path != nil {
		_spec.Unique = true
	}
	if fields := papq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, protectedareapicture.FieldID)
		for i := range fields {
			if fields[i] != protectedareapicture.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := papq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := papq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := papq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := papq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (papq *ProtectedAreaPictureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(papq.driver.Dialect())
	t1 := builder.Table(protectedareapicture.Table)
	columns := papq.ctx.Fields
	if len(columns) == 0 {
		columns = protectedareapicture.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if papq.sql != nil {
		selector = papq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if papq.ctx.Unique != nil && *papq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range papq.predicates {
		p(selector)
	}
	for _, p := range papq.order {
		p(selector)
	}
	if offset := papq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := papq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProtectedAreaPictureGroupBy is the group-by builder for ProtectedAreaPicture entities.
type ProtectedAreaPictureGroupBy struct {
	selector
	build *ProtectedAreaPictureQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (papgb *ProtectedAreaPictureGroupBy) Aggregate(fns ...AggregateFunc) *ProtectedAreaPictureGroupBy {
	papgb.fns = append(papgb.fns, fns...)
	return papgb
}

// Scan applies the selector query and scans the result into the given value.
func (papgb *ProtectedAreaPictureGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, papgb.build.ctx, "GroupBy")
	if err := papgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProtectedAreaPictureQuery, *ProtectedAreaPictureGroupBy](ctx, papgb.build, papgb, papgb.build.inters, v)
}

func (papgb *ProtectedAreaPictureGroupBy) sqlScan(ctx context.Context, root *ProtectedAreaPictureQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(papgb.fns))
	for _, fn := range papgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*papgb.flds)+len(papgb.fns))
		for _, f := range *papgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*papgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := papgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProtectedAreaPictureSelect is the builder for selecting fields of ProtectedAreaPicture entities.
type ProtectedAreaPictureSelect struct {
	*ProtectedAreaPictureQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (paps *ProtectedAreaPictureSelect) Aggregate(fns ...AggregateFunc) *ProtectedAreaPictureSelect {
	paps.fns = append(paps.fns, fns...)
	return paps
}

// Scan applies the selector query and scans the result into the given value.
func (paps *ProtectedAreaPictureSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, paps.ctx, "Select")
	if err := paps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProtectedAreaPictureQuery, *ProtectedAreaPictureSelect](ctx, paps.ProtectedAreaPictureQuery, paps, paps.inters, v)
}

func (paps *ProtectedAreaPictureSelect) sqlScan(ctx context.Context, root *ProtectedAreaPictureQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(paps.fns))
	for _, fn := range paps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*paps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := paps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
