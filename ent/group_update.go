// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/group"
	"github.com/dkrasnovdev/siberiana-api/ent/herbarium"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetCreatedBy sets the "created_by" field.
func (gu *GroupUpdate) SetCreatedBy(s string) *GroupUpdate {
	gu.mutation.SetCreatedBy(s)
	return gu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableCreatedBy(s *string) *GroupUpdate {
	if s != nil {
		gu.SetCreatedBy(*s)
	}
	return gu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (gu *GroupUpdate) ClearCreatedBy() *GroupUpdate {
	gu.mutation.ClearCreatedBy()
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GroupUpdate) SetUpdatedAt(t time.Time) *GroupUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetUpdatedBy sets the "updated_by" field.
func (gu *GroupUpdate) SetUpdatedBy(s string) *GroupUpdate {
	gu.mutation.SetUpdatedBy(s)
	return gu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableUpdatedBy(s *string) *GroupUpdate {
	if s != nil {
		gu.SetUpdatedBy(*s)
	}
	return gu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (gu *GroupUpdate) ClearUpdatedBy() *GroupUpdate {
	gu.mutation.ClearUpdatedBy()
	return gu
}

// SetDisplayName sets the "display_name" field.
func (gu *GroupUpdate) SetDisplayName(s string) *GroupUpdate {
	gu.mutation.SetDisplayName(s)
	return gu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDisplayName(s *string) *GroupUpdate {
	if s != nil {
		gu.SetDisplayName(*s)
	}
	return gu
}

// ClearDisplayName clears the value of the "display_name" field.
func (gu *GroupUpdate) ClearDisplayName() *GroupUpdate {
	gu.mutation.ClearDisplayName()
	return gu
}

// SetAbbreviation sets the "abbreviation" field.
func (gu *GroupUpdate) SetAbbreviation(s string) *GroupUpdate {
	gu.mutation.SetAbbreviation(s)
	return gu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableAbbreviation(s *string) *GroupUpdate {
	if s != nil {
		gu.SetAbbreviation(*s)
	}
	return gu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (gu *GroupUpdate) ClearAbbreviation() *GroupUpdate {
	gu.mutation.ClearAbbreviation()
	return gu
}

// SetDescription sets the "description" field.
func (gu *GroupUpdate) SetDescription(s string) *GroupUpdate {
	gu.mutation.SetDescription(s)
	return gu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDescription(s *string) *GroupUpdate {
	if s != nil {
		gu.SetDescription(*s)
	}
	return gu
}

// ClearDescription clears the value of the "description" field.
func (gu *GroupUpdate) ClearDescription() *GroupUpdate {
	gu.mutation.ClearDescription()
	return gu
}

// SetExternalLink sets the "external_link" field.
func (gu *GroupUpdate) SetExternalLink(s string) *GroupUpdate {
	gu.mutation.SetExternalLink(s)
	return gu
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableExternalLink(s *string) *GroupUpdate {
	if s != nil {
		gu.SetExternalLink(*s)
	}
	return gu
}

// ClearExternalLink clears the value of the "external_link" field.
func (gu *GroupUpdate) ClearExternalLink() *GroupUpdate {
	gu.mutation.ClearExternalLink()
	return gu
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (gu *GroupUpdate) SetPrimaryImageURL(s string) *GroupUpdate {
	gu.mutation.SetPrimaryImageURL(s)
	return gu
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (gu *GroupUpdate) SetNillablePrimaryImageURL(s *string) *GroupUpdate {
	if s != nil {
		gu.SetPrimaryImageURL(*s)
	}
	return gu
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (gu *GroupUpdate) ClearPrimaryImageURL() *GroupUpdate {
	gu.mutation.ClearPrimaryImageURL()
	return gu
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (gu *GroupUpdate) SetAdditionalImagesUrls(s []string) *GroupUpdate {
	gu.mutation.SetAdditionalImagesUrls(s)
	return gu
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (gu *GroupUpdate) AppendAdditionalImagesUrls(s []string) *GroupUpdate {
	gu.mutation.AppendAdditionalImagesUrls(s)
	return gu
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (gu *GroupUpdate) ClearAdditionalImagesUrls() *GroupUpdate {
	gu.mutation.ClearAdditionalImagesUrls()
	return gu
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (gu *GroupUpdate) AddHerbariumIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddHerbariumIDs(ids...)
	return gu
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (gu *GroupUpdate) AddHerbaria(h ...*Herbarium) *GroupUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return gu.AddHerbariumIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// ClearHerbaria clears all "herbaria" edges to the Herbarium entity.
func (gu *GroupUpdate) ClearHerbaria() *GroupUpdate {
	gu.mutation.ClearHerbaria()
	return gu
}

// RemoveHerbariumIDs removes the "herbaria" edge to Herbarium entities by IDs.
func (gu *GroupUpdate) RemoveHerbariumIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveHerbariumIDs(ids...)
	return gu
}

// RemoveHerbaria removes "herbaria" edges to Herbarium entities.
func (gu *GroupUpdate) RemoveHerbaria(h ...*Herbarium) *GroupUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return gu.RemoveHerbariumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	if err := gu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GroupUpdate) defaults() error {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		if group.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized group.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := group.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.CreatedBy(); ok {
		_spec.SetField(group.FieldCreatedBy, field.TypeString, value)
	}
	if gu.mutation.CreatedByCleared() {
		_spec.ClearField(group.FieldCreatedBy, field.TypeString)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.UpdatedBy(); ok {
		_spec.SetField(group.FieldUpdatedBy, field.TypeString, value)
	}
	if gu.mutation.UpdatedByCleared() {
		_spec.ClearField(group.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := gu.mutation.DisplayName(); ok {
		_spec.SetField(group.FieldDisplayName, field.TypeString, value)
	}
	if gu.mutation.DisplayNameCleared() {
		_spec.ClearField(group.FieldDisplayName, field.TypeString)
	}
	if value, ok := gu.mutation.Abbreviation(); ok {
		_spec.SetField(group.FieldAbbreviation, field.TypeString, value)
	}
	if gu.mutation.AbbreviationCleared() {
		_spec.ClearField(group.FieldAbbreviation, field.TypeString)
	}
	if value, ok := gu.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
	}
	if gu.mutation.DescriptionCleared() {
		_spec.ClearField(group.FieldDescription, field.TypeString)
	}
	if value, ok := gu.mutation.ExternalLink(); ok {
		_spec.SetField(group.FieldExternalLink, field.TypeString, value)
	}
	if gu.mutation.ExternalLinkCleared() {
		_spec.ClearField(group.FieldExternalLink, field.TypeString)
	}
	if value, ok := gu.mutation.PrimaryImageURL(); ok {
		_spec.SetField(group.FieldPrimaryImageURL, field.TypeString, value)
	}
	if gu.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(group.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := gu.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(group.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := gu.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, group.FieldAdditionalImagesUrls, value)
		})
	}
	if gu.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(group.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if gu.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.HerbariaTable,
			Columns: []string{group.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedHerbariaIDs(); len(nodes) > 0 && !gu.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.HerbariaTable,
			Columns: []string{group.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.HerbariaTable,
			Columns: []string{group.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetCreatedBy sets the "created_by" field.
func (guo *GroupUpdateOne) SetCreatedBy(s string) *GroupUpdateOne {
	guo.mutation.SetCreatedBy(s)
	return guo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableCreatedBy(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetCreatedBy(*s)
	}
	return guo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (guo *GroupUpdateOne) ClearCreatedBy() *GroupUpdateOne {
	guo.mutation.ClearCreatedBy()
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GroupUpdateOne) SetUpdatedAt(t time.Time) *GroupUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetUpdatedBy sets the "updated_by" field.
func (guo *GroupUpdateOne) SetUpdatedBy(s string) *GroupUpdateOne {
	guo.mutation.SetUpdatedBy(s)
	return guo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableUpdatedBy(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetUpdatedBy(*s)
	}
	return guo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (guo *GroupUpdateOne) ClearUpdatedBy() *GroupUpdateOne {
	guo.mutation.ClearUpdatedBy()
	return guo
}

// SetDisplayName sets the "display_name" field.
func (guo *GroupUpdateOne) SetDisplayName(s string) *GroupUpdateOne {
	guo.mutation.SetDisplayName(s)
	return guo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDisplayName(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetDisplayName(*s)
	}
	return guo
}

// ClearDisplayName clears the value of the "display_name" field.
func (guo *GroupUpdateOne) ClearDisplayName() *GroupUpdateOne {
	guo.mutation.ClearDisplayName()
	return guo
}

// SetAbbreviation sets the "abbreviation" field.
func (guo *GroupUpdateOne) SetAbbreviation(s string) *GroupUpdateOne {
	guo.mutation.SetAbbreviation(s)
	return guo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableAbbreviation(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetAbbreviation(*s)
	}
	return guo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (guo *GroupUpdateOne) ClearAbbreviation() *GroupUpdateOne {
	guo.mutation.ClearAbbreviation()
	return guo
}

// SetDescription sets the "description" field.
func (guo *GroupUpdateOne) SetDescription(s string) *GroupUpdateOne {
	guo.mutation.SetDescription(s)
	return guo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDescription(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetDescription(*s)
	}
	return guo
}

// ClearDescription clears the value of the "description" field.
func (guo *GroupUpdateOne) ClearDescription() *GroupUpdateOne {
	guo.mutation.ClearDescription()
	return guo
}

// SetExternalLink sets the "external_link" field.
func (guo *GroupUpdateOne) SetExternalLink(s string) *GroupUpdateOne {
	guo.mutation.SetExternalLink(s)
	return guo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableExternalLink(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetExternalLink(*s)
	}
	return guo
}

// ClearExternalLink clears the value of the "external_link" field.
func (guo *GroupUpdateOne) ClearExternalLink() *GroupUpdateOne {
	guo.mutation.ClearExternalLink()
	return guo
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (guo *GroupUpdateOne) SetPrimaryImageURL(s string) *GroupUpdateOne {
	guo.mutation.SetPrimaryImageURL(s)
	return guo
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillablePrimaryImageURL(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetPrimaryImageURL(*s)
	}
	return guo
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (guo *GroupUpdateOne) ClearPrimaryImageURL() *GroupUpdateOne {
	guo.mutation.ClearPrimaryImageURL()
	return guo
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (guo *GroupUpdateOne) SetAdditionalImagesUrls(s []string) *GroupUpdateOne {
	guo.mutation.SetAdditionalImagesUrls(s)
	return guo
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (guo *GroupUpdateOne) AppendAdditionalImagesUrls(s []string) *GroupUpdateOne {
	guo.mutation.AppendAdditionalImagesUrls(s)
	return guo
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (guo *GroupUpdateOne) ClearAdditionalImagesUrls() *GroupUpdateOne {
	guo.mutation.ClearAdditionalImagesUrls()
	return guo
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (guo *GroupUpdateOne) AddHerbariumIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddHerbariumIDs(ids...)
	return guo
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (guo *GroupUpdateOne) AddHerbaria(h ...*Herbarium) *GroupUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return guo.AddHerbariumIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// ClearHerbaria clears all "herbaria" edges to the Herbarium entity.
func (guo *GroupUpdateOne) ClearHerbaria() *GroupUpdateOne {
	guo.mutation.ClearHerbaria()
	return guo
}

// RemoveHerbariumIDs removes the "herbaria" edge to Herbarium entities by IDs.
func (guo *GroupUpdateOne) RemoveHerbariumIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveHerbariumIDs(ids...)
	return guo
}

// RemoveHerbaria removes "herbaria" edges to Herbarium entities.
func (guo *GroupUpdateOne) RemoveHerbaria(h ...*Herbarium) *GroupUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return guo.RemoveHerbariumIDs(ids...)
}

// Where appends a list predicates to the GroupUpdate builder.
func (guo *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	if err := guo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GroupUpdateOne) defaults() error {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		if group.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized group.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := group.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.CreatedBy(); ok {
		_spec.SetField(group.FieldCreatedBy, field.TypeString, value)
	}
	if guo.mutation.CreatedByCleared() {
		_spec.ClearField(group.FieldCreatedBy, field.TypeString)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.UpdatedBy(); ok {
		_spec.SetField(group.FieldUpdatedBy, field.TypeString, value)
	}
	if guo.mutation.UpdatedByCleared() {
		_spec.ClearField(group.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := guo.mutation.DisplayName(); ok {
		_spec.SetField(group.FieldDisplayName, field.TypeString, value)
	}
	if guo.mutation.DisplayNameCleared() {
		_spec.ClearField(group.FieldDisplayName, field.TypeString)
	}
	if value, ok := guo.mutation.Abbreviation(); ok {
		_spec.SetField(group.FieldAbbreviation, field.TypeString, value)
	}
	if guo.mutation.AbbreviationCleared() {
		_spec.ClearField(group.FieldAbbreviation, field.TypeString)
	}
	if value, ok := guo.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
	}
	if guo.mutation.DescriptionCleared() {
		_spec.ClearField(group.FieldDescription, field.TypeString)
	}
	if value, ok := guo.mutation.ExternalLink(); ok {
		_spec.SetField(group.FieldExternalLink, field.TypeString, value)
	}
	if guo.mutation.ExternalLinkCleared() {
		_spec.ClearField(group.FieldExternalLink, field.TypeString)
	}
	if value, ok := guo.mutation.PrimaryImageURL(); ok {
		_spec.SetField(group.FieldPrimaryImageURL, field.TypeString, value)
	}
	if guo.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(group.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := guo.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(group.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := guo.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, group.FieldAdditionalImagesUrls, value)
		})
	}
	if guo.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(group.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if guo.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.HerbariaTable,
			Columns: []string{group.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedHerbariaIDs(); len(nodes) > 0 && !guo.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.HerbariaTable,
			Columns: []string{group.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.HerbariaTable,
			Columns: []string{group.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
