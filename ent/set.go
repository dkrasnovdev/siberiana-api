// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/heritage-api/ent/set"
)

// Set is the model entity for the Set schema.
type Set struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ExternalLinks holds the value of the "external_links" field.
	ExternalLinks []string `json:"external_links,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SetQuery when eager-loading is set.
	Edges        SetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SetEdges holds the relations/edges for other nodes in the graph.
type SetEdges struct {
	// Artifacts holds the value of the artifacts edge.
	Artifacts []*Artifact `json:"artifacts,omitempty"`
	// Monuments holds the value of the monuments edge.
	Monuments []*Monument `json:"monuments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedArtifacts map[string][]*Artifact
	namedMonuments map[string][]*Monument
}

// ArtifactsOrErr returns the Artifacts value or an error if the edge
// was not loaded in eager-loading.
func (e SetEdges) ArtifactsOrErr() ([]*Artifact, error) {
	if e.loadedTypes[0] {
		return e.Artifacts, nil
	}
	return nil, &NotLoadedError{edge: "artifacts"}
}

// MonumentsOrErr returns the Monuments value or an error if the edge
// was not loaded in eager-loading.
func (e SetEdges) MonumentsOrErr() ([]*Monument, error) {
	if e.loadedTypes[1] {
		return e.Monuments, nil
	}
	return nil, &NotLoadedError{edge: "monuments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Set) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case set.FieldExternalLinks:
			values[i] = new([]byte)
		case set.FieldID:
			values[i] = new(sql.NullInt64)
		case set.FieldCreatedBy, set.FieldUpdatedBy, set.FieldDisplayName, set.FieldDescription:
			values[i] = new(sql.NullString)
		case set.FieldCreatedAt, set.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Set fields.
func (s *Set) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case set.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case set.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case set.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = value.String
			}
		case set.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case set.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = value.String
			}
		case set.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				s.DisplayName = value.String
			}
		case set.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case set.FieldExternalLinks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field external_links", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.ExternalLinks); err != nil {
					return fmt.Errorf("unmarshal field external_links: %w", err)
				}
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Set.
// This includes values selected through modifiers, order, etc.
func (s *Set) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryArtifacts queries the "artifacts" edge of the Set entity.
func (s *Set) QueryArtifacts() *ArtifactQuery {
	return NewSetClient(s.config).QueryArtifacts(s)
}

// QueryMonuments queries the "monuments" edge of the Set entity.
func (s *Set) QueryMonuments() *MonumentQuery {
	return NewSetClient(s.config).QueryMonuments(s)
}

// Update returns a builder for updating this Set.
// Note that you need to call Set.Unwrap() before calling this method if this Set
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Set) Update() *SetUpdateOne {
	return NewSetClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Set entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Set) Unwrap() *Set {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Set is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Set) String() string {
	var builder strings.Builder
	builder.WriteString("Set(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(s.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(s.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(s.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("external_links=")
	builder.WriteString(fmt.Sprintf("%v", s.ExternalLinks))
	builder.WriteByte(')')
	return builder.String()
}

// NamedArtifacts returns the Artifacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Set) NamedArtifacts(name string) ([]*Artifact, error) {
	if s.Edges.namedArtifacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedArtifacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Set) appendNamedArtifacts(name string, edges ...*Artifact) {
	if s.Edges.namedArtifacts == nil {
		s.Edges.namedArtifacts = make(map[string][]*Artifact)
	}
	if len(edges) == 0 {
		s.Edges.namedArtifacts[name] = []*Artifact{}
	} else {
		s.Edges.namedArtifacts[name] = append(s.Edges.namedArtifacts[name], edges...)
	}
}

// NamedMonuments returns the Monuments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Set) NamedMonuments(name string) ([]*Monument, error) {
	if s.Edges.namedMonuments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedMonuments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Set) appendNamedMonuments(name string, edges ...*Monument) {
	if s.Edges.namedMonuments == nil {
		s.Edges.namedMonuments = make(map[string][]*Monument)
	}
	if len(edges) == 0 {
		s.Edges.namedMonuments[name] = []*Monument{}
	} else {
		s.Edges.namedMonuments[name] = append(s.Edges.namedMonuments[name], edges...)
	}
}

// Sets is a parsable slice of Set.
type Sets []*Set
