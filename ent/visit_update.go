// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/mound"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/visit"
)

// VisitUpdate is the builder for updating Visit entities.
type VisitUpdate struct {
	config
	hooks    []Hook
	mutation *VisitMutation
}

// Where appends a list predicates to the VisitUpdate builder.
func (vu *VisitUpdate) Where(ps ...predicate.Visit) *VisitUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetCreatedBy sets the "created_by" field.
func (vu *VisitUpdate) SetCreatedBy(s string) *VisitUpdate {
	vu.mutation.SetCreatedBy(s)
	return vu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vu *VisitUpdate) SetNillableCreatedBy(s *string) *VisitUpdate {
	if s != nil {
		vu.SetCreatedBy(*s)
	}
	return vu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (vu *VisitUpdate) ClearCreatedBy() *VisitUpdate {
	vu.mutation.ClearCreatedBy()
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VisitUpdate) SetUpdatedAt(t time.Time) *VisitUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetUpdatedBy sets the "updated_by" field.
func (vu *VisitUpdate) SetUpdatedBy(s string) *VisitUpdate {
	vu.mutation.SetUpdatedBy(s)
	return vu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vu *VisitUpdate) SetNillableUpdatedBy(s *string) *VisitUpdate {
	if s != nil {
		vu.SetUpdatedBy(*s)
	}
	return vu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vu *VisitUpdate) ClearUpdatedBy() *VisitUpdate {
	vu.mutation.ClearUpdatedBy()
	return vu
}

// SetYear sets the "year" field.
func (vu *VisitUpdate) SetYear(i int) *VisitUpdate {
	vu.mutation.ResetYear()
	vu.mutation.SetYear(i)
	return vu
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (vu *VisitUpdate) SetNillableYear(i *int) *VisitUpdate {
	if i != nil {
		vu.SetYear(*i)
	}
	return vu
}

// AddYear adds i to the "year" field.
func (vu *VisitUpdate) AddYear(i int) *VisitUpdate {
	vu.mutation.AddYear(i)
	return vu
}

// ClearYear clears the value of the "year" field.
func (vu *VisitUpdate) ClearYear() *VisitUpdate {
	vu.mutation.ClearYear()
	return vu
}

// AddMoundIDs adds the "mounds" edge to the Mound entity by IDs.
func (vu *VisitUpdate) AddMoundIDs(ids ...int) *VisitUpdate {
	vu.mutation.AddMoundIDs(ids...)
	return vu
}

// AddMounds adds the "mounds" edges to the Mound entity.
func (vu *VisitUpdate) AddMounds(m ...*Mound) *VisitUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.AddMoundIDs(ids...)
}

// AddVisitorIDs adds the "visitors" edge to the Person entity by IDs.
func (vu *VisitUpdate) AddVisitorIDs(ids ...int) *VisitUpdate {
	vu.mutation.AddVisitorIDs(ids...)
	return vu
}

// AddVisitors adds the "visitors" edges to the Person entity.
func (vu *VisitUpdate) AddVisitors(p ...*Person) *VisitUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vu.AddVisitorIDs(ids...)
}

// Mutation returns the VisitMutation object of the builder.
func (vu *VisitUpdate) Mutation() *VisitMutation {
	return vu.mutation
}

// ClearMounds clears all "mounds" edges to the Mound entity.
func (vu *VisitUpdate) ClearMounds() *VisitUpdate {
	vu.mutation.ClearMounds()
	return vu
}

// RemoveMoundIDs removes the "mounds" edge to Mound entities by IDs.
func (vu *VisitUpdate) RemoveMoundIDs(ids ...int) *VisitUpdate {
	vu.mutation.RemoveMoundIDs(ids...)
	return vu
}

// RemoveMounds removes "mounds" edges to Mound entities.
func (vu *VisitUpdate) RemoveMounds(m ...*Mound) *VisitUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.RemoveMoundIDs(ids...)
}

// ClearVisitors clears all "visitors" edges to the Person entity.
func (vu *VisitUpdate) ClearVisitors() *VisitUpdate {
	vu.mutation.ClearVisitors()
	return vu
}

// RemoveVisitorIDs removes the "visitors" edge to Person entities by IDs.
func (vu *VisitUpdate) RemoveVisitorIDs(ids ...int) *VisitUpdate {
	vu.mutation.RemoveVisitorIDs(ids...)
	return vu
}

// RemoveVisitors removes "visitors" edges to Person entities.
func (vu *VisitUpdate) RemoveVisitors(p ...*Person) *VisitUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vu.RemoveVisitorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VisitUpdate) Save(ctx context.Context) (int, error) {
	if err := vu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VisitUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VisitUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VisitUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VisitUpdate) defaults() error {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		if visit.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized visit.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := visit.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vu *VisitUpdate) check() error {
	if v, ok := vu.mutation.Year(); ok {
		if err := visit.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "Visit.year": %w`, err)}
		}
	}
	return nil
}

func (vu *VisitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(visit.Table, visit.Columns, sqlgraph.NewFieldSpec(visit.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.CreatedBy(); ok {
		_spec.SetField(visit.FieldCreatedBy, field.TypeString, value)
	}
	if vu.mutation.CreatedByCleared() {
		_spec.ClearField(visit.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(visit.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.UpdatedBy(); ok {
		_spec.SetField(visit.FieldUpdatedBy, field.TypeString, value)
	}
	if vu.mutation.UpdatedByCleared() {
		_spec.ClearField(visit.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vu.mutation.Year(); ok {
		_spec.SetField(visit.FieldYear, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedYear(); ok {
		_spec.AddField(visit.FieldYear, field.TypeInt, value)
	}
	if vu.mutation.YearCleared() {
		_spec.ClearField(visit.FieldYear, field.TypeInt)
	}
	if vu.mutation.MoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   visit.MoundsTable,
			Columns: visit.MoundsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mound.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedMoundsIDs(); len(nodes) > 0 && !vu.mutation.MoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   visit.MoundsTable,
			Columns: visit.MoundsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mound.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.MoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   visit.MoundsTable,
			Columns: visit.MoundsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mound.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.VisitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visit.VisitorsTable,
			Columns: visit.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedVisitorsIDs(); len(nodes) > 0 && !vu.mutation.VisitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visit.VisitorsTable,
			Columns: visit.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.VisitorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visit.VisitorsTable,
			Columns: visit.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VisitUpdateOne is the builder for updating a single Visit entity.
type VisitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VisitMutation
}

// SetCreatedBy sets the "created_by" field.
func (vuo *VisitUpdateOne) SetCreatedBy(s string) *VisitUpdateOne {
	vuo.mutation.SetCreatedBy(s)
	return vuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillableCreatedBy(s *string) *VisitUpdateOne {
	if s != nil {
		vuo.SetCreatedBy(*s)
	}
	return vuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (vuo *VisitUpdateOne) ClearCreatedBy() *VisitUpdateOne {
	vuo.mutation.ClearCreatedBy()
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VisitUpdateOne) SetUpdatedAt(t time.Time) *VisitUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vuo *VisitUpdateOne) SetUpdatedBy(s string) *VisitUpdateOne {
	vuo.mutation.SetUpdatedBy(s)
	return vuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillableUpdatedBy(s *string) *VisitUpdateOne {
	if s != nil {
		vuo.SetUpdatedBy(*s)
	}
	return vuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vuo *VisitUpdateOne) ClearUpdatedBy() *VisitUpdateOne {
	vuo.mutation.ClearUpdatedBy()
	return vuo
}

// SetYear sets the "year" field.
func (vuo *VisitUpdateOne) SetYear(i int) *VisitUpdateOne {
	vuo.mutation.ResetYear()
	vuo.mutation.SetYear(i)
	return vuo
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillableYear(i *int) *VisitUpdateOne {
	if i != nil {
		vuo.SetYear(*i)
	}
	return vuo
}

// AddYear adds i to the "year" field.
func (vuo *VisitUpdateOne) AddYear(i int) *VisitUpdateOne {
	vuo.mutation.AddYear(i)
	return vuo
}

// ClearYear clears the value of the "year" field.
func (vuo *VisitUpdateOne) ClearYear() *VisitUpdateOne {
	vuo.mutation.ClearYear()
	return vuo
}

// AddMoundIDs adds the "mounds" edge to the Mound entity by IDs.
func (vuo *VisitUpdateOne) AddMoundIDs(ids ...int) *VisitUpdateOne {
	vuo.mutation.AddMoundIDs(ids...)
	return vuo
}

// AddMounds adds the "mounds" edges to the Mound entity.
func (vuo *VisitUpdateOne) AddMounds(m ...*Mound) *VisitUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.AddMoundIDs(ids...)
}

// AddVisitorIDs adds the "visitors" edge to the Person entity by IDs.
func (vuo *VisitUpdateOne) AddVisitorIDs(ids ...int) *VisitUpdateOne {
	vuo.mutation.AddVisitorIDs(ids...)
	return vuo
}

// AddVisitors adds the "visitors" edges to the Person entity.
func (vuo *VisitUpdateOne) AddVisitors(p ...*Person) *VisitUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vuo.AddVisitorIDs(ids...)
}

// Mutation returns the VisitMutation object of the builder.
func (vuo *VisitUpdateOne) Mutation() *VisitMutation {
	return vuo.mutation
}

// ClearMounds clears all "mounds" edges to the Mound entity.
func (vuo *VisitUpdateOne) ClearMounds() *VisitUpdateOne {
	vuo.mutation.ClearMounds()
	return vuo
}

// RemoveMoundIDs removes the "mounds" edge to Mound entities by IDs.
func (vuo *VisitUpdateOne) RemoveMoundIDs(ids ...int) *VisitUpdateOne {
	vuo.mutation.RemoveMoundIDs(ids...)
	return vuo
}

// RemoveMounds removes "mounds" edges to Mound entities.
func (vuo *VisitUpdateOne) RemoveMounds(m ...*Mound) *VisitUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.RemoveMoundIDs(ids...)
}

// ClearVisitors clears all "visitors" edges to the Person entity.
func (vuo *VisitUpdateOne) ClearVisitors() *VisitUpdateOne {
	vuo.mutation.ClearVisitors()
	return vuo
}

// RemoveVisitorIDs removes the "visitors" edge to Person entities by IDs.
func (vuo *VisitUpdateOne) RemoveVisitorIDs(ids ...int) *VisitUpdateOne {
	vuo.mutation.RemoveVisitorIDs(ids...)
	return vuo
}

// RemoveVisitors removes "visitors" edges to Person entities.
func (vuo *VisitUpdateOne) RemoveVisitors(p ...*Person) *VisitUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vuo.RemoveVisitorIDs(ids...)
}

// Where appends a list predicates to the VisitUpdate builder.
func (vuo *VisitUpdateOne) Where(ps ...predicate.Visit) *VisitUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VisitUpdateOne) Select(field string, fields ...string) *VisitUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Visit entity.
func (vuo *VisitUpdateOne) Save(ctx context.Context) (*Visit, error) {
	if err := vuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VisitUpdateOne) SaveX(ctx context.Context) *Visit {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VisitUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VisitUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VisitUpdateOne) defaults() error {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		if visit.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized visit.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := visit.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VisitUpdateOne) check() error {
	if v, ok := vuo.mutation.Year(); ok {
		if err := visit.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "Visit.year": %w`, err)}
		}
	}
	return nil
}

func (vuo *VisitUpdateOne) sqlSave(ctx context.Context) (_node *Visit, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(visit.Table, visit.Columns, sqlgraph.NewFieldSpec(visit.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Visit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, visit.FieldID)
		for _, f := range fields {
			if !visit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != visit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.CreatedBy(); ok {
		_spec.SetField(visit.FieldCreatedBy, field.TypeString, value)
	}
	if vuo.mutation.CreatedByCleared() {
		_spec.ClearField(visit.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(visit.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.UpdatedBy(); ok {
		_spec.SetField(visit.FieldUpdatedBy, field.TypeString, value)
	}
	if vuo.mutation.UpdatedByCleared() {
		_spec.ClearField(visit.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vuo.mutation.Year(); ok {
		_spec.SetField(visit.FieldYear, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedYear(); ok {
		_spec.AddField(visit.FieldYear, field.TypeInt, value)
	}
	if vuo.mutation.YearCleared() {
		_spec.ClearField(visit.FieldYear, field.TypeInt)
	}
	if vuo.mutation.MoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   visit.MoundsTable,
			Columns: visit.MoundsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mound.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedMoundsIDs(); len(nodes) > 0 && !vuo.mutation.MoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   visit.MoundsTable,
			Columns: visit.MoundsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mound.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.MoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   visit.MoundsTable,
			Columns: visit.MoundsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mound.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.VisitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visit.VisitorsTable,
			Columns: visit.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedVisitorsIDs(); len(nodes) > 0 && !vuo.mutation.VisitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visit.VisitorsTable,
			Columns: visit.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.VisitorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visit.VisitorsTable,
			Columns: visit.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Visit{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
