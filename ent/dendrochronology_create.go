// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronologicalanalysis"
	"github.com/dkrasnovdev/siberiana-api/ent/dendrochronology"
)

// DendrochronologyCreate is the builder for creating a Dendrochronology entity.
type DendrochronologyCreate struct {
	config
	mutation *DendrochronologyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dc *DendrochronologyCreate) SetCreatedAt(t time.Time) *DendrochronologyCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableCreatedAt(t *time.Time) *DendrochronologyCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetCreatedBy sets the "created_by" field.
func (dc *DendrochronologyCreate) SetCreatedBy(s string) *DendrochronologyCreate {
	dc.mutation.SetCreatedBy(s)
	return dc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableCreatedBy(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetCreatedBy(*s)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DendrochronologyCreate) SetUpdatedAt(t time.Time) *DendrochronologyCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableUpdatedAt(t *time.Time) *DendrochronologyCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetUpdatedBy sets the "updated_by" field.
func (dc *DendrochronologyCreate) SetUpdatedBy(s string) *DendrochronologyCreate {
	dc.mutation.SetUpdatedBy(s)
	return dc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableUpdatedBy(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetUpdatedBy(*s)
	}
	return dc
}

// SetDating sets the "dating" field.
func (dc *DendrochronologyCreate) SetDating(s string) *DendrochronologyCreate {
	dc.mutation.SetDating(s)
	return dc
}

// SetNillableDating sets the "dating" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableDating(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetDating(*s)
	}
	return dc
}

// SetDatingStart sets the "dating_start" field.
func (dc *DendrochronologyCreate) SetDatingStart(i int) *DendrochronologyCreate {
	dc.mutation.SetDatingStart(i)
	return dc
}

// SetNillableDatingStart sets the "dating_start" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableDatingStart(i *int) *DendrochronologyCreate {
	if i != nil {
		dc.SetDatingStart(*i)
	}
	return dc
}

// SetDatingEnd sets the "dating_end" field.
func (dc *DendrochronologyCreate) SetDatingEnd(i int) *DendrochronologyCreate {
	dc.mutation.SetDatingEnd(i)
	return dc
}

// SetNillableDatingEnd sets the "dating_end" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableDatingEnd(i *int) *DendrochronologyCreate {
	if i != nil {
		dc.SetDatingEnd(*i)
	}
	return dc
}

// SetDisplayName sets the "display_name" field.
func (dc *DendrochronologyCreate) SetDisplayName(s string) *DendrochronologyCreate {
	dc.mutation.SetDisplayName(s)
	return dc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableDisplayName(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetDisplayName(*s)
	}
	return dc
}

// SetAbbreviation sets the "abbreviation" field.
func (dc *DendrochronologyCreate) SetAbbreviation(s string) *DendrochronologyCreate {
	dc.mutation.SetAbbreviation(s)
	return dc
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableAbbreviation(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetAbbreviation(*s)
	}
	return dc
}

// SetDescription sets the "description" field.
func (dc *DendrochronologyCreate) SetDescription(s string) *DendrochronologyCreate {
	dc.mutation.SetDescription(s)
	return dc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableDescription(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetDescription(*s)
	}
	return dc
}

// SetExternalLink sets the "external_link" field.
func (dc *DendrochronologyCreate) SetExternalLink(s string) *DendrochronologyCreate {
	dc.mutation.SetExternalLink(s)
	return dc
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableExternalLink(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetExternalLink(*s)
	}
	return dc
}

// SetStatus sets the "status" field.
func (dc *DendrochronologyCreate) SetStatus(d dendrochronology.Status) *DendrochronologyCreate {
	dc.mutation.SetStatus(d)
	return dc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableStatus(d *dendrochronology.Status) *DendrochronologyCreate {
	if d != nil {
		dc.SetStatus(*d)
	}
	return dc
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (dc *DendrochronologyCreate) SetPrimaryImageURL(s string) *DendrochronologyCreate {
	dc.mutation.SetPrimaryImageURL(s)
	return dc
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillablePrimaryImageURL(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetPrimaryImageURL(*s)
	}
	return dc
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (dc *DendrochronologyCreate) SetAdditionalImagesUrls(s []string) *DendrochronologyCreate {
	dc.mutation.SetAdditionalImagesUrls(s)
	return dc
}

// SetDeletedAt sets the "deleted_at" field.
func (dc *DendrochronologyCreate) SetDeletedAt(t time.Time) *DendrochronologyCreate {
	dc.mutation.SetDeletedAt(t)
	return dc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableDeletedAt(t *time.Time) *DendrochronologyCreate {
	if t != nil {
		dc.SetDeletedAt(*t)
	}
	return dc
}

// SetDeletedBy sets the "deleted_by" field.
func (dc *DendrochronologyCreate) SetDeletedBy(s string) *DendrochronologyCreate {
	dc.mutation.SetDeletedBy(s)
	return dc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableDeletedBy(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetDeletedBy(*s)
	}
	return dc
}

// SetAnalysisData sets the "analysis_data" field.
func (dc *DendrochronologyCreate) SetAnalysisData(s string) *DendrochronologyCreate {
	dc.mutation.SetAnalysisData(s)
	return dc
}

// SetNillableAnalysisData sets the "analysis_data" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableAnalysisData(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetAnalysisData(*s)
	}
	return dc
}

// SetAnalysisURL sets the "analysis_url" field.
func (dc *DendrochronologyCreate) SetAnalysisURL(s string) *DendrochronologyCreate {
	dc.mutation.SetAnalysisURL(s)
	return dc
}

// SetNillableAnalysisURL sets the "analysis_url" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableAnalysisURL(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetAnalysisURL(*s)
	}
	return dc
}

// SetDataURL sets the "data_url" field.
func (dc *DendrochronologyCreate) SetDataURL(s string) *DendrochronologyCreate {
	dc.mutation.SetDataURL(s)
	return dc
}

// SetNillableDataURL sets the "data_url" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableDataURL(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetDataURL(*s)
	}
	return dc
}

// SetChartURL sets the "chart_url" field.
func (dc *DendrochronologyCreate) SetChartURL(s string) *DendrochronologyCreate {
	dc.mutation.SetChartURL(s)
	return dc
}

// SetNillableChartURL sets the "chart_url" field if the given value is not nil.
func (dc *DendrochronologyCreate) SetNillableChartURL(s *string) *DendrochronologyCreate {
	if s != nil {
		dc.SetChartURL(*s)
	}
	return dc
}

// AddAnalysiIDs adds the "analysis" edge to the DendrochronologicalAnalysis entity by IDs.
func (dc *DendrochronologyCreate) AddAnalysiIDs(ids ...int) *DendrochronologyCreate {
	dc.mutation.AddAnalysiIDs(ids...)
	return dc
}

// AddAnalysis adds the "analysis" edges to the DendrochronologicalAnalysis entity.
func (dc *DendrochronologyCreate) AddAnalysis(d ...*DendrochronologicalAnalysis) *DendrochronologyCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddAnalysiIDs(ids...)
}

// Mutation returns the DendrochronologyMutation object of the builder.
func (dc *DendrochronologyCreate) Mutation() *DendrochronologyMutation {
	return dc.mutation
}

// Save creates the Dendrochronology in the database.
func (dc *DendrochronologyCreate) Save(ctx context.Context) (*Dendrochronology, error) {
	if err := dc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DendrochronologyCreate) SaveX(ctx context.Context) *Dendrochronology {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DendrochronologyCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DendrochronologyCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DendrochronologyCreate) defaults() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		if dendrochronology.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized dendrochronology.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := dendrochronology.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		if dendrochronology.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized dendrochronology.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := dendrochronology.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.Status(); !ok {
		v := dendrochronology.DefaultStatus
		dc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dc *DendrochronologyCreate) check() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Dendrochronology.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Dendrochronology.updated_at"`)}
	}
	if v, ok := dc.mutation.Status(); ok {
		if err := dendrochronology.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Dendrochronology.status": %w`, err)}
		}
	}
	return nil
}

func (dc *DendrochronologyCreate) sqlSave(ctx context.Context) (*Dendrochronology, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DendrochronologyCreate) createSpec() (*Dendrochronology, *sqlgraph.CreateSpec) {
	var (
		_node = &Dendrochronology{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(dendrochronology.Table, sqlgraph.NewFieldSpec(dendrochronology.FieldID, field.TypeInt))
	)
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(dendrochronology.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.CreatedBy(); ok {
		_spec.SetField(dendrochronology.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(dendrochronology.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.UpdatedBy(); ok {
		_spec.SetField(dendrochronology.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := dc.mutation.Dating(); ok {
		_spec.SetField(dendrochronology.FieldDating, field.TypeString, value)
		_node.Dating = value
	}
	if value, ok := dc.mutation.DatingStart(); ok {
		_spec.SetField(dendrochronology.FieldDatingStart, field.TypeInt, value)
		_node.DatingStart = value
	}
	if value, ok := dc.mutation.DatingEnd(); ok {
		_spec.SetField(dendrochronology.FieldDatingEnd, field.TypeInt, value)
		_node.DatingEnd = value
	}
	if value, ok := dc.mutation.DisplayName(); ok {
		_spec.SetField(dendrochronology.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := dc.mutation.Abbreviation(); ok {
		_spec.SetField(dendrochronology.FieldAbbreviation, field.TypeString, value)
		_node.Abbreviation = value
	}
	if value, ok := dc.mutation.Description(); ok {
		_spec.SetField(dendrochronology.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := dc.mutation.ExternalLink(); ok {
		_spec.SetField(dendrochronology.FieldExternalLink, field.TypeString, value)
		_node.ExternalLink = value
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.SetField(dendrochronology.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := dc.mutation.PrimaryImageURL(); ok {
		_spec.SetField(dendrochronology.FieldPrimaryImageURL, field.TypeString, value)
		_node.PrimaryImageURL = value
	}
	if value, ok := dc.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(dendrochronology.FieldAdditionalImagesUrls, field.TypeJSON, value)
		_node.AdditionalImagesUrls = value
	}
	if value, ok := dc.mutation.DeletedAt(); ok {
		_spec.SetField(dendrochronology.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := dc.mutation.DeletedBy(); ok {
		_spec.SetField(dendrochronology.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := dc.mutation.AnalysisData(); ok {
		_spec.SetField(dendrochronology.FieldAnalysisData, field.TypeString, value)
		_node.AnalysisData = value
	}
	if value, ok := dc.mutation.AnalysisURL(); ok {
		_spec.SetField(dendrochronology.FieldAnalysisURL, field.TypeString, value)
		_node.AnalysisURL = value
	}
	if value, ok := dc.mutation.DataURL(); ok {
		_spec.SetField(dendrochronology.FieldDataURL, field.TypeString, value)
		_node.DataURL = value
	}
	if value, ok := dc.mutation.ChartURL(); ok {
		_spec.SetField(dendrochronology.FieldChartURL, field.TypeString, value)
		_node.ChartURL = value
	}
	if nodes := dc.mutation.AnalysisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   dendrochronology.AnalysisTable,
			Columns: []string{dendrochronology.AnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dendrochronologicalanalysis.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DendrochronologyCreateBulk is the builder for creating many Dendrochronology entities in bulk.
type DendrochronologyCreateBulk struct {
	config
	err      error
	builders []*DendrochronologyCreate
}

// Save creates the Dendrochronology entities in the database.
func (dcb *DendrochronologyCreateBulk) Save(ctx context.Context) ([]*Dendrochronology, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dendrochronology, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DendrochronologyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DendrochronologyCreateBulk) SaveX(ctx context.Context) []*Dendrochronology {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DendrochronologyCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DendrochronologyCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
