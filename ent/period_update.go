// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/artifact"
	"github.com/dkrasnovdev/heritage-api/ent/period"
	"github.com/dkrasnovdev/heritage-api/ent/predicate"
)

// PeriodUpdate is the builder for updating Period entities.
type PeriodUpdate struct {
	config
	hooks    []Hook
	mutation *PeriodMutation
}

// Where appends a list predicates to the PeriodUpdate builder.
func (pu *PeriodUpdate) Where(ps ...predicate.Period) *PeriodUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *PeriodUpdate) SetCreatedBy(s string) *PeriodUpdate {
	pu.mutation.SetCreatedBy(s)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *PeriodUpdate) SetNillableCreatedBy(s *string) *PeriodUpdate {
	if s != nil {
		pu.SetCreatedBy(*s)
	}
	return pu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pu *PeriodUpdate) ClearCreatedBy() *PeriodUpdate {
	pu.mutation.ClearCreatedBy()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PeriodUpdate) SetUpdatedAt(t time.Time) *PeriodUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PeriodUpdate) SetUpdatedBy(s string) *PeriodUpdate {
	pu.mutation.SetUpdatedBy(s)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *PeriodUpdate) SetNillableUpdatedBy(s *string) *PeriodUpdate {
	if s != nil {
		pu.SetUpdatedBy(*s)
	}
	return pu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pu *PeriodUpdate) ClearUpdatedBy() *PeriodUpdate {
	pu.mutation.ClearUpdatedBy()
	return pu
}

// SetDisplayName sets the "display_name" field.
func (pu *PeriodUpdate) SetDisplayName(s string) *PeriodUpdate {
	pu.mutation.SetDisplayName(s)
	return pu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pu *PeriodUpdate) SetNillableDisplayName(s *string) *PeriodUpdate {
	if s != nil {
		pu.SetDisplayName(*s)
	}
	return pu
}

// ClearDisplayName clears the value of the "display_name" field.
func (pu *PeriodUpdate) ClearDisplayName() *PeriodUpdate {
	pu.mutation.ClearDisplayName()
	return pu
}

// SetDescription sets the "description" field.
func (pu *PeriodUpdate) SetDescription(s string) *PeriodUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PeriodUpdate) SetNillableDescription(s *string) *PeriodUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PeriodUpdate) ClearDescription() *PeriodUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetExternalLinks sets the "external_links" field.
func (pu *PeriodUpdate) SetExternalLinks(s []string) *PeriodUpdate {
	pu.mutation.SetExternalLinks(s)
	return pu
}

// AppendExternalLinks appends s to the "external_links" field.
func (pu *PeriodUpdate) AppendExternalLinks(s []string) *PeriodUpdate {
	pu.mutation.AppendExternalLinks(s)
	return pu
}

// ClearExternalLinks clears the value of the "external_links" field.
func (pu *PeriodUpdate) ClearExternalLinks() *PeriodUpdate {
	pu.mutation.ClearExternalLinks()
	return pu
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (pu *PeriodUpdate) AddArtifactIDs(ids ...int) *PeriodUpdate {
	pu.mutation.AddArtifactIDs(ids...)
	return pu
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (pu *PeriodUpdate) AddArtifacts(a ...*Artifact) *PeriodUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddArtifactIDs(ids...)
}

// Mutation returns the PeriodMutation object of the builder.
func (pu *PeriodUpdate) Mutation() *PeriodMutation {
	return pu.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (pu *PeriodUpdate) ClearArtifacts() *PeriodUpdate {
	pu.mutation.ClearArtifacts()
	return pu
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (pu *PeriodUpdate) RemoveArtifactIDs(ids ...int) *PeriodUpdate {
	pu.mutation.RemoveArtifactIDs(ids...)
	return pu
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (pu *PeriodUpdate) RemoveArtifacts(a ...*Artifact) *PeriodUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveArtifactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PeriodUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PeriodUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PeriodUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PeriodUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PeriodUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if period.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized period.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := period.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pu *PeriodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(period.Table, period.Columns, sqlgraph.NewFieldSpec(period.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(period.FieldCreatedBy, field.TypeString, value)
	}
	if pu.mutation.CreatedByCleared() {
		_spec.ClearField(period.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(period.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(period.FieldUpdatedBy, field.TypeString, value)
	}
	if pu.mutation.UpdatedByCleared() {
		_spec.ClearField(period.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.DisplayName(); ok {
		_spec.SetField(period.FieldDisplayName, field.TypeString, value)
	}
	if pu.mutation.DisplayNameCleared() {
		_spec.ClearField(period.FieldDisplayName, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(period.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(period.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.ExternalLinks(); ok {
		_spec.SetField(period.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, period.FieldExternalLinks, value)
		})
	}
	if pu.mutation.ExternalLinksCleared() {
		_spec.ClearField(period.FieldExternalLinks, field.TypeJSON)
	}
	if pu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ArtifactsTable,
			Columns: []string{period.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !pu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ArtifactsTable,
			Columns: []string{period.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ArtifactsTable,
			Columns: []string{period.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{period.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PeriodUpdateOne is the builder for updating a single Period entity.
type PeriodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PeriodMutation
}

// SetCreatedBy sets the "created_by" field.
func (puo *PeriodUpdateOne) SetCreatedBy(s string) *PeriodUpdateOne {
	puo.mutation.SetCreatedBy(s)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *PeriodUpdateOne) SetNillableCreatedBy(s *string) *PeriodUpdateOne {
	if s != nil {
		puo.SetCreatedBy(*s)
	}
	return puo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (puo *PeriodUpdateOne) ClearCreatedBy() *PeriodUpdateOne {
	puo.mutation.ClearCreatedBy()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PeriodUpdateOne) SetUpdatedAt(t time.Time) *PeriodUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PeriodUpdateOne) SetUpdatedBy(s string) *PeriodUpdateOne {
	puo.mutation.SetUpdatedBy(s)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *PeriodUpdateOne) SetNillableUpdatedBy(s *string) *PeriodUpdateOne {
	if s != nil {
		puo.SetUpdatedBy(*s)
	}
	return puo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puo *PeriodUpdateOne) ClearUpdatedBy() *PeriodUpdateOne {
	puo.mutation.ClearUpdatedBy()
	return puo
}

// SetDisplayName sets the "display_name" field.
func (puo *PeriodUpdateOne) SetDisplayName(s string) *PeriodUpdateOne {
	puo.mutation.SetDisplayName(s)
	return puo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (puo *PeriodUpdateOne) SetNillableDisplayName(s *string) *PeriodUpdateOne {
	if s != nil {
		puo.SetDisplayName(*s)
	}
	return puo
}

// ClearDisplayName clears the value of the "display_name" field.
func (puo *PeriodUpdateOne) ClearDisplayName() *PeriodUpdateOne {
	puo.mutation.ClearDisplayName()
	return puo
}

// SetDescription sets the "description" field.
func (puo *PeriodUpdateOne) SetDescription(s string) *PeriodUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PeriodUpdateOne) SetNillableDescription(s *string) *PeriodUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PeriodUpdateOne) ClearDescription() *PeriodUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetExternalLinks sets the "external_links" field.
func (puo *PeriodUpdateOne) SetExternalLinks(s []string) *PeriodUpdateOne {
	puo.mutation.SetExternalLinks(s)
	return puo
}

// AppendExternalLinks appends s to the "external_links" field.
func (puo *PeriodUpdateOne) AppendExternalLinks(s []string) *PeriodUpdateOne {
	puo.mutation.AppendExternalLinks(s)
	return puo
}

// ClearExternalLinks clears the value of the "external_links" field.
func (puo *PeriodUpdateOne) ClearExternalLinks() *PeriodUpdateOne {
	puo.mutation.ClearExternalLinks()
	return puo
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (puo *PeriodUpdateOne) AddArtifactIDs(ids ...int) *PeriodUpdateOne {
	puo.mutation.AddArtifactIDs(ids...)
	return puo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (puo *PeriodUpdateOne) AddArtifacts(a ...*Artifact) *PeriodUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddArtifactIDs(ids...)
}

// Mutation returns the PeriodMutation object of the builder.
func (puo *PeriodUpdateOne) Mutation() *PeriodMutation {
	return puo.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (puo *PeriodUpdateOne) ClearArtifacts() *PeriodUpdateOne {
	puo.mutation.ClearArtifacts()
	return puo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (puo *PeriodUpdateOne) RemoveArtifactIDs(ids ...int) *PeriodUpdateOne {
	puo.mutation.RemoveArtifactIDs(ids...)
	return puo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (puo *PeriodUpdateOne) RemoveArtifacts(a ...*Artifact) *PeriodUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveArtifactIDs(ids...)
}

// Where appends a list predicates to the PeriodUpdate builder.
func (puo *PeriodUpdateOne) Where(ps ...predicate.Period) *PeriodUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PeriodUpdateOne) Select(field string, fields ...string) *PeriodUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Period entity.
func (puo *PeriodUpdateOne) Save(ctx context.Context) (*Period, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PeriodUpdateOne) SaveX(ctx context.Context) *Period {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PeriodUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PeriodUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PeriodUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if period.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized period.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := period.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (puo *PeriodUpdateOne) sqlSave(ctx context.Context) (_node *Period, err error) {
	_spec := sqlgraph.NewUpdateSpec(period.Table, period.Columns, sqlgraph.NewFieldSpec(period.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Period.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, period.FieldID)
		for _, f := range fields {
			if !period.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != period.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(period.FieldCreatedBy, field.TypeString, value)
	}
	if puo.mutation.CreatedByCleared() {
		_spec.ClearField(period.FieldCreatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(period.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(period.FieldUpdatedBy, field.TypeString, value)
	}
	if puo.mutation.UpdatedByCleared() {
		_spec.ClearField(period.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.DisplayName(); ok {
		_spec.SetField(period.FieldDisplayName, field.TypeString, value)
	}
	if puo.mutation.DisplayNameCleared() {
		_spec.ClearField(period.FieldDisplayName, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(period.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(period.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.ExternalLinks(); ok {
		_spec.SetField(period.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, period.FieldExternalLinks, value)
		})
	}
	if puo.mutation.ExternalLinksCleared() {
		_spec.ClearField(period.FieldExternalLinks, field.TypeJSON)
	}
	if puo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ArtifactsTable,
			Columns: []string{period.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !puo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ArtifactsTable,
			Columns: []string{period.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ArtifactsTable,
			Columns: []string{period.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Period{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{period.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
