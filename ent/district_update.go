// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/art"
	"github.com/dkrasnovdev/siberiana-api/ent/artifact"
	"github.com/dkrasnovdev/siberiana-api/ent/book"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/protectedareapicture"
)

// DistrictUpdate is the builder for updating District entities.
type DistrictUpdate struct {
	config
	hooks    []Hook
	mutation *DistrictMutation
}

// Where appends a list predicates to the DistrictUpdate builder.
func (du *DistrictUpdate) Where(ps ...predicate.District) *DistrictUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetCreatedBy sets the "created_by" field.
func (du *DistrictUpdate) SetCreatedBy(s string) *DistrictUpdate {
	du.mutation.SetCreatedBy(s)
	return du
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (du *DistrictUpdate) SetNillableCreatedBy(s *string) *DistrictUpdate {
	if s != nil {
		du.SetCreatedBy(*s)
	}
	return du
}

// ClearCreatedBy clears the value of the "created_by" field.
func (du *DistrictUpdate) ClearCreatedBy() *DistrictUpdate {
	du.mutation.ClearCreatedBy()
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DistrictUpdate) SetUpdatedAt(t time.Time) *DistrictUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DistrictUpdate) SetUpdatedBy(s string) *DistrictUpdate {
	du.mutation.SetUpdatedBy(s)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DistrictUpdate) SetNillableUpdatedBy(s *string) *DistrictUpdate {
	if s != nil {
		du.SetUpdatedBy(*s)
	}
	return du
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (du *DistrictUpdate) ClearUpdatedBy() *DistrictUpdate {
	du.mutation.ClearUpdatedBy()
	return du
}

// SetDisplayName sets the "display_name" field.
func (du *DistrictUpdate) SetDisplayName(s string) *DistrictUpdate {
	du.mutation.SetDisplayName(s)
	return du
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (du *DistrictUpdate) SetNillableDisplayName(s *string) *DistrictUpdate {
	if s != nil {
		du.SetDisplayName(*s)
	}
	return du
}

// ClearDisplayName clears the value of the "display_name" field.
func (du *DistrictUpdate) ClearDisplayName() *DistrictUpdate {
	du.mutation.ClearDisplayName()
	return du
}

// SetAbbreviation sets the "abbreviation" field.
func (du *DistrictUpdate) SetAbbreviation(s string) *DistrictUpdate {
	du.mutation.SetAbbreviation(s)
	return du
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (du *DistrictUpdate) SetNillableAbbreviation(s *string) *DistrictUpdate {
	if s != nil {
		du.SetAbbreviation(*s)
	}
	return du
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (du *DistrictUpdate) ClearAbbreviation() *DistrictUpdate {
	du.mutation.ClearAbbreviation()
	return du
}

// SetDescription sets the "description" field.
func (du *DistrictUpdate) SetDescription(s string) *DistrictUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DistrictUpdate) SetNillableDescription(s *string) *DistrictUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// ClearDescription clears the value of the "description" field.
func (du *DistrictUpdate) ClearDescription() *DistrictUpdate {
	du.mutation.ClearDescription()
	return du
}

// SetExternalLink sets the "external_link" field.
func (du *DistrictUpdate) SetExternalLink(s string) *DistrictUpdate {
	du.mutation.SetExternalLink(s)
	return du
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (du *DistrictUpdate) SetNillableExternalLink(s *string) *DistrictUpdate {
	if s != nil {
		du.SetExternalLink(*s)
	}
	return du
}

// ClearExternalLink clears the value of the "external_link" field.
func (du *DistrictUpdate) ClearExternalLink() *DistrictUpdate {
	du.mutation.ClearExternalLink()
	return du
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (du *DistrictUpdate) AddArtIDs(ids ...int) *DistrictUpdate {
	du.mutation.AddArtIDs(ids...)
	return du
}

// AddArt adds the "art" edges to the Art entity.
func (du *DistrictUpdate) AddArt(a ...*Art) *DistrictUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return du.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (du *DistrictUpdate) AddArtifactIDs(ids ...int) *DistrictUpdate {
	du.mutation.AddArtifactIDs(ids...)
	return du
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (du *DistrictUpdate) AddArtifacts(a ...*Artifact) *DistrictUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return du.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (du *DistrictUpdate) AddBookIDs(ids ...int) *DistrictUpdate {
	du.mutation.AddBookIDs(ids...)
	return du
}

// AddBooks adds the "books" edges to the Book entity.
func (du *DistrictUpdate) AddBooks(b ...*Book) *DistrictUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return du.AddBookIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (du *DistrictUpdate) AddProtectedAreaPictureIDs(ids ...int) *DistrictUpdate {
	du.mutation.AddProtectedAreaPictureIDs(ids...)
	return du
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (du *DistrictUpdate) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *DistrictUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.AddProtectedAreaPictureIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (du *DistrictUpdate) AddLocationIDs(ids ...int) *DistrictUpdate {
	du.mutation.AddLocationIDs(ids...)
	return du
}

// AddLocations adds the "locations" edges to the Location entity.
func (du *DistrictUpdate) AddLocations(l ...*Location) *DistrictUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return du.AddLocationIDs(ids...)
}

// Mutation returns the DistrictMutation object of the builder.
func (du *DistrictUpdate) Mutation() *DistrictMutation {
	return du.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (du *DistrictUpdate) ClearArt() *DistrictUpdate {
	du.mutation.ClearArt()
	return du
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (du *DistrictUpdate) RemoveArtIDs(ids ...int) *DistrictUpdate {
	du.mutation.RemoveArtIDs(ids...)
	return du
}

// RemoveArt removes "art" edges to Art entities.
func (du *DistrictUpdate) RemoveArt(a ...*Art) *DistrictUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return du.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (du *DistrictUpdate) ClearArtifacts() *DistrictUpdate {
	du.mutation.ClearArtifacts()
	return du
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (du *DistrictUpdate) RemoveArtifactIDs(ids ...int) *DistrictUpdate {
	du.mutation.RemoveArtifactIDs(ids...)
	return du
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (du *DistrictUpdate) RemoveArtifacts(a ...*Artifact) *DistrictUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return du.RemoveArtifactIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (du *DistrictUpdate) ClearBooks() *DistrictUpdate {
	du.mutation.ClearBooks()
	return du
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (du *DistrictUpdate) RemoveBookIDs(ids ...int) *DistrictUpdate {
	du.mutation.RemoveBookIDs(ids...)
	return du
}

// RemoveBooks removes "books" edges to Book entities.
func (du *DistrictUpdate) RemoveBooks(b ...*Book) *DistrictUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return du.RemoveBookIDs(ids...)
}

// ClearProtectedAreaPictures clears all "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (du *DistrictUpdate) ClearProtectedAreaPictures() *DistrictUpdate {
	du.mutation.ClearProtectedAreaPictures()
	return du
}

// RemoveProtectedAreaPictureIDs removes the "protected_area_pictures" edge to ProtectedAreaPicture entities by IDs.
func (du *DistrictUpdate) RemoveProtectedAreaPictureIDs(ids ...int) *DistrictUpdate {
	du.mutation.RemoveProtectedAreaPictureIDs(ids...)
	return du
}

// RemoveProtectedAreaPictures removes "protected_area_pictures" edges to ProtectedAreaPicture entities.
func (du *DistrictUpdate) RemoveProtectedAreaPictures(p ...*ProtectedAreaPicture) *DistrictUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.RemoveProtectedAreaPictureIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Location entity.
func (du *DistrictUpdate) ClearLocations() *DistrictUpdate {
	du.mutation.ClearLocations()
	return du
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (du *DistrictUpdate) RemoveLocationIDs(ids ...int) *DistrictUpdate {
	du.mutation.RemoveLocationIDs(ids...)
	return du
}

// RemoveLocations removes "locations" edges to Location entities.
func (du *DistrictUpdate) RemoveLocations(l ...*Location) *DistrictUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return du.RemoveLocationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DistrictUpdate) Save(ctx context.Context) (int, error) {
	if err := du.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DistrictUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DistrictUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DistrictUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DistrictUpdate) defaults() error {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		if district.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized district.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := district.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (du *DistrictUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(district.Table, district.Columns, sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.CreatedBy(); ok {
		_spec.SetField(district.FieldCreatedBy, field.TypeString, value)
	}
	if du.mutation.CreatedByCleared() {
		_spec.ClearField(district.FieldCreatedBy, field.TypeString)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(district.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.UpdatedBy(); ok {
		_spec.SetField(district.FieldUpdatedBy, field.TypeString, value)
	}
	if du.mutation.UpdatedByCleared() {
		_spec.ClearField(district.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := du.mutation.DisplayName(); ok {
		_spec.SetField(district.FieldDisplayName, field.TypeString, value)
	}
	if du.mutation.DisplayNameCleared() {
		_spec.ClearField(district.FieldDisplayName, field.TypeString)
	}
	if value, ok := du.mutation.Abbreviation(); ok {
		_spec.SetField(district.FieldAbbreviation, field.TypeString, value)
	}
	if du.mutation.AbbreviationCleared() {
		_spec.ClearField(district.FieldAbbreviation, field.TypeString)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(district.FieldDescription, field.TypeString, value)
	}
	if du.mutation.DescriptionCleared() {
		_spec.ClearField(district.FieldDescription, field.TypeString)
	}
	if value, ok := du.mutation.ExternalLink(); ok {
		_spec.SetField(district.FieldExternalLink, field.TypeString, value)
	}
	if du.mutation.ExternalLinkCleared() {
		_spec.ClearField(district.FieldExternalLink, field.TypeString)
	}
	if du.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ArtTable,
			Columns: []string{district.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedArtIDs(); len(nodes) > 0 && !du.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ArtTable,
			Columns: []string{district.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ArtTable,
			Columns: []string{district.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ArtifactsTable,
			Columns: []string{district.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !du.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ArtifactsTable,
			Columns: []string{district.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ArtifactsTable,
			Columns: []string{district.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.BooksTable,
			Columns: []string{district.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedBooksIDs(); len(nodes) > 0 && !du.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.BooksTable,
			Columns: []string{district.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.BooksTable,
			Columns: []string{district.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ProtectedAreaPicturesTable,
			Columns: []string{district.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedProtectedAreaPicturesIDs(); len(nodes) > 0 && !du.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ProtectedAreaPicturesTable,
			Columns: []string{district.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ProtectedAreaPicturesTable,
			Columns: []string{district.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   district.LocationsTable,
			Columns: []string{district.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !du.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   district.LocationsTable,
			Columns: []string{district.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   district.LocationsTable,
			Columns: []string{district.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{district.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DistrictUpdateOne is the builder for updating a single District entity.
type DistrictUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DistrictMutation
}

// SetCreatedBy sets the "created_by" field.
func (duo *DistrictUpdateOne) SetCreatedBy(s string) *DistrictUpdateOne {
	duo.mutation.SetCreatedBy(s)
	return duo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableCreatedBy(s *string) *DistrictUpdateOne {
	if s != nil {
		duo.SetCreatedBy(*s)
	}
	return duo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (duo *DistrictUpdateOne) ClearCreatedBy() *DistrictUpdateOne {
	duo.mutation.ClearCreatedBy()
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DistrictUpdateOne) SetUpdatedAt(t time.Time) *DistrictUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DistrictUpdateOne) SetUpdatedBy(s string) *DistrictUpdateOne {
	duo.mutation.SetUpdatedBy(s)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableUpdatedBy(s *string) *DistrictUpdateOne {
	if s != nil {
		duo.SetUpdatedBy(*s)
	}
	return duo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (duo *DistrictUpdateOne) ClearUpdatedBy() *DistrictUpdateOne {
	duo.mutation.ClearUpdatedBy()
	return duo
}

// SetDisplayName sets the "display_name" field.
func (duo *DistrictUpdateOne) SetDisplayName(s string) *DistrictUpdateOne {
	duo.mutation.SetDisplayName(s)
	return duo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableDisplayName(s *string) *DistrictUpdateOne {
	if s != nil {
		duo.SetDisplayName(*s)
	}
	return duo
}

// ClearDisplayName clears the value of the "display_name" field.
func (duo *DistrictUpdateOne) ClearDisplayName() *DistrictUpdateOne {
	duo.mutation.ClearDisplayName()
	return duo
}

// SetAbbreviation sets the "abbreviation" field.
func (duo *DistrictUpdateOne) SetAbbreviation(s string) *DistrictUpdateOne {
	duo.mutation.SetAbbreviation(s)
	return duo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableAbbreviation(s *string) *DistrictUpdateOne {
	if s != nil {
		duo.SetAbbreviation(*s)
	}
	return duo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (duo *DistrictUpdateOne) ClearAbbreviation() *DistrictUpdateOne {
	duo.mutation.ClearAbbreviation()
	return duo
}

// SetDescription sets the "description" field.
func (duo *DistrictUpdateOne) SetDescription(s string) *DistrictUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableDescription(s *string) *DistrictUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// ClearDescription clears the value of the "description" field.
func (duo *DistrictUpdateOne) ClearDescription() *DistrictUpdateOne {
	duo.mutation.ClearDescription()
	return duo
}

// SetExternalLink sets the "external_link" field.
func (duo *DistrictUpdateOne) SetExternalLink(s string) *DistrictUpdateOne {
	duo.mutation.SetExternalLink(s)
	return duo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableExternalLink(s *string) *DistrictUpdateOne {
	if s != nil {
		duo.SetExternalLink(*s)
	}
	return duo
}

// ClearExternalLink clears the value of the "external_link" field.
func (duo *DistrictUpdateOne) ClearExternalLink() *DistrictUpdateOne {
	duo.mutation.ClearExternalLink()
	return duo
}

// AddArtIDs adds the "art" edge to the Art entity by IDs.
func (duo *DistrictUpdateOne) AddArtIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.AddArtIDs(ids...)
	return duo
}

// AddArt adds the "art" edges to the Art entity.
func (duo *DistrictUpdateOne) AddArt(a ...*Art) *DistrictUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return duo.AddArtIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (duo *DistrictUpdateOne) AddArtifactIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.AddArtifactIDs(ids...)
	return duo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (duo *DistrictUpdateOne) AddArtifacts(a ...*Artifact) *DistrictUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return duo.AddArtifactIDs(ids...)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (duo *DistrictUpdateOne) AddBookIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.AddBookIDs(ids...)
	return duo
}

// AddBooks adds the "books" edges to the Book entity.
func (duo *DistrictUpdateOne) AddBooks(b ...*Book) *DistrictUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return duo.AddBookIDs(ids...)
}

// AddProtectedAreaPictureIDs adds the "protected_area_pictures" edge to the ProtectedAreaPicture entity by IDs.
func (duo *DistrictUpdateOne) AddProtectedAreaPictureIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.AddProtectedAreaPictureIDs(ids...)
	return duo
}

// AddProtectedAreaPictures adds the "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (duo *DistrictUpdateOne) AddProtectedAreaPictures(p ...*ProtectedAreaPicture) *DistrictUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.AddProtectedAreaPictureIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (duo *DistrictUpdateOne) AddLocationIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.AddLocationIDs(ids...)
	return duo
}

// AddLocations adds the "locations" edges to the Location entity.
func (duo *DistrictUpdateOne) AddLocations(l ...*Location) *DistrictUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return duo.AddLocationIDs(ids...)
}

// Mutation returns the DistrictMutation object of the builder.
func (duo *DistrictUpdateOne) Mutation() *DistrictMutation {
	return duo.mutation
}

// ClearArt clears all "art" edges to the Art entity.
func (duo *DistrictUpdateOne) ClearArt() *DistrictUpdateOne {
	duo.mutation.ClearArt()
	return duo
}

// RemoveArtIDs removes the "art" edge to Art entities by IDs.
func (duo *DistrictUpdateOne) RemoveArtIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.RemoveArtIDs(ids...)
	return duo
}

// RemoveArt removes "art" edges to Art entities.
func (duo *DistrictUpdateOne) RemoveArt(a ...*Art) *DistrictUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return duo.RemoveArtIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (duo *DistrictUpdateOne) ClearArtifacts() *DistrictUpdateOne {
	duo.mutation.ClearArtifacts()
	return duo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (duo *DistrictUpdateOne) RemoveArtifactIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.RemoveArtifactIDs(ids...)
	return duo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (duo *DistrictUpdateOne) RemoveArtifacts(a ...*Artifact) *DistrictUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return duo.RemoveArtifactIDs(ids...)
}

// ClearBooks clears all "books" edges to the Book entity.
func (duo *DistrictUpdateOne) ClearBooks() *DistrictUpdateOne {
	duo.mutation.ClearBooks()
	return duo
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (duo *DistrictUpdateOne) RemoveBookIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.RemoveBookIDs(ids...)
	return duo
}

// RemoveBooks removes "books" edges to Book entities.
func (duo *DistrictUpdateOne) RemoveBooks(b ...*Book) *DistrictUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return duo.RemoveBookIDs(ids...)
}

// ClearProtectedAreaPictures clears all "protected_area_pictures" edges to the ProtectedAreaPicture entity.
func (duo *DistrictUpdateOne) ClearProtectedAreaPictures() *DistrictUpdateOne {
	duo.mutation.ClearProtectedAreaPictures()
	return duo
}

// RemoveProtectedAreaPictureIDs removes the "protected_area_pictures" edge to ProtectedAreaPicture entities by IDs.
func (duo *DistrictUpdateOne) RemoveProtectedAreaPictureIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.RemoveProtectedAreaPictureIDs(ids...)
	return duo
}

// RemoveProtectedAreaPictures removes "protected_area_pictures" edges to ProtectedAreaPicture entities.
func (duo *DistrictUpdateOne) RemoveProtectedAreaPictures(p ...*ProtectedAreaPicture) *DistrictUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.RemoveProtectedAreaPictureIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Location entity.
func (duo *DistrictUpdateOne) ClearLocations() *DistrictUpdateOne {
	duo.mutation.ClearLocations()
	return duo
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (duo *DistrictUpdateOne) RemoveLocationIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.RemoveLocationIDs(ids...)
	return duo
}

// RemoveLocations removes "locations" edges to Location entities.
func (duo *DistrictUpdateOne) RemoveLocations(l ...*Location) *DistrictUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return duo.RemoveLocationIDs(ids...)
}

// Where appends a list predicates to the DistrictUpdate builder.
func (duo *DistrictUpdateOne) Where(ps ...predicate.District) *DistrictUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DistrictUpdateOne) Select(field string, fields ...string) *DistrictUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated District entity.
func (duo *DistrictUpdateOne) Save(ctx context.Context) (*District, error) {
	if err := duo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DistrictUpdateOne) SaveX(ctx context.Context) *District {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DistrictUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DistrictUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DistrictUpdateOne) defaults() error {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		if district.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized district.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := district.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (duo *DistrictUpdateOne) sqlSave(ctx context.Context) (_node *District, err error) {
	_spec := sqlgraph.NewUpdateSpec(district.Table, district.Columns, sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "District.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, district.FieldID)
		for _, f := range fields {
			if !district.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != district.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.CreatedBy(); ok {
		_spec.SetField(district.FieldCreatedBy, field.TypeString, value)
	}
	if duo.mutation.CreatedByCleared() {
		_spec.ClearField(district.FieldCreatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(district.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.UpdatedBy(); ok {
		_spec.SetField(district.FieldUpdatedBy, field.TypeString, value)
	}
	if duo.mutation.UpdatedByCleared() {
		_spec.ClearField(district.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.DisplayName(); ok {
		_spec.SetField(district.FieldDisplayName, field.TypeString, value)
	}
	if duo.mutation.DisplayNameCleared() {
		_spec.ClearField(district.FieldDisplayName, field.TypeString)
	}
	if value, ok := duo.mutation.Abbreviation(); ok {
		_spec.SetField(district.FieldAbbreviation, field.TypeString, value)
	}
	if duo.mutation.AbbreviationCleared() {
		_spec.ClearField(district.FieldAbbreviation, field.TypeString)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(district.FieldDescription, field.TypeString, value)
	}
	if duo.mutation.DescriptionCleared() {
		_spec.ClearField(district.FieldDescription, field.TypeString)
	}
	if value, ok := duo.mutation.ExternalLink(); ok {
		_spec.SetField(district.FieldExternalLink, field.TypeString, value)
	}
	if duo.mutation.ExternalLinkCleared() {
		_spec.ClearField(district.FieldExternalLink, field.TypeString)
	}
	if duo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ArtTable,
			Columns: []string{district.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedArtIDs(); len(nodes) > 0 && !duo.mutation.ArtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ArtTable,
			Columns: []string{district.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ArtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ArtTable,
			Columns: []string{district.ArtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(art.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ArtifactsTable,
			Columns: []string{district.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !duo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ArtifactsTable,
			Columns: []string{district.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ArtifactsTable,
			Columns: []string{district.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.BooksTable,
			Columns: []string{district.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedBooksIDs(); len(nodes) > 0 && !duo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.BooksTable,
			Columns: []string{district.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.BooksTable,
			Columns: []string{district.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ProtectedAreaPicturesTable,
			Columns: []string{district.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedProtectedAreaPicturesIDs(); len(nodes) > 0 && !duo.mutation.ProtectedAreaPicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ProtectedAreaPicturesTable,
			Columns: []string{district.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ProtectedAreaPicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.ProtectedAreaPicturesTable,
			Columns: []string{district.ProtectedAreaPicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(protectedareapicture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   district.LocationsTable,
			Columns: []string{district.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !duo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   district.LocationsTable,
			Columns: []string{district.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   district.LocationsTable,
			Columns: []string{district.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &District{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{district.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
