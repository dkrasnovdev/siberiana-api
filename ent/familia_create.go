// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/familia"
	"github.com/dkrasnovdev/siberiana-api/ent/herbarium"
)

// FamiliaCreate is the builder for creating a Familia entity.
type FamiliaCreate struct {
	config
	mutation *FamiliaMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fc *FamiliaCreate) SetCreatedAt(t time.Time) *FamiliaCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FamiliaCreate) SetNillableCreatedAt(t *time.Time) *FamiliaCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetCreatedBy sets the "created_by" field.
func (fc *FamiliaCreate) SetCreatedBy(s string) *FamiliaCreate {
	fc.mutation.SetCreatedBy(s)
	return fc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fc *FamiliaCreate) SetNillableCreatedBy(s *string) *FamiliaCreate {
	if s != nil {
		fc.SetCreatedBy(*s)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FamiliaCreate) SetUpdatedAt(t time.Time) *FamiliaCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FamiliaCreate) SetNillableUpdatedAt(t *time.Time) *FamiliaCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetUpdatedBy sets the "updated_by" field.
func (fc *FamiliaCreate) SetUpdatedBy(s string) *FamiliaCreate {
	fc.mutation.SetUpdatedBy(s)
	return fc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fc *FamiliaCreate) SetNillableUpdatedBy(s *string) *FamiliaCreate {
	if s != nil {
		fc.SetUpdatedBy(*s)
	}
	return fc
}

// SetDisplayName sets the "display_name" field.
func (fc *FamiliaCreate) SetDisplayName(s string) *FamiliaCreate {
	fc.mutation.SetDisplayName(s)
	return fc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (fc *FamiliaCreate) SetNillableDisplayName(s *string) *FamiliaCreate {
	if s != nil {
		fc.SetDisplayName(*s)
	}
	return fc
}

// SetAbbreviation sets the "abbreviation" field.
func (fc *FamiliaCreate) SetAbbreviation(s string) *FamiliaCreate {
	fc.mutation.SetAbbreviation(s)
	return fc
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (fc *FamiliaCreate) SetNillableAbbreviation(s *string) *FamiliaCreate {
	if s != nil {
		fc.SetAbbreviation(*s)
	}
	return fc
}

// SetDescription sets the "description" field.
func (fc *FamiliaCreate) SetDescription(s string) *FamiliaCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fc *FamiliaCreate) SetNillableDescription(s *string) *FamiliaCreate {
	if s != nil {
		fc.SetDescription(*s)
	}
	return fc
}

// SetExternalLink sets the "external_link" field.
func (fc *FamiliaCreate) SetExternalLink(s string) *FamiliaCreate {
	fc.mutation.SetExternalLink(s)
	return fc
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (fc *FamiliaCreate) SetNillableExternalLink(s *string) *FamiliaCreate {
	if s != nil {
		fc.SetExternalLink(*s)
	}
	return fc
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (fc *FamiliaCreate) SetPrimaryImageURL(s string) *FamiliaCreate {
	fc.mutation.SetPrimaryImageURL(s)
	return fc
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (fc *FamiliaCreate) SetNillablePrimaryImageURL(s *string) *FamiliaCreate {
	if s != nil {
		fc.SetPrimaryImageURL(*s)
	}
	return fc
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (fc *FamiliaCreate) SetAdditionalImagesUrls(s []string) *FamiliaCreate {
	fc.mutation.SetAdditionalImagesUrls(s)
	return fc
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (fc *FamiliaCreate) AddHerbariumIDs(ids ...int) *FamiliaCreate {
	fc.mutation.AddHerbariumIDs(ids...)
	return fc
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (fc *FamiliaCreate) AddHerbaria(h ...*Herbarium) *FamiliaCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fc.AddHerbariumIDs(ids...)
}

// Mutation returns the FamiliaMutation object of the builder.
func (fc *FamiliaCreate) Mutation() *FamiliaMutation {
	return fc.mutation
}

// Save creates the Familia in the database.
func (fc *FamiliaCreate) Save(ctx context.Context) (*Familia, error) {
	if err := fc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FamiliaCreate) SaveX(ctx context.Context) *Familia {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FamiliaCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FamiliaCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FamiliaCreate) defaults() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		if familia.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized familia.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := familia.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		if familia.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized familia.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := familia.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fc *FamiliaCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Familia.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Familia.updated_at"`)}
	}
	return nil
}

func (fc *FamiliaCreate) sqlSave(ctx context.Context) (*Familia, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FamiliaCreate) createSpec() (*Familia, *sqlgraph.CreateSpec) {
	var (
		_node = &Familia{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(familia.Table, sqlgraph.NewFieldSpec(familia.FieldID, field.TypeInt))
	)
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(familia.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.CreatedBy(); ok {
		_spec.SetField(familia.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(familia.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.UpdatedBy(); ok {
		_spec.SetField(familia.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := fc.mutation.DisplayName(); ok {
		_spec.SetField(familia.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := fc.mutation.Abbreviation(); ok {
		_spec.SetField(familia.FieldAbbreviation, field.TypeString, value)
		_node.Abbreviation = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.SetField(familia.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fc.mutation.ExternalLink(); ok {
		_spec.SetField(familia.FieldExternalLink, field.TypeString, value)
		_node.ExternalLink = value
	}
	if value, ok := fc.mutation.PrimaryImageURL(); ok {
		_spec.SetField(familia.FieldPrimaryImageURL, field.TypeString, value)
		_node.PrimaryImageURL = value
	}
	if value, ok := fc.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(familia.FieldAdditionalImagesUrls, field.TypeJSON, value)
		_node.AdditionalImagesUrls = value
	}
	if nodes := fc.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   familia.HerbariaTable,
			Columns: []string{familia.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FamiliaCreateBulk is the builder for creating many Familia entities in bulk.
type FamiliaCreateBulk struct {
	config
	err      error
	builders []*FamiliaCreate
}

// Save creates the Familia entities in the database.
func (fcb *FamiliaCreateBulk) Save(ctx context.Context) ([]*Familia, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Familia, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FamiliaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FamiliaCreateBulk) SaveX(ctx context.Context) []*Familia {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FamiliaCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FamiliaCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
