// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/organization"
	"github.com/dkrasnovdev/heritage-api/ent/organizationtype"
)

// OrganizationTypeCreate is the builder for creating a OrganizationType entity.
type OrganizationTypeCreate struct {
	config
	mutation *OrganizationTypeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (otc *OrganizationTypeCreate) SetCreatedAt(t time.Time) *OrganizationTypeCreate {
	otc.mutation.SetCreatedAt(t)
	return otc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (otc *OrganizationTypeCreate) SetNillableCreatedAt(t *time.Time) *OrganizationTypeCreate {
	if t != nil {
		otc.SetCreatedAt(*t)
	}
	return otc
}

// SetCreatedBy sets the "created_by" field.
func (otc *OrganizationTypeCreate) SetCreatedBy(s string) *OrganizationTypeCreate {
	otc.mutation.SetCreatedBy(s)
	return otc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (otc *OrganizationTypeCreate) SetNillableCreatedBy(s *string) *OrganizationTypeCreate {
	if s != nil {
		otc.SetCreatedBy(*s)
	}
	return otc
}

// SetUpdatedAt sets the "updated_at" field.
func (otc *OrganizationTypeCreate) SetUpdatedAt(t time.Time) *OrganizationTypeCreate {
	otc.mutation.SetUpdatedAt(t)
	return otc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (otc *OrganizationTypeCreate) SetNillableUpdatedAt(t *time.Time) *OrganizationTypeCreate {
	if t != nil {
		otc.SetUpdatedAt(*t)
	}
	return otc
}

// SetUpdatedBy sets the "updated_by" field.
func (otc *OrganizationTypeCreate) SetUpdatedBy(s string) *OrganizationTypeCreate {
	otc.mutation.SetUpdatedBy(s)
	return otc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (otc *OrganizationTypeCreate) SetNillableUpdatedBy(s *string) *OrganizationTypeCreate {
	if s != nil {
		otc.SetUpdatedBy(*s)
	}
	return otc
}

// SetDisplayName sets the "display_name" field.
func (otc *OrganizationTypeCreate) SetDisplayName(s string) *OrganizationTypeCreate {
	otc.mutation.SetDisplayName(s)
	return otc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (otc *OrganizationTypeCreate) SetNillableDisplayName(s *string) *OrganizationTypeCreate {
	if s != nil {
		otc.SetDisplayName(*s)
	}
	return otc
}

// SetAbbreviation sets the "abbreviation" field.
func (otc *OrganizationTypeCreate) SetAbbreviation(s string) *OrganizationTypeCreate {
	otc.mutation.SetAbbreviation(s)
	return otc
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (otc *OrganizationTypeCreate) SetNillableAbbreviation(s *string) *OrganizationTypeCreate {
	if s != nil {
		otc.SetAbbreviation(*s)
	}
	return otc
}

// SetDescription sets the "description" field.
func (otc *OrganizationTypeCreate) SetDescription(s string) *OrganizationTypeCreate {
	otc.mutation.SetDescription(s)
	return otc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (otc *OrganizationTypeCreate) SetNillableDescription(s *string) *OrganizationTypeCreate {
	if s != nil {
		otc.SetDescription(*s)
	}
	return otc
}

// SetExternalLinks sets the "external_links" field.
func (otc *OrganizationTypeCreate) SetExternalLinks(s []string) *OrganizationTypeCreate {
	otc.mutation.SetExternalLinks(s)
	return otc
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (otc *OrganizationTypeCreate) AddOrganizationIDs(ids ...int) *OrganizationTypeCreate {
	otc.mutation.AddOrganizationIDs(ids...)
	return otc
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (otc *OrganizationTypeCreate) AddOrganizations(o ...*Organization) *OrganizationTypeCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return otc.AddOrganizationIDs(ids...)
}

// Mutation returns the OrganizationTypeMutation object of the builder.
func (otc *OrganizationTypeCreate) Mutation() *OrganizationTypeMutation {
	return otc.mutation
}

// Save creates the OrganizationType in the database.
func (otc *OrganizationTypeCreate) Save(ctx context.Context) (*OrganizationType, error) {
	if err := otc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, otc.sqlSave, otc.mutation, otc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (otc *OrganizationTypeCreate) SaveX(ctx context.Context) *OrganizationType {
	v, err := otc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otc *OrganizationTypeCreate) Exec(ctx context.Context) error {
	_, err := otc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otc *OrganizationTypeCreate) ExecX(ctx context.Context) {
	if err := otc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otc *OrganizationTypeCreate) defaults() error {
	if _, ok := otc.mutation.CreatedAt(); !ok {
		if organizationtype.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized organizationtype.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := organizationtype.DefaultCreatedAt()
		otc.mutation.SetCreatedAt(v)
	}
	if _, ok := otc.mutation.UpdatedAt(); !ok {
		if organizationtype.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized organizationtype.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := organizationtype.DefaultUpdatedAt()
		otc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (otc *OrganizationTypeCreate) check() error {
	if _, ok := otc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrganizationType.created_at"`)}
	}
	if _, ok := otc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrganizationType.updated_at"`)}
	}
	return nil
}

func (otc *OrganizationTypeCreate) sqlSave(ctx context.Context) (*OrganizationType, error) {
	if err := otc.check(); err != nil {
		return nil, err
	}
	_node, _spec := otc.createSpec()
	if err := sqlgraph.CreateNode(ctx, otc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	otc.mutation.id = &_node.ID
	otc.mutation.done = true
	return _node, nil
}

func (otc *OrganizationTypeCreate) createSpec() (*OrganizationType, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationType{config: otc.config}
		_spec = sqlgraph.NewCreateSpec(organizationtype.Table, sqlgraph.NewFieldSpec(organizationtype.FieldID, field.TypeInt))
	)
	if value, ok := otc.mutation.CreatedAt(); ok {
		_spec.SetField(organizationtype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := otc.mutation.CreatedBy(); ok {
		_spec.SetField(organizationtype.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := otc.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationtype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := otc.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationtype.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := otc.mutation.DisplayName(); ok {
		_spec.SetField(organizationtype.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := otc.mutation.Abbreviation(); ok {
		_spec.SetField(organizationtype.FieldAbbreviation, field.TypeString, value)
		_node.Abbreviation = value
	}
	if value, ok := otc.mutation.Description(); ok {
		_spec.SetField(organizationtype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := otc.mutation.ExternalLinks(); ok {
		_spec.SetField(organizationtype.FieldExternalLinks, field.TypeJSON, value)
		_node.ExternalLinks = value
	}
	if nodes := otc.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organizationtype.OrganizationsTable,
			Columns: []string{organizationtype.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrganizationTypeCreateBulk is the builder for creating many OrganizationType entities in bulk.
type OrganizationTypeCreateBulk struct {
	config
	builders []*OrganizationTypeCreate
}

// Save creates the OrganizationType entities in the database.
func (otcb *OrganizationTypeCreateBulk) Save(ctx context.Context) ([]*OrganizationType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(otcb.builders))
	nodes := make([]*OrganizationType, len(otcb.builders))
	mutators := make([]Mutator, len(otcb.builders))
	for i := range otcb.builders {
		func(i int, root context.Context) {
			builder := otcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, otcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, otcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, otcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (otcb *OrganizationTypeCreateBulk) SaveX(ctx context.Context) []*OrganizationType {
	v, err := otcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otcb *OrganizationTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := otcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otcb *OrganizationTypeCreateBulk) ExecX(ctx context.Context) {
	if err := otcb.Exec(ctx); err != nil {
		panic(err)
	}
}
