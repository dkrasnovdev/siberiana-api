// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/holder"
	"github.com/dkrasnovdev/heritage-api/ent/holderresponsibility"
)

// HolderResponsibilityCreate is the builder for creating a HolderResponsibility entity.
type HolderResponsibilityCreate struct {
	config
	mutation *HolderResponsibilityMutation
	hooks    []Hook
}

// AddHolderIDs adds the "holder" edge to the Holder entity by IDs.
func (hrc *HolderResponsibilityCreate) AddHolderIDs(ids ...int) *HolderResponsibilityCreate {
	hrc.mutation.AddHolderIDs(ids...)
	return hrc
}

// AddHolder adds the "holder" edges to the Holder entity.
func (hrc *HolderResponsibilityCreate) AddHolder(h ...*Holder) *HolderResponsibilityCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hrc.AddHolderIDs(ids...)
}

// Mutation returns the HolderResponsibilityMutation object of the builder.
func (hrc *HolderResponsibilityCreate) Mutation() *HolderResponsibilityMutation {
	return hrc.mutation
}

// Save creates the HolderResponsibility in the database.
func (hrc *HolderResponsibilityCreate) Save(ctx context.Context) (*HolderResponsibility, error) {
	return withHooks(ctx, hrc.sqlSave, hrc.mutation, hrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hrc *HolderResponsibilityCreate) SaveX(ctx context.Context) *HolderResponsibility {
	v, err := hrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hrc *HolderResponsibilityCreate) Exec(ctx context.Context) error {
	_, err := hrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hrc *HolderResponsibilityCreate) ExecX(ctx context.Context) {
	if err := hrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hrc *HolderResponsibilityCreate) check() error {
	return nil
}

func (hrc *HolderResponsibilityCreate) sqlSave(ctx context.Context) (*HolderResponsibility, error) {
	if err := hrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hrc.mutation.id = &_node.ID
	hrc.mutation.done = true
	return _node, nil
}

func (hrc *HolderResponsibilityCreate) createSpec() (*HolderResponsibility, *sqlgraph.CreateSpec) {
	var (
		_node = &HolderResponsibility{config: hrc.config}
		_spec = sqlgraph.NewCreateSpec(holderresponsibility.Table, sqlgraph.NewFieldSpec(holderresponsibility.FieldID, field.TypeInt))
	)
	if nodes := hrc.mutation.HolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   holderresponsibility.HolderTable,
			Columns: holderresponsibility.HolderPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(holder.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HolderResponsibilityCreateBulk is the builder for creating many HolderResponsibility entities in bulk.
type HolderResponsibilityCreateBulk struct {
	config
	builders []*HolderResponsibilityCreate
}

// Save creates the HolderResponsibility entities in the database.
func (hrcb *HolderResponsibilityCreateBulk) Save(ctx context.Context) ([]*HolderResponsibility, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hrcb.builders))
	nodes := make([]*HolderResponsibility, len(hrcb.builders))
	mutators := make([]Mutator, len(hrcb.builders))
	for i := range hrcb.builders {
		func(i int, root context.Context) {
			builder := hrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HolderResponsibilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hrcb *HolderResponsibilityCreateBulk) SaveX(ctx context.Context) []*HolderResponsibility {
	v, err := hrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hrcb *HolderResponsibilityCreateBulk) Exec(ctx context.Context) error {
	_, err := hrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hrcb *HolderResponsibilityCreateBulk) ExecX(ctx context.Context) {
	if err := hrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
