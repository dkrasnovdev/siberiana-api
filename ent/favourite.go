// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/favourite"
)

// Favourite is the model entity for the Favourite schema.
type Favourite struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID string `json:"owner_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FavouriteQuery when eager-loading is set.
	Edges        FavouriteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FavouriteEdges holds the relations/edges for other nodes in the graph.
type FavouriteEdges struct {
	// Proxies holds the value of the proxies edge.
	Proxies []*Proxy `json:"proxies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedProxies map[string][]*Proxy
}

// ProxiesOrErr returns the Proxies value or an error if the edge
// was not loaded in eager-loading.
func (e FavouriteEdges) ProxiesOrErr() ([]*Proxy, error) {
	if e.loadedTypes[0] {
		return e.Proxies, nil
	}
	return nil, &NotLoadedError{edge: "proxies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Favourite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case favourite.FieldID:
			values[i] = new(sql.NullInt64)
		case favourite.FieldCreatedBy, favourite.FieldUpdatedBy, favourite.FieldOwnerID:
			values[i] = new(sql.NullString)
		case favourite.FieldCreatedAt, favourite.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Favourite fields.
func (f *Favourite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case favourite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case favourite.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case favourite.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				f.CreatedBy = value.String
			}
		case favourite.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case favourite.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				f.UpdatedBy = value.String
			}
		case favourite.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				f.OwnerID = value.String
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Favourite.
// This includes values selected through modifiers, order, etc.
func (f *Favourite) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryProxies queries the "proxies" edge of the Favourite entity.
func (f *Favourite) QueryProxies() *ProxyQuery {
	return NewFavouriteClient(f.config).QueryProxies(f)
}

// Update returns a builder for updating this Favourite.
// Note that you need to call Favourite.Unwrap() before calling this method if this Favourite
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Favourite) Update() *FavouriteUpdateOne {
	return NewFavouriteClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Favourite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Favourite) Unwrap() *Favourite {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Favourite is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Favourite) String() string {
	var builder strings.Builder
	builder.WriteString("Favourite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(f.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(f.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(f.OwnerID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedProxies returns the Proxies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (f *Favourite) NamedProxies(name string) ([]*Proxy, error) {
	if f.Edges.namedProxies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := f.Edges.namedProxies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (f *Favourite) appendNamedProxies(name string, edges ...*Proxy) {
	if f.Edges.namedProxies == nil {
		f.Edges.namedProxies = make(map[string][]*Proxy)
	}
	if len(edges) == 0 {
		f.Edges.namedProxies[name] = []*Proxy{}
	} else {
		f.Edges.namedProxies[name] = append(f.Edges.namedProxies[name], edges...)
	}
}

// Favourites is a parsable slice of Favourite.
type Favourites []*Favourite
