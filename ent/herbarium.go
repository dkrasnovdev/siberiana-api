// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/familia"
	"github.com/dkrasnovdev/siberiana-api/ent/genus"
	"github.com/dkrasnovdev/siberiana-api/ent/group"
	"github.com/dkrasnovdev/siberiana-api/ent/herbarium"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
	"github.com/dkrasnovdev/siberiana-api/ent/species"
)

// Herbarium is the model entity for the Herbarium schema.
type Herbarium struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Abbreviation holds the value of the "abbreviation" field.
	Abbreviation string `json:"abbreviation,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ExternalLink holds the value of the "external_link" field.
	ExternalLink string `json:"external_link,omitempty"`
	// Status holds the value of the "status" field.
	Status herbarium.Status `json:"status,omitempty"`
	// PrimaryImageURL holds the value of the "primary_image_url" field.
	PrimaryImageURL string `json:"primary_image_url,omitempty"`
	// AdditionalImagesUrls holds the value of the "additional_images_urls" field.
	AdditionalImagesUrls []string `json:"additional_images_urls,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HerbariumQuery when eager-loading is set.
	Edges               HerbariumEdges `json:"edges"`
	collection_herbaria *int
	country_herbaria    *int
	district_herbaria   *int
	familia_herbaria    *int
	genus_herbaria      *int
	group_herbaria      *int
	person_herbaria     *int
	region_herbaria     *int
	settlement_herbaria *int
	species_herbaria    *int
	selectValues        sql.SelectValues
}

// HerbariumEdges holds the relations/edges for other nodes in the graph.
type HerbariumEdges struct {
	// Author holds the value of the author edge.
	Author *Person `json:"author,omitempty"`
	// Familia holds the value of the familia edge.
	Familia *Familia `json:"familia,omitempty"`
	// Genus holds the value of the genus edge.
	Genus *Genus `json:"genus,omitempty"`
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// Species holds the value of the species edge.
	Species *Species `json:"species,omitempty"`
	// Collection holds the value of the collection edge.
	Collection *Collection `json:"collection,omitempty"`
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// Settlement holds the value of the settlement edge.
	Settlement *Settlement `json:"settlement,omitempty"`
	// District holds the value of the district edge.
	District *District `json:"district,omitempty"`
	// Region holds the value of the region edge.
	Region *Region `json:"region,omitempty"`
	// PersonalCollection holds the value of the personal_collection edge.
	PersonalCollection []*PersonalCollection `json:"personal_collection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
	// totalCount holds the count of the edges above.
	totalCount [11]map[string]int

	namedPersonalCollection map[string][]*PersonalCollection
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HerbariumEdges) AuthorOrErr() (*Person, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: person.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// FamiliaOrErr returns the Familia value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HerbariumEdges) FamiliaOrErr() (*Familia, error) {
	if e.loadedTypes[1] {
		if e.Familia == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: familia.Label}
		}
		return e.Familia, nil
	}
	return nil, &NotLoadedError{edge: "familia"}
}

// GenusOrErr returns the Genus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HerbariumEdges) GenusOrErr() (*Genus, error) {
	if e.loadedTypes[2] {
		if e.Genus == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: genus.Label}
		}
		return e.Genus, nil
	}
	return nil, &NotLoadedError{edge: "genus"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HerbariumEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[3] {
		if e.Group == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// SpeciesOrErr returns the Species value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HerbariumEdges) SpeciesOrErr() (*Species, error) {
	if e.loadedTypes[4] {
		if e.Species == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: species.Label}
		}
		return e.Species, nil
	}
	return nil, &NotLoadedError{edge: "species"}
}

// CollectionOrErr returns the Collection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HerbariumEdges) CollectionOrErr() (*Collection, error) {
	if e.loadedTypes[5] {
		if e.Collection == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: collection.Label}
		}
		return e.Collection, nil
	}
	return nil, &NotLoadedError{edge: "collection"}
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HerbariumEdges) CountryOrErr() (*Country, error) {
	if e.loadedTypes[6] {
		if e.Country == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: country.Label}
		}
		return e.Country, nil
	}
	return nil, &NotLoadedError{edge: "country"}
}

// SettlementOrErr returns the Settlement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HerbariumEdges) SettlementOrErr() (*Settlement, error) {
	if e.loadedTypes[7] {
		if e.Settlement == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: settlement.Label}
		}
		return e.Settlement, nil
	}
	return nil, &NotLoadedError{edge: "settlement"}
}

// DistrictOrErr returns the District value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HerbariumEdges) DistrictOrErr() (*District, error) {
	if e.loadedTypes[8] {
		if e.District == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: district.Label}
		}
		return e.District, nil
	}
	return nil, &NotLoadedError{edge: "district"}
}

// RegionOrErr returns the Region value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HerbariumEdges) RegionOrErr() (*Region, error) {
	if e.loadedTypes[9] {
		if e.Region == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: region.Label}
		}
		return e.Region, nil
	}
	return nil, &NotLoadedError{edge: "region"}
}

// PersonalCollectionOrErr returns the PersonalCollection value or an error if the edge
// was not loaded in eager-loading.
func (e HerbariumEdges) PersonalCollectionOrErr() ([]*PersonalCollection, error) {
	if e.loadedTypes[10] {
		return e.PersonalCollection, nil
	}
	return nil, &NotLoadedError{edge: "personal_collection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Herbarium) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case herbarium.FieldAdditionalImagesUrls:
			values[i] = new([]byte)
		case herbarium.FieldID:
			values[i] = new(sql.NullInt64)
		case herbarium.FieldCreatedBy, herbarium.FieldUpdatedBy, herbarium.FieldDisplayName, herbarium.FieldAbbreviation, herbarium.FieldDescription, herbarium.FieldExternalLink, herbarium.FieldStatus, herbarium.FieldPrimaryImageURL, herbarium.FieldLocation:
			values[i] = new(sql.NullString)
		case herbarium.FieldCreatedAt, herbarium.FieldUpdatedAt, herbarium.FieldDate:
			values[i] = new(sql.NullTime)
		case herbarium.ForeignKeys[0]: // collection_herbaria
			values[i] = new(sql.NullInt64)
		case herbarium.ForeignKeys[1]: // country_herbaria
			values[i] = new(sql.NullInt64)
		case herbarium.ForeignKeys[2]: // district_herbaria
			values[i] = new(sql.NullInt64)
		case herbarium.ForeignKeys[3]: // familia_herbaria
			values[i] = new(sql.NullInt64)
		case herbarium.ForeignKeys[4]: // genus_herbaria
			values[i] = new(sql.NullInt64)
		case herbarium.ForeignKeys[5]: // group_herbaria
			values[i] = new(sql.NullInt64)
		case herbarium.ForeignKeys[6]: // person_herbaria
			values[i] = new(sql.NullInt64)
		case herbarium.ForeignKeys[7]: // region_herbaria
			values[i] = new(sql.NullInt64)
		case herbarium.ForeignKeys[8]: // settlement_herbaria
			values[i] = new(sql.NullInt64)
		case herbarium.ForeignKeys[9]: // species_herbaria
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Herbarium fields.
func (h *Herbarium) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case herbarium.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case herbarium.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Time
			}
		case herbarium.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				h.CreatedBy = value.String
			}
		case herbarium.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				h.UpdatedAt = value.Time
			}
		case herbarium.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				h.UpdatedBy = value.String
			}
		case herbarium.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				h.DisplayName = value.String
			}
		case herbarium.FieldAbbreviation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abbreviation", values[i])
			} else if value.Valid {
				h.Abbreviation = value.String
			}
		case herbarium.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				h.Description = value.String
			}
		case herbarium.FieldExternalLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_link", values[i])
			} else if value.Valid {
				h.ExternalLink = value.String
			}
		case herbarium.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				h.Status = herbarium.Status(value.String)
			}
		case herbarium.FieldPrimaryImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_image_url", values[i])
			} else if value.Valid {
				h.PrimaryImageURL = value.String
			}
		case herbarium.FieldAdditionalImagesUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field additional_images_urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.AdditionalImagesUrls); err != nil {
					return fmt.Errorf("unmarshal field additional_images_urls: %w", err)
				}
			}
		case herbarium.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				h.Date = value.Time
			}
		case herbarium.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				h.Location = value.String
			}
		case herbarium.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field collection_herbaria", value)
			} else if value.Valid {
				h.collection_herbaria = new(int)
				*h.collection_herbaria = int(value.Int64)
			}
		case herbarium.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field country_herbaria", value)
			} else if value.Valid {
				h.country_herbaria = new(int)
				*h.country_herbaria = int(value.Int64)
			}
		case herbarium.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field district_herbaria", value)
			} else if value.Valid {
				h.district_herbaria = new(int)
				*h.district_herbaria = int(value.Int64)
			}
		case herbarium.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field familia_herbaria", value)
			} else if value.Valid {
				h.familia_herbaria = new(int)
				*h.familia_herbaria = int(value.Int64)
			}
		case herbarium.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field genus_herbaria", value)
			} else if value.Valid {
				h.genus_herbaria = new(int)
				*h.genus_herbaria = int(value.Int64)
			}
		case herbarium.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field group_herbaria", value)
			} else if value.Valid {
				h.group_herbaria = new(int)
				*h.group_herbaria = int(value.Int64)
			}
		case herbarium.ForeignKeys[6]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field person_herbaria", value)
			} else if value.Valid {
				h.person_herbaria = new(int)
				*h.person_herbaria = int(value.Int64)
			}
		case herbarium.ForeignKeys[7]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field region_herbaria", value)
			} else if value.Valid {
				h.region_herbaria = new(int)
				*h.region_herbaria = int(value.Int64)
			}
		case herbarium.ForeignKeys[8]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field settlement_herbaria", value)
			} else if value.Valid {
				h.settlement_herbaria = new(int)
				*h.settlement_herbaria = int(value.Int64)
			}
		case herbarium.ForeignKeys[9]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field species_herbaria", value)
			} else if value.Valid {
				h.species_herbaria = new(int)
				*h.species_herbaria = int(value.Int64)
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Herbarium.
// This includes values selected through modifiers, order, etc.
func (h *Herbarium) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the Herbarium entity.
func (h *Herbarium) QueryAuthor() *PersonQuery {
	return NewHerbariumClient(h.config).QueryAuthor(h)
}

// QueryFamilia queries the "familia" edge of the Herbarium entity.
func (h *Herbarium) QueryFamilia() *FamiliaQuery {
	return NewHerbariumClient(h.config).QueryFamilia(h)
}

// QueryGenus queries the "genus" edge of the Herbarium entity.
func (h *Herbarium) QueryGenus() *GenusQuery {
	return NewHerbariumClient(h.config).QueryGenus(h)
}

// QueryGroup queries the "group" edge of the Herbarium entity.
func (h *Herbarium) QueryGroup() *GroupQuery {
	return NewHerbariumClient(h.config).QueryGroup(h)
}

// QuerySpecies queries the "species" edge of the Herbarium entity.
func (h *Herbarium) QuerySpecies() *SpeciesQuery {
	return NewHerbariumClient(h.config).QuerySpecies(h)
}

// QueryCollection queries the "collection" edge of the Herbarium entity.
func (h *Herbarium) QueryCollection() *CollectionQuery {
	return NewHerbariumClient(h.config).QueryCollection(h)
}

// QueryCountry queries the "country" edge of the Herbarium entity.
func (h *Herbarium) QueryCountry() *CountryQuery {
	return NewHerbariumClient(h.config).QueryCountry(h)
}

// QuerySettlement queries the "settlement" edge of the Herbarium entity.
func (h *Herbarium) QuerySettlement() *SettlementQuery {
	return NewHerbariumClient(h.config).QuerySettlement(h)
}

// QueryDistrict queries the "district" edge of the Herbarium entity.
func (h *Herbarium) QueryDistrict() *DistrictQuery {
	return NewHerbariumClient(h.config).QueryDistrict(h)
}

// QueryRegion queries the "region" edge of the Herbarium entity.
func (h *Herbarium) QueryRegion() *RegionQuery {
	return NewHerbariumClient(h.config).QueryRegion(h)
}

// QueryPersonalCollection queries the "personal_collection" edge of the Herbarium entity.
func (h *Herbarium) QueryPersonalCollection() *PersonalCollectionQuery {
	return NewHerbariumClient(h.config).QueryPersonalCollection(h)
}

// Update returns a builder for updating this Herbarium.
// Note that you need to call Herbarium.Unwrap() before calling this method if this Herbarium
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Herbarium) Update() *HerbariumUpdateOne {
	return NewHerbariumClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Herbarium entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Herbarium) Unwrap() *Herbarium {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Herbarium is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Herbarium) String() string {
	var builder strings.Builder
	builder.WriteString("Herbarium(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("created_at=")
	builder.WriteString(h.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(h.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(h.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(h.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(h.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("abbreviation=")
	builder.WriteString(h.Abbreviation)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(h.Description)
	builder.WriteString(", ")
	builder.WriteString("external_link=")
	builder.WriteString(h.ExternalLink)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", h.Status))
	builder.WriteString(", ")
	builder.WriteString("primary_image_url=")
	builder.WriteString(h.PrimaryImageURL)
	builder.WriteString(", ")
	builder.WriteString("additional_images_urls=")
	builder.WriteString(fmt.Sprintf("%v", h.AdditionalImagesUrls))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(h.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(h.Location)
	builder.WriteByte(')')
	return builder.String()
}

// NamedPersonalCollection returns the PersonalCollection named value or an error if the edge was not
// loaded in eager-loading with this name.
func (h *Herbarium) NamedPersonalCollection(name string) ([]*PersonalCollection, error) {
	if h.Edges.namedPersonalCollection == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := h.Edges.namedPersonalCollection[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (h *Herbarium) appendNamedPersonalCollection(name string, edges ...*PersonalCollection) {
	if h.Edges.namedPersonalCollection == nil {
		h.Edges.namedPersonalCollection = make(map[string][]*PersonalCollection)
	}
	if len(edges) == 0 {
		h.Edges.namedPersonalCollection[name] = []*PersonalCollection{}
	} else {
		h.Edges.namedPersonalCollection[name] = append(h.Edges.namedPersonalCollection[name], edges...)
	}
}

// Herbaria is a parsable slice of Herbarium.
type Herbaria []*Herbarium
