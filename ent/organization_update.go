// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/heritage-api/ent/holder"
	"github.com/dkrasnovdev/heritage-api/ent/organization"
	"github.com/dkrasnovdev/heritage-api/ent/person"
	"github.com/dkrasnovdev/heritage-api/ent/predicate"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetCreatedBy sets the "created_by" field.
func (ou *OrganizationUpdate) SetCreatedBy(s string) *OrganizationUpdate {
	ou.mutation.SetCreatedBy(s)
	return ou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCreatedBy(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetCreatedBy(*s)
	}
	return ou
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ou *OrganizationUpdate) ClearCreatedBy() *OrganizationUpdate {
	ou.mutation.ClearCreatedBy()
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrganizationUpdate) SetUpdatedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetUpdatedBy sets the "updated_by" field.
func (ou *OrganizationUpdate) SetUpdatedBy(s string) *OrganizationUpdate {
	ou.mutation.SetUpdatedBy(s)
	return ou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableUpdatedBy(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetUpdatedBy(*s)
	}
	return ou
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ou *OrganizationUpdate) ClearUpdatedBy() *OrganizationUpdate {
	ou.mutation.ClearUpdatedBy()
	return ou
}

// SetAddress sets the "address" field.
func (ou *OrganizationUpdate) SetAddress(s string) *OrganizationUpdate {
	ou.mutation.SetAddress(s)
	return ou
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableAddress(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetAddress(*s)
	}
	return ou
}

// ClearAddress clears the value of the "address" field.
func (ou *OrganizationUpdate) ClearAddress() *OrganizationUpdate {
	ou.mutation.ClearAddress()
	return ou
}

// SetPhoneNumbers sets the "phone_numbers" field.
func (ou *OrganizationUpdate) SetPhoneNumbers(s []string) *OrganizationUpdate {
	ou.mutation.SetPhoneNumbers(s)
	return ou
}

// AppendPhoneNumbers appends s to the "phone_numbers" field.
func (ou *OrganizationUpdate) AppendPhoneNumbers(s []string) *OrganizationUpdate {
	ou.mutation.AppendPhoneNumbers(s)
	return ou
}

// ClearPhoneNumbers clears the value of the "phone_numbers" field.
func (ou *OrganizationUpdate) ClearPhoneNumbers() *OrganizationUpdate {
	ou.mutation.ClearPhoneNumbers()
	return ou
}

// SetEmails sets the "emails" field.
func (ou *OrganizationUpdate) SetEmails(s []string) *OrganizationUpdate {
	ou.mutation.SetEmails(s)
	return ou
}

// AppendEmails appends s to the "emails" field.
func (ou *OrganizationUpdate) AppendEmails(s []string) *OrganizationUpdate {
	ou.mutation.AppendEmails(s)
	return ou
}

// ClearEmails clears the value of the "emails" field.
func (ou *OrganizationUpdate) ClearEmails() *OrganizationUpdate {
	ou.mutation.ClearEmails()
	return ou
}

// SetDisplayName sets the "display_name" field.
func (ou *OrganizationUpdate) SetDisplayName(s string) *OrganizationUpdate {
	ou.mutation.SetDisplayName(s)
	return ou
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDisplayName(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetDisplayName(*s)
	}
	return ou
}

// ClearDisplayName clears the value of the "display_name" field.
func (ou *OrganizationUpdate) ClearDisplayName() *OrganizationUpdate {
	ou.mutation.ClearDisplayName()
	return ou
}

// SetDescription sets the "description" field.
func (ou *OrganizationUpdate) SetDescription(s string) *OrganizationUpdate {
	ou.mutation.SetDescription(s)
	return ou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDescription(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetDescription(*s)
	}
	return ou
}

// ClearDescription clears the value of the "description" field.
func (ou *OrganizationUpdate) ClearDescription() *OrganizationUpdate {
	ou.mutation.ClearDescription()
	return ou
}

// SetExternalLinks sets the "external_links" field.
func (ou *OrganizationUpdate) SetExternalLinks(s []string) *OrganizationUpdate {
	ou.mutation.SetExternalLinks(s)
	return ou
}

// AppendExternalLinks appends s to the "external_links" field.
func (ou *OrganizationUpdate) AppendExternalLinks(s []string) *OrganizationUpdate {
	ou.mutation.AppendExternalLinks(s)
	return ou
}

// ClearExternalLinks clears the value of the "external_links" field.
func (ou *OrganizationUpdate) ClearExternalLinks() *OrganizationUpdate {
	ou.mutation.ClearExternalLinks()
	return ou
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (ou *OrganizationUpdate) SetPrimaryImageURL(s string) *OrganizationUpdate {
	ou.mutation.SetPrimaryImageURL(s)
	return ou
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillablePrimaryImageURL(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetPrimaryImageURL(*s)
	}
	return ou
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (ou *OrganizationUpdate) ClearPrimaryImageURL() *OrganizationUpdate {
	ou.mutation.ClearPrimaryImageURL()
	return ou
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (ou *OrganizationUpdate) SetAdditionalImagesUrls(s []string) *OrganizationUpdate {
	ou.mutation.SetAdditionalImagesUrls(s)
	return ou
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (ou *OrganizationUpdate) AppendAdditionalImagesUrls(s []string) *OrganizationUpdate {
	ou.mutation.AppendAdditionalImagesUrls(s)
	return ou
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (ou *OrganizationUpdate) ClearAdditionalImagesUrls() *OrganizationUpdate {
	ou.mutation.ClearAdditionalImagesUrls()
	return ou
}

// AddPersonIDs adds the "people" edge to the Person entity by IDs.
func (ou *OrganizationUpdate) AddPersonIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddPersonIDs(ids...)
	return ou
}

// AddPeople adds the "people" edges to the Person entity.
func (ou *OrganizationUpdate) AddPeople(p ...*Person) *OrganizationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddPersonIDs(ids...)
}

// SetHolderID sets the "holder" edge to the Holder entity by ID.
func (ou *OrganizationUpdate) SetHolderID(id int) *OrganizationUpdate {
	ou.mutation.SetHolderID(id)
	return ou
}

// SetNillableHolderID sets the "holder" edge to the Holder entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableHolderID(id *int) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetHolderID(*id)
	}
	return ou
}

// SetHolder sets the "holder" edge to the Holder entity.
func (ou *OrganizationUpdate) SetHolder(h *Holder) *OrganizationUpdate {
	return ou.SetHolderID(h.ID)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// ClearPeople clears all "people" edges to the Person entity.
func (ou *OrganizationUpdate) ClearPeople() *OrganizationUpdate {
	ou.mutation.ClearPeople()
	return ou
}

// RemovePersonIDs removes the "people" edge to Person entities by IDs.
func (ou *OrganizationUpdate) RemovePersonIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemovePersonIDs(ids...)
	return ou
}

// RemovePeople removes "people" edges to Person entities.
func (ou *OrganizationUpdate) RemovePeople(p ...*Person) *OrganizationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemovePersonIDs(ids...)
}

// ClearHolder clears the "holder" edge to the Holder entity.
func (ou *OrganizationUpdate) ClearHolder() *OrganizationUpdate {
	ou.mutation.ClearHolder()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	if err := ou.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrganizationUpdate) defaults() error {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		if organization.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized organization.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := organization.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.CreatedBy(); ok {
		_spec.SetField(organization.FieldCreatedBy, field.TypeString, value)
	}
	if ou.mutation.CreatedByCleared() {
		_spec.ClearField(organization.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdatedBy(); ok {
		_spec.SetField(organization.FieldUpdatedBy, field.TypeString, value)
	}
	if ou.mutation.UpdatedByCleared() {
		_spec.ClearField(organization.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ou.mutation.Address(); ok {
		_spec.SetField(organization.FieldAddress, field.TypeString, value)
	}
	if ou.mutation.AddressCleared() {
		_spec.ClearField(organization.FieldAddress, field.TypeString)
	}
	if value, ok := ou.mutation.PhoneNumbers(); ok {
		_spec.SetField(organization.FieldPhoneNumbers, field.TypeJSON, value)
	}
	if value, ok := ou.mutation.AppendedPhoneNumbers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldPhoneNumbers, value)
		})
	}
	if ou.mutation.PhoneNumbersCleared() {
		_spec.ClearField(organization.FieldPhoneNumbers, field.TypeJSON)
	}
	if value, ok := ou.mutation.Emails(); ok {
		_spec.SetField(organization.FieldEmails, field.TypeJSON, value)
	}
	if value, ok := ou.mutation.AppendedEmails(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldEmails, value)
		})
	}
	if ou.mutation.EmailsCleared() {
		_spec.ClearField(organization.FieldEmails, field.TypeJSON)
	}
	if value, ok := ou.mutation.DisplayName(); ok {
		_spec.SetField(organization.FieldDisplayName, field.TypeString, value)
	}
	if ou.mutation.DisplayNameCleared() {
		_spec.ClearField(organization.FieldDisplayName, field.TypeString)
	}
	if value, ok := ou.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if ou.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if value, ok := ou.mutation.ExternalLinks(); ok {
		_spec.SetField(organization.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := ou.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldExternalLinks, value)
		})
	}
	if ou.mutation.ExternalLinksCleared() {
		_spec.ClearField(organization.FieldExternalLinks, field.TypeJSON)
	}
	if value, ok := ou.mutation.PrimaryImageURL(); ok {
		_spec.SetField(organization.FieldPrimaryImageURL, field.TypeString, value)
	}
	if ou.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(organization.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := ou.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(organization.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := ou.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldAdditionalImagesUrls, value)
		})
	}
	if ou.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(organization.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if ou.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PeopleTable,
			Columns: []string{organization.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedPeopleIDs(); len(nodes) > 0 && !ou.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PeopleTable,
			Columns: []string{organization.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PeopleTable,
			Columns: []string{organization.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.HolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organization.HolderTable,
			Columns: []string{organization.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(holder.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.HolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organization.HolderTable,
			Columns: []string{organization.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(holder.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationMutation
}

// SetCreatedBy sets the "created_by" field.
func (ouo *OrganizationUpdateOne) SetCreatedBy(s string) *OrganizationUpdateOne {
	ouo.mutation.SetCreatedBy(s)
	return ouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCreatedBy(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetCreatedBy(*s)
	}
	return ouo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ouo *OrganizationUpdateOne) ClearCreatedBy() *OrganizationUpdateOne {
	ouo.mutation.ClearCreatedBy()
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrganizationUpdateOne) SetUpdatedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetUpdatedBy sets the "updated_by" field.
func (ouo *OrganizationUpdateOne) SetUpdatedBy(s string) *OrganizationUpdateOne {
	ouo.mutation.SetUpdatedBy(s)
	return ouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableUpdatedBy(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetUpdatedBy(*s)
	}
	return ouo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ouo *OrganizationUpdateOne) ClearUpdatedBy() *OrganizationUpdateOne {
	ouo.mutation.ClearUpdatedBy()
	return ouo
}

// SetAddress sets the "address" field.
func (ouo *OrganizationUpdateOne) SetAddress(s string) *OrganizationUpdateOne {
	ouo.mutation.SetAddress(s)
	return ouo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableAddress(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetAddress(*s)
	}
	return ouo
}

// ClearAddress clears the value of the "address" field.
func (ouo *OrganizationUpdateOne) ClearAddress() *OrganizationUpdateOne {
	ouo.mutation.ClearAddress()
	return ouo
}

// SetPhoneNumbers sets the "phone_numbers" field.
func (ouo *OrganizationUpdateOne) SetPhoneNumbers(s []string) *OrganizationUpdateOne {
	ouo.mutation.SetPhoneNumbers(s)
	return ouo
}

// AppendPhoneNumbers appends s to the "phone_numbers" field.
func (ouo *OrganizationUpdateOne) AppendPhoneNumbers(s []string) *OrganizationUpdateOne {
	ouo.mutation.AppendPhoneNumbers(s)
	return ouo
}

// ClearPhoneNumbers clears the value of the "phone_numbers" field.
func (ouo *OrganizationUpdateOne) ClearPhoneNumbers() *OrganizationUpdateOne {
	ouo.mutation.ClearPhoneNumbers()
	return ouo
}

// SetEmails sets the "emails" field.
func (ouo *OrganizationUpdateOne) SetEmails(s []string) *OrganizationUpdateOne {
	ouo.mutation.SetEmails(s)
	return ouo
}

// AppendEmails appends s to the "emails" field.
func (ouo *OrganizationUpdateOne) AppendEmails(s []string) *OrganizationUpdateOne {
	ouo.mutation.AppendEmails(s)
	return ouo
}

// ClearEmails clears the value of the "emails" field.
func (ouo *OrganizationUpdateOne) ClearEmails() *OrganizationUpdateOne {
	ouo.mutation.ClearEmails()
	return ouo
}

// SetDisplayName sets the "display_name" field.
func (ouo *OrganizationUpdateOne) SetDisplayName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetDisplayName(s)
	return ouo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDisplayName(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetDisplayName(*s)
	}
	return ouo
}

// ClearDisplayName clears the value of the "display_name" field.
func (ouo *OrganizationUpdateOne) ClearDisplayName() *OrganizationUpdateOne {
	ouo.mutation.ClearDisplayName()
	return ouo
}

// SetDescription sets the "description" field.
func (ouo *OrganizationUpdateOne) SetDescription(s string) *OrganizationUpdateOne {
	ouo.mutation.SetDescription(s)
	return ouo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDescription(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetDescription(*s)
	}
	return ouo
}

// ClearDescription clears the value of the "description" field.
func (ouo *OrganizationUpdateOne) ClearDescription() *OrganizationUpdateOne {
	ouo.mutation.ClearDescription()
	return ouo
}

// SetExternalLinks sets the "external_links" field.
func (ouo *OrganizationUpdateOne) SetExternalLinks(s []string) *OrganizationUpdateOne {
	ouo.mutation.SetExternalLinks(s)
	return ouo
}

// AppendExternalLinks appends s to the "external_links" field.
func (ouo *OrganizationUpdateOne) AppendExternalLinks(s []string) *OrganizationUpdateOne {
	ouo.mutation.AppendExternalLinks(s)
	return ouo
}

// ClearExternalLinks clears the value of the "external_links" field.
func (ouo *OrganizationUpdateOne) ClearExternalLinks() *OrganizationUpdateOne {
	ouo.mutation.ClearExternalLinks()
	return ouo
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (ouo *OrganizationUpdateOne) SetPrimaryImageURL(s string) *OrganizationUpdateOne {
	ouo.mutation.SetPrimaryImageURL(s)
	return ouo
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillablePrimaryImageURL(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetPrimaryImageURL(*s)
	}
	return ouo
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (ouo *OrganizationUpdateOne) ClearPrimaryImageURL() *OrganizationUpdateOne {
	ouo.mutation.ClearPrimaryImageURL()
	return ouo
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (ouo *OrganizationUpdateOne) SetAdditionalImagesUrls(s []string) *OrganizationUpdateOne {
	ouo.mutation.SetAdditionalImagesUrls(s)
	return ouo
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (ouo *OrganizationUpdateOne) AppendAdditionalImagesUrls(s []string) *OrganizationUpdateOne {
	ouo.mutation.AppendAdditionalImagesUrls(s)
	return ouo
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (ouo *OrganizationUpdateOne) ClearAdditionalImagesUrls() *OrganizationUpdateOne {
	ouo.mutation.ClearAdditionalImagesUrls()
	return ouo
}

// AddPersonIDs adds the "people" edge to the Person entity by IDs.
func (ouo *OrganizationUpdateOne) AddPersonIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddPersonIDs(ids...)
	return ouo
}

// AddPeople adds the "people" edges to the Person entity.
func (ouo *OrganizationUpdateOne) AddPeople(p ...*Person) *OrganizationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddPersonIDs(ids...)
}

// SetHolderID sets the "holder" edge to the Holder entity by ID.
func (ouo *OrganizationUpdateOne) SetHolderID(id int) *OrganizationUpdateOne {
	ouo.mutation.SetHolderID(id)
	return ouo
}

// SetNillableHolderID sets the "holder" edge to the Holder entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableHolderID(id *int) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetHolderID(*id)
	}
	return ouo
}

// SetHolder sets the "holder" edge to the Holder entity.
func (ouo *OrganizationUpdateOne) SetHolder(h *Holder) *OrganizationUpdateOne {
	return ouo.SetHolderID(h.ID)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// ClearPeople clears all "people" edges to the Person entity.
func (ouo *OrganizationUpdateOne) ClearPeople() *OrganizationUpdateOne {
	ouo.mutation.ClearPeople()
	return ouo
}

// RemovePersonIDs removes the "people" edge to Person entities by IDs.
func (ouo *OrganizationUpdateOne) RemovePersonIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemovePersonIDs(ids...)
	return ouo
}

// RemovePeople removes "people" edges to Person entities.
func (ouo *OrganizationUpdateOne) RemovePeople(p ...*Person) *OrganizationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemovePersonIDs(ids...)
}

// ClearHolder clears the "holder" edge to the Holder entity.
func (ouo *OrganizationUpdateOne) ClearHolder() *OrganizationUpdateOne {
	ouo.mutation.ClearHolder()
	return ouo
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ouo *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	if err := ouo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrganizationUpdateOne) defaults() error {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		if organization.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized organization.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := organization.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.CreatedBy(); ok {
		_spec.SetField(organization.FieldCreatedBy, field.TypeString, value)
	}
	if ouo.mutation.CreatedByCleared() {
		_spec.ClearField(organization.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdatedBy(); ok {
		_spec.SetField(organization.FieldUpdatedBy, field.TypeString, value)
	}
	if ouo.mutation.UpdatedByCleared() {
		_spec.ClearField(organization.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ouo.mutation.Address(); ok {
		_spec.SetField(organization.FieldAddress, field.TypeString, value)
	}
	if ouo.mutation.AddressCleared() {
		_spec.ClearField(organization.FieldAddress, field.TypeString)
	}
	if value, ok := ouo.mutation.PhoneNumbers(); ok {
		_spec.SetField(organization.FieldPhoneNumbers, field.TypeJSON, value)
	}
	if value, ok := ouo.mutation.AppendedPhoneNumbers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldPhoneNumbers, value)
		})
	}
	if ouo.mutation.PhoneNumbersCleared() {
		_spec.ClearField(organization.FieldPhoneNumbers, field.TypeJSON)
	}
	if value, ok := ouo.mutation.Emails(); ok {
		_spec.SetField(organization.FieldEmails, field.TypeJSON, value)
	}
	if value, ok := ouo.mutation.AppendedEmails(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldEmails, value)
		})
	}
	if ouo.mutation.EmailsCleared() {
		_spec.ClearField(organization.FieldEmails, field.TypeJSON)
	}
	if value, ok := ouo.mutation.DisplayName(); ok {
		_spec.SetField(organization.FieldDisplayName, field.TypeString, value)
	}
	if ouo.mutation.DisplayNameCleared() {
		_spec.ClearField(organization.FieldDisplayName, field.TypeString)
	}
	if value, ok := ouo.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if ouo.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if value, ok := ouo.mutation.ExternalLinks(); ok {
		_spec.SetField(organization.FieldExternalLinks, field.TypeJSON, value)
	}
	if value, ok := ouo.mutation.AppendedExternalLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldExternalLinks, value)
		})
	}
	if ouo.mutation.ExternalLinksCleared() {
		_spec.ClearField(organization.FieldExternalLinks, field.TypeJSON)
	}
	if value, ok := ouo.mutation.PrimaryImageURL(); ok {
		_spec.SetField(organization.FieldPrimaryImageURL, field.TypeString, value)
	}
	if ouo.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(organization.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := ouo.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(organization.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := ouo.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldAdditionalImagesUrls, value)
		})
	}
	if ouo.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(organization.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if ouo.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PeopleTable,
			Columns: []string{organization.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedPeopleIDs(); len(nodes) > 0 && !ouo.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PeopleTable,
			Columns: []string{organization.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PeopleTable,
			Columns: []string{organization.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.HolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organization.HolderTable,
			Columns: []string{organization.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(holder.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.HolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organization.HolderTable,
			Columns: []string{organization.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(holder.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
