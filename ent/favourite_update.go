// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/favourite"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/proxy"
)

// FavouriteUpdate is the builder for updating Favourite entities.
type FavouriteUpdate struct {
	config
	hooks    []Hook
	mutation *FavouriteMutation
}

// Where appends a list predicates to the FavouriteUpdate builder.
func (fu *FavouriteUpdate) Where(ps ...predicate.Favourite) *FavouriteUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetCreatedBy sets the "created_by" field.
func (fu *FavouriteUpdate) SetCreatedBy(s string) *FavouriteUpdate {
	fu.mutation.SetCreatedBy(s)
	return fu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fu *FavouriteUpdate) SetNillableCreatedBy(s *string) *FavouriteUpdate {
	if s != nil {
		fu.SetCreatedBy(*s)
	}
	return fu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (fu *FavouriteUpdate) ClearCreatedBy() *FavouriteUpdate {
	fu.mutation.ClearCreatedBy()
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FavouriteUpdate) SetUpdatedAt(t time.Time) *FavouriteUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetUpdatedBy sets the "updated_by" field.
func (fu *FavouriteUpdate) SetUpdatedBy(s string) *FavouriteUpdate {
	fu.mutation.SetUpdatedBy(s)
	return fu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fu *FavouriteUpdate) SetNillableUpdatedBy(s *string) *FavouriteUpdate {
	if s != nil {
		fu.SetUpdatedBy(*s)
	}
	return fu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fu *FavouriteUpdate) ClearUpdatedBy() *FavouriteUpdate {
	fu.mutation.ClearUpdatedBy()
	return fu
}

// AddProxyIDs adds the "proxies" edge to the Proxy entity by IDs.
func (fu *FavouriteUpdate) AddProxyIDs(ids ...int) *FavouriteUpdate {
	fu.mutation.AddProxyIDs(ids...)
	return fu
}

// AddProxies adds the "proxies" edges to the Proxy entity.
func (fu *FavouriteUpdate) AddProxies(p ...*Proxy) *FavouriteUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.AddProxyIDs(ids...)
}

// Mutation returns the FavouriteMutation object of the builder.
func (fu *FavouriteUpdate) Mutation() *FavouriteMutation {
	return fu.mutation
}

// ClearProxies clears all "proxies" edges to the Proxy entity.
func (fu *FavouriteUpdate) ClearProxies() *FavouriteUpdate {
	fu.mutation.ClearProxies()
	return fu
}

// RemoveProxyIDs removes the "proxies" edge to Proxy entities by IDs.
func (fu *FavouriteUpdate) RemoveProxyIDs(ids ...int) *FavouriteUpdate {
	fu.mutation.RemoveProxyIDs(ids...)
	return fu
}

// RemoveProxies removes "proxies" edges to Proxy entities.
func (fu *FavouriteUpdate) RemoveProxies(p ...*Proxy) *FavouriteUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.RemoveProxyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FavouriteUpdate) Save(ctx context.Context) (int, error) {
	if err := fu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FavouriteUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FavouriteUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FavouriteUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FavouriteUpdate) defaults() error {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		if favourite.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized favourite.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := favourite.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (fu *FavouriteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(favourite.Table, favourite.Columns, sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.CreatedBy(); ok {
		_spec.SetField(favourite.FieldCreatedBy, field.TypeString, value)
	}
	if fu.mutation.CreatedByCleared() {
		_spec.ClearField(favourite.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(favourite.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.UpdatedBy(); ok {
		_spec.SetField(favourite.FieldUpdatedBy, field.TypeString, value)
	}
	if fu.mutation.UpdatedByCleared() {
		_spec.ClearField(favourite.FieldUpdatedBy, field.TypeString)
	}
	if fu.mutation.ProxiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   favourite.ProxiesTable,
			Columns: []string{favourite.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedProxiesIDs(); len(nodes) > 0 && !fu.mutation.ProxiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   favourite.ProxiesTable,
			Columns: []string{favourite.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ProxiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   favourite.ProxiesTable,
			Columns: []string{favourite.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favourite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FavouriteUpdateOne is the builder for updating a single Favourite entity.
type FavouriteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FavouriteMutation
}

// SetCreatedBy sets the "created_by" field.
func (fuo *FavouriteUpdateOne) SetCreatedBy(s string) *FavouriteUpdateOne {
	fuo.mutation.SetCreatedBy(s)
	return fuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fuo *FavouriteUpdateOne) SetNillableCreatedBy(s *string) *FavouriteUpdateOne {
	if s != nil {
		fuo.SetCreatedBy(*s)
	}
	return fuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (fuo *FavouriteUpdateOne) ClearCreatedBy() *FavouriteUpdateOne {
	fuo.mutation.ClearCreatedBy()
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FavouriteUpdateOne) SetUpdatedAt(t time.Time) *FavouriteUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetUpdatedBy sets the "updated_by" field.
func (fuo *FavouriteUpdateOne) SetUpdatedBy(s string) *FavouriteUpdateOne {
	fuo.mutation.SetUpdatedBy(s)
	return fuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fuo *FavouriteUpdateOne) SetNillableUpdatedBy(s *string) *FavouriteUpdateOne {
	if s != nil {
		fuo.SetUpdatedBy(*s)
	}
	return fuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fuo *FavouriteUpdateOne) ClearUpdatedBy() *FavouriteUpdateOne {
	fuo.mutation.ClearUpdatedBy()
	return fuo
}

// AddProxyIDs adds the "proxies" edge to the Proxy entity by IDs.
func (fuo *FavouriteUpdateOne) AddProxyIDs(ids ...int) *FavouriteUpdateOne {
	fuo.mutation.AddProxyIDs(ids...)
	return fuo
}

// AddProxies adds the "proxies" edges to the Proxy entity.
func (fuo *FavouriteUpdateOne) AddProxies(p ...*Proxy) *FavouriteUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.AddProxyIDs(ids...)
}

// Mutation returns the FavouriteMutation object of the builder.
func (fuo *FavouriteUpdateOne) Mutation() *FavouriteMutation {
	return fuo.mutation
}

// ClearProxies clears all "proxies" edges to the Proxy entity.
func (fuo *FavouriteUpdateOne) ClearProxies() *FavouriteUpdateOne {
	fuo.mutation.ClearProxies()
	return fuo
}

// RemoveProxyIDs removes the "proxies" edge to Proxy entities by IDs.
func (fuo *FavouriteUpdateOne) RemoveProxyIDs(ids ...int) *FavouriteUpdateOne {
	fuo.mutation.RemoveProxyIDs(ids...)
	return fuo
}

// RemoveProxies removes "proxies" edges to Proxy entities.
func (fuo *FavouriteUpdateOne) RemoveProxies(p ...*Proxy) *FavouriteUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.RemoveProxyIDs(ids...)
}

// Where appends a list predicates to the FavouriteUpdate builder.
func (fuo *FavouriteUpdateOne) Where(ps ...predicate.Favourite) *FavouriteUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FavouriteUpdateOne) Select(field string, fields ...string) *FavouriteUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Favourite entity.
func (fuo *FavouriteUpdateOne) Save(ctx context.Context) (*Favourite, error) {
	if err := fuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FavouriteUpdateOne) SaveX(ctx context.Context) *Favourite {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FavouriteUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FavouriteUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FavouriteUpdateOne) defaults() error {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		if favourite.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized favourite.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := favourite.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (fuo *FavouriteUpdateOne) sqlSave(ctx context.Context) (_node *Favourite, err error) {
	_spec := sqlgraph.NewUpdateSpec(favourite.Table, favourite.Columns, sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Favourite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, favourite.FieldID)
		for _, f := range fields {
			if !favourite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != favourite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.CreatedBy(); ok {
		_spec.SetField(favourite.FieldCreatedBy, field.TypeString, value)
	}
	if fuo.mutation.CreatedByCleared() {
		_spec.ClearField(favourite.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(favourite.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.UpdatedBy(); ok {
		_spec.SetField(favourite.FieldUpdatedBy, field.TypeString, value)
	}
	if fuo.mutation.UpdatedByCleared() {
		_spec.ClearField(favourite.FieldUpdatedBy, field.TypeString)
	}
	if fuo.mutation.ProxiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   favourite.ProxiesTable,
			Columns: []string{favourite.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedProxiesIDs(); len(nodes) > 0 && !fuo.mutation.ProxiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   favourite.ProxiesTable,
			Columns: []string{favourite.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ProxiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   favourite.ProxiesTable,
			Columns: []string{favourite.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Favourite{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favourite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
