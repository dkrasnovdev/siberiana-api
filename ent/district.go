// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
)

// District is the model entity for the District schema.
type District struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Abbreviation holds the value of the "abbreviation" field.
	Abbreviation string `json:"abbreviation,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ExternalLink holds the value of the "external_link" field.
	ExternalLink string `json:"external_link,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DistrictQuery when eager-loading is set.
	Edges            DistrictEdges `json:"edges"`
	region_districts *int
	selectValues     sql.SelectValues
}

// DistrictEdges holds the relations/edges for other nodes in the graph.
type DistrictEdges struct {
	// Art holds the value of the art edge.
	Art []*Art `json:"art,omitempty"`
	// Artifacts holds the value of the artifacts edge.
	Artifacts []*Artifact `json:"artifacts,omitempty"`
	// Books holds the value of the books edge.
	Books []*Book `json:"books,omitempty"`
	// ProtectedAreaPictures holds the value of the protected_area_pictures edge.
	ProtectedAreaPictures []*ProtectedAreaPicture `json:"protected_area_pictures,omitempty"`
	// Settlements holds the value of the settlements edge.
	Settlements []*Settlement `json:"settlements,omitempty"`
	// Locations holds the value of the locations edge.
	Locations []*Location `json:"locations,omitempty"`
	// Region holds the value of the region edge.
	Region *Region `json:"region,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
	// totalCount holds the count of the edges above.
	totalCount [7]map[string]int

	namedArt                   map[string][]*Art
	namedArtifacts             map[string][]*Artifact
	namedBooks                 map[string][]*Book
	namedProtectedAreaPictures map[string][]*ProtectedAreaPicture
	namedSettlements           map[string][]*Settlement
	namedLocations             map[string][]*Location
}

// ArtOrErr returns the Art value or an error if the edge
// was not loaded in eager-loading.
func (e DistrictEdges) ArtOrErr() ([]*Art, error) {
	if e.loadedTypes[0] {
		return e.Art, nil
	}
	return nil, &NotLoadedError{edge: "art"}
}

// ArtifactsOrErr returns the Artifacts value or an error if the edge
// was not loaded in eager-loading.
func (e DistrictEdges) ArtifactsOrErr() ([]*Artifact, error) {
	if e.loadedTypes[1] {
		return e.Artifacts, nil
	}
	return nil, &NotLoadedError{edge: "artifacts"}
}

// BooksOrErr returns the Books value or an error if the edge
// was not loaded in eager-loading.
func (e DistrictEdges) BooksOrErr() ([]*Book, error) {
	if e.loadedTypes[2] {
		return e.Books, nil
	}
	return nil, &NotLoadedError{edge: "books"}
}

// ProtectedAreaPicturesOrErr returns the ProtectedAreaPictures value or an error if the edge
// was not loaded in eager-loading.
func (e DistrictEdges) ProtectedAreaPicturesOrErr() ([]*ProtectedAreaPicture, error) {
	if e.loadedTypes[3] {
		return e.ProtectedAreaPictures, nil
	}
	return nil, &NotLoadedError{edge: "protected_area_pictures"}
}

// SettlementsOrErr returns the Settlements value or an error if the edge
// was not loaded in eager-loading.
func (e DistrictEdges) SettlementsOrErr() ([]*Settlement, error) {
	if e.loadedTypes[4] {
		return e.Settlements, nil
	}
	return nil, &NotLoadedError{edge: "settlements"}
}

// LocationsOrErr returns the Locations value or an error if the edge
// was not loaded in eager-loading.
func (e DistrictEdges) LocationsOrErr() ([]*Location, error) {
	if e.loadedTypes[5] {
		return e.Locations, nil
	}
	return nil, &NotLoadedError{edge: "locations"}
}

// RegionOrErr returns the Region value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DistrictEdges) RegionOrErr() (*Region, error) {
	if e.loadedTypes[6] {
		if e.Region == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: region.Label}
		}
		return e.Region, nil
	}
	return nil, &NotLoadedError{edge: "region"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*District) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case district.FieldID:
			values[i] = new(sql.NullInt64)
		case district.FieldCreatedBy, district.FieldUpdatedBy, district.FieldDisplayName, district.FieldAbbreviation, district.FieldDescription, district.FieldExternalLink:
			values[i] = new(sql.NullString)
		case district.FieldCreatedAt, district.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case district.ForeignKeys[0]: // region_districts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the District fields.
func (d *District) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case district.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case district.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case district.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				d.CreatedBy = value.String
			}
		case district.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case district.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				d.UpdatedBy = value.String
			}
		case district.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				d.DisplayName = value.String
			}
		case district.FieldAbbreviation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abbreviation", values[i])
			} else if value.Valid {
				d.Abbreviation = value.String
			}
		case district.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				d.Description = value.String
			}
		case district.FieldExternalLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_link", values[i])
			} else if value.Valid {
				d.ExternalLink = value.String
			}
		case district.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field region_districts", value)
			} else if value.Valid {
				d.region_districts = new(int)
				*d.region_districts = int(value.Int64)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the District.
// This includes values selected through modifiers, order, etc.
func (d *District) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryArt queries the "art" edge of the District entity.
func (d *District) QueryArt() *ArtQuery {
	return NewDistrictClient(d.config).QueryArt(d)
}

// QueryArtifacts queries the "artifacts" edge of the District entity.
func (d *District) QueryArtifacts() *ArtifactQuery {
	return NewDistrictClient(d.config).QueryArtifacts(d)
}

// QueryBooks queries the "books" edge of the District entity.
func (d *District) QueryBooks() *BookQuery {
	return NewDistrictClient(d.config).QueryBooks(d)
}

// QueryProtectedAreaPictures queries the "protected_area_pictures" edge of the District entity.
func (d *District) QueryProtectedAreaPictures() *ProtectedAreaPictureQuery {
	return NewDistrictClient(d.config).QueryProtectedAreaPictures(d)
}

// QuerySettlements queries the "settlements" edge of the District entity.
func (d *District) QuerySettlements() *SettlementQuery {
	return NewDistrictClient(d.config).QuerySettlements(d)
}

// QueryLocations queries the "locations" edge of the District entity.
func (d *District) QueryLocations() *LocationQuery {
	return NewDistrictClient(d.config).QueryLocations(d)
}

// QueryRegion queries the "region" edge of the District entity.
func (d *District) QueryRegion() *RegionQuery {
	return NewDistrictClient(d.config).QueryRegion(d)
}

// Update returns a builder for updating this District.
// Note that you need to call District.Unwrap() before calling this method if this District
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *District) Update() *DistrictUpdateOne {
	return NewDistrictClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the District entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *District) Unwrap() *District {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: District is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *District) String() string {
	var builder strings.Builder
	builder.WriteString("District(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(d.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(d.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(d.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("abbreviation=")
	builder.WriteString(d.Abbreviation)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(d.Description)
	builder.WriteString(", ")
	builder.WriteString("external_link=")
	builder.WriteString(d.ExternalLink)
	builder.WriteByte(')')
	return builder.String()
}

// NamedArt returns the Art named value or an error if the edge was not
// loaded in eager-loading with this name.
func (d *District) NamedArt(name string) ([]*Art, error) {
	if d.Edges.namedArt == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := d.Edges.namedArt[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (d *District) appendNamedArt(name string, edges ...*Art) {
	if d.Edges.namedArt == nil {
		d.Edges.namedArt = make(map[string][]*Art)
	}
	if len(edges) == 0 {
		d.Edges.namedArt[name] = []*Art{}
	} else {
		d.Edges.namedArt[name] = append(d.Edges.namedArt[name], edges...)
	}
}

// NamedArtifacts returns the Artifacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (d *District) NamedArtifacts(name string) ([]*Artifact, error) {
	if d.Edges.namedArtifacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := d.Edges.namedArtifacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (d *District) appendNamedArtifacts(name string, edges ...*Artifact) {
	if d.Edges.namedArtifacts == nil {
		d.Edges.namedArtifacts = make(map[string][]*Artifact)
	}
	if len(edges) == 0 {
		d.Edges.namedArtifacts[name] = []*Artifact{}
	} else {
		d.Edges.namedArtifacts[name] = append(d.Edges.namedArtifacts[name], edges...)
	}
}

// NamedBooks returns the Books named value or an error if the edge was not
// loaded in eager-loading with this name.
func (d *District) NamedBooks(name string) ([]*Book, error) {
	if d.Edges.namedBooks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := d.Edges.namedBooks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (d *District) appendNamedBooks(name string, edges ...*Book) {
	if d.Edges.namedBooks == nil {
		d.Edges.namedBooks = make(map[string][]*Book)
	}
	if len(edges) == 0 {
		d.Edges.namedBooks[name] = []*Book{}
	} else {
		d.Edges.namedBooks[name] = append(d.Edges.namedBooks[name], edges...)
	}
}

// NamedProtectedAreaPictures returns the ProtectedAreaPictures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (d *District) NamedProtectedAreaPictures(name string) ([]*ProtectedAreaPicture, error) {
	if d.Edges.namedProtectedAreaPictures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := d.Edges.namedProtectedAreaPictures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (d *District) appendNamedProtectedAreaPictures(name string, edges ...*ProtectedAreaPicture) {
	if d.Edges.namedProtectedAreaPictures == nil {
		d.Edges.namedProtectedAreaPictures = make(map[string][]*ProtectedAreaPicture)
	}
	if len(edges) == 0 {
		d.Edges.namedProtectedAreaPictures[name] = []*ProtectedAreaPicture{}
	} else {
		d.Edges.namedProtectedAreaPictures[name] = append(d.Edges.namedProtectedAreaPictures[name], edges...)
	}
}

// NamedSettlements returns the Settlements named value or an error if the edge was not
// loaded in eager-loading with this name.
func (d *District) NamedSettlements(name string) ([]*Settlement, error) {
	if d.Edges.namedSettlements == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := d.Edges.namedSettlements[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (d *District) appendNamedSettlements(name string, edges ...*Settlement) {
	if d.Edges.namedSettlements == nil {
		d.Edges.namedSettlements = make(map[string][]*Settlement)
	}
	if len(edges) == 0 {
		d.Edges.namedSettlements[name] = []*Settlement{}
	} else {
		d.Edges.namedSettlements[name] = append(d.Edges.namedSettlements[name], edges...)
	}
}

// NamedLocations returns the Locations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (d *District) NamedLocations(name string) ([]*Location, error) {
	if d.Edges.namedLocations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := d.Edges.namedLocations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (d *District) appendNamedLocations(name string, edges ...*Location) {
	if d.Edges.namedLocations == nil {
		d.Edges.namedLocations = make(map[string][]*Location)
	}
	if len(edges) == 0 {
		d.Edges.namedLocations[name] = []*Location{}
	} else {
		d.Edges.namedLocations[name] = append(d.Edges.namedLocations[name], edges...)
	}
}

// Districts is a parsable slice of District.
type Districts []*District
