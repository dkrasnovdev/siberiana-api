// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/favourite"
	"github.com/dkrasnovdev/siberiana-api/ent/personal"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/proxy"
)

// ProxyUpdate is the builder for updating Proxy entities.
type ProxyUpdate struct {
	config
	hooks    []Hook
	mutation *ProxyMutation
}

// Where appends a list predicates to the ProxyUpdate builder.
func (pu *ProxyUpdate) Where(ps ...predicate.Proxy) *ProxyUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *ProxyUpdate) SetCreatedBy(s string) *ProxyUpdate {
	pu.mutation.SetCreatedBy(s)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *ProxyUpdate) SetNillableCreatedBy(s *string) *ProxyUpdate {
	if s != nil {
		pu.SetCreatedBy(*s)
	}
	return pu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pu *ProxyUpdate) ClearCreatedBy() *ProxyUpdate {
	pu.mutation.ClearCreatedBy()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProxyUpdate) SetUpdatedAt(t time.Time) *ProxyUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *ProxyUpdate) SetUpdatedBy(s string) *ProxyUpdate {
	pu.mutation.SetUpdatedBy(s)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *ProxyUpdate) SetNillableUpdatedBy(s *string) *ProxyUpdate {
	if s != nil {
		pu.SetUpdatedBy(*s)
	}
	return pu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pu *ProxyUpdate) ClearUpdatedBy() *ProxyUpdate {
	pu.mutation.ClearUpdatedBy()
	return pu
}

// SetRefID sets the "ref_id" field.
func (pu *ProxyUpdate) SetRefID(s string) *ProxyUpdate {
	pu.mutation.SetRefID(s)
	return pu
}

// SetURL sets the "url" field.
func (pu *ProxyUpdate) SetURL(s string) *ProxyUpdate {
	pu.mutation.SetURL(s)
	return pu
}

// SetFavouriteID sets the "favourite" edge to the Favourite entity by ID.
func (pu *ProxyUpdate) SetFavouriteID(id int) *ProxyUpdate {
	pu.mutation.SetFavouriteID(id)
	return pu
}

// SetNillableFavouriteID sets the "favourite" edge to the Favourite entity by ID if the given value is not nil.
func (pu *ProxyUpdate) SetNillableFavouriteID(id *int) *ProxyUpdate {
	if id != nil {
		pu = pu.SetFavouriteID(*id)
	}
	return pu
}

// SetFavourite sets the "favourite" edge to the Favourite entity.
func (pu *ProxyUpdate) SetFavourite(f *Favourite) *ProxyUpdate {
	return pu.SetFavouriteID(f.ID)
}

// SetPersonalID sets the "personal" edge to the Personal entity by ID.
func (pu *ProxyUpdate) SetPersonalID(id int) *ProxyUpdate {
	pu.mutation.SetPersonalID(id)
	return pu
}

// SetNillablePersonalID sets the "personal" edge to the Personal entity by ID if the given value is not nil.
func (pu *ProxyUpdate) SetNillablePersonalID(id *int) *ProxyUpdate {
	if id != nil {
		pu = pu.SetPersonalID(*id)
	}
	return pu
}

// SetPersonal sets the "personal" edge to the Personal entity.
func (pu *ProxyUpdate) SetPersonal(p *Personal) *ProxyUpdate {
	return pu.SetPersonalID(p.ID)
}

// Mutation returns the ProxyMutation object of the builder.
func (pu *ProxyUpdate) Mutation() *ProxyMutation {
	return pu.mutation
}

// ClearFavourite clears the "favourite" edge to the Favourite entity.
func (pu *ProxyUpdate) ClearFavourite() *ProxyUpdate {
	pu.mutation.ClearFavourite()
	return pu
}

// ClearPersonal clears the "personal" edge to the Personal entity.
func (pu *ProxyUpdate) ClearPersonal() *ProxyUpdate {
	pu.mutation.ClearPersonal()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProxyUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProxyUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProxyUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProxyUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProxyUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if proxy.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized proxy.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := proxy.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pu *ProxyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(proxy.Table, proxy.Columns, sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(proxy.FieldCreatedBy, field.TypeString, value)
	}
	if pu.mutation.CreatedByCleared() {
		_spec.ClearField(proxy.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(proxy.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(proxy.FieldUpdatedBy, field.TypeString, value)
	}
	if pu.mutation.UpdatedByCleared() {
		_spec.ClearField(proxy.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.RefID(); ok {
		_spec.SetField(proxy.FieldRefID, field.TypeString, value)
	}
	if value, ok := pu.mutation.URL(); ok {
		_spec.SetField(proxy.FieldURL, field.TypeString, value)
	}
	if pu.mutation.FavouriteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.FavouriteTable,
			Columns: []string{proxy.FavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FavouriteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.FavouriteTable,
			Columns: []string{proxy.FavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PersonalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.PersonalTable,
			Columns: []string{proxy.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PersonalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.PersonalTable,
			Columns: []string{proxy.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proxy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProxyUpdateOne is the builder for updating a single Proxy entity.
type ProxyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProxyMutation
}

// SetCreatedBy sets the "created_by" field.
func (puo *ProxyUpdateOne) SetCreatedBy(s string) *ProxyUpdateOne {
	puo.mutation.SetCreatedBy(s)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillableCreatedBy(s *string) *ProxyUpdateOne {
	if s != nil {
		puo.SetCreatedBy(*s)
	}
	return puo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (puo *ProxyUpdateOne) ClearCreatedBy() *ProxyUpdateOne {
	puo.mutation.ClearCreatedBy()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProxyUpdateOne) SetUpdatedAt(t time.Time) *ProxyUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *ProxyUpdateOne) SetUpdatedBy(s string) *ProxyUpdateOne {
	puo.mutation.SetUpdatedBy(s)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillableUpdatedBy(s *string) *ProxyUpdateOne {
	if s != nil {
		puo.SetUpdatedBy(*s)
	}
	return puo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puo *ProxyUpdateOne) ClearUpdatedBy() *ProxyUpdateOne {
	puo.mutation.ClearUpdatedBy()
	return puo
}

// SetRefID sets the "ref_id" field.
func (puo *ProxyUpdateOne) SetRefID(s string) *ProxyUpdateOne {
	puo.mutation.SetRefID(s)
	return puo
}

// SetURL sets the "url" field.
func (puo *ProxyUpdateOne) SetURL(s string) *ProxyUpdateOne {
	puo.mutation.SetURL(s)
	return puo
}

// SetFavouriteID sets the "favourite" edge to the Favourite entity by ID.
func (puo *ProxyUpdateOne) SetFavouriteID(id int) *ProxyUpdateOne {
	puo.mutation.SetFavouriteID(id)
	return puo
}

// SetNillableFavouriteID sets the "favourite" edge to the Favourite entity by ID if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillableFavouriteID(id *int) *ProxyUpdateOne {
	if id != nil {
		puo = puo.SetFavouriteID(*id)
	}
	return puo
}

// SetFavourite sets the "favourite" edge to the Favourite entity.
func (puo *ProxyUpdateOne) SetFavourite(f *Favourite) *ProxyUpdateOne {
	return puo.SetFavouriteID(f.ID)
}

// SetPersonalID sets the "personal" edge to the Personal entity by ID.
func (puo *ProxyUpdateOne) SetPersonalID(id int) *ProxyUpdateOne {
	puo.mutation.SetPersonalID(id)
	return puo
}

// SetNillablePersonalID sets the "personal" edge to the Personal entity by ID if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillablePersonalID(id *int) *ProxyUpdateOne {
	if id != nil {
		puo = puo.SetPersonalID(*id)
	}
	return puo
}

// SetPersonal sets the "personal" edge to the Personal entity.
func (puo *ProxyUpdateOne) SetPersonal(p *Personal) *ProxyUpdateOne {
	return puo.SetPersonalID(p.ID)
}

// Mutation returns the ProxyMutation object of the builder.
func (puo *ProxyUpdateOne) Mutation() *ProxyMutation {
	return puo.mutation
}

// ClearFavourite clears the "favourite" edge to the Favourite entity.
func (puo *ProxyUpdateOne) ClearFavourite() *ProxyUpdateOne {
	puo.mutation.ClearFavourite()
	return puo
}

// ClearPersonal clears the "personal" edge to the Personal entity.
func (puo *ProxyUpdateOne) ClearPersonal() *ProxyUpdateOne {
	puo.mutation.ClearPersonal()
	return puo
}

// Where appends a list predicates to the ProxyUpdate builder.
func (puo *ProxyUpdateOne) Where(ps ...predicate.Proxy) *ProxyUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProxyUpdateOne) Select(field string, fields ...string) *ProxyUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Proxy entity.
func (puo *ProxyUpdateOne) Save(ctx context.Context) (*Proxy, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProxyUpdateOne) SaveX(ctx context.Context) *Proxy {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProxyUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProxyUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProxyUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if proxy.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized proxy.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := proxy.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (puo *ProxyUpdateOne) sqlSave(ctx context.Context) (_node *Proxy, err error) {
	_spec := sqlgraph.NewUpdateSpec(proxy.Table, proxy.Columns, sqlgraph.NewFieldSpec(proxy.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Proxy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proxy.FieldID)
		for _, f := range fields {
			if !proxy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != proxy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(proxy.FieldCreatedBy, field.TypeString, value)
	}
	if puo.mutation.CreatedByCleared() {
		_spec.ClearField(proxy.FieldCreatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(proxy.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(proxy.FieldUpdatedBy, field.TypeString, value)
	}
	if puo.mutation.UpdatedByCleared() {
		_spec.ClearField(proxy.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.RefID(); ok {
		_spec.SetField(proxy.FieldRefID, field.TypeString, value)
	}
	if value, ok := puo.mutation.URL(); ok {
		_spec.SetField(proxy.FieldURL, field.TypeString, value)
	}
	if puo.mutation.FavouriteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.FavouriteTable,
			Columns: []string{proxy.FavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FavouriteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.FavouriteTable,
			Columns: []string{proxy.FavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PersonalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.PersonalTable,
			Columns: []string{proxy.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PersonalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.PersonalTable,
			Columns: []string{proxy.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Proxy{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proxy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
