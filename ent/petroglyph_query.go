// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/culture"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/model"
	"github.com/dkrasnovdev/siberiana-api/ent/mound"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/petroglyph"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/publication"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/technique"
)

// PetroglyphQuery is the builder for querying Petroglyph entities.
type PetroglyphQuery struct {
	config
	ctx                                *QueryContext
	order                              []petroglyph.OrderOption
	inters                             []Interceptor
	predicates                         []predicate.Petroglyph
	withCulturalAffiliation            *CultureQuery
	withModel                          *ModelQuery
	withMound                          *MoundQuery
	withPublications                   *PublicationQuery
	withTechniques                     *TechniqueQuery
	withRegion                         *RegionQuery
	withAccountingDocumentationAddress *LocationQuery
	withAccountingDocumentationAuthor  *PersonQuery
	withFKs                            bool
	modifiers                          []func(*sql.Selector)
	loadTotal                          []func(context.Context, []*Petroglyph) error
	withNamedPublications              map[string]*PublicationQuery
	withNamedTechniques                map[string]*TechniqueQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PetroglyphQuery builder.
func (pq *PetroglyphQuery) Where(ps ...predicate.Petroglyph) *PetroglyphQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *PetroglyphQuery) Limit(limit int) *PetroglyphQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *PetroglyphQuery) Offset(offset int) *PetroglyphQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *PetroglyphQuery) Unique(unique bool) *PetroglyphQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *PetroglyphQuery) Order(o ...petroglyph.OrderOption) *PetroglyphQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryCulturalAffiliation chains the current query on the "cultural_affiliation" edge.
func (pq *PetroglyphQuery) QueryCulturalAffiliation() *CultureQuery {
	query := (&CultureClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(petroglyph.Table, petroglyph.FieldID, selector),
			sqlgraph.To(culture.Table, culture.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, petroglyph.CulturalAffiliationTable, petroglyph.CulturalAffiliationColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryModel chains the current query on the "model" edge.
func (pq *PetroglyphQuery) QueryModel() *ModelQuery {
	query := (&ModelClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(petroglyph.Table, petroglyph.FieldID, selector),
			sqlgraph.To(model.Table, model.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, petroglyph.ModelTable, petroglyph.ModelColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMound chains the current query on the "mound" edge.
func (pq *PetroglyphQuery) QueryMound() *MoundQuery {
	query := (&MoundClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(petroglyph.Table, petroglyph.FieldID, selector),
			sqlgraph.To(mound.Table, mound.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, petroglyph.MoundTable, petroglyph.MoundColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPublications chains the current query on the "publications" edge.
func (pq *PetroglyphQuery) QueryPublications() *PublicationQuery {
	query := (&PublicationClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(petroglyph.Table, petroglyph.FieldID, selector),
			sqlgraph.To(publication.Table, publication.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, petroglyph.PublicationsTable, petroglyph.PublicationsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTechniques chains the current query on the "techniques" edge.
func (pq *PetroglyphQuery) QueryTechniques() *TechniqueQuery {
	query := (&TechniqueClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(petroglyph.Table, petroglyph.FieldID, selector),
			sqlgraph.To(technique.Table, technique.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, petroglyph.TechniquesTable, petroglyph.TechniquesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRegion chains the current query on the "region" edge.
func (pq *PetroglyphQuery) QueryRegion() *RegionQuery {
	query := (&RegionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(petroglyph.Table, petroglyph.FieldID, selector),
			sqlgraph.To(region.Table, region.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, petroglyph.RegionTable, petroglyph.RegionColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccountingDocumentationAddress chains the current query on the "accounting_documentation_address" edge.
func (pq *PetroglyphQuery) QueryAccountingDocumentationAddress() *LocationQuery {
	query := (&LocationClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(petroglyph.Table, petroglyph.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, petroglyph.AccountingDocumentationAddressTable, petroglyph.AccountingDocumentationAddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccountingDocumentationAuthor chains the current query on the "accounting_documentation_author" edge.
func (pq *PetroglyphQuery) QueryAccountingDocumentationAuthor() *PersonQuery {
	query := (&PersonClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(petroglyph.Table, petroglyph.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, petroglyph.AccountingDocumentationAuthorTable, petroglyph.AccountingDocumentationAuthorColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Petroglyph entity from the query.
// Returns a *NotFoundError when no Petroglyph was found.
func (pq *PetroglyphQuery) First(ctx context.Context) (*Petroglyph, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{petroglyph.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *PetroglyphQuery) FirstX(ctx context.Context) *Petroglyph {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Petroglyph ID from the query.
// Returns a *NotFoundError when no Petroglyph ID was found.
func (pq *PetroglyphQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{petroglyph.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *PetroglyphQuery) FirstIDX(ctx context.Context) int {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Petroglyph entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Petroglyph entity is found.
// Returns a *NotFoundError when no Petroglyph entities are found.
func (pq *PetroglyphQuery) Only(ctx context.Context) (*Petroglyph, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{petroglyph.Label}
	default:
		return nil, &NotSingularError{petroglyph.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *PetroglyphQuery) OnlyX(ctx context.Context) *Petroglyph {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Petroglyph ID in the query.
// Returns a *NotSingularError when more than one Petroglyph ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *PetroglyphQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{petroglyph.Label}
	default:
		err = &NotSingularError{petroglyph.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *PetroglyphQuery) OnlyIDX(ctx context.Context) int {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Petroglyphs.
func (pq *PetroglyphQuery) All(ctx context.Context) ([]*Petroglyph, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Petroglyph, *PetroglyphQuery]()
	return withInterceptors[[]*Petroglyph](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *PetroglyphQuery) AllX(ctx context.Context) []*Petroglyph {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Petroglyph IDs.
func (pq *PetroglyphQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, "IDs")
	if err = pq.Select(petroglyph.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *PetroglyphQuery) IDsX(ctx context.Context) []int {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *PetroglyphQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*PetroglyphQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *PetroglyphQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *PetroglyphQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *PetroglyphQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PetroglyphQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *PetroglyphQuery) Clone() *PetroglyphQuery {
	if pq == nil {
		return nil
	}
	return &PetroglyphQuery{
		config:                             pq.config,
		ctx:                                pq.ctx.Clone(),
		order:                              append([]petroglyph.OrderOption{}, pq.order...),
		inters:                             append([]Interceptor{}, pq.inters...),
		predicates:                         append([]predicate.Petroglyph{}, pq.predicates...),
		withCulturalAffiliation:            pq.withCulturalAffiliation.Clone(),
		withModel:                          pq.withModel.Clone(),
		withMound:                          pq.withMound.Clone(),
		withPublications:                   pq.withPublications.Clone(),
		withTechniques:                     pq.withTechniques.Clone(),
		withRegion:                         pq.withRegion.Clone(),
		withAccountingDocumentationAddress: pq.withAccountingDocumentationAddress.Clone(),
		withAccountingDocumentationAuthor:  pq.withAccountingDocumentationAuthor.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithCulturalAffiliation tells the query-builder to eager-load the nodes that are connected to
// the "cultural_affiliation" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PetroglyphQuery) WithCulturalAffiliation(opts ...func(*CultureQuery)) *PetroglyphQuery {
	query := (&CultureClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCulturalAffiliation = query
	return pq
}

// WithModel tells the query-builder to eager-load the nodes that are connected to
// the "model" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PetroglyphQuery) WithModel(opts ...func(*ModelQuery)) *PetroglyphQuery {
	query := (&ModelClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withModel = query
	return pq
}

// WithMound tells the query-builder to eager-load the nodes that are connected to
// the "mound" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PetroglyphQuery) WithMound(opts ...func(*MoundQuery)) *PetroglyphQuery {
	query := (&MoundClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withMound = query
	return pq
}

// WithPublications tells the query-builder to eager-load the nodes that are connected to
// the "publications" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PetroglyphQuery) WithPublications(opts ...func(*PublicationQuery)) *PetroglyphQuery {
	query := (&PublicationClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPublications = query
	return pq
}

// WithTechniques tells the query-builder to eager-load the nodes that are connected to
// the "techniques" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PetroglyphQuery) WithTechniques(opts ...func(*TechniqueQuery)) *PetroglyphQuery {
	query := (&TechniqueClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withTechniques = query
	return pq
}

// WithRegion tells the query-builder to eager-load the nodes that are connected to
// the "region" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PetroglyphQuery) WithRegion(opts ...func(*RegionQuery)) *PetroglyphQuery {
	query := (&RegionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withRegion = query
	return pq
}

// WithAccountingDocumentationAddress tells the query-builder to eager-load the nodes that are connected to
// the "accounting_documentation_address" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PetroglyphQuery) WithAccountingDocumentationAddress(opts ...func(*LocationQuery)) *PetroglyphQuery {
	query := (&LocationClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withAccountingDocumentationAddress = query
	return pq
}

// WithAccountingDocumentationAuthor tells the query-builder to eager-load the nodes that are connected to
// the "accounting_documentation_author" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PetroglyphQuery) WithAccountingDocumentationAuthor(opts ...func(*PersonQuery)) *PetroglyphQuery {
	query := (&PersonClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withAccountingDocumentationAuthor = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Petroglyph.Query().
//		GroupBy(petroglyph.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *PetroglyphQuery) GroupBy(field string, fields ...string) *PetroglyphGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PetroglyphGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = petroglyph.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Petroglyph.Query().
//		Select(petroglyph.FieldCreatedAt).
//		Scan(ctx, &v)
func (pq *PetroglyphQuery) Select(fields ...string) *PetroglyphSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &PetroglyphSelect{PetroglyphQuery: pq}
	sbuild.label = petroglyph.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PetroglyphSelect configured with the given aggregations.
func (pq *PetroglyphQuery) Aggregate(fns ...AggregateFunc) *PetroglyphSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *PetroglyphQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !petroglyph.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	if petroglyph.Policy == nil {
		return errors.New("ent: uninitialized petroglyph.Policy (forgotten import ent/runtime?)")
	}
	if err := petroglyph.Policy.EvalQuery(ctx, pq); err != nil {
		return err
	}
	return nil
}

func (pq *PetroglyphQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Petroglyph, error) {
	var (
		nodes       = []*Petroglyph{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [8]bool{
			pq.withCulturalAffiliation != nil,
			pq.withModel != nil,
			pq.withMound != nil,
			pq.withPublications != nil,
			pq.withTechniques != nil,
			pq.withRegion != nil,
			pq.withAccountingDocumentationAddress != nil,
			pq.withAccountingDocumentationAuthor != nil,
		}
	)
	if pq.withCulturalAffiliation != nil || pq.withModel != nil || pq.withMound != nil || pq.withRegion != nil || pq.withAccountingDocumentationAddress != nil || pq.withAccountingDocumentationAuthor != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, petroglyph.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Petroglyph).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Petroglyph{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withCulturalAffiliation; query != nil {
		if err := pq.loadCulturalAffiliation(ctx, query, nodes, nil,
			func(n *Petroglyph, e *Culture) { n.Edges.CulturalAffiliation = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withModel; query != nil {
		if err := pq.loadModel(ctx, query, nodes, nil,
			func(n *Petroglyph, e *Model) { n.Edges.Model = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withMound; query != nil {
		if err := pq.loadMound(ctx, query, nodes, nil,
			func(n *Petroglyph, e *Mound) { n.Edges.Mound = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPublications; query != nil {
		if err := pq.loadPublications(ctx, query, nodes,
			func(n *Petroglyph) { n.Edges.Publications = []*Publication{} },
			func(n *Petroglyph, e *Publication) { n.Edges.Publications = append(n.Edges.Publications, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withTechniques; query != nil {
		if err := pq.loadTechniques(ctx, query, nodes,
			func(n *Petroglyph) { n.Edges.Techniques = []*Technique{} },
			func(n *Petroglyph, e *Technique) { n.Edges.Techniques = append(n.Edges.Techniques, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withRegion; query != nil {
		if err := pq.loadRegion(ctx, query, nodes, nil,
			func(n *Petroglyph, e *Region) { n.Edges.Region = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withAccountingDocumentationAddress; query != nil {
		if err := pq.loadAccountingDocumentationAddress(ctx, query, nodes, nil,
			func(n *Petroglyph, e *Location) { n.Edges.AccountingDocumentationAddress = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withAccountingDocumentationAuthor; query != nil {
		if err := pq.loadAccountingDocumentationAuthor(ctx, query, nodes, nil,
			func(n *Petroglyph, e *Person) { n.Edges.AccountingDocumentationAuthor = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedPublications {
		if err := pq.loadPublications(ctx, query, nodes,
			func(n *Petroglyph) { n.appendNamedPublications(name) },
			func(n *Petroglyph, e *Publication) { n.appendNamedPublications(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedTechniques {
		if err := pq.loadTechniques(ctx, query, nodes,
			func(n *Petroglyph) { n.appendNamedTechniques(name) },
			func(n *Petroglyph, e *Technique) { n.appendNamedTechniques(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pq.loadTotal {
		if err := pq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *PetroglyphQuery) loadCulturalAffiliation(ctx context.Context, query *CultureQuery, nodes []*Petroglyph, init func(*Petroglyph), assign func(*Petroglyph, *Culture)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Petroglyph)
	for i := range nodes {
		if nodes[i].culture_petroglyphs == nil {
			continue
		}
		fk := *nodes[i].culture_petroglyphs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(culture.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "culture_petroglyphs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PetroglyphQuery) loadModel(ctx context.Context, query *ModelQuery, nodes []*Petroglyph, init func(*Petroglyph), assign func(*Petroglyph, *Model)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Petroglyph)
	for i := range nodes {
		if nodes[i].model_petroglyphs == nil {
			continue
		}
		fk := *nodes[i].model_petroglyphs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(model.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "model_petroglyphs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PetroglyphQuery) loadMound(ctx context.Context, query *MoundQuery, nodes []*Petroglyph, init func(*Petroglyph), assign func(*Petroglyph, *Mound)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Petroglyph)
	for i := range nodes {
		if nodes[i].mound_petroglyphs == nil {
			continue
		}
		fk := *nodes[i].mound_petroglyphs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(mound.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mound_petroglyphs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PetroglyphQuery) loadPublications(ctx context.Context, query *PublicationQuery, nodes []*Petroglyph, init func(*Petroglyph), assign func(*Petroglyph, *Publication)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Petroglyph)
	nids := make(map[int]map[*Petroglyph]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(petroglyph.PublicationsTable)
		s.Join(joinT).On(s.C(publication.FieldID), joinT.C(petroglyph.PublicationsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(petroglyph.PublicationsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(petroglyph.PublicationsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Petroglyph]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Publication](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "publications" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PetroglyphQuery) loadTechniques(ctx context.Context, query *TechniqueQuery, nodes []*Petroglyph, init func(*Petroglyph), assign func(*Petroglyph, *Technique)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Petroglyph)
	nids := make(map[int]map[*Petroglyph]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(petroglyph.TechniquesTable)
		s.Join(joinT).On(s.C(technique.FieldID), joinT.C(petroglyph.TechniquesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(petroglyph.TechniquesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(petroglyph.TechniquesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Petroglyph]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Technique](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "techniques" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PetroglyphQuery) loadRegion(ctx context.Context, query *RegionQuery, nodes []*Petroglyph, init func(*Petroglyph), assign func(*Petroglyph, *Region)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Petroglyph)
	for i := range nodes {
		if nodes[i].region_petroglyphs == nil {
			continue
		}
		fk := *nodes[i].region_petroglyphs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(region.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "region_petroglyphs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PetroglyphQuery) loadAccountingDocumentationAddress(ctx context.Context, query *LocationQuery, nodes []*Petroglyph, init func(*Petroglyph), assign func(*Petroglyph, *Location)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Petroglyph)
	for i := range nodes {
		if nodes[i].location_petroglyphs_accounting_documentation == nil {
			continue
		}
		fk := *nodes[i].location_petroglyphs_accounting_documentation
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(location.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "location_petroglyphs_accounting_documentation" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PetroglyphQuery) loadAccountingDocumentationAuthor(ctx context.Context, query *PersonQuery, nodes []*Petroglyph, init func(*Petroglyph), assign func(*Petroglyph, *Person)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Petroglyph)
	for i := range nodes {
		if nodes[i].person_petroglyphs_accounting_documentation == nil {
			continue
		}
		fk := *nodes[i].person_petroglyphs_accounting_documentation
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(person.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "person_petroglyphs_accounting_documentation" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pq *PetroglyphQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *PetroglyphQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(petroglyph.Table, petroglyph.Columns, sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, petroglyph.FieldID)
		for i := range fields {
			if fields[i] != petroglyph.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *PetroglyphQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(petroglyph.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = petroglyph.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedPublications tells the query-builder to eager-load the nodes that are connected to the "publications"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PetroglyphQuery) WithNamedPublications(name string, opts ...func(*PublicationQuery)) *PetroglyphQuery {
	query := (&PublicationClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedPublications == nil {
		pq.withNamedPublications = make(map[string]*PublicationQuery)
	}
	pq.withNamedPublications[name] = query
	return pq
}

// WithNamedTechniques tells the query-builder to eager-load the nodes that are connected to the "techniques"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PetroglyphQuery) WithNamedTechniques(name string, opts ...func(*TechniqueQuery)) *PetroglyphQuery {
	query := (&TechniqueClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedTechniques == nil {
		pq.withNamedTechniques = make(map[string]*TechniqueQuery)
	}
	pq.withNamedTechniques[name] = query
	return pq
}

// PetroglyphGroupBy is the group-by builder for Petroglyph entities.
type PetroglyphGroupBy struct {
	selector
	build *PetroglyphQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *PetroglyphGroupBy) Aggregate(fns ...AggregateFunc) *PetroglyphGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *PetroglyphGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PetroglyphQuery, *PetroglyphGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *PetroglyphGroupBy) sqlScan(ctx context.Context, root *PetroglyphQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PetroglyphSelect is the builder for selecting fields of Petroglyph entities.
type PetroglyphSelect struct {
	*PetroglyphQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *PetroglyphSelect) Aggregate(fns ...AggregateFunc) *PetroglyphSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *PetroglyphSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PetroglyphQuery, *PetroglyphSelect](ctx, ps.PetroglyphQuery, ps, ps.inters, v)
}

func (ps *PetroglyphSelect) sqlScan(ctx context.Context, root *PetroglyphQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
