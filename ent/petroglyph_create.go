// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/culture"
	"github.com/dkrasnovdev/siberiana-api/ent/location"
	"github.com/dkrasnovdev/siberiana-api/ent/model"
	"github.com/dkrasnovdev/siberiana-api/ent/mound"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/petroglyph"
	"github.com/dkrasnovdev/siberiana-api/ent/publication"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/technique"
	"github.com/dkrasnovdev/siberiana-api/internal/ent/types"
)

// PetroglyphCreate is the builder for creating a Petroglyph entity.
type PetroglyphCreate struct {
	config
	mutation *PetroglyphMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PetroglyphCreate) SetCreatedAt(t time.Time) *PetroglyphCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableCreatedAt(t *time.Time) *PetroglyphCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *PetroglyphCreate) SetCreatedBy(s string) *PetroglyphCreate {
	pc.mutation.SetCreatedBy(s)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableCreatedBy(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetCreatedBy(*s)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PetroglyphCreate) SetUpdatedAt(t time.Time) *PetroglyphCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableUpdatedAt(t *time.Time) *PetroglyphCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *PetroglyphCreate) SetUpdatedBy(s string) *PetroglyphCreate {
	pc.mutation.SetUpdatedBy(s)
	return pc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableUpdatedBy(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetUpdatedBy(*s)
	}
	return pc
}

// SetDisplayName sets the "display_name" field.
func (pc *PetroglyphCreate) SetDisplayName(s string) *PetroglyphCreate {
	pc.mutation.SetDisplayName(s)
	return pc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableDisplayName(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetDisplayName(*s)
	}
	return pc
}

// SetAbbreviation sets the "abbreviation" field.
func (pc *PetroglyphCreate) SetAbbreviation(s string) *PetroglyphCreate {
	pc.mutation.SetAbbreviation(s)
	return pc
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableAbbreviation(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetAbbreviation(*s)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *PetroglyphCreate) SetDescription(s string) *PetroglyphCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableDescription(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetExternalLink sets the "external_link" field.
func (pc *PetroglyphCreate) SetExternalLink(s string) *PetroglyphCreate {
	pc.mutation.SetExternalLink(s)
	return pc
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableExternalLink(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetExternalLink(*s)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PetroglyphCreate) SetStatus(pe petroglyph.Status) *PetroglyphCreate {
	pc.mutation.SetStatus(pe)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableStatus(pe *petroglyph.Status) *PetroglyphCreate {
	if pe != nil {
		pc.SetStatus(*pe)
	}
	return pc
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (pc *PetroglyphCreate) SetPrimaryImageURL(s string) *PetroglyphCreate {
	pc.mutation.SetPrimaryImageURL(s)
	return pc
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillablePrimaryImageURL(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetPrimaryImageURL(*s)
	}
	return pc
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (pc *PetroglyphCreate) SetAdditionalImagesUrls(s []string) *PetroglyphCreate {
	pc.mutation.SetAdditionalImagesUrls(s)
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PetroglyphCreate) SetDeletedAt(t time.Time) *PetroglyphCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableDeletedAt(t *time.Time) *PetroglyphCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetDeletedBy sets the "deleted_by" field.
func (pc *PetroglyphCreate) SetDeletedBy(s string) *PetroglyphCreate {
	pc.mutation.SetDeletedBy(s)
	return pc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableDeletedBy(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetDeletedBy(*s)
	}
	return pc
}

// SetNumber sets the "number" field.
func (pc *PetroglyphCreate) SetNumber(s string) *PetroglyphCreate {
	pc.mutation.SetNumber(s)
	return pc
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableNumber(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetNumber(*s)
	}
	return pc
}

// SetDating sets the "dating" field.
func (pc *PetroglyphCreate) SetDating(s string) *PetroglyphCreate {
	pc.mutation.SetDating(s)
	return pc
}

// SetNillableDating sets the "dating" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableDating(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetDating(*s)
	}
	return pc
}

// SetDatingStart sets the "dating_start" field.
func (pc *PetroglyphCreate) SetDatingStart(i int) *PetroglyphCreate {
	pc.mutation.SetDatingStart(i)
	return pc
}

// SetNillableDatingStart sets the "dating_start" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableDatingStart(i *int) *PetroglyphCreate {
	if i != nil {
		pc.SetDatingStart(*i)
	}
	return pc
}

// SetDatingEnd sets the "dating_end" field.
func (pc *PetroglyphCreate) SetDatingEnd(i int) *PetroglyphCreate {
	pc.mutation.SetDatingEnd(i)
	return pc
}

// SetNillableDatingEnd sets the "dating_end" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableDatingEnd(i *int) *PetroglyphCreate {
	if i != nil {
		pc.SetDatingEnd(*i)
	}
	return pc
}

// SetOrientation sets the "orientation" field.
func (pc *PetroglyphCreate) SetOrientation(s string) *PetroglyphCreate {
	pc.mutation.SetOrientation(s)
	return pc
}

// SetNillableOrientation sets the "orientation" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableOrientation(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetOrientation(*s)
	}
	return pc
}

// SetPosition sets the "position" field.
func (pc *PetroglyphCreate) SetPosition(s string) *PetroglyphCreate {
	pc.mutation.SetPosition(s)
	return pc
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillablePosition(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetPosition(*s)
	}
	return pc
}

// SetGeometricShape sets the "geometric_shape" field.
func (pc *PetroglyphCreate) SetGeometricShape(s string) *PetroglyphCreate {
	pc.mutation.SetGeometricShape(s)
	return pc
}

// SetNillableGeometricShape sets the "geometric_shape" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableGeometricShape(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetGeometricShape(*s)
	}
	return pc
}

// SetHeight sets the "height" field.
func (pc *PetroglyphCreate) SetHeight(f float64) *PetroglyphCreate {
	pc.mutation.SetHeight(f)
	return pc
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableHeight(f *float64) *PetroglyphCreate {
	if f != nil {
		pc.SetHeight(*f)
	}
	return pc
}

// SetWidth sets the "width" field.
func (pc *PetroglyphCreate) SetWidth(f float64) *PetroglyphCreate {
	pc.mutation.SetWidth(f)
	return pc
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableWidth(f *float64) *PetroglyphCreate {
	if f != nil {
		pc.SetWidth(*f)
	}
	return pc
}

// SetLength sets the "length" field.
func (pc *PetroglyphCreate) SetLength(f float64) *PetroglyphCreate {
	pc.mutation.SetLength(f)
	return pc
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableLength(f *float64) *PetroglyphCreate {
	if f != nil {
		pc.SetLength(*f)
	}
	return pc
}

// SetDepth sets the "depth" field.
func (pc *PetroglyphCreate) SetDepth(f float64) *PetroglyphCreate {
	pc.mutation.SetDepth(f)
	return pc
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableDepth(f *float64) *PetroglyphCreate {
	if f != nil {
		pc.SetDepth(*f)
	}
	return pc
}

// SetDiameter sets the "diameter" field.
func (pc *PetroglyphCreate) SetDiameter(f float64) *PetroglyphCreate {
	pc.mutation.SetDiameter(f)
	return pc
}

// SetNillableDiameter sets the "diameter" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableDiameter(f *float64) *PetroglyphCreate {
	if f != nil {
		pc.SetDiameter(*f)
	}
	return pc
}

// SetWeight sets the "weight" field.
func (pc *PetroglyphCreate) SetWeight(s string) *PetroglyphCreate {
	pc.mutation.SetWeight(s)
	return pc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableWeight(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetWeight(*s)
	}
	return pc
}

// SetDimensions sets the "dimensions" field.
func (pc *PetroglyphCreate) SetDimensions(s string) *PetroglyphCreate {
	pc.mutation.SetDimensions(s)
	return pc
}

// SetNillableDimensions sets the "dimensions" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableDimensions(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetDimensions(*s)
	}
	return pc
}

// SetPlanePreservation sets the "plane_preservation" field.
func (pc *PetroglyphCreate) SetPlanePreservation(s string) *PetroglyphCreate {
	pc.mutation.SetPlanePreservation(s)
	return pc
}

// SetNillablePlanePreservation sets the "plane_preservation" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillablePlanePreservation(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetPlanePreservation(*s)
	}
	return pc
}

// SetPhotoCode sets the "photo_code" field.
func (pc *PetroglyphCreate) SetPhotoCode(s string) *PetroglyphCreate {
	pc.mutation.SetPhotoCode(s)
	return pc
}

// SetNillablePhotoCode sets the "photo_code" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillablePhotoCode(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetPhotoCode(*s)
	}
	return pc
}

// SetAccountingDocumentationInformation sets the "accounting_documentation_information" field.
func (pc *PetroglyphCreate) SetAccountingDocumentationInformation(s string) *PetroglyphCreate {
	pc.mutation.SetAccountingDocumentationInformation(s)
	return pc
}

// SetNillableAccountingDocumentationInformation sets the "accounting_documentation_information" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableAccountingDocumentationInformation(s *string) *PetroglyphCreate {
	if s != nil {
		pc.SetAccountingDocumentationInformation(*s)
	}
	return pc
}

// SetAccountingDocumentationDate sets the "accounting_documentation_date" field.
func (pc *PetroglyphCreate) SetAccountingDocumentationDate(t time.Time) *PetroglyphCreate {
	pc.mutation.SetAccountingDocumentationDate(t)
	return pc
}

// SetNillableAccountingDocumentationDate sets the "accounting_documentation_date" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableAccountingDocumentationDate(t *time.Time) *PetroglyphCreate {
	if t != nil {
		pc.SetAccountingDocumentationDate(*t)
	}
	return pc
}

// SetGeometry sets the "geometry" field.
func (pc *PetroglyphCreate) SetGeometry(t types.Geometry) *PetroglyphCreate {
	pc.mutation.SetGeometry(t)
	return pc
}

// SetNillableGeometry sets the "geometry" field if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableGeometry(t *types.Geometry) *PetroglyphCreate {
	if t != nil {
		pc.SetGeometry(*t)
	}
	return pc
}

// SetCulturalAffiliationID sets the "cultural_affiliation" edge to the Culture entity by ID.
func (pc *PetroglyphCreate) SetCulturalAffiliationID(id int) *PetroglyphCreate {
	pc.mutation.SetCulturalAffiliationID(id)
	return pc
}

// SetNillableCulturalAffiliationID sets the "cultural_affiliation" edge to the Culture entity by ID if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableCulturalAffiliationID(id *int) *PetroglyphCreate {
	if id != nil {
		pc = pc.SetCulturalAffiliationID(*id)
	}
	return pc
}

// SetCulturalAffiliation sets the "cultural_affiliation" edge to the Culture entity.
func (pc *PetroglyphCreate) SetCulturalAffiliation(c *Culture) *PetroglyphCreate {
	return pc.SetCulturalAffiliationID(c.ID)
}

// SetModelID sets the "model" edge to the Model entity by ID.
func (pc *PetroglyphCreate) SetModelID(id int) *PetroglyphCreate {
	pc.mutation.SetModelID(id)
	return pc
}

// SetNillableModelID sets the "model" edge to the Model entity by ID if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableModelID(id *int) *PetroglyphCreate {
	if id != nil {
		pc = pc.SetModelID(*id)
	}
	return pc
}

// SetModel sets the "model" edge to the Model entity.
func (pc *PetroglyphCreate) SetModel(m *Model) *PetroglyphCreate {
	return pc.SetModelID(m.ID)
}

// SetMoundID sets the "mound" edge to the Mound entity by ID.
func (pc *PetroglyphCreate) SetMoundID(id int) *PetroglyphCreate {
	pc.mutation.SetMoundID(id)
	return pc
}

// SetNillableMoundID sets the "mound" edge to the Mound entity by ID if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableMoundID(id *int) *PetroglyphCreate {
	if id != nil {
		pc = pc.SetMoundID(*id)
	}
	return pc
}

// SetMound sets the "mound" edge to the Mound entity.
func (pc *PetroglyphCreate) SetMound(m *Mound) *PetroglyphCreate {
	return pc.SetMoundID(m.ID)
}

// AddPublicationIDs adds the "publications" edge to the Publication entity by IDs.
func (pc *PetroglyphCreate) AddPublicationIDs(ids ...int) *PetroglyphCreate {
	pc.mutation.AddPublicationIDs(ids...)
	return pc
}

// AddPublications adds the "publications" edges to the Publication entity.
func (pc *PetroglyphCreate) AddPublications(p ...*Publication) *PetroglyphCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPublicationIDs(ids...)
}

// AddTechniqueIDs adds the "techniques" edge to the Technique entity by IDs.
func (pc *PetroglyphCreate) AddTechniqueIDs(ids ...int) *PetroglyphCreate {
	pc.mutation.AddTechniqueIDs(ids...)
	return pc
}

// AddTechniques adds the "techniques" edges to the Technique entity.
func (pc *PetroglyphCreate) AddTechniques(t ...*Technique) *PetroglyphCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTechniqueIDs(ids...)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (pc *PetroglyphCreate) SetRegionID(id int) *PetroglyphCreate {
	pc.mutation.SetRegionID(id)
	return pc
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableRegionID(id *int) *PetroglyphCreate {
	if id != nil {
		pc = pc.SetRegionID(*id)
	}
	return pc
}

// SetRegion sets the "region" edge to the Region entity.
func (pc *PetroglyphCreate) SetRegion(r *Region) *PetroglyphCreate {
	return pc.SetRegionID(r.ID)
}

// SetAccountingDocumentationAddressID sets the "accounting_documentation_address" edge to the Location entity by ID.
func (pc *PetroglyphCreate) SetAccountingDocumentationAddressID(id int) *PetroglyphCreate {
	pc.mutation.SetAccountingDocumentationAddressID(id)
	return pc
}

// SetNillableAccountingDocumentationAddressID sets the "accounting_documentation_address" edge to the Location entity by ID if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableAccountingDocumentationAddressID(id *int) *PetroglyphCreate {
	if id != nil {
		pc = pc.SetAccountingDocumentationAddressID(*id)
	}
	return pc
}

// SetAccountingDocumentationAddress sets the "accounting_documentation_address" edge to the Location entity.
func (pc *PetroglyphCreate) SetAccountingDocumentationAddress(l *Location) *PetroglyphCreate {
	return pc.SetAccountingDocumentationAddressID(l.ID)
}

// SetAccountingDocumentationAuthorID sets the "accounting_documentation_author" edge to the Person entity by ID.
func (pc *PetroglyphCreate) SetAccountingDocumentationAuthorID(id int) *PetroglyphCreate {
	pc.mutation.SetAccountingDocumentationAuthorID(id)
	return pc
}

// SetNillableAccountingDocumentationAuthorID sets the "accounting_documentation_author" edge to the Person entity by ID if the given value is not nil.
func (pc *PetroglyphCreate) SetNillableAccountingDocumentationAuthorID(id *int) *PetroglyphCreate {
	if id != nil {
		pc = pc.SetAccountingDocumentationAuthorID(*id)
	}
	return pc
}

// SetAccountingDocumentationAuthor sets the "accounting_documentation_author" edge to the Person entity.
func (pc *PetroglyphCreate) SetAccountingDocumentationAuthor(p *Person) *PetroglyphCreate {
	return pc.SetAccountingDocumentationAuthorID(p.ID)
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (pc *PetroglyphCreate) SetCollectionID(id int) *PetroglyphCreate {
	pc.mutation.SetCollectionID(id)
	return pc
}

// SetCollection sets the "collection" edge to the Collection entity.
func (pc *PetroglyphCreate) SetCollection(c *Collection) *PetroglyphCreate {
	return pc.SetCollectionID(c.ID)
}

// Mutation returns the PetroglyphMutation object of the builder.
func (pc *PetroglyphCreate) Mutation() *PetroglyphMutation {
	return pc.mutation
}

// Save creates the Petroglyph in the database.
func (pc *PetroglyphCreate) Save(ctx context.Context) (*Petroglyph, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PetroglyphCreate) SaveX(ctx context.Context) *Petroglyph {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PetroglyphCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PetroglyphCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PetroglyphCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if petroglyph.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized petroglyph.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := petroglyph.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if petroglyph.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized petroglyph.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := petroglyph.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := petroglyph.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PetroglyphCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Petroglyph.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Petroglyph.updated_at"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := petroglyph.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Petroglyph.status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CollectionID(); !ok {
		return &ValidationError{Name: "collection", err: errors.New(`ent: missing required edge "Petroglyph.collection"`)}
	}
	return nil
}

func (pc *PetroglyphCreate) sqlSave(ctx context.Context) (*Petroglyph, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PetroglyphCreate) createSpec() (*Petroglyph, *sqlgraph.CreateSpec) {
	var (
		_node = &Petroglyph{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(petroglyph.Table, sqlgraph.NewFieldSpec(petroglyph.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(petroglyph.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(petroglyph.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(petroglyph.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(petroglyph.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.DisplayName(); ok {
		_spec.SetField(petroglyph.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := pc.mutation.Abbreviation(); ok {
		_spec.SetField(petroglyph.FieldAbbreviation, field.TypeString, value)
		_node.Abbreviation = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(petroglyph.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.ExternalLink(); ok {
		_spec.SetField(petroglyph.FieldExternalLink, field.TypeString, value)
		_node.ExternalLink = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(petroglyph.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.PrimaryImageURL(); ok {
		_spec.SetField(petroglyph.FieldPrimaryImageURL, field.TypeString, value)
		_node.PrimaryImageURL = value
	}
	if value, ok := pc.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(petroglyph.FieldAdditionalImagesUrls, field.TypeJSON, value)
		_node.AdditionalImagesUrls = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(petroglyph.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.DeletedBy(); ok {
		_spec.SetField(petroglyph.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := pc.mutation.Number(); ok {
		_spec.SetField(petroglyph.FieldNumber, field.TypeString, value)
		_node.Number = value
	}
	if value, ok := pc.mutation.Dating(); ok {
		_spec.SetField(petroglyph.FieldDating, field.TypeString, value)
		_node.Dating = value
	}
	if value, ok := pc.mutation.DatingStart(); ok {
		_spec.SetField(petroglyph.FieldDatingStart, field.TypeInt, value)
		_node.DatingStart = value
	}
	if value, ok := pc.mutation.DatingEnd(); ok {
		_spec.SetField(petroglyph.FieldDatingEnd, field.TypeInt, value)
		_node.DatingEnd = value
	}
	if value, ok := pc.mutation.Orientation(); ok {
		_spec.SetField(petroglyph.FieldOrientation, field.TypeString, value)
		_node.Orientation = value
	}
	if value, ok := pc.mutation.Position(); ok {
		_spec.SetField(petroglyph.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := pc.mutation.GeometricShape(); ok {
		_spec.SetField(petroglyph.FieldGeometricShape, field.TypeString, value)
		_node.GeometricShape = value
	}
	if value, ok := pc.mutation.Height(); ok {
		_spec.SetField(petroglyph.FieldHeight, field.TypeFloat64, value)
		_node.Height = value
	}
	if value, ok := pc.mutation.Width(); ok {
		_spec.SetField(petroglyph.FieldWidth, field.TypeFloat64, value)
		_node.Width = value
	}
	if value, ok := pc.mutation.Length(); ok {
		_spec.SetField(petroglyph.FieldLength, field.TypeFloat64, value)
		_node.Length = value
	}
	if value, ok := pc.mutation.Depth(); ok {
		_spec.SetField(petroglyph.FieldDepth, field.TypeFloat64, value)
		_node.Depth = value
	}
	if value, ok := pc.mutation.Diameter(); ok {
		_spec.SetField(petroglyph.FieldDiameter, field.TypeFloat64, value)
		_node.Diameter = value
	}
	if value, ok := pc.mutation.Weight(); ok {
		_spec.SetField(petroglyph.FieldWeight, field.TypeString, value)
		_node.Weight = value
	}
	if value, ok := pc.mutation.Dimensions(); ok {
		_spec.SetField(petroglyph.FieldDimensions, field.TypeString, value)
		_node.Dimensions = value
	}
	if value, ok := pc.mutation.PlanePreservation(); ok {
		_spec.SetField(petroglyph.FieldPlanePreservation, field.TypeString, value)
		_node.PlanePreservation = value
	}
	if value, ok := pc.mutation.PhotoCode(); ok {
		_spec.SetField(petroglyph.FieldPhotoCode, field.TypeString, value)
		_node.PhotoCode = value
	}
	if value, ok := pc.mutation.AccountingDocumentationInformation(); ok {
		_spec.SetField(petroglyph.FieldAccountingDocumentationInformation, field.TypeString, value)
		_node.AccountingDocumentationInformation = value
	}
	if value, ok := pc.mutation.AccountingDocumentationDate(); ok {
		_spec.SetField(petroglyph.FieldAccountingDocumentationDate, field.TypeTime, value)
		_node.AccountingDocumentationDate = value
	}
	if value, ok := pc.mutation.Geometry(); ok {
		_spec.SetField(petroglyph.FieldGeometry, field.TypeOther, value)
		_node.Geometry = &value
	}
	if nodes := pc.mutation.CulturalAffiliationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.CulturalAffiliationTable,
			Columns: []string{petroglyph.CulturalAffiliationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(culture.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.culture_petroglyphs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.ModelTable,
			Columns: []string{petroglyph.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.model_petroglyphs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.MoundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.MoundTable,
			Columns: []string{petroglyph.MoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mound.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mound_petroglyphs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PublicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.PublicationsTable,
			Columns: petroglyph.PublicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TechniquesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   petroglyph.TechniquesTable,
			Columns: petroglyph.TechniquesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technique.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.RegionTable,
			Columns: []string{petroglyph.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.region_petroglyphs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AccountingDocumentationAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.AccountingDocumentationAddressTable,
			Columns: []string{petroglyph.AccountingDocumentationAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.location_petroglyphs_accounting_documentation = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AccountingDocumentationAuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.AccountingDocumentationAuthorTable,
			Columns: []string{petroglyph.AccountingDocumentationAuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.person_petroglyphs_accounting_documentation = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petroglyph.CollectionTable,
			Columns: []string{petroglyph.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.collection_petroglyphs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PetroglyphCreateBulk is the builder for creating many Petroglyph entities in bulk.
type PetroglyphCreateBulk struct {
	config
	err      error
	builders []*PetroglyphCreate
}

// Save creates the Petroglyph entities in the database.
func (pcb *PetroglyphCreateBulk) Save(ctx context.Context) ([]*Petroglyph, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Petroglyph, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PetroglyphMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PetroglyphCreateBulk) SaveX(ctx context.Context) []*Petroglyph {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PetroglyphCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PetroglyphCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
