// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/collection"
	"github.com/dkrasnovdev/siberiana-api/ent/country"
	"github.com/dkrasnovdev/siberiana-api/ent/district"
	"github.com/dkrasnovdev/siberiana-api/ent/familia"
	"github.com/dkrasnovdev/siberiana-api/ent/genus"
	"github.com/dkrasnovdev/siberiana-api/ent/group"
	"github.com/dkrasnovdev/siberiana-api/ent/herbarium"
	"github.com/dkrasnovdev/siberiana-api/ent/person"
	"github.com/dkrasnovdev/siberiana-api/ent/personalcollection"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/region"
	"github.com/dkrasnovdev/siberiana-api/ent/settlement"
	"github.com/dkrasnovdev/siberiana-api/ent/species"
)

// HerbariumUpdate is the builder for updating Herbarium entities.
type HerbariumUpdate struct {
	config
	hooks    []Hook
	mutation *HerbariumMutation
}

// Where appends a list predicates to the HerbariumUpdate builder.
func (hu *HerbariumUpdate) Where(ps ...predicate.Herbarium) *HerbariumUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetCreatedBy sets the "created_by" field.
func (hu *HerbariumUpdate) SetCreatedBy(s string) *HerbariumUpdate {
	hu.mutation.SetCreatedBy(s)
	return hu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableCreatedBy(s *string) *HerbariumUpdate {
	if s != nil {
		hu.SetCreatedBy(*s)
	}
	return hu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (hu *HerbariumUpdate) ClearCreatedBy() *HerbariumUpdate {
	hu.mutation.ClearCreatedBy()
	return hu
}

// SetUpdatedAt sets the "updated_at" field.
func (hu *HerbariumUpdate) SetUpdatedAt(t time.Time) *HerbariumUpdate {
	hu.mutation.SetUpdatedAt(t)
	return hu
}

// SetUpdatedBy sets the "updated_by" field.
func (hu *HerbariumUpdate) SetUpdatedBy(s string) *HerbariumUpdate {
	hu.mutation.SetUpdatedBy(s)
	return hu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableUpdatedBy(s *string) *HerbariumUpdate {
	if s != nil {
		hu.SetUpdatedBy(*s)
	}
	return hu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (hu *HerbariumUpdate) ClearUpdatedBy() *HerbariumUpdate {
	hu.mutation.ClearUpdatedBy()
	return hu
}

// SetDisplayName sets the "display_name" field.
func (hu *HerbariumUpdate) SetDisplayName(s string) *HerbariumUpdate {
	hu.mutation.SetDisplayName(s)
	return hu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableDisplayName(s *string) *HerbariumUpdate {
	if s != nil {
		hu.SetDisplayName(*s)
	}
	return hu
}

// ClearDisplayName clears the value of the "display_name" field.
func (hu *HerbariumUpdate) ClearDisplayName() *HerbariumUpdate {
	hu.mutation.ClearDisplayName()
	return hu
}

// SetAbbreviation sets the "abbreviation" field.
func (hu *HerbariumUpdate) SetAbbreviation(s string) *HerbariumUpdate {
	hu.mutation.SetAbbreviation(s)
	return hu
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableAbbreviation(s *string) *HerbariumUpdate {
	if s != nil {
		hu.SetAbbreviation(*s)
	}
	return hu
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (hu *HerbariumUpdate) ClearAbbreviation() *HerbariumUpdate {
	hu.mutation.ClearAbbreviation()
	return hu
}

// SetDescription sets the "description" field.
func (hu *HerbariumUpdate) SetDescription(s string) *HerbariumUpdate {
	hu.mutation.SetDescription(s)
	return hu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableDescription(s *string) *HerbariumUpdate {
	if s != nil {
		hu.SetDescription(*s)
	}
	return hu
}

// ClearDescription clears the value of the "description" field.
func (hu *HerbariumUpdate) ClearDescription() *HerbariumUpdate {
	hu.mutation.ClearDescription()
	return hu
}

// SetExternalLink sets the "external_link" field.
func (hu *HerbariumUpdate) SetExternalLink(s string) *HerbariumUpdate {
	hu.mutation.SetExternalLink(s)
	return hu
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableExternalLink(s *string) *HerbariumUpdate {
	if s != nil {
		hu.SetExternalLink(*s)
	}
	return hu
}

// ClearExternalLink clears the value of the "external_link" field.
func (hu *HerbariumUpdate) ClearExternalLink() *HerbariumUpdate {
	hu.mutation.ClearExternalLink()
	return hu
}

// SetStatus sets the "status" field.
func (hu *HerbariumUpdate) SetStatus(h herbarium.Status) *HerbariumUpdate {
	hu.mutation.SetStatus(h)
	return hu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableStatus(h *herbarium.Status) *HerbariumUpdate {
	if h != nil {
		hu.SetStatus(*h)
	}
	return hu
}

// ClearStatus clears the value of the "status" field.
func (hu *HerbariumUpdate) ClearStatus() *HerbariumUpdate {
	hu.mutation.ClearStatus()
	return hu
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (hu *HerbariumUpdate) SetPrimaryImageURL(s string) *HerbariumUpdate {
	hu.mutation.SetPrimaryImageURL(s)
	return hu
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (hu *HerbariumUpdate) SetNillablePrimaryImageURL(s *string) *HerbariumUpdate {
	if s != nil {
		hu.SetPrimaryImageURL(*s)
	}
	return hu
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (hu *HerbariumUpdate) ClearPrimaryImageURL() *HerbariumUpdate {
	hu.mutation.ClearPrimaryImageURL()
	return hu
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (hu *HerbariumUpdate) SetAdditionalImagesUrls(s []string) *HerbariumUpdate {
	hu.mutation.SetAdditionalImagesUrls(s)
	return hu
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (hu *HerbariumUpdate) AppendAdditionalImagesUrls(s []string) *HerbariumUpdate {
	hu.mutation.AppendAdditionalImagesUrls(s)
	return hu
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (hu *HerbariumUpdate) ClearAdditionalImagesUrls() *HerbariumUpdate {
	hu.mutation.ClearAdditionalImagesUrls()
	return hu
}

// SetDate sets the "date" field.
func (hu *HerbariumUpdate) SetDate(t time.Time) *HerbariumUpdate {
	hu.mutation.SetDate(t)
	return hu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableDate(t *time.Time) *HerbariumUpdate {
	if t != nil {
		hu.SetDate(*t)
	}
	return hu
}

// ClearDate clears the value of the "date" field.
func (hu *HerbariumUpdate) ClearDate() *HerbariumUpdate {
	hu.mutation.ClearDate()
	return hu
}

// SetLocation sets the "location" field.
func (hu *HerbariumUpdate) SetLocation(s string) *HerbariumUpdate {
	hu.mutation.SetLocation(s)
	return hu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableLocation(s *string) *HerbariumUpdate {
	if s != nil {
		hu.SetLocation(*s)
	}
	return hu
}

// ClearLocation clears the value of the "location" field.
func (hu *HerbariumUpdate) ClearLocation() *HerbariumUpdate {
	hu.mutation.ClearLocation()
	return hu
}

// SetAuthorID sets the "author" edge to the Person entity by ID.
func (hu *HerbariumUpdate) SetAuthorID(id int) *HerbariumUpdate {
	hu.mutation.SetAuthorID(id)
	return hu
}

// SetNillableAuthorID sets the "author" edge to the Person entity by ID if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableAuthorID(id *int) *HerbariumUpdate {
	if id != nil {
		hu = hu.SetAuthorID(*id)
	}
	return hu
}

// SetAuthor sets the "author" edge to the Person entity.
func (hu *HerbariumUpdate) SetAuthor(p *Person) *HerbariumUpdate {
	return hu.SetAuthorID(p.ID)
}

// SetFamiliaID sets the "familia" edge to the Familia entity by ID.
func (hu *HerbariumUpdate) SetFamiliaID(id int) *HerbariumUpdate {
	hu.mutation.SetFamiliaID(id)
	return hu
}

// SetNillableFamiliaID sets the "familia" edge to the Familia entity by ID if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableFamiliaID(id *int) *HerbariumUpdate {
	if id != nil {
		hu = hu.SetFamiliaID(*id)
	}
	return hu
}

// SetFamilia sets the "familia" edge to the Familia entity.
func (hu *HerbariumUpdate) SetFamilia(f *Familia) *HerbariumUpdate {
	return hu.SetFamiliaID(f.ID)
}

// SetGenusID sets the "genus" edge to the Genus entity by ID.
func (hu *HerbariumUpdate) SetGenusID(id int) *HerbariumUpdate {
	hu.mutation.SetGenusID(id)
	return hu
}

// SetNillableGenusID sets the "genus" edge to the Genus entity by ID if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableGenusID(id *int) *HerbariumUpdate {
	if id != nil {
		hu = hu.SetGenusID(*id)
	}
	return hu
}

// SetGenus sets the "genus" edge to the Genus entity.
func (hu *HerbariumUpdate) SetGenus(g *Genus) *HerbariumUpdate {
	return hu.SetGenusID(g.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (hu *HerbariumUpdate) SetGroupID(id int) *HerbariumUpdate {
	hu.mutation.SetGroupID(id)
	return hu
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableGroupID(id *int) *HerbariumUpdate {
	if id != nil {
		hu = hu.SetGroupID(*id)
	}
	return hu
}

// SetGroup sets the "group" edge to the Group entity.
func (hu *HerbariumUpdate) SetGroup(g *Group) *HerbariumUpdate {
	return hu.SetGroupID(g.ID)
}

// SetSpeciesID sets the "species" edge to the Species entity by ID.
func (hu *HerbariumUpdate) SetSpeciesID(id int) *HerbariumUpdate {
	hu.mutation.SetSpeciesID(id)
	return hu
}

// SetNillableSpeciesID sets the "species" edge to the Species entity by ID if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableSpeciesID(id *int) *HerbariumUpdate {
	if id != nil {
		hu = hu.SetSpeciesID(*id)
	}
	return hu
}

// SetSpecies sets the "species" edge to the Species entity.
func (hu *HerbariumUpdate) SetSpecies(s *Species) *HerbariumUpdate {
	return hu.SetSpeciesID(s.ID)
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (hu *HerbariumUpdate) SetCollectionID(id int) *HerbariumUpdate {
	hu.mutation.SetCollectionID(id)
	return hu
}

// SetCollection sets the "collection" edge to the Collection entity.
func (hu *HerbariumUpdate) SetCollection(c *Collection) *HerbariumUpdate {
	return hu.SetCollectionID(c.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (hu *HerbariumUpdate) SetCountryID(id int) *HerbariumUpdate {
	hu.mutation.SetCountryID(id)
	return hu
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableCountryID(id *int) *HerbariumUpdate {
	if id != nil {
		hu = hu.SetCountryID(*id)
	}
	return hu
}

// SetCountry sets the "country" edge to the Country entity.
func (hu *HerbariumUpdate) SetCountry(c *Country) *HerbariumUpdate {
	return hu.SetCountryID(c.ID)
}

// SetSettlementID sets the "settlement" edge to the Settlement entity by ID.
func (hu *HerbariumUpdate) SetSettlementID(id int) *HerbariumUpdate {
	hu.mutation.SetSettlementID(id)
	return hu
}

// SetNillableSettlementID sets the "settlement" edge to the Settlement entity by ID if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableSettlementID(id *int) *HerbariumUpdate {
	if id != nil {
		hu = hu.SetSettlementID(*id)
	}
	return hu
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (hu *HerbariumUpdate) SetSettlement(s *Settlement) *HerbariumUpdate {
	return hu.SetSettlementID(s.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (hu *HerbariumUpdate) SetDistrictID(id int) *HerbariumUpdate {
	hu.mutation.SetDistrictID(id)
	return hu
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableDistrictID(id *int) *HerbariumUpdate {
	if id != nil {
		hu = hu.SetDistrictID(*id)
	}
	return hu
}

// SetDistrict sets the "district" edge to the District entity.
func (hu *HerbariumUpdate) SetDistrict(d *District) *HerbariumUpdate {
	return hu.SetDistrictID(d.ID)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (hu *HerbariumUpdate) SetRegionID(id int) *HerbariumUpdate {
	hu.mutation.SetRegionID(id)
	return hu
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (hu *HerbariumUpdate) SetNillableRegionID(id *int) *HerbariumUpdate {
	if id != nil {
		hu = hu.SetRegionID(*id)
	}
	return hu
}

// SetRegion sets the "region" edge to the Region entity.
func (hu *HerbariumUpdate) SetRegion(r *Region) *HerbariumUpdate {
	return hu.SetRegionID(r.ID)
}

// AddPersonalCollectionIDs adds the "personal_collection" edge to the PersonalCollection entity by IDs.
func (hu *HerbariumUpdate) AddPersonalCollectionIDs(ids ...int) *HerbariumUpdate {
	hu.mutation.AddPersonalCollectionIDs(ids...)
	return hu
}

// AddPersonalCollection adds the "personal_collection" edges to the PersonalCollection entity.
func (hu *HerbariumUpdate) AddPersonalCollection(p ...*PersonalCollection) *HerbariumUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return hu.AddPersonalCollectionIDs(ids...)
}

// Mutation returns the HerbariumMutation object of the builder.
func (hu *HerbariumUpdate) Mutation() *HerbariumMutation {
	return hu.mutation
}

// ClearAuthor clears the "author" edge to the Person entity.
func (hu *HerbariumUpdate) ClearAuthor() *HerbariumUpdate {
	hu.mutation.ClearAuthor()
	return hu
}

// ClearFamilia clears the "familia" edge to the Familia entity.
func (hu *HerbariumUpdate) ClearFamilia() *HerbariumUpdate {
	hu.mutation.ClearFamilia()
	return hu
}

// ClearGenus clears the "genus" edge to the Genus entity.
func (hu *HerbariumUpdate) ClearGenus() *HerbariumUpdate {
	hu.mutation.ClearGenus()
	return hu
}

// ClearGroup clears the "group" edge to the Group entity.
func (hu *HerbariumUpdate) ClearGroup() *HerbariumUpdate {
	hu.mutation.ClearGroup()
	return hu
}

// ClearSpecies clears the "species" edge to the Species entity.
func (hu *HerbariumUpdate) ClearSpecies() *HerbariumUpdate {
	hu.mutation.ClearSpecies()
	return hu
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (hu *HerbariumUpdate) ClearCollection() *HerbariumUpdate {
	hu.mutation.ClearCollection()
	return hu
}

// ClearCountry clears the "country" edge to the Country entity.
func (hu *HerbariumUpdate) ClearCountry() *HerbariumUpdate {
	hu.mutation.ClearCountry()
	return hu
}

// ClearSettlement clears the "settlement" edge to the Settlement entity.
func (hu *HerbariumUpdate) ClearSettlement() *HerbariumUpdate {
	hu.mutation.ClearSettlement()
	return hu
}

// ClearDistrict clears the "district" edge to the District entity.
func (hu *HerbariumUpdate) ClearDistrict() *HerbariumUpdate {
	hu.mutation.ClearDistrict()
	return hu
}

// ClearRegion clears the "region" edge to the Region entity.
func (hu *HerbariumUpdate) ClearRegion() *HerbariumUpdate {
	hu.mutation.ClearRegion()
	return hu
}

// ClearPersonalCollection clears all "personal_collection" edges to the PersonalCollection entity.
func (hu *HerbariumUpdate) ClearPersonalCollection() *HerbariumUpdate {
	hu.mutation.ClearPersonalCollection()
	return hu
}

// RemovePersonalCollectionIDs removes the "personal_collection" edge to PersonalCollection entities by IDs.
func (hu *HerbariumUpdate) RemovePersonalCollectionIDs(ids ...int) *HerbariumUpdate {
	hu.mutation.RemovePersonalCollectionIDs(ids...)
	return hu
}

// RemovePersonalCollection removes "personal_collection" edges to PersonalCollection entities.
func (hu *HerbariumUpdate) RemovePersonalCollection(p ...*PersonalCollection) *HerbariumUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return hu.RemovePersonalCollectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HerbariumUpdate) Save(ctx context.Context) (int, error) {
	if err := hu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HerbariumUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HerbariumUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HerbariumUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hu *HerbariumUpdate) defaults() error {
	if _, ok := hu.mutation.UpdatedAt(); !ok {
		if herbarium.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized herbarium.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := herbarium.UpdateDefaultUpdatedAt()
		hu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hu *HerbariumUpdate) check() error {
	if v, ok := hu.mutation.Status(); ok {
		if err := herbarium.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Herbarium.status": %w`, err)}
		}
	}
	if _, ok := hu.mutation.CollectionID(); hu.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Herbarium.collection"`)
	}
	return nil
}

func (hu *HerbariumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(herbarium.Table, herbarium.Columns, sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.CreatedBy(); ok {
		_spec.SetField(herbarium.FieldCreatedBy, field.TypeString, value)
	}
	if hu.mutation.CreatedByCleared() {
		_spec.ClearField(herbarium.FieldCreatedBy, field.TypeString)
	}
	if value, ok := hu.mutation.UpdatedAt(); ok {
		_spec.SetField(herbarium.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hu.mutation.UpdatedBy(); ok {
		_spec.SetField(herbarium.FieldUpdatedBy, field.TypeString, value)
	}
	if hu.mutation.UpdatedByCleared() {
		_spec.ClearField(herbarium.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := hu.mutation.DisplayName(); ok {
		_spec.SetField(herbarium.FieldDisplayName, field.TypeString, value)
	}
	if hu.mutation.DisplayNameCleared() {
		_spec.ClearField(herbarium.FieldDisplayName, field.TypeString)
	}
	if value, ok := hu.mutation.Abbreviation(); ok {
		_spec.SetField(herbarium.FieldAbbreviation, field.TypeString, value)
	}
	if hu.mutation.AbbreviationCleared() {
		_spec.ClearField(herbarium.FieldAbbreviation, field.TypeString)
	}
	if value, ok := hu.mutation.Description(); ok {
		_spec.SetField(herbarium.FieldDescription, field.TypeString, value)
	}
	if hu.mutation.DescriptionCleared() {
		_spec.ClearField(herbarium.FieldDescription, field.TypeString)
	}
	if value, ok := hu.mutation.ExternalLink(); ok {
		_spec.SetField(herbarium.FieldExternalLink, field.TypeString, value)
	}
	if hu.mutation.ExternalLinkCleared() {
		_spec.ClearField(herbarium.FieldExternalLink, field.TypeString)
	}
	if value, ok := hu.mutation.Status(); ok {
		_spec.SetField(herbarium.FieldStatus, field.TypeEnum, value)
	}
	if hu.mutation.StatusCleared() {
		_spec.ClearField(herbarium.FieldStatus, field.TypeEnum)
	}
	if value, ok := hu.mutation.PrimaryImageURL(); ok {
		_spec.SetField(herbarium.FieldPrimaryImageURL, field.TypeString, value)
	}
	if hu.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(herbarium.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := hu.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(herbarium.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := hu.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, herbarium.FieldAdditionalImagesUrls, value)
		})
	}
	if hu.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(herbarium.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := hu.mutation.Date(); ok {
		_spec.SetField(herbarium.FieldDate, field.TypeTime, value)
	}
	if hu.mutation.DateCleared() {
		_spec.ClearField(herbarium.FieldDate, field.TypeTime)
	}
	if value, ok := hu.mutation.Location(); ok {
		_spec.SetField(herbarium.FieldLocation, field.TypeString, value)
	}
	if hu.mutation.LocationCleared() {
		_spec.ClearField(herbarium.FieldLocation, field.TypeString)
	}
	if hu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.AuthorTable,
			Columns: []string{herbarium.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.AuthorTable,
			Columns: []string{herbarium.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.FamiliaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.FamiliaTable,
			Columns: []string{herbarium.FamiliaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(familia.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.FamiliaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.FamiliaTable,
			Columns: []string{herbarium.FamiliaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(familia.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.GenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.GenusTable,
			Columns: []string{herbarium.GenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.GenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.GenusTable,
			Columns: []string{herbarium.GenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.GroupTable,
			Columns: []string{herbarium.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.GroupTable,
			Columns: []string{herbarium.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.SpeciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.SpeciesTable,
			Columns: []string{herbarium.SpeciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(species.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.SpeciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.SpeciesTable,
			Columns: []string{herbarium.SpeciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(species.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.CollectionTable,
			Columns: []string{herbarium.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.CollectionTable,
			Columns: []string{herbarium.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.CountryTable,
			Columns: []string{herbarium.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.CountryTable,
			Columns: []string{herbarium.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.SettlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.SettlementTable,
			Columns: []string{herbarium.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.SettlementTable,
			Columns: []string{herbarium.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.DistrictTable,
			Columns: []string{herbarium.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.DistrictTable,
			Columns: []string{herbarium.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.RegionTable,
			Columns: []string{herbarium.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.RegionTable,
			Columns: []string{herbarium.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.PersonalCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   herbarium.PersonalCollectionTable,
			Columns: herbarium.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedPersonalCollectionIDs(); len(nodes) > 0 && !hu.mutation.PersonalCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   herbarium.PersonalCollectionTable,
			Columns: herbarium.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.PersonalCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   herbarium.PersonalCollectionTable,
			Columns: herbarium.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{herbarium.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HerbariumUpdateOne is the builder for updating a single Herbarium entity.
type HerbariumUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HerbariumMutation
}

// SetCreatedBy sets the "created_by" field.
func (huo *HerbariumUpdateOne) SetCreatedBy(s string) *HerbariumUpdateOne {
	huo.mutation.SetCreatedBy(s)
	return huo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableCreatedBy(s *string) *HerbariumUpdateOne {
	if s != nil {
		huo.SetCreatedBy(*s)
	}
	return huo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (huo *HerbariumUpdateOne) ClearCreatedBy() *HerbariumUpdateOne {
	huo.mutation.ClearCreatedBy()
	return huo
}

// SetUpdatedAt sets the "updated_at" field.
func (huo *HerbariumUpdateOne) SetUpdatedAt(t time.Time) *HerbariumUpdateOne {
	huo.mutation.SetUpdatedAt(t)
	return huo
}

// SetUpdatedBy sets the "updated_by" field.
func (huo *HerbariumUpdateOne) SetUpdatedBy(s string) *HerbariumUpdateOne {
	huo.mutation.SetUpdatedBy(s)
	return huo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableUpdatedBy(s *string) *HerbariumUpdateOne {
	if s != nil {
		huo.SetUpdatedBy(*s)
	}
	return huo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (huo *HerbariumUpdateOne) ClearUpdatedBy() *HerbariumUpdateOne {
	huo.mutation.ClearUpdatedBy()
	return huo
}

// SetDisplayName sets the "display_name" field.
func (huo *HerbariumUpdateOne) SetDisplayName(s string) *HerbariumUpdateOne {
	huo.mutation.SetDisplayName(s)
	return huo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableDisplayName(s *string) *HerbariumUpdateOne {
	if s != nil {
		huo.SetDisplayName(*s)
	}
	return huo
}

// ClearDisplayName clears the value of the "display_name" field.
func (huo *HerbariumUpdateOne) ClearDisplayName() *HerbariumUpdateOne {
	huo.mutation.ClearDisplayName()
	return huo
}

// SetAbbreviation sets the "abbreviation" field.
func (huo *HerbariumUpdateOne) SetAbbreviation(s string) *HerbariumUpdateOne {
	huo.mutation.SetAbbreviation(s)
	return huo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableAbbreviation(s *string) *HerbariumUpdateOne {
	if s != nil {
		huo.SetAbbreviation(*s)
	}
	return huo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (huo *HerbariumUpdateOne) ClearAbbreviation() *HerbariumUpdateOne {
	huo.mutation.ClearAbbreviation()
	return huo
}

// SetDescription sets the "description" field.
func (huo *HerbariumUpdateOne) SetDescription(s string) *HerbariumUpdateOne {
	huo.mutation.SetDescription(s)
	return huo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableDescription(s *string) *HerbariumUpdateOne {
	if s != nil {
		huo.SetDescription(*s)
	}
	return huo
}

// ClearDescription clears the value of the "description" field.
func (huo *HerbariumUpdateOne) ClearDescription() *HerbariumUpdateOne {
	huo.mutation.ClearDescription()
	return huo
}

// SetExternalLink sets the "external_link" field.
func (huo *HerbariumUpdateOne) SetExternalLink(s string) *HerbariumUpdateOne {
	huo.mutation.SetExternalLink(s)
	return huo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableExternalLink(s *string) *HerbariumUpdateOne {
	if s != nil {
		huo.SetExternalLink(*s)
	}
	return huo
}

// ClearExternalLink clears the value of the "external_link" field.
func (huo *HerbariumUpdateOne) ClearExternalLink() *HerbariumUpdateOne {
	huo.mutation.ClearExternalLink()
	return huo
}

// SetStatus sets the "status" field.
func (huo *HerbariumUpdateOne) SetStatus(h herbarium.Status) *HerbariumUpdateOne {
	huo.mutation.SetStatus(h)
	return huo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableStatus(h *herbarium.Status) *HerbariumUpdateOne {
	if h != nil {
		huo.SetStatus(*h)
	}
	return huo
}

// ClearStatus clears the value of the "status" field.
func (huo *HerbariumUpdateOne) ClearStatus() *HerbariumUpdateOne {
	huo.mutation.ClearStatus()
	return huo
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (huo *HerbariumUpdateOne) SetPrimaryImageURL(s string) *HerbariumUpdateOne {
	huo.mutation.SetPrimaryImageURL(s)
	return huo
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillablePrimaryImageURL(s *string) *HerbariumUpdateOne {
	if s != nil {
		huo.SetPrimaryImageURL(*s)
	}
	return huo
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (huo *HerbariumUpdateOne) ClearPrimaryImageURL() *HerbariumUpdateOne {
	huo.mutation.ClearPrimaryImageURL()
	return huo
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (huo *HerbariumUpdateOne) SetAdditionalImagesUrls(s []string) *HerbariumUpdateOne {
	huo.mutation.SetAdditionalImagesUrls(s)
	return huo
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (huo *HerbariumUpdateOne) AppendAdditionalImagesUrls(s []string) *HerbariumUpdateOne {
	huo.mutation.AppendAdditionalImagesUrls(s)
	return huo
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (huo *HerbariumUpdateOne) ClearAdditionalImagesUrls() *HerbariumUpdateOne {
	huo.mutation.ClearAdditionalImagesUrls()
	return huo
}

// SetDate sets the "date" field.
func (huo *HerbariumUpdateOne) SetDate(t time.Time) *HerbariumUpdateOne {
	huo.mutation.SetDate(t)
	return huo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableDate(t *time.Time) *HerbariumUpdateOne {
	if t != nil {
		huo.SetDate(*t)
	}
	return huo
}

// ClearDate clears the value of the "date" field.
func (huo *HerbariumUpdateOne) ClearDate() *HerbariumUpdateOne {
	huo.mutation.ClearDate()
	return huo
}

// SetLocation sets the "location" field.
func (huo *HerbariumUpdateOne) SetLocation(s string) *HerbariumUpdateOne {
	huo.mutation.SetLocation(s)
	return huo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableLocation(s *string) *HerbariumUpdateOne {
	if s != nil {
		huo.SetLocation(*s)
	}
	return huo
}

// ClearLocation clears the value of the "location" field.
func (huo *HerbariumUpdateOne) ClearLocation() *HerbariumUpdateOne {
	huo.mutation.ClearLocation()
	return huo
}

// SetAuthorID sets the "author" edge to the Person entity by ID.
func (huo *HerbariumUpdateOne) SetAuthorID(id int) *HerbariumUpdateOne {
	huo.mutation.SetAuthorID(id)
	return huo
}

// SetNillableAuthorID sets the "author" edge to the Person entity by ID if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableAuthorID(id *int) *HerbariumUpdateOne {
	if id != nil {
		huo = huo.SetAuthorID(*id)
	}
	return huo
}

// SetAuthor sets the "author" edge to the Person entity.
func (huo *HerbariumUpdateOne) SetAuthor(p *Person) *HerbariumUpdateOne {
	return huo.SetAuthorID(p.ID)
}

// SetFamiliaID sets the "familia" edge to the Familia entity by ID.
func (huo *HerbariumUpdateOne) SetFamiliaID(id int) *HerbariumUpdateOne {
	huo.mutation.SetFamiliaID(id)
	return huo
}

// SetNillableFamiliaID sets the "familia" edge to the Familia entity by ID if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableFamiliaID(id *int) *HerbariumUpdateOne {
	if id != nil {
		huo = huo.SetFamiliaID(*id)
	}
	return huo
}

// SetFamilia sets the "familia" edge to the Familia entity.
func (huo *HerbariumUpdateOne) SetFamilia(f *Familia) *HerbariumUpdateOne {
	return huo.SetFamiliaID(f.ID)
}

// SetGenusID sets the "genus" edge to the Genus entity by ID.
func (huo *HerbariumUpdateOne) SetGenusID(id int) *HerbariumUpdateOne {
	huo.mutation.SetGenusID(id)
	return huo
}

// SetNillableGenusID sets the "genus" edge to the Genus entity by ID if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableGenusID(id *int) *HerbariumUpdateOne {
	if id != nil {
		huo = huo.SetGenusID(*id)
	}
	return huo
}

// SetGenus sets the "genus" edge to the Genus entity.
func (huo *HerbariumUpdateOne) SetGenus(g *Genus) *HerbariumUpdateOne {
	return huo.SetGenusID(g.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (huo *HerbariumUpdateOne) SetGroupID(id int) *HerbariumUpdateOne {
	huo.mutation.SetGroupID(id)
	return huo
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableGroupID(id *int) *HerbariumUpdateOne {
	if id != nil {
		huo = huo.SetGroupID(*id)
	}
	return huo
}

// SetGroup sets the "group" edge to the Group entity.
func (huo *HerbariumUpdateOne) SetGroup(g *Group) *HerbariumUpdateOne {
	return huo.SetGroupID(g.ID)
}

// SetSpeciesID sets the "species" edge to the Species entity by ID.
func (huo *HerbariumUpdateOne) SetSpeciesID(id int) *HerbariumUpdateOne {
	huo.mutation.SetSpeciesID(id)
	return huo
}

// SetNillableSpeciesID sets the "species" edge to the Species entity by ID if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableSpeciesID(id *int) *HerbariumUpdateOne {
	if id != nil {
		huo = huo.SetSpeciesID(*id)
	}
	return huo
}

// SetSpecies sets the "species" edge to the Species entity.
func (huo *HerbariumUpdateOne) SetSpecies(s *Species) *HerbariumUpdateOne {
	return huo.SetSpeciesID(s.ID)
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (huo *HerbariumUpdateOne) SetCollectionID(id int) *HerbariumUpdateOne {
	huo.mutation.SetCollectionID(id)
	return huo
}

// SetCollection sets the "collection" edge to the Collection entity.
func (huo *HerbariumUpdateOne) SetCollection(c *Collection) *HerbariumUpdateOne {
	return huo.SetCollectionID(c.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (huo *HerbariumUpdateOne) SetCountryID(id int) *HerbariumUpdateOne {
	huo.mutation.SetCountryID(id)
	return huo
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableCountryID(id *int) *HerbariumUpdateOne {
	if id != nil {
		huo = huo.SetCountryID(*id)
	}
	return huo
}

// SetCountry sets the "country" edge to the Country entity.
func (huo *HerbariumUpdateOne) SetCountry(c *Country) *HerbariumUpdateOne {
	return huo.SetCountryID(c.ID)
}

// SetSettlementID sets the "settlement" edge to the Settlement entity by ID.
func (huo *HerbariumUpdateOne) SetSettlementID(id int) *HerbariumUpdateOne {
	huo.mutation.SetSettlementID(id)
	return huo
}

// SetNillableSettlementID sets the "settlement" edge to the Settlement entity by ID if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableSettlementID(id *int) *HerbariumUpdateOne {
	if id != nil {
		huo = huo.SetSettlementID(*id)
	}
	return huo
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (huo *HerbariumUpdateOne) SetSettlement(s *Settlement) *HerbariumUpdateOne {
	return huo.SetSettlementID(s.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (huo *HerbariumUpdateOne) SetDistrictID(id int) *HerbariumUpdateOne {
	huo.mutation.SetDistrictID(id)
	return huo
}

// SetNillableDistrictID sets the "district" edge to the District entity by ID if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableDistrictID(id *int) *HerbariumUpdateOne {
	if id != nil {
		huo = huo.SetDistrictID(*id)
	}
	return huo
}

// SetDistrict sets the "district" edge to the District entity.
func (huo *HerbariumUpdateOne) SetDistrict(d *District) *HerbariumUpdateOne {
	return huo.SetDistrictID(d.ID)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (huo *HerbariumUpdateOne) SetRegionID(id int) *HerbariumUpdateOne {
	huo.mutation.SetRegionID(id)
	return huo
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (huo *HerbariumUpdateOne) SetNillableRegionID(id *int) *HerbariumUpdateOne {
	if id != nil {
		huo = huo.SetRegionID(*id)
	}
	return huo
}

// SetRegion sets the "region" edge to the Region entity.
func (huo *HerbariumUpdateOne) SetRegion(r *Region) *HerbariumUpdateOne {
	return huo.SetRegionID(r.ID)
}

// AddPersonalCollectionIDs adds the "personal_collection" edge to the PersonalCollection entity by IDs.
func (huo *HerbariumUpdateOne) AddPersonalCollectionIDs(ids ...int) *HerbariumUpdateOne {
	huo.mutation.AddPersonalCollectionIDs(ids...)
	return huo
}

// AddPersonalCollection adds the "personal_collection" edges to the PersonalCollection entity.
func (huo *HerbariumUpdateOne) AddPersonalCollection(p ...*PersonalCollection) *HerbariumUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return huo.AddPersonalCollectionIDs(ids...)
}

// Mutation returns the HerbariumMutation object of the builder.
func (huo *HerbariumUpdateOne) Mutation() *HerbariumMutation {
	return huo.mutation
}

// ClearAuthor clears the "author" edge to the Person entity.
func (huo *HerbariumUpdateOne) ClearAuthor() *HerbariumUpdateOne {
	huo.mutation.ClearAuthor()
	return huo
}

// ClearFamilia clears the "familia" edge to the Familia entity.
func (huo *HerbariumUpdateOne) ClearFamilia() *HerbariumUpdateOne {
	huo.mutation.ClearFamilia()
	return huo
}

// ClearGenus clears the "genus" edge to the Genus entity.
func (huo *HerbariumUpdateOne) ClearGenus() *HerbariumUpdateOne {
	huo.mutation.ClearGenus()
	return huo
}

// ClearGroup clears the "group" edge to the Group entity.
func (huo *HerbariumUpdateOne) ClearGroup() *HerbariumUpdateOne {
	huo.mutation.ClearGroup()
	return huo
}

// ClearSpecies clears the "species" edge to the Species entity.
func (huo *HerbariumUpdateOne) ClearSpecies() *HerbariumUpdateOne {
	huo.mutation.ClearSpecies()
	return huo
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (huo *HerbariumUpdateOne) ClearCollection() *HerbariumUpdateOne {
	huo.mutation.ClearCollection()
	return huo
}

// ClearCountry clears the "country" edge to the Country entity.
func (huo *HerbariumUpdateOne) ClearCountry() *HerbariumUpdateOne {
	huo.mutation.ClearCountry()
	return huo
}

// ClearSettlement clears the "settlement" edge to the Settlement entity.
func (huo *HerbariumUpdateOne) ClearSettlement() *HerbariumUpdateOne {
	huo.mutation.ClearSettlement()
	return huo
}

// ClearDistrict clears the "district" edge to the District entity.
func (huo *HerbariumUpdateOne) ClearDistrict() *HerbariumUpdateOne {
	huo.mutation.ClearDistrict()
	return huo
}

// ClearRegion clears the "region" edge to the Region entity.
func (huo *HerbariumUpdateOne) ClearRegion() *HerbariumUpdateOne {
	huo.mutation.ClearRegion()
	return huo
}

// ClearPersonalCollection clears all "personal_collection" edges to the PersonalCollection entity.
func (huo *HerbariumUpdateOne) ClearPersonalCollection() *HerbariumUpdateOne {
	huo.mutation.ClearPersonalCollection()
	return huo
}

// RemovePersonalCollectionIDs removes the "personal_collection" edge to PersonalCollection entities by IDs.
func (huo *HerbariumUpdateOne) RemovePersonalCollectionIDs(ids ...int) *HerbariumUpdateOne {
	huo.mutation.RemovePersonalCollectionIDs(ids...)
	return huo
}

// RemovePersonalCollection removes "personal_collection" edges to PersonalCollection entities.
func (huo *HerbariumUpdateOne) RemovePersonalCollection(p ...*PersonalCollection) *HerbariumUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return huo.RemovePersonalCollectionIDs(ids...)
}

// Where appends a list predicates to the HerbariumUpdate builder.
func (huo *HerbariumUpdateOne) Where(ps ...predicate.Herbarium) *HerbariumUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HerbariumUpdateOne) Select(field string, fields ...string) *HerbariumUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Herbarium entity.
func (huo *HerbariumUpdateOne) Save(ctx context.Context) (*Herbarium, error) {
	if err := huo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HerbariumUpdateOne) SaveX(ctx context.Context) *Herbarium {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HerbariumUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HerbariumUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (huo *HerbariumUpdateOne) defaults() error {
	if _, ok := huo.mutation.UpdatedAt(); !ok {
		if herbarium.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized herbarium.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := herbarium.UpdateDefaultUpdatedAt()
		huo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (huo *HerbariumUpdateOne) check() error {
	if v, ok := huo.mutation.Status(); ok {
		if err := herbarium.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Herbarium.status": %w`, err)}
		}
	}
	if _, ok := huo.mutation.CollectionID(); huo.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Herbarium.collection"`)
	}
	return nil
}

func (huo *HerbariumUpdateOne) sqlSave(ctx context.Context) (_node *Herbarium, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(herbarium.Table, herbarium.Columns, sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Herbarium.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, herbarium.FieldID)
		for _, f := range fields {
			if !herbarium.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != herbarium.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.CreatedBy(); ok {
		_spec.SetField(herbarium.FieldCreatedBy, field.TypeString, value)
	}
	if huo.mutation.CreatedByCleared() {
		_spec.ClearField(herbarium.FieldCreatedBy, field.TypeString)
	}
	if value, ok := huo.mutation.UpdatedAt(); ok {
		_spec.SetField(herbarium.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := huo.mutation.UpdatedBy(); ok {
		_spec.SetField(herbarium.FieldUpdatedBy, field.TypeString, value)
	}
	if huo.mutation.UpdatedByCleared() {
		_spec.ClearField(herbarium.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := huo.mutation.DisplayName(); ok {
		_spec.SetField(herbarium.FieldDisplayName, field.TypeString, value)
	}
	if huo.mutation.DisplayNameCleared() {
		_spec.ClearField(herbarium.FieldDisplayName, field.TypeString)
	}
	if value, ok := huo.mutation.Abbreviation(); ok {
		_spec.SetField(herbarium.FieldAbbreviation, field.TypeString, value)
	}
	if huo.mutation.AbbreviationCleared() {
		_spec.ClearField(herbarium.FieldAbbreviation, field.TypeString)
	}
	if value, ok := huo.mutation.Description(); ok {
		_spec.SetField(herbarium.FieldDescription, field.TypeString, value)
	}
	if huo.mutation.DescriptionCleared() {
		_spec.ClearField(herbarium.FieldDescription, field.TypeString)
	}
	if value, ok := huo.mutation.ExternalLink(); ok {
		_spec.SetField(herbarium.FieldExternalLink, field.TypeString, value)
	}
	if huo.mutation.ExternalLinkCleared() {
		_spec.ClearField(herbarium.FieldExternalLink, field.TypeString)
	}
	if value, ok := huo.mutation.Status(); ok {
		_spec.SetField(herbarium.FieldStatus, field.TypeEnum, value)
	}
	if huo.mutation.StatusCleared() {
		_spec.ClearField(herbarium.FieldStatus, field.TypeEnum)
	}
	if value, ok := huo.mutation.PrimaryImageURL(); ok {
		_spec.SetField(herbarium.FieldPrimaryImageURL, field.TypeString, value)
	}
	if huo.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(herbarium.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := huo.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(herbarium.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := huo.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, herbarium.FieldAdditionalImagesUrls, value)
		})
	}
	if huo.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(herbarium.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if value, ok := huo.mutation.Date(); ok {
		_spec.SetField(herbarium.FieldDate, field.TypeTime, value)
	}
	if huo.mutation.DateCleared() {
		_spec.ClearField(herbarium.FieldDate, field.TypeTime)
	}
	if value, ok := huo.mutation.Location(); ok {
		_spec.SetField(herbarium.FieldLocation, field.TypeString, value)
	}
	if huo.mutation.LocationCleared() {
		_spec.ClearField(herbarium.FieldLocation, field.TypeString)
	}
	if huo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.AuthorTable,
			Columns: []string{herbarium.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.AuthorTable,
			Columns: []string{herbarium.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.FamiliaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.FamiliaTable,
			Columns: []string{herbarium.FamiliaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(familia.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.FamiliaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.FamiliaTable,
			Columns: []string{herbarium.FamiliaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(familia.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.GenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.GenusTable,
			Columns: []string{herbarium.GenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.GenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.GenusTable,
			Columns: []string{herbarium.GenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.GroupTable,
			Columns: []string{herbarium.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.GroupTable,
			Columns: []string{herbarium.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.SpeciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.SpeciesTable,
			Columns: []string{herbarium.SpeciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(species.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.SpeciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.SpeciesTable,
			Columns: []string{herbarium.SpeciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(species.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.CollectionTable,
			Columns: []string{herbarium.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.CollectionTable,
			Columns: []string{herbarium.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.CountryTable,
			Columns: []string{herbarium.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.CountryTable,
			Columns: []string{herbarium.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.SettlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.SettlementTable,
			Columns: []string{herbarium.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.SettlementTable,
			Columns: []string{herbarium.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.DistrictTable,
			Columns: []string{herbarium.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.DistrictTable,
			Columns: []string{herbarium.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.RegionTable,
			Columns: []string{herbarium.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   herbarium.RegionTable,
			Columns: []string{herbarium.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.PersonalCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   herbarium.PersonalCollectionTable,
			Columns: herbarium.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedPersonalCollectionIDs(); len(nodes) > 0 && !huo.mutation.PersonalCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   herbarium.PersonalCollectionTable,
			Columns: herbarium.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.PersonalCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   herbarium.PersonalCollectionTable,
			Columns: herbarium.PersonalCollectionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalcollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Herbarium{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{herbarium.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
