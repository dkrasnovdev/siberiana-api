// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dkrasnovdev/siberiana-api/ent/herbarium"
	"github.com/dkrasnovdev/siberiana-api/ent/predicate"
	"github.com/dkrasnovdev/siberiana-api/ent/species"
)

// SpeciesUpdate is the builder for updating Species entities.
type SpeciesUpdate struct {
	config
	hooks    []Hook
	mutation *SpeciesMutation
}

// Where appends a list predicates to the SpeciesUpdate builder.
func (su *SpeciesUpdate) Where(ps ...predicate.Species) *SpeciesUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *SpeciesUpdate) SetCreatedBy(s string) *SpeciesUpdate {
	su.mutation.SetCreatedBy(s)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *SpeciesUpdate) SetNillableCreatedBy(s *string) *SpeciesUpdate {
	if s != nil {
		su.SetCreatedBy(*s)
	}
	return su
}

// ClearCreatedBy clears the value of the "created_by" field.
func (su *SpeciesUpdate) ClearCreatedBy() *SpeciesUpdate {
	su.mutation.ClearCreatedBy()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SpeciesUpdate) SetUpdatedAt(t time.Time) *SpeciesUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SpeciesUpdate) SetUpdatedBy(s string) *SpeciesUpdate {
	su.mutation.SetUpdatedBy(s)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SpeciesUpdate) SetNillableUpdatedBy(s *string) *SpeciesUpdate {
	if s != nil {
		su.SetUpdatedBy(*s)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SpeciesUpdate) ClearUpdatedBy() *SpeciesUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetDisplayName sets the "display_name" field.
func (su *SpeciesUpdate) SetDisplayName(s string) *SpeciesUpdate {
	su.mutation.SetDisplayName(s)
	return su
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (su *SpeciesUpdate) SetNillableDisplayName(s *string) *SpeciesUpdate {
	if s != nil {
		su.SetDisplayName(*s)
	}
	return su
}

// ClearDisplayName clears the value of the "display_name" field.
func (su *SpeciesUpdate) ClearDisplayName() *SpeciesUpdate {
	su.mutation.ClearDisplayName()
	return su
}

// SetAbbreviation sets the "abbreviation" field.
func (su *SpeciesUpdate) SetAbbreviation(s string) *SpeciesUpdate {
	su.mutation.SetAbbreviation(s)
	return su
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (su *SpeciesUpdate) SetNillableAbbreviation(s *string) *SpeciesUpdate {
	if s != nil {
		su.SetAbbreviation(*s)
	}
	return su
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (su *SpeciesUpdate) ClearAbbreviation() *SpeciesUpdate {
	su.mutation.ClearAbbreviation()
	return su
}

// SetDescription sets the "description" field.
func (su *SpeciesUpdate) SetDescription(s string) *SpeciesUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SpeciesUpdate) SetNillableDescription(s *string) *SpeciesUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SpeciesUpdate) ClearDescription() *SpeciesUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetExternalLink sets the "external_link" field.
func (su *SpeciesUpdate) SetExternalLink(s string) *SpeciesUpdate {
	su.mutation.SetExternalLink(s)
	return su
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (su *SpeciesUpdate) SetNillableExternalLink(s *string) *SpeciesUpdate {
	if s != nil {
		su.SetExternalLink(*s)
	}
	return su
}

// ClearExternalLink clears the value of the "external_link" field.
func (su *SpeciesUpdate) ClearExternalLink() *SpeciesUpdate {
	su.mutation.ClearExternalLink()
	return su
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (su *SpeciesUpdate) SetPrimaryImageURL(s string) *SpeciesUpdate {
	su.mutation.SetPrimaryImageURL(s)
	return su
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (su *SpeciesUpdate) SetNillablePrimaryImageURL(s *string) *SpeciesUpdate {
	if s != nil {
		su.SetPrimaryImageURL(*s)
	}
	return su
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (su *SpeciesUpdate) ClearPrimaryImageURL() *SpeciesUpdate {
	su.mutation.ClearPrimaryImageURL()
	return su
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (su *SpeciesUpdate) SetAdditionalImagesUrls(s []string) *SpeciesUpdate {
	su.mutation.SetAdditionalImagesUrls(s)
	return su
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (su *SpeciesUpdate) AppendAdditionalImagesUrls(s []string) *SpeciesUpdate {
	su.mutation.AppendAdditionalImagesUrls(s)
	return su
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (su *SpeciesUpdate) ClearAdditionalImagesUrls() *SpeciesUpdate {
	su.mutation.ClearAdditionalImagesUrls()
	return su
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (su *SpeciesUpdate) AddHerbariumIDs(ids ...int) *SpeciesUpdate {
	su.mutation.AddHerbariumIDs(ids...)
	return su
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (su *SpeciesUpdate) AddHerbaria(h ...*Herbarium) *SpeciesUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return su.AddHerbariumIDs(ids...)
}

// Mutation returns the SpeciesMutation object of the builder.
func (su *SpeciesUpdate) Mutation() *SpeciesMutation {
	return su.mutation
}

// ClearHerbaria clears all "herbaria" edges to the Herbarium entity.
func (su *SpeciesUpdate) ClearHerbaria() *SpeciesUpdate {
	su.mutation.ClearHerbaria()
	return su
}

// RemoveHerbariumIDs removes the "herbaria" edge to Herbarium entities by IDs.
func (su *SpeciesUpdate) RemoveHerbariumIDs(ids ...int) *SpeciesUpdate {
	su.mutation.RemoveHerbariumIDs(ids...)
	return su
}

// RemoveHerbaria removes "herbaria" edges to Herbarium entities.
func (su *SpeciesUpdate) RemoveHerbaria(h ...*Herbarium) *SpeciesUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return su.RemoveHerbariumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SpeciesUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SpeciesUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SpeciesUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SpeciesUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SpeciesUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if species.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized species.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := species.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (su *SpeciesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(species.Table, species.Columns, sqlgraph.NewFieldSpec(species.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.SetField(species.FieldCreatedBy, field.TypeString, value)
	}
	if su.mutation.CreatedByCleared() {
		_spec.ClearField(species.FieldCreatedBy, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(species.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(species.FieldUpdatedBy, field.TypeString, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(species.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := su.mutation.DisplayName(); ok {
		_spec.SetField(species.FieldDisplayName, field.TypeString, value)
	}
	if su.mutation.DisplayNameCleared() {
		_spec.ClearField(species.FieldDisplayName, field.TypeString)
	}
	if value, ok := su.mutation.Abbreviation(); ok {
		_spec.SetField(species.FieldAbbreviation, field.TypeString, value)
	}
	if su.mutation.AbbreviationCleared() {
		_spec.ClearField(species.FieldAbbreviation, field.TypeString)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(species.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(species.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.ExternalLink(); ok {
		_spec.SetField(species.FieldExternalLink, field.TypeString, value)
	}
	if su.mutation.ExternalLinkCleared() {
		_spec.ClearField(species.FieldExternalLink, field.TypeString)
	}
	if value, ok := su.mutation.PrimaryImageURL(); ok {
		_spec.SetField(species.FieldPrimaryImageURL, field.TypeString, value)
	}
	if su.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(species.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := su.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(species.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, species.FieldAdditionalImagesUrls, value)
		})
	}
	if su.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(species.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if su.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   species.HerbariaTable,
			Columns: []string{species.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedHerbariaIDs(); len(nodes) > 0 && !su.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   species.HerbariaTable,
			Columns: []string{species.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   species.HerbariaTable,
			Columns: []string{species.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{species.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SpeciesUpdateOne is the builder for updating a single Species entity.
type SpeciesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpeciesMutation
}

// SetCreatedBy sets the "created_by" field.
func (suo *SpeciesUpdateOne) SetCreatedBy(s string) *SpeciesUpdateOne {
	suo.mutation.SetCreatedBy(s)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *SpeciesUpdateOne) SetNillableCreatedBy(s *string) *SpeciesUpdateOne {
	if s != nil {
		suo.SetCreatedBy(*s)
	}
	return suo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (suo *SpeciesUpdateOne) ClearCreatedBy() *SpeciesUpdateOne {
	suo.mutation.ClearCreatedBy()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SpeciesUpdateOne) SetUpdatedAt(t time.Time) *SpeciesUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SpeciesUpdateOne) SetUpdatedBy(s string) *SpeciesUpdateOne {
	suo.mutation.SetUpdatedBy(s)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SpeciesUpdateOne) SetNillableUpdatedBy(s *string) *SpeciesUpdateOne {
	if s != nil {
		suo.SetUpdatedBy(*s)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SpeciesUpdateOne) ClearUpdatedBy() *SpeciesUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetDisplayName sets the "display_name" field.
func (suo *SpeciesUpdateOne) SetDisplayName(s string) *SpeciesUpdateOne {
	suo.mutation.SetDisplayName(s)
	return suo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (suo *SpeciesUpdateOne) SetNillableDisplayName(s *string) *SpeciesUpdateOne {
	if s != nil {
		suo.SetDisplayName(*s)
	}
	return suo
}

// ClearDisplayName clears the value of the "display_name" field.
func (suo *SpeciesUpdateOne) ClearDisplayName() *SpeciesUpdateOne {
	suo.mutation.ClearDisplayName()
	return suo
}

// SetAbbreviation sets the "abbreviation" field.
func (suo *SpeciesUpdateOne) SetAbbreviation(s string) *SpeciesUpdateOne {
	suo.mutation.SetAbbreviation(s)
	return suo
}

// SetNillableAbbreviation sets the "abbreviation" field if the given value is not nil.
func (suo *SpeciesUpdateOne) SetNillableAbbreviation(s *string) *SpeciesUpdateOne {
	if s != nil {
		suo.SetAbbreviation(*s)
	}
	return suo
}

// ClearAbbreviation clears the value of the "abbreviation" field.
func (suo *SpeciesUpdateOne) ClearAbbreviation() *SpeciesUpdateOne {
	suo.mutation.ClearAbbreviation()
	return suo
}

// SetDescription sets the "description" field.
func (suo *SpeciesUpdateOne) SetDescription(s string) *SpeciesUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SpeciesUpdateOne) SetNillableDescription(s *string) *SpeciesUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SpeciesUpdateOne) ClearDescription() *SpeciesUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetExternalLink sets the "external_link" field.
func (suo *SpeciesUpdateOne) SetExternalLink(s string) *SpeciesUpdateOne {
	suo.mutation.SetExternalLink(s)
	return suo
}

// SetNillableExternalLink sets the "external_link" field if the given value is not nil.
func (suo *SpeciesUpdateOne) SetNillableExternalLink(s *string) *SpeciesUpdateOne {
	if s != nil {
		suo.SetExternalLink(*s)
	}
	return suo
}

// ClearExternalLink clears the value of the "external_link" field.
func (suo *SpeciesUpdateOne) ClearExternalLink() *SpeciesUpdateOne {
	suo.mutation.ClearExternalLink()
	return suo
}

// SetPrimaryImageURL sets the "primary_image_url" field.
func (suo *SpeciesUpdateOne) SetPrimaryImageURL(s string) *SpeciesUpdateOne {
	suo.mutation.SetPrimaryImageURL(s)
	return suo
}

// SetNillablePrimaryImageURL sets the "primary_image_url" field if the given value is not nil.
func (suo *SpeciesUpdateOne) SetNillablePrimaryImageURL(s *string) *SpeciesUpdateOne {
	if s != nil {
		suo.SetPrimaryImageURL(*s)
	}
	return suo
}

// ClearPrimaryImageURL clears the value of the "primary_image_url" field.
func (suo *SpeciesUpdateOne) ClearPrimaryImageURL() *SpeciesUpdateOne {
	suo.mutation.ClearPrimaryImageURL()
	return suo
}

// SetAdditionalImagesUrls sets the "additional_images_urls" field.
func (suo *SpeciesUpdateOne) SetAdditionalImagesUrls(s []string) *SpeciesUpdateOne {
	suo.mutation.SetAdditionalImagesUrls(s)
	return suo
}

// AppendAdditionalImagesUrls appends s to the "additional_images_urls" field.
func (suo *SpeciesUpdateOne) AppendAdditionalImagesUrls(s []string) *SpeciesUpdateOne {
	suo.mutation.AppendAdditionalImagesUrls(s)
	return suo
}

// ClearAdditionalImagesUrls clears the value of the "additional_images_urls" field.
func (suo *SpeciesUpdateOne) ClearAdditionalImagesUrls() *SpeciesUpdateOne {
	suo.mutation.ClearAdditionalImagesUrls()
	return suo
}

// AddHerbariumIDs adds the "herbaria" edge to the Herbarium entity by IDs.
func (suo *SpeciesUpdateOne) AddHerbariumIDs(ids ...int) *SpeciesUpdateOne {
	suo.mutation.AddHerbariumIDs(ids...)
	return suo
}

// AddHerbaria adds the "herbaria" edges to the Herbarium entity.
func (suo *SpeciesUpdateOne) AddHerbaria(h ...*Herbarium) *SpeciesUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return suo.AddHerbariumIDs(ids...)
}

// Mutation returns the SpeciesMutation object of the builder.
func (suo *SpeciesUpdateOne) Mutation() *SpeciesMutation {
	return suo.mutation
}

// ClearHerbaria clears all "herbaria" edges to the Herbarium entity.
func (suo *SpeciesUpdateOne) ClearHerbaria() *SpeciesUpdateOne {
	suo.mutation.ClearHerbaria()
	return suo
}

// RemoveHerbariumIDs removes the "herbaria" edge to Herbarium entities by IDs.
func (suo *SpeciesUpdateOne) RemoveHerbariumIDs(ids ...int) *SpeciesUpdateOne {
	suo.mutation.RemoveHerbariumIDs(ids...)
	return suo
}

// RemoveHerbaria removes "herbaria" edges to Herbarium entities.
func (suo *SpeciesUpdateOne) RemoveHerbaria(h ...*Herbarium) *SpeciesUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return suo.RemoveHerbariumIDs(ids...)
}

// Where appends a list predicates to the SpeciesUpdate builder.
func (suo *SpeciesUpdateOne) Where(ps ...predicate.Species) *SpeciesUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SpeciesUpdateOne) Select(field string, fields ...string) *SpeciesUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Species entity.
func (suo *SpeciesUpdateOne) Save(ctx context.Context) (*Species, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SpeciesUpdateOne) SaveX(ctx context.Context) *Species {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SpeciesUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SpeciesUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SpeciesUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if species.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized species.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := species.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (suo *SpeciesUpdateOne) sqlSave(ctx context.Context) (_node *Species, err error) {
	_spec := sqlgraph.NewUpdateSpec(species.Table, species.Columns, sqlgraph.NewFieldSpec(species.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Species.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, species.FieldID)
		for _, f := range fields {
			if !species.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != species.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.SetField(species.FieldCreatedBy, field.TypeString, value)
	}
	if suo.mutation.CreatedByCleared() {
		_spec.ClearField(species.FieldCreatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(species.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(species.FieldUpdatedBy, field.TypeString, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(species.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.DisplayName(); ok {
		_spec.SetField(species.FieldDisplayName, field.TypeString, value)
	}
	if suo.mutation.DisplayNameCleared() {
		_spec.ClearField(species.FieldDisplayName, field.TypeString)
	}
	if value, ok := suo.mutation.Abbreviation(); ok {
		_spec.SetField(species.FieldAbbreviation, field.TypeString, value)
	}
	if suo.mutation.AbbreviationCleared() {
		_spec.ClearField(species.FieldAbbreviation, field.TypeString)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(species.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(species.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.ExternalLink(); ok {
		_spec.SetField(species.FieldExternalLink, field.TypeString, value)
	}
	if suo.mutation.ExternalLinkCleared() {
		_spec.ClearField(species.FieldExternalLink, field.TypeString)
	}
	if value, ok := suo.mutation.PrimaryImageURL(); ok {
		_spec.SetField(species.FieldPrimaryImageURL, field.TypeString, value)
	}
	if suo.mutation.PrimaryImageURLCleared() {
		_spec.ClearField(species.FieldPrimaryImageURL, field.TypeString)
	}
	if value, ok := suo.mutation.AdditionalImagesUrls(); ok {
		_spec.SetField(species.FieldAdditionalImagesUrls, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedAdditionalImagesUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, species.FieldAdditionalImagesUrls, value)
		})
	}
	if suo.mutation.AdditionalImagesUrlsCleared() {
		_spec.ClearField(species.FieldAdditionalImagesUrls, field.TypeJSON)
	}
	if suo.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   species.HerbariaTable,
			Columns: []string{species.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedHerbariaIDs(); len(nodes) > 0 && !suo.mutation.HerbariaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   species.HerbariaTable,
			Columns: []string{species.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.HerbariaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   species.HerbariaTable,
			Columns: []string{species.HerbariaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(herbarium.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Species{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{species.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
